{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FaBo Swift Docs FaBo Swift Docs\u306b\u3064\u3044\u3066 FaBo Swift Docs\u306f\u3001Swift\u9006\u5f15\u304d\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u3059\u3002 \u4fee\u6b63\u4f9d\u983c\u7b49 Github\u306eRepo\u306b Issues \u3092\u3042\u3052\u308b\u3002 \u305d\u306e\u4ed6\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 Android Things Docs DonkeyCar Docs Denbun Docs Circuit Docs Swift Docs Keras Docs NRF Docs DeviceWebAPI Docs","title":"FaBo Swift Docs"},{"location":"#fabo-swift-docs","text":"","title":"FaBo Swift Docs"},{"location":"#fabo-swift-docs_1","text":"FaBo Swift Docs\u306f\u3001Swift\u9006\u5f15\u304d\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u3059\u3002","title":"FaBo Swift Docs\u306b\u3064\u3044\u3066"},{"location":"#_1","text":"Github\u306eRepo\u306b Issues \u3092\u3042\u3052\u308b\u3002","title":"\u4fee\u6b63\u4f9d\u983c\u7b49"},{"location":"#_2","text":"Android Things Docs DonkeyCar Docs Denbun Docs Circuit Docs Swift Docs Keras Docs NRF Docs DeviceWebAPI Docs","title":"\u305d\u306e\u4ed6\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8"},{"location":"1.uikit/","text":"","title":"Index"},{"location":"1.uikit/001_uilabel/","text":"UILabel\u3067\u6587\u5b57\u3092\u8868\u793a Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 // // ViewController.swift // uikit001 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // \u30dc\u30bf\u30f3\u306e\u30b5\u30a4\u30ba\u3092\u5b9a\u7fa9. let bWidth : CGFloat = 200 let bHeight : CGFloat = 50 // \u914d\u7f6e\u3059\u308b\u5ea7\u6a19\u3092\u5b9a\u7fa9(\u753b\u9762\u306e\u4e2d\u5fc3). let posX : CGFloat = self . view . bounds . width / 2 - bWidth / 2 let posY : CGFloat = self . view . bounds . height / 2 - bHeight / 2 // Label\u3092\u4f5c\u6210. let label : UILabel = UILabel ( frame : CGRect ( x : posX , y : posY , width : bWidth , height : bHeight )) // UILabel\u306e\u80cc\u666f\u3092\u30aa\u30ec\u30f3\u30b8\u8272\u306b. label . backgroundColor = UIColor . orange // UILabel\u306e\u67a0\u3092\u4e38\u304f\u3059\u308b. label . layer . masksToBounds = true // \u4e38\u304f\u3059\u308b\u30b3\u30fc\u30ca\u30fc\u306e\u534a\u5f84. label . layer . cornerRadius = 20.0 // \u6587\u5b57\u306e\u8272\u3092\u767d\u306b\u5b9a\u7fa9. label . textColor = UIColor . white // UILabel\u306b\u6587\u5b57\u3092\u4ee3\u5165. label . text = \"Hello Swift!!\" // \u6587\u5b57\u306e\u5f71\u3092\u30b0\u30ec\u30fc\u306b\u5b9a\u7fa9. label . shadowColor = UIColor . gray // Text\u3092\u4e2d\u592e\u5bc4\u305b\u306b\u3059\u308b. label . textAlignment = NSTextAlignment . center // View\u306e\u80cc\u666f\u3092\u9752\u306b\u3059\u308b. self . view . backgroundColor = UIColor . cyan // View\u306bLabel\u3092\u8ffd\u52a0. self . view . addSubview ( label ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 // // ViewController.swift // uikit001 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // \u30dc\u30bf\u30f3\u306e\u30b5\u30a4\u30ba\u3092\u5b9a\u7fa9. let bWidth : CGFloat = 200 let bHeight : CGFloat = 50 // \u914d\u7f6e\u3059\u308b\u5ea7\u6a19\u3092\u5b9a\u7fa9(\u753b\u9762\u306e\u4e2d\u5fc3). let posX : CGFloat = self . view . bounds . width / 2 - bWidth / 2 let posY : CGFloat = self . view . bounds . height / 2 - bHeight / 2 // Label\u3092\u4f5c\u6210. let label : UILabel = UILabel ( frame : CGRect ( x : posX , y : posY , width : bWidth , height : bHeight )) // UILabel\u306e\u80cc\u666f\u3092\u30aa\u30ec\u30f3\u30b8\u8272\u306b. label . backgroundColor = UIColor . orangeColor () // UILabel\u306e\u67a0\u3092\u4e38\u304f\u3059\u308b. label . layer . masksToBounds = true // \u4e38\u304f\u3059\u308b\u30b3\u30fc\u30ca\u30fc\u306e\u534a\u5f84. label . layer . cornerRadius = 20.0 // \u6587\u5b57\u306e\u8272\u3092\u767d\u306b\u5b9a\u7fa9. label . textColor = UIColor . whiteColor () // UILabel\u306b\u6587\u5b57\u3092\u4ee3\u5165. label . text = \"Hello Swift!!\" // \u6587\u5b57\u306e\u5f71\u3092\u30b0\u30ec\u30fc\u306b\u5b9a\u7fa9. label . shadowColor = UIColor . grayColor () // Text\u3092\u4e2d\u592e\u5bc4\u305b\u306b\u3059\u308b. label . textAlignment = NSTextAlignment . Center // View\u306e\u80cc\u666f\u3092\u9752\u306b\u3059\u308b. self . view . backgroundColor = UIColor . cyanColor () // View\u306bLabel\u3092\u8ffd\u52a0. self . view . addSubview ( label ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } } 2.x\u30683.x\u306e\u5dee\u5206 UIColor.grayColor()\u304cUIColor.gray\u306b\u5909\u66f4 NSTextAlignment.Center\u304c\u3001NSTextAlignment.center\u306b\u5909\u66f4 Reference UIColor https://developer.apple.com/reference/uikit/uicolor UILabel https://developer.apple.com/reference/uikit/uilabel","title":"UILabel\u3067\u6587\u5b57\u3092\u8868\u793a"},{"location":"1.uikit/001_uilabel/#uilabel","text":"Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 // // ViewController.swift // uikit001 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // \u30dc\u30bf\u30f3\u306e\u30b5\u30a4\u30ba\u3092\u5b9a\u7fa9. let bWidth : CGFloat = 200 let bHeight : CGFloat = 50 // \u914d\u7f6e\u3059\u308b\u5ea7\u6a19\u3092\u5b9a\u7fa9(\u753b\u9762\u306e\u4e2d\u5fc3). let posX : CGFloat = self . view . bounds . width / 2 - bWidth / 2 let posY : CGFloat = self . view . bounds . height / 2 - bHeight / 2 // Label\u3092\u4f5c\u6210. let label : UILabel = UILabel ( frame : CGRect ( x : posX , y : posY , width : bWidth , height : bHeight )) // UILabel\u306e\u80cc\u666f\u3092\u30aa\u30ec\u30f3\u30b8\u8272\u306b. label . backgroundColor = UIColor . orange // UILabel\u306e\u67a0\u3092\u4e38\u304f\u3059\u308b. label . layer . masksToBounds = true // \u4e38\u304f\u3059\u308b\u30b3\u30fc\u30ca\u30fc\u306e\u534a\u5f84. label . layer . cornerRadius = 20.0 // \u6587\u5b57\u306e\u8272\u3092\u767d\u306b\u5b9a\u7fa9. label . textColor = UIColor . white // UILabel\u306b\u6587\u5b57\u3092\u4ee3\u5165. label . text = \"Hello Swift!!\" // \u6587\u5b57\u306e\u5f71\u3092\u30b0\u30ec\u30fc\u306b\u5b9a\u7fa9. label . shadowColor = UIColor . gray // Text\u3092\u4e2d\u592e\u5bc4\u305b\u306b\u3059\u308b. label . textAlignment = NSTextAlignment . center // View\u306e\u80cc\u666f\u3092\u9752\u306b\u3059\u308b. self . view . backgroundColor = UIColor . cyan // View\u306bLabel\u3092\u8ffd\u52a0. self . view . addSubview ( label ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 // // ViewController.swift // uikit001 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // \u30dc\u30bf\u30f3\u306e\u30b5\u30a4\u30ba\u3092\u5b9a\u7fa9. let bWidth : CGFloat = 200 let bHeight : CGFloat = 50 // \u914d\u7f6e\u3059\u308b\u5ea7\u6a19\u3092\u5b9a\u7fa9(\u753b\u9762\u306e\u4e2d\u5fc3). let posX : CGFloat = self . view . bounds . width / 2 - bWidth / 2 let posY : CGFloat = self . view . bounds . height / 2 - bHeight / 2 // Label\u3092\u4f5c\u6210. let label : UILabel = UILabel ( frame : CGRect ( x : posX , y : posY , width : bWidth , height : bHeight )) // UILabel\u306e\u80cc\u666f\u3092\u30aa\u30ec\u30f3\u30b8\u8272\u306b. label . backgroundColor = UIColor . orangeColor () // UILabel\u306e\u67a0\u3092\u4e38\u304f\u3059\u308b. label . layer . masksToBounds = true // \u4e38\u304f\u3059\u308b\u30b3\u30fc\u30ca\u30fc\u306e\u534a\u5f84. label . layer . cornerRadius = 20.0 // \u6587\u5b57\u306e\u8272\u3092\u767d\u306b\u5b9a\u7fa9. label . textColor = UIColor . whiteColor () // UILabel\u306b\u6587\u5b57\u3092\u4ee3\u5165. label . text = \"Hello Swift!!\" // \u6587\u5b57\u306e\u5f71\u3092\u30b0\u30ec\u30fc\u306b\u5b9a\u7fa9. label . shadowColor = UIColor . grayColor () // Text\u3092\u4e2d\u592e\u5bc4\u305b\u306b\u3059\u308b. label . textAlignment = NSTextAlignment . Center // View\u306e\u80cc\u666f\u3092\u9752\u306b\u3059\u308b. self . view . backgroundColor = UIColor . cyanColor () // View\u306bLabel\u3092\u8ffd\u52a0. self . view . addSubview ( label ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } }","title":"UILabel\u3067\u6587\u5b57\u3092\u8868\u793a"},{"location":"1.uikit/001_uilabel/#2x3x","text":"UIColor.grayColor()\u304cUIColor.gray\u306b\u5909\u66f4 NSTextAlignment.Center\u304c\u3001NSTextAlignment.center\u306b\u5909\u66f4","title":"2.x\u30683.x\u306e\u5dee\u5206"},{"location":"1.uikit/001_uilabel/#reference","text":"UIColor https://developer.apple.com/reference/uikit/uicolor UILabel https://developer.apple.com/reference/uikit/uilabel","title":"Reference"},{"location":"1.uikit/002_uibutton/","text":"UIButton\u3067\u30dc\u30bf\u30f3\u3092\u8868\u793a Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 // // ViewController.swift // UIKit002 // // Copyright \u00a9 2018\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myButton : UIButton ! override func viewDidLoad () { super . viewDidLoad () // Button\u3092\u751f\u6210\u3059\u308b. myButton = UIButton () // \u30dc\u30bf\u30f3\u306e\u30b5\u30a4\u30ba. let bWidth : CGFloat = 200 let bHeight : CGFloat = 50 // \u30dc\u30bf\u30f3\u306eX,Y\u5ea7\u6a19. let posX : CGFloat = self . view . frame . width / 2 - bWidth / 2 let posY : CGFloat = self . view . frame . height / 2 - bHeight / 2 // \u30dc\u30bf\u30f3\u306e\u8a2d\u7f6e\u5ea7\u6a19\u3068\u30b5\u30a4\u30ba\u3092\u8a2d\u5b9a\u3059\u308b. myButton . frame = CGRect ( x : posX , y : posY , width : bWidth , height : bHeight ) // \u30dc\u30bf\u30f3\u306e\u80cc\u666f\u8272\u3092\u8a2d\u5b9a. myButton . backgroundColor = UIColor . red // \u30dc\u30bf\u30f3\u306e\u67a0\u3092\u4e38\u304f\u3059\u308b. myButton . layer . masksToBounds = true // \u30b3\u30fc\u30ca\u30fc\u306e\u534a\u5f84\u3092\u8a2d\u5b9a\u3059\u308b. myButton . layer . cornerRadius = 20.0 // \u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b(\u901a\u5e38\u6642). myButton . setTitle ( \"\u30dc\u30bf\u30f3(\u901a\u5e38)\" , for : . normal ) myButton . setTitleColor ( UIColor . white , for : . normal ) // \u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b(\u30dc\u30bf\u30f3\u304c\u30cf\u30a4\u30e9\u30a4\u30c8\u3055\u308c\u305f\u6642). myButton . setTitle ( \"\u30dc\u30bf\u30f3(\u62bc\u3055\u308c\u305f\u6642)\" , for : . highlighted ) myButton . setTitleColor ( UIColor . black , for : . highlighted ) // \u30dc\u30bf\u30f3\u306b\u30bf\u30b0\u3092\u3064\u3051\u308b. myButton . tag = 1 // \u30a4\u30d9\u30f3\u30c8\u3092\u8ffd\u52a0\u3059\u308b myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchUpInside ) // \u30dc\u30bf\u30f3\u3092View\u306b\u8ffd\u52a0. self . view . addSubview ( myButton ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } /* \u30dc\u30bf\u30f3\u306e\u30a4\u30d9\u30f3\u30c8. */ @objc internal func onClickMyButton ( sender : UIButton ) { print ( \"onClickMyButton:\" ); print ( \"sender.currentTitle: \\( sender . currentTitle ) \" ) print ( \"sender.tag: \\( sender . tag ) \" ) } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 // // ViewController.swift // UIKit002 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myButton : UIButton ! override func viewDidLoad () { super . viewDidLoad () // Button\u3092\u751f\u6210\u3059\u308b. myButton = UIButton () // \u30dc\u30bf\u30f3\u306e\u30b5\u30a4\u30ba. let bWidth : CGFloat = 200 let bHeight : CGFloat = 50 // \u30dc\u30bf\u30f3\u306eX,Y\u5ea7\u6a19. let posX : CGFloat = self . view . frame . width / 2 - bWidth / 2 let posY : CGFloat = self . view . frame . height / 2 - bHeight / 2 // \u30dc\u30bf\u30f3\u306e\u8a2d\u7f6e\u5ea7\u6a19\u3068\u30b5\u30a4\u30ba\u3092\u8a2d\u5b9a\u3059\u308b. myButton . frame = CGRect ( x : posX , y : posY , width : bWidth , height : bHeight ) // \u30dc\u30bf\u30f3\u306e\u80cc\u666f\u8272\u3092\u8a2d\u5b9a. myButton . backgroundColor = UIColor . red // \u30dc\u30bf\u30f3\u306e\u67a0\u3092\u4e38\u304f\u3059\u308b. myButton . layer . masksToBounds = true // \u30b3\u30fc\u30ca\u30fc\u306e\u534a\u5f84\u3092\u8a2d\u5b9a\u3059\u308b. myButton . layer . cornerRadius = 20.0 // \u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b(\u901a\u5e38\u6642). myButton . setTitle ( \"\u30dc\u30bf\u30f3(\u901a\u5e38)\" , for : . normal ) myButton . setTitleColor ( UIColor . white , for : . normal ) // \u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b(\u30dc\u30bf\u30f3\u304c\u30cf\u30a4\u30e9\u30a4\u30c8\u3055\u308c\u305f\u6642). myButton . setTitle ( \"\u30dc\u30bf\u30f3(\u62bc\u3055\u308c\u305f\u6642)\" , for : . highlighted ) myButton . setTitleColor ( UIColor . black , for : . highlighted ) // \u30dc\u30bf\u30f3\u306b\u30bf\u30b0\u3092\u3064\u3051\u308b. myButton . tag = 1 // \u30a4\u30d9\u30f3\u30c8\u3092\u8ffd\u52a0\u3059\u308b myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchUpInside ) // \u30dc\u30bf\u30f3\u3092View\u306b\u8ffd\u52a0. self . view . addSubview ( myButton ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } /* \u30dc\u30bf\u30f3\u306e\u30a4\u30d9\u30f3\u30c8. */ internal func onClickMyButton ( sender : UIButton ) { print ( \"onClickMyButton:\" ); print ( \"sender.currentTitle: \\( sender . currentTitle ) \" ) print ( \"sender.tag: \\( sender . tag ) \" ) } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 // // ViewController.swift // UIKit002 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myButton : UIButton ! override func viewDidLoad () { super . viewDidLoad () // Button\u3092\u751f\u6210\u3059\u308b. myButton = UIButton () // \u30dc\u30bf\u30f3\u306e\u30b5\u30a4\u30ba. let bWidth : CGFloat = 200 let bHeight : CGFloat = 50 // \u30dc\u30bf\u30f3\u306eX,Y\u5ea7\u6a19. let posX : CGFloat = self . view . frame . width / 2 - bWidth / 2 let posY : CGFloat = self . view . frame . height / 2 - bHeight / 2 // \u30dc\u30bf\u30f3\u306e\u8a2d\u7f6e\u5ea7\u6a19\u3068\u30b5\u30a4\u30ba\u3092\u8a2d\u5b9a\u3059\u308b. myButton . frame = CGRectMake ( posX , posY , bWidth , bHeight ) // \u30dc\u30bf\u30f3\u306e\u80cc\u666f\u8272\u3092\u8a2d\u5b9a. myButton . backgroundColor = UIColor . redColor () // \u30dc\u30bf\u30f3\u306e\u67a0\u3092\u4e38\u304f\u3059\u308b. myButton . layer . masksToBounds = true // \u30b3\u30fc\u30ca\u30fc\u306e\u534a\u5f84\u3092\u8a2d\u5b9a\u3059\u308b. myButton . layer . cornerRadius = 20.0 // \u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b(\u901a\u5e38\u6642). myButton . setTitle ( \"\u30dc\u30bf\u30f3(\u901a\u5e38)\" , forState : . Normal ) myButton . setTitleColor ( UIColor . whiteColor (), forState : . Normal ) // \u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b(\u30dc\u30bf\u30f3\u304c\u30cf\u30a4\u30e9\u30a4\u30c8\u3055\u308c\u305f\u6642). myButton . setTitle ( \"\u30dc\u30bf\u30f3(\u62bc\u3055\u308c\u305f\u6642)\" , forState : . Highlighted ) myButton . setTitleColor ( UIColor . blackColor (), forState : . Highlighted ) // \u30dc\u30bf\u30f3\u306b\u30bf\u30b0\u3092\u3064\u3051\u308b. myButton . tag = 1 // \u30a4\u30d9\u30f3\u30c8\u3092\u8ffd\u52a0\u3059\u308b myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : . TouchUpInside ) // \u30dc\u30bf\u30f3\u3092View\u306b\u8ffd\u52a0. self . view . addSubview ( myButton ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } /* \u30dc\u30bf\u30f3\u306e\u30a4\u30d9\u30f3\u30c8. */ internal func onClickMyButton ( sender : UIButton ) { print ( \"onClickMyButton:\" ); print ( \"sender.currentTitle: \\( sender . currentTitle ) \" ) print ( \"sender.tag: \\( sender . tag ) \" ) } } 3.0\u30684.0\u306e\u5dee\u5206 internal func onClickMyButton(sender: UIButton) \u306b @objc \u3092\u8ffd\u52a0 2.3\u30683.0\u306e\u5dee\u5206 UIColor.grayColor()\u304cUIColor.gray\u306b\u5909\u66f4 CGRectMake()\u304cCGReat()\u306b\u5909\u66f4 UIButton.setTitle()\u306eforState: .Normal\u304c for: .normal\u306b\u5909\u66f4 UIButton.addTarget()\u306e#selector(ViewController.onClickMyButton(_:))\u304c\u3001#selector(ViewController.onClickMyButton(sender:)\u306b\u5909\u66f4 UIButton.addTarget()\u306eforControlEvents: .TouchUpInside\u304cfor: .touchUpInside\u306b\u5909\u66f4 Reference UIColor https://developer.apple.com/reference/uikit/uicolor UIButton https://developer.apple.com/reference/uikit/uibutton","title":"UIButton\u3067\u30dc\u30bf\u30f3\u3092\u8868\u793a"},{"location":"1.uikit/002_uibutton/#uibutton","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 // // ViewController.swift // UIKit002 // // Copyright \u00a9 2018\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myButton : UIButton ! override func viewDidLoad () { super . viewDidLoad () // Button\u3092\u751f\u6210\u3059\u308b. myButton = UIButton () // \u30dc\u30bf\u30f3\u306e\u30b5\u30a4\u30ba. let bWidth : CGFloat = 200 let bHeight : CGFloat = 50 // \u30dc\u30bf\u30f3\u306eX,Y\u5ea7\u6a19. let posX : CGFloat = self . view . frame . width / 2 - bWidth / 2 let posY : CGFloat = self . view . frame . height / 2 - bHeight / 2 // \u30dc\u30bf\u30f3\u306e\u8a2d\u7f6e\u5ea7\u6a19\u3068\u30b5\u30a4\u30ba\u3092\u8a2d\u5b9a\u3059\u308b. myButton . frame = CGRect ( x : posX , y : posY , width : bWidth , height : bHeight ) // \u30dc\u30bf\u30f3\u306e\u80cc\u666f\u8272\u3092\u8a2d\u5b9a. myButton . backgroundColor = UIColor . red // \u30dc\u30bf\u30f3\u306e\u67a0\u3092\u4e38\u304f\u3059\u308b. myButton . layer . masksToBounds = true // \u30b3\u30fc\u30ca\u30fc\u306e\u534a\u5f84\u3092\u8a2d\u5b9a\u3059\u308b. myButton . layer . cornerRadius = 20.0 // \u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b(\u901a\u5e38\u6642). myButton . setTitle ( \"\u30dc\u30bf\u30f3(\u901a\u5e38)\" , for : . normal ) myButton . setTitleColor ( UIColor . white , for : . normal ) // \u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b(\u30dc\u30bf\u30f3\u304c\u30cf\u30a4\u30e9\u30a4\u30c8\u3055\u308c\u305f\u6642). myButton . setTitle ( \"\u30dc\u30bf\u30f3(\u62bc\u3055\u308c\u305f\u6642)\" , for : . highlighted ) myButton . setTitleColor ( UIColor . black , for : . highlighted ) // \u30dc\u30bf\u30f3\u306b\u30bf\u30b0\u3092\u3064\u3051\u308b. myButton . tag = 1 // \u30a4\u30d9\u30f3\u30c8\u3092\u8ffd\u52a0\u3059\u308b myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchUpInside ) // \u30dc\u30bf\u30f3\u3092View\u306b\u8ffd\u52a0. self . view . addSubview ( myButton ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } /* \u30dc\u30bf\u30f3\u306e\u30a4\u30d9\u30f3\u30c8. */ @objc internal func onClickMyButton ( sender : UIButton ) { print ( \"onClickMyButton:\" ); print ( \"sender.currentTitle: \\( sender . currentTitle ) \" ) print ( \"sender.tag: \\( sender . tag ) \" ) } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 // // ViewController.swift // UIKit002 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myButton : UIButton ! override func viewDidLoad () { super . viewDidLoad () // Button\u3092\u751f\u6210\u3059\u308b. myButton = UIButton () // \u30dc\u30bf\u30f3\u306e\u30b5\u30a4\u30ba. let bWidth : CGFloat = 200 let bHeight : CGFloat = 50 // \u30dc\u30bf\u30f3\u306eX,Y\u5ea7\u6a19. let posX : CGFloat = self . view . frame . width / 2 - bWidth / 2 let posY : CGFloat = self . view . frame . height / 2 - bHeight / 2 // \u30dc\u30bf\u30f3\u306e\u8a2d\u7f6e\u5ea7\u6a19\u3068\u30b5\u30a4\u30ba\u3092\u8a2d\u5b9a\u3059\u308b. myButton . frame = CGRect ( x : posX , y : posY , width : bWidth , height : bHeight ) // \u30dc\u30bf\u30f3\u306e\u80cc\u666f\u8272\u3092\u8a2d\u5b9a. myButton . backgroundColor = UIColor . red // \u30dc\u30bf\u30f3\u306e\u67a0\u3092\u4e38\u304f\u3059\u308b. myButton . layer . masksToBounds = true // \u30b3\u30fc\u30ca\u30fc\u306e\u534a\u5f84\u3092\u8a2d\u5b9a\u3059\u308b. myButton . layer . cornerRadius = 20.0 // \u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b(\u901a\u5e38\u6642). myButton . setTitle ( \"\u30dc\u30bf\u30f3(\u901a\u5e38)\" , for : . normal ) myButton . setTitleColor ( UIColor . white , for : . normal ) // \u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b(\u30dc\u30bf\u30f3\u304c\u30cf\u30a4\u30e9\u30a4\u30c8\u3055\u308c\u305f\u6642). myButton . setTitle ( \"\u30dc\u30bf\u30f3(\u62bc\u3055\u308c\u305f\u6642)\" , for : . highlighted ) myButton . setTitleColor ( UIColor . black , for : . highlighted ) // \u30dc\u30bf\u30f3\u306b\u30bf\u30b0\u3092\u3064\u3051\u308b. myButton . tag = 1 // \u30a4\u30d9\u30f3\u30c8\u3092\u8ffd\u52a0\u3059\u308b myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchUpInside ) // \u30dc\u30bf\u30f3\u3092View\u306b\u8ffd\u52a0. self . view . addSubview ( myButton ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } /* \u30dc\u30bf\u30f3\u306e\u30a4\u30d9\u30f3\u30c8. */ internal func onClickMyButton ( sender : UIButton ) { print ( \"onClickMyButton:\" ); print ( \"sender.currentTitle: \\( sender . currentTitle ) \" ) print ( \"sender.tag: \\( sender . tag ) \" ) } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 // // ViewController.swift // UIKit002 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myButton : UIButton ! override func viewDidLoad () { super . viewDidLoad () // Button\u3092\u751f\u6210\u3059\u308b. myButton = UIButton () // \u30dc\u30bf\u30f3\u306e\u30b5\u30a4\u30ba. let bWidth : CGFloat = 200 let bHeight : CGFloat = 50 // \u30dc\u30bf\u30f3\u306eX,Y\u5ea7\u6a19. let posX : CGFloat = self . view . frame . width / 2 - bWidth / 2 let posY : CGFloat = self . view . frame . height / 2 - bHeight / 2 // \u30dc\u30bf\u30f3\u306e\u8a2d\u7f6e\u5ea7\u6a19\u3068\u30b5\u30a4\u30ba\u3092\u8a2d\u5b9a\u3059\u308b. myButton . frame = CGRectMake ( posX , posY , bWidth , bHeight ) // \u30dc\u30bf\u30f3\u306e\u80cc\u666f\u8272\u3092\u8a2d\u5b9a. myButton . backgroundColor = UIColor . redColor () // \u30dc\u30bf\u30f3\u306e\u67a0\u3092\u4e38\u304f\u3059\u308b. myButton . layer . masksToBounds = true // \u30b3\u30fc\u30ca\u30fc\u306e\u534a\u5f84\u3092\u8a2d\u5b9a\u3059\u308b. myButton . layer . cornerRadius = 20.0 // \u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b(\u901a\u5e38\u6642). myButton . setTitle ( \"\u30dc\u30bf\u30f3(\u901a\u5e38)\" , forState : . Normal ) myButton . setTitleColor ( UIColor . whiteColor (), forState : . Normal ) // \u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b(\u30dc\u30bf\u30f3\u304c\u30cf\u30a4\u30e9\u30a4\u30c8\u3055\u308c\u305f\u6642). myButton . setTitle ( \"\u30dc\u30bf\u30f3(\u62bc\u3055\u308c\u305f\u6642)\" , forState : . Highlighted ) myButton . setTitleColor ( UIColor . blackColor (), forState : . Highlighted ) // \u30dc\u30bf\u30f3\u306b\u30bf\u30b0\u3092\u3064\u3051\u308b. myButton . tag = 1 // \u30a4\u30d9\u30f3\u30c8\u3092\u8ffd\u52a0\u3059\u308b myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : . TouchUpInside ) // \u30dc\u30bf\u30f3\u3092View\u306b\u8ffd\u52a0. self . view . addSubview ( myButton ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } /* \u30dc\u30bf\u30f3\u306e\u30a4\u30d9\u30f3\u30c8. */ internal func onClickMyButton ( sender : UIButton ) { print ( \"onClickMyButton:\" ); print ( \"sender.currentTitle: \\( sender . currentTitle ) \" ) print ( \"sender.tag: \\( sender . tag ) \" ) } }","title":"UIButton\u3067\u30dc\u30bf\u30f3\u3092\u8868\u793a"},{"location":"1.uikit/002_uibutton/#3040","text":"internal func onClickMyButton(sender: UIButton) \u306b @objc \u3092\u8ffd\u52a0","title":"3.0\u30684.0\u306e\u5dee\u5206"},{"location":"1.uikit/002_uibutton/#2330","text":"UIColor.grayColor()\u304cUIColor.gray\u306b\u5909\u66f4 CGRectMake()\u304cCGReat()\u306b\u5909\u66f4 UIButton.setTitle()\u306eforState: .Normal\u304c for: .normal\u306b\u5909\u66f4 UIButton.addTarget()\u306e#selector(ViewController.onClickMyButton(_:))\u304c\u3001#selector(ViewController.onClickMyButton(sender:)\u306b\u5909\u66f4 UIButton.addTarget()\u306eforControlEvents: .TouchUpInside\u304cfor: .touchUpInside\u306b\u5909\u66f4","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/002_uibutton/#reference","text":"UIColor https://developer.apple.com/reference/uikit/uicolor UIButton https://developer.apple.com/reference/uikit/uibutton","title":"Reference"},{"location":"1.uikit/003_uibutton/","text":"UIButton\u3067\u3044\u308d\u3044\u308d\u306a\u30dc\u30bf\u30f3\u3092\u8868\u793a Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 // // ViewController.swift // UIKit003 // // Copyright \u00a9 2018\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myInfoDarkButton : UIButton ! private var myInfoLightButton : UIButton ! private var myAddButton : UIButton ! private var myDetailButton : UIButton ! private var mySystemButton : UIButton ! override func viewDidLoad () { super . viewDidLoad () // \u30dc\u30bf\u30f3\u3092\u751f\u6210. myInfoDarkButton = UIButton ( type : . infoDark ) myInfoLightButton = UIButton ( type : . infoLight ) myAddButton = UIButton ( type : . contactAdd ) myDetailButton = UIButton ( type : . detailDisclosure ) mySystemButton = UIButton ( type : . system ) // \u30dc\u30bf\u30f3\u306e\u4f4d\u7f6e\u3092\u6307\u5b9a\u3059\u308b let posX : CGFloat = self . view . frame . width / 2 myInfoDarkButton . layer . position = CGPoint ( x : posX , y : 50 ) myInfoLightButton . layer . position = CGPoint ( x : posX , y : 100 ) myAddButton . layer . position = CGPoint ( x : posX , y : 150 ) myDetailButton . layer . position = CGPoint ( x : posX , y : 200 ) // System\u30dc\u30bf\u30f3\u306e\u30b5\u30a4\u30ba. let sWidth : CGFloat = 200 let sHeight : CGFloat = 50 // System\u30dc\u30bf\u30f3\u306e\u914d\u7f6e\u3059\u308bx,y\u5ea7\u6a19 let sposX : CGFloat = self . view . frame . width / 2 - sWidth / 2 let sposY : CGFloat = 250 // System\u30dc\u30bf\u30f3\u306b\u914d\u7f6e\u3059\u308bx,y\u5ea7\u6a19\u3068\u30b5\u30a4\u30ba\u3092\u8a2d\u5b9a. mySystemButton . frame = CGRect ( x : sposX , y : sposY , width : sWidth , height : sHeight ) // System\u30dc\u30bf\u30f3\u306b\u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b. mySystemButton . setTitle ( \"MySystemButton\" , for : . normal ) // \u30bf\u30b0\u3092\u8a2d\u5b9a\u3059\u308b. myInfoDarkButton . tag = 1 myInfoLightButton . tag = 2 myAddButton . tag = 3 myDetailButton . tag = 4 mySystemButton . tag = 5 // \u30a4\u30d9\u30f3\u30c8\u3092\u8ffd\u52a0\u3059\u308b myInfoDarkButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchDown ) myInfoLightButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchDown ) myAddButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchDown ) myDetailButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchDown ) mySystemButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchDown ) // \u30dc\u30bf\u30f3\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myInfoDarkButton ) self . view . addSubview ( myInfoLightButton ) self . view . addSubview ( myAddButton ) self . view . addSubview ( myDetailButton ) self . view . addSubview ( mySystemButton ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8 */ @objc internal func onClickMyButton ( sender : UIButton ) { print ( \"onClickMyButton:\" ) print ( \"sender.currentTitile: \\( sender . currentTitle ) \" ) print ( \"sender.tag \\( sender . tag ) \" ) } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 // // ViewController.swift // UIKit003 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myInfoDarkButton : UIButton ! private var myInfoLightButton : UIButton ! private var myAddButton : UIButton ! private var myDetailButton : UIButton ! private var mySystemButton : UIButton ! override func viewDidLoad () { super . viewDidLoad () // \u30dc\u30bf\u30f3\u3092\u751f\u6210. myInfoDarkButton = UIButton ( type : . infoDark ) myInfoLightButton = UIButton ( type : . infoLight ) myAddButton = UIButton ( type : . contactAdd ) myDetailButton = UIButton ( type : . detailDisclosure ) mySystemButton = UIButton ( type : . system ) // \u30dc\u30bf\u30f3\u306e\u4f4d\u7f6e\u3092\u6307\u5b9a\u3059\u308b let posX : CGFloat = self . view . frame . width / 2 myInfoDarkButton . layer . position = CGPoint ( x : posX , y : 50 ) myInfoLightButton . layer . position = CGPoint ( x : posX , y : 100 ) myAddButton . layer . position = CGPoint ( x : posX , y : 150 ) myDetailButton . layer . position = CGPoint ( x : posX , y : 200 ) // System\u30dc\u30bf\u30f3\u306e\u30b5\u30a4\u30ba. let sWidth : CGFloat = 200 let sHeight : CGFloat = 50 // System\u30dc\u30bf\u30f3\u306e\u914d\u7f6e\u3059\u308bx,y\u5ea7\u6a19 let sposX : CGFloat = self . view . frame . width / 2 - sWidth / 2 let sposY : CGFloat = 250 // System\u30dc\u30bf\u30f3\u306b\u914d\u7f6e\u3059\u308bx,y\u5ea7\u6a19\u3068\u30b5\u30a4\u30ba\u3092\u8a2d\u5b9a. mySystemButton . frame = CGRect ( x : sposX , y : sposY , width : sWidth , height : sHeight ) // System\u30dc\u30bf\u30f3\u306b\u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b. mySystemButton . setTitle ( \"MySystemButton\" , for : . normal ) // \u30bf\u30b0\u3092\u8a2d\u5b9a\u3059\u308b. myInfoDarkButton . tag = 1 myInfoLightButton . tag = 2 myAddButton . tag = 3 myDetailButton . tag = 4 mySystemButton . tag = 5 // \u30a4\u30d9\u30f3\u30c8\u3092\u8ffd\u52a0\u3059\u308b myInfoDarkButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchDown ) myInfoLightButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchDown ) myAddButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchDown ) myDetailButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchDown ) mySystemButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchDown ) // \u30dc\u30bf\u30f3\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myInfoDarkButton ) self . view . addSubview ( myInfoLightButton ) self . view . addSubview ( myAddButton ) self . view . addSubview ( myDetailButton ) self . view . addSubview ( mySystemButton ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8 */ internal func onClickMyButton ( sender : UIButton ) { print ( \"onClickMyButton:\" ) print ( \"sender.currentTitile: \\( sender . currentTitle ) \" ) print ( \"sender.tag \\( sender . tag ) \" ) } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 // // ViewController.swift // UIKit003 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myInfoDarkButton : UIButton ! private var myInfoLightButton : UIButton ! private var myAddButton : UIButton ! private var myDetailButton : UIButton ! private var mySystemButton : UIButton ! override func viewDidLoad () { super . viewDidLoad () // \u30dc\u30bf\u30f3\u3092\u751f\u6210. myInfoDarkButton = UIButton ( type : . InfoDark ) myInfoLightButton = UIButton ( type : . InfoLight ) myAddButton = UIButton ( type : . ContactAdd ) myDetailButton = UIButton ( type : . DetailDisclosure ) mySystemButton = UIButton ( type : . System ) // \u30dc\u30bf\u30f3\u306e\u4f4d\u7f6e\u3092\u6307\u5b9a\u3059\u308b let posX : CGFloat = self . view . frame . width / 2 myInfoDarkButton . layer . position = CGPoint ( x : posX , y : 50 ) myInfoLightButton . layer . position = CGPoint ( x : posX , y : 100 ) myAddButton . layer . position = CGPoint ( x : posX , y : 150 ) myDetailButton . layer . position = CGPoint ( x : posX , y : 200 ) // System\u30dc\u30bf\u30f3\u306e\u30b5\u30a4\u30ba. let sWidth : CGFloat = 200 let sHeight : CGFloat = 50 // System\u30dc\u30bf\u30f3\u306e\u914d\u7f6e\u3059\u308bx,y\u5ea7\u6a19 let sposX : CGFloat = self . view . frame . width / 2 - sWidth / 2 let sposY : CGFloat = 250 // System\u30dc\u30bf\u30f3\u306b\u914d\u7f6e\u3059\u308bx,y\u5ea7\u6a19\u3068\u30b5\u30a4\u30ba\u3092\u8a2d\u5b9a. mySystemButton . frame = CGRectMake ( sposX , sposY , sWidth , sHeight ) // System\u30dc\u30bf\u30f3\u306b\u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b. mySystemButton . setTitle ( \"MySystemButton\" , forState : . Normal ) // \u30bf\u30b0\u3092\u8a2d\u5b9a\u3059\u308b. myInfoDarkButton . tag = 1 myInfoLightButton . tag = 2 myAddButton . tag = 3 myDetailButton . tag = 4 mySystemButton . tag = 5 // \u30a4\u30d9\u30f3\u30c8\u3092\u8ffd\u52a0\u3059\u308b myInfoDarkButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : . TouchDown ) myInfoLightButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : . TouchDown ) myAddButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : . TouchDown ) myDetailButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : . TouchDown ) mySystemButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : . TouchDown ) // \u30dc\u30bf\u30f3\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myInfoDarkButton ) self . view . addSubview ( myInfoLightButton ) self . view . addSubview ( myAddButton ) self . view . addSubview ( myDetailButton ) self . view . addSubview ( mySystemButton ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8 */ internal func onClickMyButton ( sender : UIButton ) { print ( \"onClickMyButton:\" ) print ( \"sender.currentTitile: \\( sender . currentTitle ) \" ) print ( \"sender.tag \\( sender . tag ) \" ) } } 3.0\u30684.0\u306e\u5dee\u5206 internal func onClickMyButton(sender: UIButton) \u306b @objc \u3092\u8ffd\u52a0 2.3\u30683.0\u306e\u5dee\u5206 CGRectMake()\u304cCGReat()\u306b\u5909\u66f4 UIButton.addTarget()\u306e#selector(ViewController.onClickMyButton(_:))\u304c\u3001#selector(ViewController.onClickMyButton(sender:)\u306b\u5909\u66f4 UIButton.addTarget()\u306eforControlEvents: .TouchDown\u304cfor: .touchDown\u306b\u5909\u66f4 Reference UIColor https://developer.apple.com/reference/uikit/uicolor UIButton https://developer.apple.com/reference/uikit/uibutton","title":"UIButton\u3067\u3044\u308d\u3044\u308d\u306a\u30dc\u30bf\u30f3\u3092\u8868\u793a"},{"location":"1.uikit/003_uibutton/#uibutton","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 // // ViewController.swift // UIKit003 // // Copyright \u00a9 2018\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myInfoDarkButton : UIButton ! private var myInfoLightButton : UIButton ! private var myAddButton : UIButton ! private var myDetailButton : UIButton ! private var mySystemButton : UIButton ! override func viewDidLoad () { super . viewDidLoad () // \u30dc\u30bf\u30f3\u3092\u751f\u6210. myInfoDarkButton = UIButton ( type : . infoDark ) myInfoLightButton = UIButton ( type : . infoLight ) myAddButton = UIButton ( type : . contactAdd ) myDetailButton = UIButton ( type : . detailDisclosure ) mySystemButton = UIButton ( type : . system ) // \u30dc\u30bf\u30f3\u306e\u4f4d\u7f6e\u3092\u6307\u5b9a\u3059\u308b let posX : CGFloat = self . view . frame . width / 2 myInfoDarkButton . layer . position = CGPoint ( x : posX , y : 50 ) myInfoLightButton . layer . position = CGPoint ( x : posX , y : 100 ) myAddButton . layer . position = CGPoint ( x : posX , y : 150 ) myDetailButton . layer . position = CGPoint ( x : posX , y : 200 ) // System\u30dc\u30bf\u30f3\u306e\u30b5\u30a4\u30ba. let sWidth : CGFloat = 200 let sHeight : CGFloat = 50 // System\u30dc\u30bf\u30f3\u306e\u914d\u7f6e\u3059\u308bx,y\u5ea7\u6a19 let sposX : CGFloat = self . view . frame . width / 2 - sWidth / 2 let sposY : CGFloat = 250 // System\u30dc\u30bf\u30f3\u306b\u914d\u7f6e\u3059\u308bx,y\u5ea7\u6a19\u3068\u30b5\u30a4\u30ba\u3092\u8a2d\u5b9a. mySystemButton . frame = CGRect ( x : sposX , y : sposY , width : sWidth , height : sHeight ) // System\u30dc\u30bf\u30f3\u306b\u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b. mySystemButton . setTitle ( \"MySystemButton\" , for : . normal ) // \u30bf\u30b0\u3092\u8a2d\u5b9a\u3059\u308b. myInfoDarkButton . tag = 1 myInfoLightButton . tag = 2 myAddButton . tag = 3 myDetailButton . tag = 4 mySystemButton . tag = 5 // \u30a4\u30d9\u30f3\u30c8\u3092\u8ffd\u52a0\u3059\u308b myInfoDarkButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchDown ) myInfoLightButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchDown ) myAddButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchDown ) myDetailButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchDown ) mySystemButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchDown ) // \u30dc\u30bf\u30f3\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myInfoDarkButton ) self . view . addSubview ( myInfoLightButton ) self . view . addSubview ( myAddButton ) self . view . addSubview ( myDetailButton ) self . view . addSubview ( mySystemButton ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8 */ @objc internal func onClickMyButton ( sender : UIButton ) { print ( \"onClickMyButton:\" ) print ( \"sender.currentTitile: \\( sender . currentTitle ) \" ) print ( \"sender.tag \\( sender . tag ) \" ) } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 // // ViewController.swift // UIKit003 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myInfoDarkButton : UIButton ! private var myInfoLightButton : UIButton ! private var myAddButton : UIButton ! private var myDetailButton : UIButton ! private var mySystemButton : UIButton ! override func viewDidLoad () { super . viewDidLoad () // \u30dc\u30bf\u30f3\u3092\u751f\u6210. myInfoDarkButton = UIButton ( type : . infoDark ) myInfoLightButton = UIButton ( type : . infoLight ) myAddButton = UIButton ( type : . contactAdd ) myDetailButton = UIButton ( type : . detailDisclosure ) mySystemButton = UIButton ( type : . system ) // \u30dc\u30bf\u30f3\u306e\u4f4d\u7f6e\u3092\u6307\u5b9a\u3059\u308b let posX : CGFloat = self . view . frame . width / 2 myInfoDarkButton . layer . position = CGPoint ( x : posX , y : 50 ) myInfoLightButton . layer . position = CGPoint ( x : posX , y : 100 ) myAddButton . layer . position = CGPoint ( x : posX , y : 150 ) myDetailButton . layer . position = CGPoint ( x : posX , y : 200 ) // System\u30dc\u30bf\u30f3\u306e\u30b5\u30a4\u30ba. let sWidth : CGFloat = 200 let sHeight : CGFloat = 50 // System\u30dc\u30bf\u30f3\u306e\u914d\u7f6e\u3059\u308bx,y\u5ea7\u6a19 let sposX : CGFloat = self . view . frame . width / 2 - sWidth / 2 let sposY : CGFloat = 250 // System\u30dc\u30bf\u30f3\u306b\u914d\u7f6e\u3059\u308bx,y\u5ea7\u6a19\u3068\u30b5\u30a4\u30ba\u3092\u8a2d\u5b9a. mySystemButton . frame = CGRect ( x : sposX , y : sposY , width : sWidth , height : sHeight ) // System\u30dc\u30bf\u30f3\u306b\u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b. mySystemButton . setTitle ( \"MySystemButton\" , for : . normal ) // \u30bf\u30b0\u3092\u8a2d\u5b9a\u3059\u308b. myInfoDarkButton . tag = 1 myInfoLightButton . tag = 2 myAddButton . tag = 3 myDetailButton . tag = 4 mySystemButton . tag = 5 // \u30a4\u30d9\u30f3\u30c8\u3092\u8ffd\u52a0\u3059\u308b myInfoDarkButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchDown ) myInfoLightButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchDown ) myAddButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchDown ) myDetailButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchDown ) mySystemButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchDown ) // \u30dc\u30bf\u30f3\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myInfoDarkButton ) self . view . addSubview ( myInfoLightButton ) self . view . addSubview ( myAddButton ) self . view . addSubview ( myDetailButton ) self . view . addSubview ( mySystemButton ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8 */ internal func onClickMyButton ( sender : UIButton ) { print ( \"onClickMyButton:\" ) print ( \"sender.currentTitile: \\( sender . currentTitle ) \" ) print ( \"sender.tag \\( sender . tag ) \" ) } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 // // ViewController.swift // UIKit003 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myInfoDarkButton : UIButton ! private var myInfoLightButton : UIButton ! private var myAddButton : UIButton ! private var myDetailButton : UIButton ! private var mySystemButton : UIButton ! override func viewDidLoad () { super . viewDidLoad () // \u30dc\u30bf\u30f3\u3092\u751f\u6210. myInfoDarkButton = UIButton ( type : . InfoDark ) myInfoLightButton = UIButton ( type : . InfoLight ) myAddButton = UIButton ( type : . ContactAdd ) myDetailButton = UIButton ( type : . DetailDisclosure ) mySystemButton = UIButton ( type : . System ) // \u30dc\u30bf\u30f3\u306e\u4f4d\u7f6e\u3092\u6307\u5b9a\u3059\u308b let posX : CGFloat = self . view . frame . width / 2 myInfoDarkButton . layer . position = CGPoint ( x : posX , y : 50 ) myInfoLightButton . layer . position = CGPoint ( x : posX , y : 100 ) myAddButton . layer . position = CGPoint ( x : posX , y : 150 ) myDetailButton . layer . position = CGPoint ( x : posX , y : 200 ) // System\u30dc\u30bf\u30f3\u306e\u30b5\u30a4\u30ba. let sWidth : CGFloat = 200 let sHeight : CGFloat = 50 // System\u30dc\u30bf\u30f3\u306e\u914d\u7f6e\u3059\u308bx,y\u5ea7\u6a19 let sposX : CGFloat = self . view . frame . width / 2 - sWidth / 2 let sposY : CGFloat = 250 // System\u30dc\u30bf\u30f3\u306b\u914d\u7f6e\u3059\u308bx,y\u5ea7\u6a19\u3068\u30b5\u30a4\u30ba\u3092\u8a2d\u5b9a. mySystemButton . frame = CGRectMake ( sposX , sposY , sWidth , sHeight ) // System\u30dc\u30bf\u30f3\u306b\u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b. mySystemButton . setTitle ( \"MySystemButton\" , forState : . Normal ) // \u30bf\u30b0\u3092\u8a2d\u5b9a\u3059\u308b. myInfoDarkButton . tag = 1 myInfoLightButton . tag = 2 myAddButton . tag = 3 myDetailButton . tag = 4 mySystemButton . tag = 5 // \u30a4\u30d9\u30f3\u30c8\u3092\u8ffd\u52a0\u3059\u308b myInfoDarkButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : . TouchDown ) myInfoLightButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : . TouchDown ) myAddButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : . TouchDown ) myDetailButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : . TouchDown ) mySystemButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : . TouchDown ) // \u30dc\u30bf\u30f3\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myInfoDarkButton ) self . view . addSubview ( myInfoLightButton ) self . view . addSubview ( myAddButton ) self . view . addSubview ( myDetailButton ) self . view . addSubview ( mySystemButton ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8 */ internal func onClickMyButton ( sender : UIButton ) { print ( \"onClickMyButton:\" ) print ( \"sender.currentTitile: \\( sender . currentTitle ) \" ) print ( \"sender.tag \\( sender . tag ) \" ) } }","title":"UIButton\u3067\u3044\u308d\u3044\u308d\u306a\u30dc\u30bf\u30f3\u3092\u8868\u793a"},{"location":"1.uikit/003_uibutton/#3040","text":"internal func onClickMyButton(sender: UIButton) \u306b @objc \u3092\u8ffd\u52a0","title":"3.0\u30684.0\u306e\u5dee\u5206"},{"location":"1.uikit/003_uibutton/#2330","text":"CGRectMake()\u304cCGReat()\u306b\u5909\u66f4 UIButton.addTarget()\u306e#selector(ViewController.onClickMyButton(_:))\u304c\u3001#selector(ViewController.onClickMyButton(sender:)\u306b\u5909\u66f4 UIButton.addTarget()\u306eforControlEvents: .TouchDown\u304cfor: .touchDown\u306b\u5909\u66f4","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/003_uibutton/#reference","text":"UIColor https://developer.apple.com/reference/uikit/uicolor UIButton https://developer.apple.com/reference/uikit/uibutton","title":"Reference"},{"location":"1.uikit/004_uitextfield/","text":"UITextField\u3067\u6587\u5b57\u3092\u5165\u529b Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 // // ViewController.swift // UIKit004 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UITextFieldDelegate { private var myTextField : UITextField ! override func viewDidLoad () { super . viewDidLoad () // UITextField\u306e\u914d\u7f6e\u3059\u308bx,y\u3068\u5e45\u3068\u9ad8\u3055\u3092\u8a2d\u5b9a. let tWidth : CGFloat = 200 let tHeight : CGFloat = 30 let posX : CGFloat = ( self . view . bounds . width - tWidth ) / 2 let posY : CGFloat = ( self . view . bounds . height - tHeight ) / 2 // UITextField\u3092\u4f5c\u6210\u3059\u308b. myTextField = UITextField ( frame : CGRect ( x : posX , y : posY , width : tWidth , height : tHeight )) // \u8868\u793a\u3059\u308b\u6587\u5b57\u3092\u4ee3\u5165\u3059\u308b. myTextField . text = \"Hello TextField\" // Delegate\u3092\u81ea\u8eab\u306b\u8a2d\u5b9a\u3059\u308b myTextField . delegate = self // \u67a0\u3092\u8868\u793a\u3059\u308b. myTextField . borderStyle = . roundedRect // \u30af\u30ea\u30a2\u30dc\u30bf\u30f3\u3092\u8ffd\u52a0. myTextField . clearButtonMode = . whileEditing // View\u306b\u8ffd\u52a0\u3059\u308b self . view . addSubview ( myTextField ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } /* UITextField\u304c\u7de8\u96c6\u3055\u308c\u305f\u76f4\u524d\u306b\u547c\u3070\u308c\u308b */ func textFieldDidBeginEditing ( _ textField : UITextField ) { print ( \"textFieldDidBeginEditing: \\( textField . text ! ) \" ) } /* UITextField\u304c\u7de8\u96c6\u3055\u308c\u305f\u76f4\u5f8c\u306b\u547c\u3070\u308c\u308b */ func textFieldDidEndEditing ( _ textField : UITextField ) { print ( \"textFieldDidEndEditing: \\( textField . text ! ) \" ) } /* \u6539\u884c\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u969b\u306b\u547c\u3070\u308c\u308b */ func textFieldShouldReturn ( _ textField : UITextField ) -> Bool { print ( \"textFieldShouldReturn \\( textField . text ! ) \" ) // \u6539\u884c\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u3089Keyboard\u3092\u9589\u3058\u308b\u51e6\u7406. textField . resignFirstResponder () return true } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 // // ViewController.swift // UIKit004 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UITextFieldDelegate { private var myTextField : UITextField ! override func viewDidLoad () { super . viewDidLoad () // UITextField\u306e\u914d\u7f6e\u3059\u308bx,y\u3068\u5e45\u3068\u9ad8\u3055\u3092\u8a2d\u5b9a. let tWidth : CGFloat = 200 let tHeight : CGFloat = 30 let posX : CGFloat = ( self . view . bounds . width - tWidth ) / 2 let posY : CGFloat = ( self . view . bounds . height - tHeight ) / 2 // UITextField\u3092\u4f5c\u6210\u3059\u308b. myTextField = UITextField ( frame : CGRectMake ( posX , posY , tWidth , tHeight )) // \u8868\u793a\u3059\u308b\u6587\u5b57\u3092\u4ee3\u5165\u3059\u308b. myTextField . text = \"Hello TextField\" // Delegate\u3092\u81ea\u8eab\u306b\u8a2d\u5b9a\u3059\u308b myTextField . delegate = self // \u67a0\u3092\u8868\u793a\u3059\u308b. myTextField . borderStyle = . RoundedRect // \u30af\u30ea\u30a2\u30dc\u30bf\u30f3\u3092\u8ffd\u52a0. myTextField . clearButtonMode = . WhileEditing // View\u306b\u8ffd\u52a0\u3059\u308b self . view . addSubview ( myTextField ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } /* UITextField\u304c\u7de8\u96c6\u3055\u308c\u305f\u76f4\u524d\u306b\u547c\u3070\u308c\u308b */ func textFieldDidBeginEditing ( textField : UITextField ) { print ( \"textFieldDidBeginEditing: \\( textField . text ! ) \" ) } /* UITextField\u304c\u7de8\u96c6\u3055\u308c\u305f\u76f4\u5f8c\u306b\u547c\u3070\u308c\u308b */ func textFieldDidEndEditing ( textField : UITextField ) { print ( \"textFieldDidEndEditing: \\( textField . text ! ) \" ) } /* \u6539\u884c\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u969b\u306b\u547c\u3070\u308c\u308b */ func textFieldShouldReturn ( textField : UITextField ) -> Bool { print ( \"textFieldShouldReturn \\( textField . text ! ) \" ) // \u6539\u884c\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u3089Keyboard\u3092\u9589\u3058\u308b\u51e6\u7406. textField . resignFirstResponder () return true } } 2.3\u30683.0\u306e\u5dee\u5206 textFieldDidBeginEditing(textField: UITextField)\u304ctextFieldDidBeginEditing(_ textField: UITextField)\u306b\u5909\u66f4 textFieldDidEndEditing(textField: UITextField)\u304c\u3001textFieldDidEndEditing(_ textField: UITextField)\u306b\u5909\u66f4 textFieldShouldReturn(textField: UITextField)\u304c\u3001textFieldShouldReturn(_ textField: UITextField)\u306b\u5909\u66f4 UITextBorderStyle.RoundedRect\u304cUITextBorderStyle.rundedRect\u306b\u5909\u66f4 Reference UITextField https://developer.apple.com/reference/uikit/uitextfield","title":"UITextField\u3067\u6587\u5b57\u3092\u5165\u529b"},{"location":"1.uikit/004_uitextfield/#uitextfield","text":"Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 // // ViewController.swift // UIKit004 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UITextFieldDelegate { private var myTextField : UITextField ! override func viewDidLoad () { super . viewDidLoad () // UITextField\u306e\u914d\u7f6e\u3059\u308bx,y\u3068\u5e45\u3068\u9ad8\u3055\u3092\u8a2d\u5b9a. let tWidth : CGFloat = 200 let tHeight : CGFloat = 30 let posX : CGFloat = ( self . view . bounds . width - tWidth ) / 2 let posY : CGFloat = ( self . view . bounds . height - tHeight ) / 2 // UITextField\u3092\u4f5c\u6210\u3059\u308b. myTextField = UITextField ( frame : CGRect ( x : posX , y : posY , width : tWidth , height : tHeight )) // \u8868\u793a\u3059\u308b\u6587\u5b57\u3092\u4ee3\u5165\u3059\u308b. myTextField . text = \"Hello TextField\" // Delegate\u3092\u81ea\u8eab\u306b\u8a2d\u5b9a\u3059\u308b myTextField . delegate = self // \u67a0\u3092\u8868\u793a\u3059\u308b. myTextField . borderStyle = . roundedRect // \u30af\u30ea\u30a2\u30dc\u30bf\u30f3\u3092\u8ffd\u52a0. myTextField . clearButtonMode = . whileEditing // View\u306b\u8ffd\u52a0\u3059\u308b self . view . addSubview ( myTextField ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } /* UITextField\u304c\u7de8\u96c6\u3055\u308c\u305f\u76f4\u524d\u306b\u547c\u3070\u308c\u308b */ func textFieldDidBeginEditing ( _ textField : UITextField ) { print ( \"textFieldDidBeginEditing: \\( textField . text ! ) \" ) } /* UITextField\u304c\u7de8\u96c6\u3055\u308c\u305f\u76f4\u5f8c\u306b\u547c\u3070\u308c\u308b */ func textFieldDidEndEditing ( _ textField : UITextField ) { print ( \"textFieldDidEndEditing: \\( textField . text ! ) \" ) } /* \u6539\u884c\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u969b\u306b\u547c\u3070\u308c\u308b */ func textFieldShouldReturn ( _ textField : UITextField ) -> Bool { print ( \"textFieldShouldReturn \\( textField . text ! ) \" ) // \u6539\u884c\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u3089Keyboard\u3092\u9589\u3058\u308b\u51e6\u7406. textField . resignFirstResponder () return true } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 // // ViewController.swift // UIKit004 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UITextFieldDelegate { private var myTextField : UITextField ! override func viewDidLoad () { super . viewDidLoad () // UITextField\u306e\u914d\u7f6e\u3059\u308bx,y\u3068\u5e45\u3068\u9ad8\u3055\u3092\u8a2d\u5b9a. let tWidth : CGFloat = 200 let tHeight : CGFloat = 30 let posX : CGFloat = ( self . view . bounds . width - tWidth ) / 2 let posY : CGFloat = ( self . view . bounds . height - tHeight ) / 2 // UITextField\u3092\u4f5c\u6210\u3059\u308b. myTextField = UITextField ( frame : CGRectMake ( posX , posY , tWidth , tHeight )) // \u8868\u793a\u3059\u308b\u6587\u5b57\u3092\u4ee3\u5165\u3059\u308b. myTextField . text = \"Hello TextField\" // Delegate\u3092\u81ea\u8eab\u306b\u8a2d\u5b9a\u3059\u308b myTextField . delegate = self // \u67a0\u3092\u8868\u793a\u3059\u308b. myTextField . borderStyle = . RoundedRect // \u30af\u30ea\u30a2\u30dc\u30bf\u30f3\u3092\u8ffd\u52a0. myTextField . clearButtonMode = . WhileEditing // View\u306b\u8ffd\u52a0\u3059\u308b self . view . addSubview ( myTextField ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } /* UITextField\u304c\u7de8\u96c6\u3055\u308c\u305f\u76f4\u524d\u306b\u547c\u3070\u308c\u308b */ func textFieldDidBeginEditing ( textField : UITextField ) { print ( \"textFieldDidBeginEditing: \\( textField . text ! ) \" ) } /* UITextField\u304c\u7de8\u96c6\u3055\u308c\u305f\u76f4\u5f8c\u306b\u547c\u3070\u308c\u308b */ func textFieldDidEndEditing ( textField : UITextField ) { print ( \"textFieldDidEndEditing: \\( textField . text ! ) \" ) } /* \u6539\u884c\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u969b\u306b\u547c\u3070\u308c\u308b */ func textFieldShouldReturn ( textField : UITextField ) -> Bool { print ( \"textFieldShouldReturn \\( textField . text ! ) \" ) // \u6539\u884c\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u3089Keyboard\u3092\u9589\u3058\u308b\u51e6\u7406. textField . resignFirstResponder () return true } }","title":"UITextField\u3067\u6587\u5b57\u3092\u5165\u529b"},{"location":"1.uikit/004_uitextfield/#2330","text":"textFieldDidBeginEditing(textField: UITextField)\u304ctextFieldDidBeginEditing(_ textField: UITextField)\u306b\u5909\u66f4 textFieldDidEndEditing(textField: UITextField)\u304c\u3001textFieldDidEndEditing(_ textField: UITextField)\u306b\u5909\u66f4 textFieldShouldReturn(textField: UITextField)\u304c\u3001textFieldShouldReturn(_ textField: UITextField)\u306b\u5909\u66f4 UITextBorderStyle.RoundedRect\u304cUITextBorderStyle.rundedRect\u306b\u5909\u66f4","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/004_uitextfield/#reference","text":"UITextField https://developer.apple.com/reference/uikit/uitextfield","title":"Reference"},{"location":"1.uikit/005_uiimageview/","text":"UIImageView\u3067\u753b\u50cf\u3092\u8868\u793a Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 // // ViewController.swift // UIKit005 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myImageView : UIImageView ! override func viewDidLoad () { super . viewDidLoad () // UIImageView\u306e\u30b5\u30a4\u30ba\u3092\u8a2d\u5b9a\u3059\u308b let iWidth : CGFloat = 300 let iHeight : CGFloat = 100 // UIImageView\u306ex,y\u3092\u8a2d\u5b9a\u3059\u308b let posX : CGFloat = ( self . view . bounds . width - iWidth ) / 2 let posY : CGFloat = ( self . view . bounds . height - iHeight ) / 2 // UIImageView\u3092\u4f5c\u6210. myImageView = UIImageView ( frame : CGRect ( x : posX , y : posY , width : iWidth , height : iHeight )) // UIImage\u3092\u4f5c\u6210. let myImage : UIImage = UIImage ( named : \"fabo_logo.png\" ) ! // \u753b\u50cf\u3092UIImageView\u306b\u8a2d\u5b9a\u3059\u308b. myImageView . image = myImage // UIImageView\u3092View\u306b\u8ffd\u52a0\u3059\u308b self . view . addSubview ( myImageView ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 // // ViewController.swift // UIKit005 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myImageView : UIImageView ! override func viewDidLoad () { super . viewDidLoad () // UIImageView\u306e\u30b5\u30a4\u30ba\u3092\u8a2d\u5b9a\u3059\u308b let iWidth : CGFloat = 300 let iHeight : CGFloat = 100 // UIImageView\u306ex,y\u3092\u8a2d\u5b9a\u3059\u308b let posX : CGFloat = ( self . view . bounds . width - iWidth ) / 2 let posY : CGFloat = ( self . view . bounds . height - iHeight ) / 2 // UIImageView\u3092\u4f5c\u6210. myImageView = UIImageView ( frame : CGRectMake ( posX , posY , iWidth , iHeight )) // UIImage\u3092\u4f5c\u6210. let myImage : UIImage = UIImage ( named : \"fabo_logo.png\" ) ! // \u753b\u50cf\u3092UIImageView\u306b\u8a2d\u5b9a\u3059\u308b. myImageView . image = myImage // UIImageView\u3092View\u306b\u8ffd\u52a0\u3059\u308b self . view . addSubview ( myImageView ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } } 2.3\u30683.0\u306e\u5dee\u5206 CGRectMake()\u304cCGRect()\u306b\u5909\u66f4. \u4e8b\u524d\u6e96\u5099 Reference UIImageView https://developer.apple.com/reference/uikit/uiimageview UIImage https://developer.apple.com/reference/uikit/uiimage","title":"UIImageView\u3067\u753b\u50cf\u3092\u8868\u793a"},{"location":"1.uikit/005_uiimageview/#uiimageview","text":"Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 // // ViewController.swift // UIKit005 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myImageView : UIImageView ! override func viewDidLoad () { super . viewDidLoad () // UIImageView\u306e\u30b5\u30a4\u30ba\u3092\u8a2d\u5b9a\u3059\u308b let iWidth : CGFloat = 300 let iHeight : CGFloat = 100 // UIImageView\u306ex,y\u3092\u8a2d\u5b9a\u3059\u308b let posX : CGFloat = ( self . view . bounds . width - iWidth ) / 2 let posY : CGFloat = ( self . view . bounds . height - iHeight ) / 2 // UIImageView\u3092\u4f5c\u6210. myImageView = UIImageView ( frame : CGRect ( x : posX , y : posY , width : iWidth , height : iHeight )) // UIImage\u3092\u4f5c\u6210. let myImage : UIImage = UIImage ( named : \"fabo_logo.png\" ) ! // \u753b\u50cf\u3092UIImageView\u306b\u8a2d\u5b9a\u3059\u308b. myImageView . image = myImage // UIImageView\u3092View\u306b\u8ffd\u52a0\u3059\u308b self . view . addSubview ( myImageView ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 // // ViewController.swift // UIKit005 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myImageView : UIImageView ! override func viewDidLoad () { super . viewDidLoad () // UIImageView\u306e\u30b5\u30a4\u30ba\u3092\u8a2d\u5b9a\u3059\u308b let iWidth : CGFloat = 300 let iHeight : CGFloat = 100 // UIImageView\u306ex,y\u3092\u8a2d\u5b9a\u3059\u308b let posX : CGFloat = ( self . view . bounds . width - iWidth ) / 2 let posY : CGFloat = ( self . view . bounds . height - iHeight ) / 2 // UIImageView\u3092\u4f5c\u6210. myImageView = UIImageView ( frame : CGRectMake ( posX , posY , iWidth , iHeight )) // UIImage\u3092\u4f5c\u6210. let myImage : UIImage = UIImage ( named : \"fabo_logo.png\" ) ! // \u753b\u50cf\u3092UIImageView\u306b\u8a2d\u5b9a\u3059\u308b. myImageView . image = myImage // UIImageView\u3092View\u306b\u8ffd\u52a0\u3059\u308b self . view . addSubview ( myImageView ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } }","title":"UIImageView\u3067\u753b\u50cf\u3092\u8868\u793a"},{"location":"1.uikit/005_uiimageview/#2330","text":"CGRectMake()\u304cCGRect()\u306b\u5909\u66f4.","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/005_uiimageview/#_1","text":"","title":"\u4e8b\u524d\u6e96\u5099"},{"location":"1.uikit/005_uiimageview/#reference","text":"UIImageView https://developer.apple.com/reference/uikit/uiimageview UIImage https://developer.apple.com/reference/uikit/uiimage","title":"Reference"},{"location":"1.uikit/006_uitableview/","text":"UITableView\u3067\u30c6\u30fc\u30d6\u30eb\u3092\u8868\u793a Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 // // ViewController.swift // UIKit006 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UITableViewDelegate , UITableViewDataSource { // Table\u3067\u4f7f\u7528\u3059\u308b\u914d\u5217\u3092\u8a2d\u5b9a\u3059\u308b private let myItems : NSArray = [ \"TEST1\" , \"TEST2\" , \"TEST3\" ] private var myTableView : UITableView ! override func viewDidLoad () { super . viewDidLoad () // Status Bar\u306e\u9ad8\u3055\u3092\u53d6\u5f97\u3059\u308b. let barHeight : CGFloat = UIApplication . shared . statusBarFrame . size . height // View\u306e\u9ad8\u3055\u3068\u5e45\u3092\u53d6\u5f97\u3059\u308b. let displayWidth : CGFloat = self . view . frame . width let displayHeight : CGFloat = self . view . frame . height // TableView\u306e\u751f\u6210(Status bar\u306e\u9ad8\u3055\u3092\u305a\u3089\u3057\u3066\u8868\u793a). myTableView = UITableView ( frame : CGRect ( x : 0 , y : barHeight , width : displayWidth , height : displayHeight )) // Cell\u540d\u306e\u767b\u9332\u3092\u304a\u3053\u306a\u3046. myTableView . register ( UITableViewCell . self , forCellReuseIdentifier : \"MyCell\" ) // DataSource\u3092\u81ea\u8eab\u306b\u8a2d\u5b9a\u3059\u308b. myTableView . dataSource = self // Delegate\u3092\u81ea\u8eab\u306b\u8a2d\u5b9a\u3059\u308b. myTableView . delegate = self // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myTableView ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } /* Cell\u304c\u9078\u629e\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b */ func tableView ( _ tableView : UITableView , didSelectRowAt indexPath : IndexPath ) { print ( \"Num: \\( indexPath . row ) \" ) print ( \"Value: \\( myItems [ indexPath . row ] ) \" ) } /* Cell\u306e\u7dcf\u6570\u3092\u8fd4\u3059. */ func tableView ( _ tableView : UITableView , numberOfRowsInSection section : Int ) -> Int { return myItems . count } /* Cell\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b */ func tableView ( _ tableView : UITableView , cellForRowAt indexPath : IndexPath ) -> UITableViewCell { // \u518d\u5229\u7528\u3059\u308bCell\u3092\u53d6\u5f97\u3059\u308b. let cell = tableView . dequeueReusableCell ( withIdentifier : \"MyCell\" , for : indexPath as IndexPath ) // Cell\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b. cell . textLabel !. text = \" \\( myItems [ indexPath . row ] ) \" return cell } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 // // ViewController.swift // UIKit006 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UITableViewDelegate , UITableViewDataSource { // Table\u3067\u4f7f\u7528\u3059\u308b\u914d\u5217\u3092\u8a2d\u5b9a\u3059\u308b private let myItems : NSArray = [ \"TEST1\" , \"TEST2\" , \"TEST3\" ] private var myTableView : UITableView ! override func viewDidLoad () { super . viewDidLoad () // Status Bar\u306e\u9ad8\u3055\u3092\u53d6\u5f97\u3059\u308b. let barHeight : CGFloat = UIApplication . sharedApplication (). statusBarFrame . size . height // View\u306e\u9ad8\u3055\u3068\u5e45\u3092\u53d6\u5f97\u3059\u308b. let displayWidth : CGFloat = self . view . frame . width let displayHeight : CGFloat = self . view . frame . height // TableView\u306e\u751f\u6210(Status bar\u306e\u9ad8\u3055\u3092\u305a\u3089\u3057\u3066\u8868\u793a). myTableView = UITableView ( frame : CGRectMake ( 0 , barHeight , displayWidth , displayHeight )) // Cell\u540d\u306e\u767b\u9332\u3092\u304a\u3053\u306a\u3046. myTableView . registerClass ( UITableViewCell . self , forCellReuseIdentifier : \"MyCell\" ) // DataSource\u3092\u81ea\u8eab\u306b\u8a2d\u5b9a\u3059\u308b. myTableView . dataSource = self // Delegate\u3092\u81ea\u8eab\u306b\u8a2d\u5b9a\u3059\u308b. myTableView . delegate = self // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myTableView ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } /* Cell\u304c\u9078\u629e\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b */ func tableView ( tableView : UITableView , didSelectRowAtIndexPath indexPath : NSIndexPath ) { print ( \"Num: \\( indexPath . row ) \" ) print ( \"Value: \\( myItems [ indexPath . row ] ) \" ) } /* Cell\u306e\u7dcf\u6570\u3092\u8fd4\u3059. */ func tableView ( tableView : UITableView , numberOfRowsInSection section : Int ) -> Int { return myItems . count } /* Cell\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b */ func tableView ( tableView : UITableView , cellForRowAtIndexPath indexPath : NSIndexPath ) -> UITableViewCell { // \u518d\u5229\u7528\u3059\u308bCell\u3092\u53d6\u5f97\u3059\u308b. let cell = tableView . dequeueReusableCellWithIdentifier ( \"MyCell\" , forIndexPath : indexPath ) // Cell\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b. cell . textLabel !. text = \" \\( myItems [ indexPath . row ] ) \" return cell } } 2.3\u30683.0\u306e\u5dee\u5206 CGRectMake()\u304cCGRect()\u306b\u5909\u66f4. Reference UIImageView https://developer.apple.com/reference/uikit/uiimageview UIImage https://developer.apple.com/reference/uikit/uiimage","title":"UITableView\u3067\u30c6\u30fc\u30d6\u30eb\u3092\u8868\u793a"},{"location":"1.uikit/006_uitableview/#uitableview","text":"Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 // // ViewController.swift // UIKit006 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UITableViewDelegate , UITableViewDataSource { // Table\u3067\u4f7f\u7528\u3059\u308b\u914d\u5217\u3092\u8a2d\u5b9a\u3059\u308b private let myItems : NSArray = [ \"TEST1\" , \"TEST2\" , \"TEST3\" ] private var myTableView : UITableView ! override func viewDidLoad () { super . viewDidLoad () // Status Bar\u306e\u9ad8\u3055\u3092\u53d6\u5f97\u3059\u308b. let barHeight : CGFloat = UIApplication . shared . statusBarFrame . size . height // View\u306e\u9ad8\u3055\u3068\u5e45\u3092\u53d6\u5f97\u3059\u308b. let displayWidth : CGFloat = self . view . frame . width let displayHeight : CGFloat = self . view . frame . height // TableView\u306e\u751f\u6210(Status bar\u306e\u9ad8\u3055\u3092\u305a\u3089\u3057\u3066\u8868\u793a). myTableView = UITableView ( frame : CGRect ( x : 0 , y : barHeight , width : displayWidth , height : displayHeight )) // Cell\u540d\u306e\u767b\u9332\u3092\u304a\u3053\u306a\u3046. myTableView . register ( UITableViewCell . self , forCellReuseIdentifier : \"MyCell\" ) // DataSource\u3092\u81ea\u8eab\u306b\u8a2d\u5b9a\u3059\u308b. myTableView . dataSource = self // Delegate\u3092\u81ea\u8eab\u306b\u8a2d\u5b9a\u3059\u308b. myTableView . delegate = self // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myTableView ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } /* Cell\u304c\u9078\u629e\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b */ func tableView ( _ tableView : UITableView , didSelectRowAt indexPath : IndexPath ) { print ( \"Num: \\( indexPath . row ) \" ) print ( \"Value: \\( myItems [ indexPath . row ] ) \" ) } /* Cell\u306e\u7dcf\u6570\u3092\u8fd4\u3059. */ func tableView ( _ tableView : UITableView , numberOfRowsInSection section : Int ) -> Int { return myItems . count } /* Cell\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b */ func tableView ( _ tableView : UITableView , cellForRowAt indexPath : IndexPath ) -> UITableViewCell { // \u518d\u5229\u7528\u3059\u308bCell\u3092\u53d6\u5f97\u3059\u308b. let cell = tableView . dequeueReusableCell ( withIdentifier : \"MyCell\" , for : indexPath as IndexPath ) // Cell\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b. cell . textLabel !. text = \" \\( myItems [ indexPath . row ] ) \" return cell } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 // // ViewController.swift // UIKit006 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UITableViewDelegate , UITableViewDataSource { // Table\u3067\u4f7f\u7528\u3059\u308b\u914d\u5217\u3092\u8a2d\u5b9a\u3059\u308b private let myItems : NSArray = [ \"TEST1\" , \"TEST2\" , \"TEST3\" ] private var myTableView : UITableView ! override func viewDidLoad () { super . viewDidLoad () // Status Bar\u306e\u9ad8\u3055\u3092\u53d6\u5f97\u3059\u308b. let barHeight : CGFloat = UIApplication . sharedApplication (). statusBarFrame . size . height // View\u306e\u9ad8\u3055\u3068\u5e45\u3092\u53d6\u5f97\u3059\u308b. let displayWidth : CGFloat = self . view . frame . width let displayHeight : CGFloat = self . view . frame . height // TableView\u306e\u751f\u6210(Status bar\u306e\u9ad8\u3055\u3092\u305a\u3089\u3057\u3066\u8868\u793a). myTableView = UITableView ( frame : CGRectMake ( 0 , barHeight , displayWidth , displayHeight )) // Cell\u540d\u306e\u767b\u9332\u3092\u304a\u3053\u306a\u3046. myTableView . registerClass ( UITableViewCell . self , forCellReuseIdentifier : \"MyCell\" ) // DataSource\u3092\u81ea\u8eab\u306b\u8a2d\u5b9a\u3059\u308b. myTableView . dataSource = self // Delegate\u3092\u81ea\u8eab\u306b\u8a2d\u5b9a\u3059\u308b. myTableView . delegate = self // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myTableView ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } /* Cell\u304c\u9078\u629e\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b */ func tableView ( tableView : UITableView , didSelectRowAtIndexPath indexPath : NSIndexPath ) { print ( \"Num: \\( indexPath . row ) \" ) print ( \"Value: \\( myItems [ indexPath . row ] ) \" ) } /* Cell\u306e\u7dcf\u6570\u3092\u8fd4\u3059. */ func tableView ( tableView : UITableView , numberOfRowsInSection section : Int ) -> Int { return myItems . count } /* Cell\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b */ func tableView ( tableView : UITableView , cellForRowAtIndexPath indexPath : NSIndexPath ) -> UITableViewCell { // \u518d\u5229\u7528\u3059\u308bCell\u3092\u53d6\u5f97\u3059\u308b. let cell = tableView . dequeueReusableCellWithIdentifier ( \"MyCell\" , forIndexPath : indexPath ) // Cell\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b. cell . textLabel !. text = \" \\( myItems [ indexPath . row ] ) \" return cell } }","title":"UITableView\u3067\u30c6\u30fc\u30d6\u30eb\u3092\u8868\u793a"},{"location":"1.uikit/006_uitableview/#2330","text":"CGRectMake()\u304cCGRect()\u306b\u5909\u66f4.","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/006_uitableview/#reference","text":"UIImageView https://developer.apple.com/reference/uikit/uiimageview UIImage https://developer.apple.com/reference/uikit/uiimage","title":"Reference"},{"location":"1.uikit/007_uifont/","text":"UIFont\u3067\u6587\u5b57\u3092\u8868\u793a Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 // // ViewController.swift // UIKit007 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // \u5c0f\u3055\u3081\u306e\u30d5\u30a9\u30f3\u30c8\u306e\u6587\u5b57\u5217\u3092\u30e9\u30d9\u30eb\u306b\u8868\u793a\u3059\u308b. let mySmallLabel : UILabel = UILabel ( frame : CGRect ( x : 25 , y : 0 , width : 300 , height : 150 )) mySmallLabel . text = \"\u5c0f\u3055\u3081\u306e\u30d5\u30a9\u30f3\u30c8\" mySmallLabel . font = UIFont . systemFont ( ofSize : UIFont . smallSystemFontSize ) self . view . addSubview ( mySmallLabel ) // \u30b7\u30b9\u30c6\u30e0\u306e\u6a19\u6e96\u306e\u30d5\u30a9\u30f3\u30c8\u30b5\u30a4\u30ba\u306e\u6587\u5b57\u5217\u3092\u30e9\u30d9\u30eb\u3092\u8868\u793a\u3059\u308b. let myNormalLabel : UILabel = UILabel ( frame : CGRect ( x : 25 , y : 30 , width : 200 , height : 150 )) myNormalLabel . font = UIFont . systemFont ( ofSize : UIFont . systemFontSize ) myNormalLabel . text = \"\u30b7\u30b9\u30c6\u30e0\u6a19\u6e96\u306e\u30d5\u30a9\u30f3\u30c8\u30b5\u30a4\u30ba\" self . view . addSubview ( myNormalLabel ) // UIButton\u7528\u306e\u30d5\u30a9\u30f3\u30c8\u30b5\u30a4\u30ba\u306e\u6587\u5b57\u5217\u3092\u30e9\u30d9\u30eb\u306b\u8868\u793a\u3059\u308b. let myButtonLabel : UILabel = UILabel ( frame : CGRect ( x : 25 , y : 60 , width : 300 , height : 150 )) myButtonLabel . font = UIFont . systemFont ( ofSize : UIFont . buttonFontSize ) myButtonLabel . text = \"UIButton\u306e\u30d5\u30a9\u30f3\u30c8\u30b5\u30a4\u30ba\" self . view . addSubview ( myButtonLabel ) // \u30ab\u30b9\u30bf\u30e0\u3057\u305f\u30d5\u30a9\u30f3\u30c8\u30b5\u30a4\u30ba(20)\u306e\u6587\u5b57\u5217\u3092\u30e9\u30d9\u30eb\u306b\u8868\u793a\u3059\u308b. let myCustomLabel : UILabel = UILabel ( frame : CGRect ( x : 25 , y : 90 , width : 300 , height : 150 )) myCustomLabel . font = UIFont . systemFont ( ofSize : CGFloat ( 20 )) myCustomLabel . text = \"\u30dd\u30a4\u30f3\u30c820\u306e\u30d5\u30a9\u30f3\u30c8\u30b5\u30a4\u30ba\" self . view . addSubview ( myCustomLabel ) // Italic Sysrem Font\u306e\u6587\u5b57\u5217\u3092\u30e9\u30d9\u30eb\u306b\u8868\u793a\u3059\u308b. let myItalicLabel : UILabel = UILabel ( frame : CGRect ( x : 25 , y : 150 , width : 300 , height : 150 )) myItalicLabel . font = UIFont . italicSystemFont ( ofSize : UIFont . labelFontSize ) myItalicLabel . text = \"Italic\u30d5\u30a9\u30f3\u30c8\" self . view . addSubview ( myItalicLabel ) // Bold\u306e\u6587\u5b57\u5217\u3092\u30e9\u30d9\u30eb\u306b\u8868\u793a\u3059\u308b. let myBoldLabel : UILabel = UILabel ( frame : CGRect ( x : 25 , y : 180 , width : 300 , height : 150 )) myBoldLabel . font = UIFont . boldSystemFont ( ofSize : UIFont . labelFontSize ) myBoldLabel . text = \"Bold\u30d5\u30a9\u30f3\u30c8\" self . view . addSubview ( myBoldLabel ) // Arial\u306e\u6587\u5b57\u5217\u3092\u30e9\u30d9\u30eb\u306b\u8868\u793a\u3059\u308b. let myArialLabel : UILabel = UILabel ( frame : CGRect ( x : 25 , y : 230 , width : 300 , height : 150 )) myArialLabel . font = UIFont ( name : \"ArilHebew\" , size : UIFont . labelFontSize ) myArialLabel . text = \"ArialHebrew\" self . view . addSubview ( myArialLabel ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 // // ViewController.swift // UIKit007 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // \u5c0f\u3055\u3081\u306e\u30d5\u30a9\u30f3\u30c8\u306e\u6587\u5b57\u5217\u3092\u30e9\u30d9\u30eb\u306b\u8868\u793a\u3059\u308b. let mySmallLabel : UILabel = UILabel ( frame : CGRectMake ( 25 , 0 , 300 , 150 )) mySmallLabel . text = \"\u5c0f\u3055\u3081\u306e\u30d5\u30a9\u30f3\u30c8\" mySmallLabel . font = UIFont . systemFontOfSize ( UIFont . smallSystemFontSize ()) self . view . addSubview ( mySmallLabel ) // \u30b7\u30b9\u30c6\u30e0\u306e\u6a19\u6e96\u306e\u30d5\u30a9\u30f3\u30c8\u30b5\u30a4\u30ba\u306e\u6587\u5b57\u5217\u3092\u30e9\u30d9\u30eb\u3092\u8868\u793a\u3059\u308b. let myNormalLabel : UILabel = UILabel ( frame : CGRectMake ( 25 , 30 , 200 , 150 )) myNormalLabel . font = UIFont . systemFontOfSize ( UIFont . systemFontSize ()) myNormalLabel . text = \"\u30b7\u30b9\u30c6\u30e0\u6a19\u6e96\u306e\u30d5\u30a9\u30f3\u30c8\u30b5\u30a4\u30ba\" self . view . addSubview ( myNormalLabel ) // UIButton\u7528\u306e\u30d5\u30a9\u30f3\u30c8\u30b5\u30a4\u30ba\u306e\u6587\u5b57\u5217\u3092\u30e9\u30d9\u30eb\u306b\u8868\u793a\u3059\u308b. let myButtonLabel : UILabel = UILabel ( frame : CGRectMake ( 25 , 60 , 300 , 150 )) myButtonLabel . font = UIFont . systemFontOfSize ( UIFont . buttonFontSize ()) myButtonLabel . text = \"UIButton\u306e\u30d5\u30a9\u30f3\u30c8\u30b5\u30a4\u30ba\" self . view . addSubview ( myButtonLabel ) // \u30ab\u30b9\u30bf\u30e0\u3057\u305f\u30d5\u30a9\u30f3\u30c8\u30b5\u30a4\u30ba(20)\u306e\u6587\u5b57\u5217\u3092\u30e9\u30d9\u30eb\u306b\u8868\u793a\u3059\u308b. let myCustomLabel : UILabel = UILabel ( frame : CGRectMake ( 25 , 90 , 300 , 150 )) myCustomLabel . font = UIFont . systemFontOfSize ( CGFloat ( 20 )) myCustomLabel . text = \"\u30dd\u30a4\u30f3\u30c820\u306e\u30d5\u30a9\u30f3\u30c8\u30b5\u30a4\u30ba\" self . view . addSubview ( myCustomLabel ) // Italic Sysrem Font\u306e\u6587\u5b57\u5217\u3092\u30e9\u30d9\u30eb\u306b\u8868\u793a\u3059\u308b. let myItalicLabel : UILabel = UILabel ( frame : CGRectMake ( 25 , 150 , 300 , 150 )) myItalicLabel . font = UIFont . italicSystemFontOfSize ( UIFont . labelFontSize ()) myItalicLabel . text = \"Italic\u30d5\u30a9\u30f3\u30c8\" self . view . addSubview ( myItalicLabel ) // Bold\u306e\u6587\u5b57\u5217\u3092\u30e9\u30d9\u30eb\u306b\u8868\u793a\u3059\u308b. let myBoldLabel : UILabel = UILabel ( frame : CGRectMake ( 25 , 180 , 300 , 150 )) myBoldLabel . font = UIFont . boldSystemFontOfSize ( UIFont . labelFontSize ()) myBoldLabel . text = \"Bold\u30d5\u30a9\u30f3\u30c8\" self . view . addSubview ( myBoldLabel ) // Arial\u306e\u6587\u5b57\u5217\u3092\u30e9\u30d9\u30eb\u306b\u8868\u793a\u3059\u308b. let myArialLabel : UILabel = UILabel ( frame : CGRectMake ( 25 , 230 , 300 , 150 )) myArialLabel . font = UIFont ( name : \"ArilHebew\" , size : UIFont . labelFontSize ()) myArialLabel . text = \"ArialHebrew\" self . view . addSubview ( myArialLabel ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } } 2.3\u30683.0\u306e\u5dee\u5206 CGRectMake()\u304cCGRect()\u306b\u5909\u66f4. UIFont.systemFontOfSize(UIFont.smallSystemFontSize())\u304cUIFont.systemFont(ofSize: UIFont.smallSystemFontSize)\u306b\u5909\u66f4. Reference UIFont https://developer.apple.com/reference/uikit/uifont","title":"UIFont\u3067\u6587\u5b57\u3092\u8868\u793a"},{"location":"1.uikit/007_uifont/#uifont","text":"Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 // // ViewController.swift // UIKit007 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // \u5c0f\u3055\u3081\u306e\u30d5\u30a9\u30f3\u30c8\u306e\u6587\u5b57\u5217\u3092\u30e9\u30d9\u30eb\u306b\u8868\u793a\u3059\u308b. let mySmallLabel : UILabel = UILabel ( frame : CGRect ( x : 25 , y : 0 , width : 300 , height : 150 )) mySmallLabel . text = \"\u5c0f\u3055\u3081\u306e\u30d5\u30a9\u30f3\u30c8\" mySmallLabel . font = UIFont . systemFont ( ofSize : UIFont . smallSystemFontSize ) self . view . addSubview ( mySmallLabel ) // \u30b7\u30b9\u30c6\u30e0\u306e\u6a19\u6e96\u306e\u30d5\u30a9\u30f3\u30c8\u30b5\u30a4\u30ba\u306e\u6587\u5b57\u5217\u3092\u30e9\u30d9\u30eb\u3092\u8868\u793a\u3059\u308b. let myNormalLabel : UILabel = UILabel ( frame : CGRect ( x : 25 , y : 30 , width : 200 , height : 150 )) myNormalLabel . font = UIFont . systemFont ( ofSize : UIFont . systemFontSize ) myNormalLabel . text = \"\u30b7\u30b9\u30c6\u30e0\u6a19\u6e96\u306e\u30d5\u30a9\u30f3\u30c8\u30b5\u30a4\u30ba\" self . view . addSubview ( myNormalLabel ) // UIButton\u7528\u306e\u30d5\u30a9\u30f3\u30c8\u30b5\u30a4\u30ba\u306e\u6587\u5b57\u5217\u3092\u30e9\u30d9\u30eb\u306b\u8868\u793a\u3059\u308b. let myButtonLabel : UILabel = UILabel ( frame : CGRect ( x : 25 , y : 60 , width : 300 , height : 150 )) myButtonLabel . font = UIFont . systemFont ( ofSize : UIFont . buttonFontSize ) myButtonLabel . text = \"UIButton\u306e\u30d5\u30a9\u30f3\u30c8\u30b5\u30a4\u30ba\" self . view . addSubview ( myButtonLabel ) // \u30ab\u30b9\u30bf\u30e0\u3057\u305f\u30d5\u30a9\u30f3\u30c8\u30b5\u30a4\u30ba(20)\u306e\u6587\u5b57\u5217\u3092\u30e9\u30d9\u30eb\u306b\u8868\u793a\u3059\u308b. let myCustomLabel : UILabel = UILabel ( frame : CGRect ( x : 25 , y : 90 , width : 300 , height : 150 )) myCustomLabel . font = UIFont . systemFont ( ofSize : CGFloat ( 20 )) myCustomLabel . text = \"\u30dd\u30a4\u30f3\u30c820\u306e\u30d5\u30a9\u30f3\u30c8\u30b5\u30a4\u30ba\" self . view . addSubview ( myCustomLabel ) // Italic Sysrem Font\u306e\u6587\u5b57\u5217\u3092\u30e9\u30d9\u30eb\u306b\u8868\u793a\u3059\u308b. let myItalicLabel : UILabel = UILabel ( frame : CGRect ( x : 25 , y : 150 , width : 300 , height : 150 )) myItalicLabel . font = UIFont . italicSystemFont ( ofSize : UIFont . labelFontSize ) myItalicLabel . text = \"Italic\u30d5\u30a9\u30f3\u30c8\" self . view . addSubview ( myItalicLabel ) // Bold\u306e\u6587\u5b57\u5217\u3092\u30e9\u30d9\u30eb\u306b\u8868\u793a\u3059\u308b. let myBoldLabel : UILabel = UILabel ( frame : CGRect ( x : 25 , y : 180 , width : 300 , height : 150 )) myBoldLabel . font = UIFont . boldSystemFont ( ofSize : UIFont . labelFontSize ) myBoldLabel . text = \"Bold\u30d5\u30a9\u30f3\u30c8\" self . view . addSubview ( myBoldLabel ) // Arial\u306e\u6587\u5b57\u5217\u3092\u30e9\u30d9\u30eb\u306b\u8868\u793a\u3059\u308b. let myArialLabel : UILabel = UILabel ( frame : CGRect ( x : 25 , y : 230 , width : 300 , height : 150 )) myArialLabel . font = UIFont ( name : \"ArilHebew\" , size : UIFont . labelFontSize ) myArialLabel . text = \"ArialHebrew\" self . view . addSubview ( myArialLabel ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 // // ViewController.swift // UIKit007 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // \u5c0f\u3055\u3081\u306e\u30d5\u30a9\u30f3\u30c8\u306e\u6587\u5b57\u5217\u3092\u30e9\u30d9\u30eb\u306b\u8868\u793a\u3059\u308b. let mySmallLabel : UILabel = UILabel ( frame : CGRectMake ( 25 , 0 , 300 , 150 )) mySmallLabel . text = \"\u5c0f\u3055\u3081\u306e\u30d5\u30a9\u30f3\u30c8\" mySmallLabel . font = UIFont . systemFontOfSize ( UIFont . smallSystemFontSize ()) self . view . addSubview ( mySmallLabel ) // \u30b7\u30b9\u30c6\u30e0\u306e\u6a19\u6e96\u306e\u30d5\u30a9\u30f3\u30c8\u30b5\u30a4\u30ba\u306e\u6587\u5b57\u5217\u3092\u30e9\u30d9\u30eb\u3092\u8868\u793a\u3059\u308b. let myNormalLabel : UILabel = UILabel ( frame : CGRectMake ( 25 , 30 , 200 , 150 )) myNormalLabel . font = UIFont . systemFontOfSize ( UIFont . systemFontSize ()) myNormalLabel . text = \"\u30b7\u30b9\u30c6\u30e0\u6a19\u6e96\u306e\u30d5\u30a9\u30f3\u30c8\u30b5\u30a4\u30ba\" self . view . addSubview ( myNormalLabel ) // UIButton\u7528\u306e\u30d5\u30a9\u30f3\u30c8\u30b5\u30a4\u30ba\u306e\u6587\u5b57\u5217\u3092\u30e9\u30d9\u30eb\u306b\u8868\u793a\u3059\u308b. let myButtonLabel : UILabel = UILabel ( frame : CGRectMake ( 25 , 60 , 300 , 150 )) myButtonLabel . font = UIFont . systemFontOfSize ( UIFont . buttonFontSize ()) myButtonLabel . text = \"UIButton\u306e\u30d5\u30a9\u30f3\u30c8\u30b5\u30a4\u30ba\" self . view . addSubview ( myButtonLabel ) // \u30ab\u30b9\u30bf\u30e0\u3057\u305f\u30d5\u30a9\u30f3\u30c8\u30b5\u30a4\u30ba(20)\u306e\u6587\u5b57\u5217\u3092\u30e9\u30d9\u30eb\u306b\u8868\u793a\u3059\u308b. let myCustomLabel : UILabel = UILabel ( frame : CGRectMake ( 25 , 90 , 300 , 150 )) myCustomLabel . font = UIFont . systemFontOfSize ( CGFloat ( 20 )) myCustomLabel . text = \"\u30dd\u30a4\u30f3\u30c820\u306e\u30d5\u30a9\u30f3\u30c8\u30b5\u30a4\u30ba\" self . view . addSubview ( myCustomLabel ) // Italic Sysrem Font\u306e\u6587\u5b57\u5217\u3092\u30e9\u30d9\u30eb\u306b\u8868\u793a\u3059\u308b. let myItalicLabel : UILabel = UILabel ( frame : CGRectMake ( 25 , 150 , 300 , 150 )) myItalicLabel . font = UIFont . italicSystemFontOfSize ( UIFont . labelFontSize ()) myItalicLabel . text = \"Italic\u30d5\u30a9\u30f3\u30c8\" self . view . addSubview ( myItalicLabel ) // Bold\u306e\u6587\u5b57\u5217\u3092\u30e9\u30d9\u30eb\u306b\u8868\u793a\u3059\u308b. let myBoldLabel : UILabel = UILabel ( frame : CGRectMake ( 25 , 180 , 300 , 150 )) myBoldLabel . font = UIFont . boldSystemFontOfSize ( UIFont . labelFontSize ()) myBoldLabel . text = \"Bold\u30d5\u30a9\u30f3\u30c8\" self . view . addSubview ( myBoldLabel ) // Arial\u306e\u6587\u5b57\u5217\u3092\u30e9\u30d9\u30eb\u306b\u8868\u793a\u3059\u308b. let myArialLabel : UILabel = UILabel ( frame : CGRectMake ( 25 , 230 , 300 , 150 )) myArialLabel . font = UIFont ( name : \"ArilHebew\" , size : UIFont . labelFontSize ()) myArialLabel . text = \"ArialHebrew\" self . view . addSubview ( myArialLabel ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } }","title":"UIFont\u3067\u6587\u5b57\u3092\u8868\u793a"},{"location":"1.uikit/007_uifont/#2330","text":"CGRectMake()\u304cCGRect()\u306b\u5909\u66f4. UIFont.systemFontOfSize(UIFont.smallSystemFontSize())\u304cUIFont.systemFont(ofSize: UIFont.smallSystemFontSize)\u306b\u5909\u66f4.","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/007_uifont/#reference","text":"UIFont https://developer.apple.com/reference/uikit/uifont","title":"Reference"},{"location":"1.uikit/008_uinotification/","text":"UserNotification\u3092\u8868\u793a Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 // // ViewController.swift // UIKit008 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit import UserNotifications class ViewController : UIViewController { private let BUTTON_NORMAL : Int = 1 private let BUTTON_FIRE : Int = 2 override func viewDidLoad () { super . viewDidLoad () // Notification\u306e\u8868\u793a\u8a31\u53ef\u3092\u3082\u3089\u3046. let center = UNUserNotificationCenter . current () center . requestAuthorization ( options : [. alert , . sound ]) { ( granted , error ) in } // \u3059\u3050\u306bNotification\u3092\u767a\u706b\u3059\u308b\u30dc\u30bf\u30f3. let buttonWidth : CGFloat = 200 let buttonHeight : CGFloat = 80 let posX : CGFloat = ( self . view . bounds . width - buttonWidth ) / 2 let posY : CGFloat = 200 let myButton : UIButton = UIButton ( frame : CGRect ( x : posX , y : posY , width : buttonWidth , height : buttonHeight )) myButton . backgroundColor = UIColor . orange myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . tag = BUTTON_NORMAL myButton . setTitle ( \"Notification\" , for : . normal ) myButton . addTarget ( self , action : #selector ( onClickMyButton ( sender :)), for : . touchDown ) view . addSubview ( myButton ) // \u6642\u9593\u3092\u304a\u3044\u3066Notification\u3092\u767a\u706b\u3059\u308b\u30dc\u30bf\u30f3. let posFireX : CGFloat = ( self . view . bounds . width - buttonWidth ) / 2 let posFireY : CGFloat = 400 let myFireButton : UIButton = UIButton ( frame : CGRect ( x : posFireX , y : posFireY , width : buttonWidth , height : buttonHeight )) myFireButton . backgroundColor = UIColor . blue myFireButton . layer . masksToBounds = true myFireButton . layer . cornerRadius = 20.0 myFireButton . tag = BUTTON_FIRE myFireButton . setTitle ( \"Fire Notification\" , for : . normal ) myFireButton . addTarget ( self , action : #selector ( onClickMyButton ( sender :)), for : . touchDown ) view . addSubview ( myFireButton ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8. */ internal func onClickMyButton ( sender : UIButton ) { print ( \"onClickMyButton\" ) if sender . tag == BUTTON_NORMAL { showNotification () } else if sender . tag == BUTTON_FIRE { showNotificationFire () } } /* Notification\u3092\u8868\u793a. */ private func showNotification () { print ( \"showNotification\" ) // Notification\u3092\u751f\u6210. let content = UNMutableNotificationContent () // Title\u3092\u4ee3\u5165\u3059\u308b. content . title = \"Title1\" // Body\u3092\u4ee3\u5165\u3059\u308b. content . body = \"Hello Notification\" // \u97f3\u3092\u8a2d\u5b9a\u3059\u308b. content . sound = UNNotificationSound . default () // Request\u3092\u751f\u6210\u3059\u308b. let request = UNNotificationRequest . init ( identifier : \"Title1\" , content : content , trigger : nil ) // Notication\u3092\u767a\u884c\u3059\u308b. let center = UNUserNotificationCenter . current () center . add ( request ) { ( error ) in print ( error ) } } /* Notification\u3092\u8868\u793a(10\u79d2\u5f8c) */ private func showNotificationFire () { // Notification\u3092\u751f\u6210. let content = UNMutableNotificationContent () // Title\u3092\u4ee3\u5165\u3059\u308b. content . title = \"Title1\" // Body\u3092\u4ee3\u5165\u3059\u308b. content . body = \"Hello Notification\" // \u97f3\u3092\u8a2d\u5b9a\u3059\u308b. content . sound = UNNotificationSound . default () // Trigger\u3092\u751f\u6210\u3059\u308b. let trigger = UNTimeIntervalNotificationTrigger . init ( timeInterval : 5 , repeats : false ) // Request\u3092\u751f\u6210\u3059\u308b. let request = UNNotificationRequest . init ( identifier : \"Title1\" , content : content , trigger : trigger ) // Notication\u3092\u767a\u884c\u3059\u308b. let center = UNUserNotificationCenter . current () center . add ( request ) { ( error ) in print ( error ) } } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 // // ViewController.swift // UIKit008 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private let BUTTON_NORMAL : Int = 1 private let BUTTON_FIRE : Int = 2 override func viewDidLoad () { super . viewDidLoad () // \u30a2\u30e9\u30fc\u30c8\u306e\u8868\u793a\u8a31\u53ef\u3092\u3082\u3089\u3046. let setting = UIUserNotificationSettings ( forTypes : [. Sound , . Alert ], categories : nil ) UIApplication . sharedApplication (). registerUserNotificationSettings ( setting ) // \u3059\u3050\u306bNotification\u3092\u767a\u706b\u3059\u308b\u30dc\u30bf\u30f3. let buttonWidth : CGFloat = 200 let buttonHeight : CGFloat = 80 let posX : CGFloat = ( self . view . bounds . width - buttonWidth ) / 2 let posY : CGFloat = 200 let myButton : UIButton = UIButton ( frame : CGRectMake ( posX , posY , buttonWidth , buttonHeight )) myButton . backgroundColor = UIColor . orangeColor () myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . tag = BUTTON_NORMAL myButton . setTitle ( \"Notification\" , forState : . Normal ) myButton . addTarget ( self , action : #selector ( onClickMyButton ( _ :)), forControlEvents : . TouchDown ) view . addSubview ( myButton ) // \u6642\u9593\u3092\u304a\u3044\u3066Notification\u3092\u767a\u706b\u3059\u308b\u30dc\u30bf\u30f3. let posFireX : CGFloat = ( self . view . bounds . width - buttonWidth ) / 2 let posFireY : CGFloat = 400 let myFireButton : UIButton = UIButton ( frame : CGRectMake ( posFireX , posFireY , buttonWidth , buttonHeight )) myFireButton . backgroundColor = UIColor . blueColor () myFireButton . layer . masksToBounds = true myFireButton . layer . cornerRadius = 20.0 myFireButton . tag = BUTTON_FIRE myFireButton . setTitle ( \"Fire Notification\" , forState : . Normal ) myFireButton . addTarget ( self , action : #selector ( onClickMyButton ( _ :)), forControlEvents : . TouchDown ) view . addSubview ( myFireButton ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8. */ internal func onClickMyButton ( sender : UIButton ) { print ( \"onClickMyButton\" ) if sender . tag == BUTTON_NORMAL { showNotification () } else if sender . tag == BUTTON_FIRE { showNotificationFire () } } /* Notification\u3092\u8868\u793a. */ private func showNotification () { print ( \"showNotification\" ) // Notification\u3092\u751f\u6210. let myNotification : UILocalNotification = UILocalNotification () // \u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u4ee3\u5165\u3059\u308b. myNotification . alertBody = \"TEST1\" // Timezone\u3092\u8a2d\u5b9a\u3059\u308b. myNotification . timeZone = NSTimeZone . defaultTimeZone () // Notication\u3092\u767a\u884c\u3059\u308b. UIApplication . sharedApplication (). scheduleLocalNotification ( myNotification ) } /* Notification\u3092\u8868\u793a(10\u79d2\u5f8c) */ private func showNotificationFire () { print ( \"showNotificationFire\" ) // Notification\u3092\u751f\u6210. let myFireNotification : UILocalNotification = UILocalNotification () // \u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u4ee3\u5165\u3059\u308b. myFireNotification . alertBody = \"TEST2\" // \u518d\u751f\u30b5\u30a6\u30f3\u30c9\u3092\u8a2d\u5b9a\u3059\u308b. myFireNotification . soundName = UILocalNotificationDefaultSoundName // Timezone\u3092\u8a2d\u5b9a\u3059\u308b. myFireNotification . timeZone = NSTimeZone . defaultTimeZone () // 10\u79d2\u5f8c\u306b\u8a2d\u5b9a\u3059\u308b. myFireNotification . fireDate = NSDate ( timeIntervalSinceNow : 10 ) // Notification\u3092\u767a\u884c\u3059\u308b. UIApplication . sharedApplication (). scheduleLocalNotification ( myFireNotification ) } } 2.3\u30683.0\u306e\u5dee\u5206 UILocalNotification\u304cDepricate\u306b\u3066\u3001UNUserNotificationCenter\u306b\u5909\u66f4 Reference UserNotifications https://developer.apple.com/reference/usernotifications","title":"UserNotification\u3092\u8868\u793a"},{"location":"1.uikit/008_uinotification/#usernotification","text":"Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 // // ViewController.swift // UIKit008 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit import UserNotifications class ViewController : UIViewController { private let BUTTON_NORMAL : Int = 1 private let BUTTON_FIRE : Int = 2 override func viewDidLoad () { super . viewDidLoad () // Notification\u306e\u8868\u793a\u8a31\u53ef\u3092\u3082\u3089\u3046. let center = UNUserNotificationCenter . current () center . requestAuthorization ( options : [. alert , . sound ]) { ( granted , error ) in } // \u3059\u3050\u306bNotification\u3092\u767a\u706b\u3059\u308b\u30dc\u30bf\u30f3. let buttonWidth : CGFloat = 200 let buttonHeight : CGFloat = 80 let posX : CGFloat = ( self . view . bounds . width - buttonWidth ) / 2 let posY : CGFloat = 200 let myButton : UIButton = UIButton ( frame : CGRect ( x : posX , y : posY , width : buttonWidth , height : buttonHeight )) myButton . backgroundColor = UIColor . orange myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . tag = BUTTON_NORMAL myButton . setTitle ( \"Notification\" , for : . normal ) myButton . addTarget ( self , action : #selector ( onClickMyButton ( sender :)), for : . touchDown ) view . addSubview ( myButton ) // \u6642\u9593\u3092\u304a\u3044\u3066Notification\u3092\u767a\u706b\u3059\u308b\u30dc\u30bf\u30f3. let posFireX : CGFloat = ( self . view . bounds . width - buttonWidth ) / 2 let posFireY : CGFloat = 400 let myFireButton : UIButton = UIButton ( frame : CGRect ( x : posFireX , y : posFireY , width : buttonWidth , height : buttonHeight )) myFireButton . backgroundColor = UIColor . blue myFireButton . layer . masksToBounds = true myFireButton . layer . cornerRadius = 20.0 myFireButton . tag = BUTTON_FIRE myFireButton . setTitle ( \"Fire Notification\" , for : . normal ) myFireButton . addTarget ( self , action : #selector ( onClickMyButton ( sender :)), for : . touchDown ) view . addSubview ( myFireButton ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8. */ internal func onClickMyButton ( sender : UIButton ) { print ( \"onClickMyButton\" ) if sender . tag == BUTTON_NORMAL { showNotification () } else if sender . tag == BUTTON_FIRE { showNotificationFire () } } /* Notification\u3092\u8868\u793a. */ private func showNotification () { print ( \"showNotification\" ) // Notification\u3092\u751f\u6210. let content = UNMutableNotificationContent () // Title\u3092\u4ee3\u5165\u3059\u308b. content . title = \"Title1\" // Body\u3092\u4ee3\u5165\u3059\u308b. content . body = \"Hello Notification\" // \u97f3\u3092\u8a2d\u5b9a\u3059\u308b. content . sound = UNNotificationSound . default () // Request\u3092\u751f\u6210\u3059\u308b. let request = UNNotificationRequest . init ( identifier : \"Title1\" , content : content , trigger : nil ) // Notication\u3092\u767a\u884c\u3059\u308b. let center = UNUserNotificationCenter . current () center . add ( request ) { ( error ) in print ( error ) } } /* Notification\u3092\u8868\u793a(10\u79d2\u5f8c) */ private func showNotificationFire () { // Notification\u3092\u751f\u6210. let content = UNMutableNotificationContent () // Title\u3092\u4ee3\u5165\u3059\u308b. content . title = \"Title1\" // Body\u3092\u4ee3\u5165\u3059\u308b. content . body = \"Hello Notification\" // \u97f3\u3092\u8a2d\u5b9a\u3059\u308b. content . sound = UNNotificationSound . default () // Trigger\u3092\u751f\u6210\u3059\u308b. let trigger = UNTimeIntervalNotificationTrigger . init ( timeInterval : 5 , repeats : false ) // Request\u3092\u751f\u6210\u3059\u308b. let request = UNNotificationRequest . init ( identifier : \"Title1\" , content : content , trigger : trigger ) // Notication\u3092\u767a\u884c\u3059\u308b. let center = UNUserNotificationCenter . current () center . add ( request ) { ( error ) in print ( error ) } } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 // // ViewController.swift // UIKit008 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private let BUTTON_NORMAL : Int = 1 private let BUTTON_FIRE : Int = 2 override func viewDidLoad () { super . viewDidLoad () // \u30a2\u30e9\u30fc\u30c8\u306e\u8868\u793a\u8a31\u53ef\u3092\u3082\u3089\u3046. let setting = UIUserNotificationSettings ( forTypes : [. Sound , . Alert ], categories : nil ) UIApplication . sharedApplication (). registerUserNotificationSettings ( setting ) // \u3059\u3050\u306bNotification\u3092\u767a\u706b\u3059\u308b\u30dc\u30bf\u30f3. let buttonWidth : CGFloat = 200 let buttonHeight : CGFloat = 80 let posX : CGFloat = ( self . view . bounds . width - buttonWidth ) / 2 let posY : CGFloat = 200 let myButton : UIButton = UIButton ( frame : CGRectMake ( posX , posY , buttonWidth , buttonHeight )) myButton . backgroundColor = UIColor . orangeColor () myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . tag = BUTTON_NORMAL myButton . setTitle ( \"Notification\" , forState : . Normal ) myButton . addTarget ( self , action : #selector ( onClickMyButton ( _ :)), forControlEvents : . TouchDown ) view . addSubview ( myButton ) // \u6642\u9593\u3092\u304a\u3044\u3066Notification\u3092\u767a\u706b\u3059\u308b\u30dc\u30bf\u30f3. let posFireX : CGFloat = ( self . view . bounds . width - buttonWidth ) / 2 let posFireY : CGFloat = 400 let myFireButton : UIButton = UIButton ( frame : CGRectMake ( posFireX , posFireY , buttonWidth , buttonHeight )) myFireButton . backgroundColor = UIColor . blueColor () myFireButton . layer . masksToBounds = true myFireButton . layer . cornerRadius = 20.0 myFireButton . tag = BUTTON_FIRE myFireButton . setTitle ( \"Fire Notification\" , forState : . Normal ) myFireButton . addTarget ( self , action : #selector ( onClickMyButton ( _ :)), forControlEvents : . TouchDown ) view . addSubview ( myFireButton ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8. */ internal func onClickMyButton ( sender : UIButton ) { print ( \"onClickMyButton\" ) if sender . tag == BUTTON_NORMAL { showNotification () } else if sender . tag == BUTTON_FIRE { showNotificationFire () } } /* Notification\u3092\u8868\u793a. */ private func showNotification () { print ( \"showNotification\" ) // Notification\u3092\u751f\u6210. let myNotification : UILocalNotification = UILocalNotification () // \u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u4ee3\u5165\u3059\u308b. myNotification . alertBody = \"TEST1\" // Timezone\u3092\u8a2d\u5b9a\u3059\u308b. myNotification . timeZone = NSTimeZone . defaultTimeZone () // Notication\u3092\u767a\u884c\u3059\u308b. UIApplication . sharedApplication (). scheduleLocalNotification ( myNotification ) } /* Notification\u3092\u8868\u793a(10\u79d2\u5f8c) */ private func showNotificationFire () { print ( \"showNotificationFire\" ) // Notification\u3092\u751f\u6210. let myFireNotification : UILocalNotification = UILocalNotification () // \u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u4ee3\u5165\u3059\u308b. myFireNotification . alertBody = \"TEST2\" // \u518d\u751f\u30b5\u30a6\u30f3\u30c9\u3092\u8a2d\u5b9a\u3059\u308b. myFireNotification . soundName = UILocalNotificationDefaultSoundName // Timezone\u3092\u8a2d\u5b9a\u3059\u308b. myFireNotification . timeZone = NSTimeZone . defaultTimeZone () // 10\u79d2\u5f8c\u306b\u8a2d\u5b9a\u3059\u308b. myFireNotification . fireDate = NSDate ( timeIntervalSinceNow : 10 ) // Notification\u3092\u767a\u884c\u3059\u308b. UIApplication . sharedApplication (). scheduleLocalNotification ( myFireNotification ) } }","title":"UserNotification\u3092\u8868\u793a"},{"location":"1.uikit/008_uinotification/#2330","text":"UILocalNotification\u304cDepricate\u306b\u3066\u3001UNUserNotificationCenter\u306b\u5909\u66f4","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/008_uinotification/#reference","text":"UserNotifications https://developer.apple.com/reference/usernotifications","title":"Reference"},{"location":"1.uikit/009_uiwebview/","text":"UIWebView\u3067Web\u30da\u30fc\u30b8\u3092\u8868\u793a UIWebView\u306fiOS 12.0\u304b\u3089\u975e\u63a8\u5968 Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 // // ViewController.swift // UIKit009 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UIWebViewDelegate { private var myWebView : UIWebView ! override func viewDidLoad () { super . viewDidLoad () // WebView\u306e\u751f\u6210. myWebView = UIWebView () // Deletegate\u3092\u81ea\u8eab\u306b\u8a2d\u5b9a. myWebView . delegate = self // WebView\u306e\u30b5\u30a4\u30ba\u3092\u8a2d\u5b9a. myWebView . frame = self . view . bounds // URL\u3092\u8a2d\u5b9a. let url : URL = URL ( string : \"http://www.fabo.io\" ) ! // \u30ea\u30a8\u30b9\u30c8\u3092\u767a\u884c\u3059\u308b. let request : NSURLRequest = NSURLRequest ( url : url ) // \u30ea\u30af\u30a8\u30b9\u30c8\u3092\u767a\u884c\u3059\u308b. myWebView . loadRequest ( request as URLRequest ) // View\u306b\u8ffd\u52a0\u3059\u308b self . view . addSubview ( myWebView ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } /* Page\u304c\u5168\u3066\u8aad\u307f\u7d42\u308f\u3063\u305f\u3089\u547c\u3070\u308c\u308b. */ func webViewDidFinishLoad ( _ webView : UIWebView ) { print ( \"webViewDidFinishLoad\" ) } /* Page\u304cLoad\u3055\u308c\u59cb\u3081\u305f\u6642\u3001\u547c\u3070\u308c\u308b. */ func webViewDidStartLoad ( _ webView : UIWebView ) { print ( \"webViewDidStartLoad\" ) } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 // // ViewController.swift // UIKit009 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class VipewController : UIViewController , UIWebViewDelegate { private var myWebView : UIWebView ! override func viewDidLoad () { super . viewDidLoad () // WebView\u306e\u751f\u6210. myWebView = UIWebView () // Deletegate\u3092\u81ea\u8eab\u306b\u8a2d\u5b9a. myWebView . delegate = self // WebView\u306e\u30b5\u30a4\u30ba\u3092\u8a2d\u5b9a. myWebView . frame = self . view . bounds // URL\u3092\u8a2d\u5b9a. let url : NSURL = NSURL ( string : \"http://www.fabo.io\" ) ! // \u30ea\u30a8\u30b9\u30c8\u3092\u767a\u884c\u3059\u308b. let request : NSURLRequest = NSURLRequest ( URL : url ) // \u30ea\u30af\u30a8\u30b9\u30c8\u3092\u767a\u884c\u3059\u308b. myWebView . loadRequest ( request ) // View\u306b\u8ffd\u52a0\u3059\u308b self . view . addSubview ( myWebView ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } /* Page\u304c\u5168\u3066\u8aad\u307f\u7d42\u308f\u3063\u305f\u3089\u547c\u3070\u308c\u308b. */ func webViewDidFinishLoad ( webView : UIWebView ) { print ( \"webViewDidFinishLoad\" ) } /* Page\u304cLoad\u3055\u308c\u59cb\u3081\u305f\u6642\u3001\u547c\u3070\u308c\u308b. */ func webViewDidStartLoad ( webView : UIWebView ) { print ( \"webViewDidStartLoad\" ) } } 2.3\u30683.0\u306e\u5dee\u5206 ATS\u306e\u30ad\u30fc\u304cNSTemporaryExceptionAllowsInsecureHTTPLoads\u304b\u3089NSExceptionAllowsInsecureHTTPLoads\u306b\u5909\u66f4. ATS\u306e\u8a2d\u5b9a(3.0) info.plist info.plist 1 2 3 4 5 6 7 8 9 10 11 <key> NSAppTransportSecurity </key> <dict> <key> NSExceptionDomains </key> <dict> <key> www.fabo.io </key> <dict> <key> NSExceptionAllowsInsecureHTTPLoads </key> <true/> </dict> </dict> </dict> ATS\u306e\u8a2d\u5b9a(2.3) info.plist info.plist 1 2 3 4 5 6 7 8 9 10 11 <key> NSAppTransportSecurity </key> <dict> <key> NSExceptionDomains </key> <dict> <key> www.fabo.io </key> <dict> <key> NSTemporaryExceptionAllowsInsecureHTTPLoads </key> <true/> </dict> </dict> </dict> Reference UserNotifications https://developer.apple.com/reference/uikit/uiwebview","title":"UIWebView\u3067Web\u30da\u30fc\u30b8\u3092\u8868\u793a"},{"location":"1.uikit/009_uiwebview/#uiwebviewweb","text":"UIWebView\u306fiOS 12.0\u304b\u3089\u975e\u63a8\u5968 Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 // // ViewController.swift // UIKit009 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UIWebViewDelegate { private var myWebView : UIWebView ! override func viewDidLoad () { super . viewDidLoad () // WebView\u306e\u751f\u6210. myWebView = UIWebView () // Deletegate\u3092\u81ea\u8eab\u306b\u8a2d\u5b9a. myWebView . delegate = self // WebView\u306e\u30b5\u30a4\u30ba\u3092\u8a2d\u5b9a. myWebView . frame = self . view . bounds // URL\u3092\u8a2d\u5b9a. let url : URL = URL ( string : \"http://www.fabo.io\" ) ! // \u30ea\u30a8\u30b9\u30c8\u3092\u767a\u884c\u3059\u308b. let request : NSURLRequest = NSURLRequest ( url : url ) // \u30ea\u30af\u30a8\u30b9\u30c8\u3092\u767a\u884c\u3059\u308b. myWebView . loadRequest ( request as URLRequest ) // View\u306b\u8ffd\u52a0\u3059\u308b self . view . addSubview ( myWebView ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } /* Page\u304c\u5168\u3066\u8aad\u307f\u7d42\u308f\u3063\u305f\u3089\u547c\u3070\u308c\u308b. */ func webViewDidFinishLoad ( _ webView : UIWebView ) { print ( \"webViewDidFinishLoad\" ) } /* Page\u304cLoad\u3055\u308c\u59cb\u3081\u305f\u6642\u3001\u547c\u3070\u308c\u308b. */ func webViewDidStartLoad ( _ webView : UIWebView ) { print ( \"webViewDidStartLoad\" ) } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 // // ViewController.swift // UIKit009 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class VipewController : UIViewController , UIWebViewDelegate { private var myWebView : UIWebView ! override func viewDidLoad () { super . viewDidLoad () // WebView\u306e\u751f\u6210. myWebView = UIWebView () // Deletegate\u3092\u81ea\u8eab\u306b\u8a2d\u5b9a. myWebView . delegate = self // WebView\u306e\u30b5\u30a4\u30ba\u3092\u8a2d\u5b9a. myWebView . frame = self . view . bounds // URL\u3092\u8a2d\u5b9a. let url : NSURL = NSURL ( string : \"http://www.fabo.io\" ) ! // \u30ea\u30a8\u30b9\u30c8\u3092\u767a\u884c\u3059\u308b. let request : NSURLRequest = NSURLRequest ( URL : url ) // \u30ea\u30af\u30a8\u30b9\u30c8\u3092\u767a\u884c\u3059\u308b. myWebView . loadRequest ( request ) // View\u306b\u8ffd\u52a0\u3059\u308b self . view . addSubview ( myWebView ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } /* Page\u304c\u5168\u3066\u8aad\u307f\u7d42\u308f\u3063\u305f\u3089\u547c\u3070\u308c\u308b. */ func webViewDidFinishLoad ( webView : UIWebView ) { print ( \"webViewDidFinishLoad\" ) } /* Page\u304cLoad\u3055\u308c\u59cb\u3081\u305f\u6642\u3001\u547c\u3070\u308c\u308b. */ func webViewDidStartLoad ( webView : UIWebView ) { print ( \"webViewDidStartLoad\" ) } }","title":"UIWebView\u3067Web\u30da\u30fc\u30b8\u3092\u8868\u793a"},{"location":"1.uikit/009_uiwebview/#2330","text":"ATS\u306e\u30ad\u30fc\u304cNSTemporaryExceptionAllowsInsecureHTTPLoads\u304b\u3089NSExceptionAllowsInsecureHTTPLoads\u306b\u5909\u66f4.","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/009_uiwebview/#ats30","text":"info.plist info.plist 1 2 3 4 5 6 7 8 9 10 11 <key> NSAppTransportSecurity </key> <dict> <key> NSExceptionDomains </key> <dict> <key> www.fabo.io </key> <dict> <key> NSExceptionAllowsInsecureHTTPLoads </key> <true/> </dict> </dict> </dict>","title":"ATS\u306e\u8a2d\u5b9a(3.0)"},{"location":"1.uikit/009_uiwebview/#ats23","text":"info.plist info.plist 1 2 3 4 5 6 7 8 9 10 11 <key> NSAppTransportSecurity </key> <dict> <key> NSExceptionDomains </key> <dict> <key> www.fabo.io </key> <dict> <key> NSTemporaryExceptionAllowsInsecureHTTPLoads </key> <true/> </dict> </dict> </dict>","title":"ATS\u306e\u8a2d\u5b9a(2.3)"},{"location":"1.uikit/009_uiwebview/#reference","text":"UserNotifications https://developer.apple.com/reference/uikit/uiwebview","title":"Reference"},{"location":"1.uikit/010_uialertcontroller/","text":"UIAlertController\u3067\u30a2\u30e9\u30fc\u30c8\u3092\u8868\u793a Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 // // ViewController.swift // UIKit010 // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // View\u306e\u80cc\u666f\u3092Cyan\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . cyan // Button\u306e\u5b9a\u7fa9\u3059\u308b. let myButton : UIButton = UIButton () let buttonWidth : CGFloat = 200 let buttonHeight : CGFloat = 40 let posX : CGFloat = ( self . view . bounds . width - buttonWidth ) / 2 let posY : CGFloat = 200 myButton . frame = CGRect ( x : posX , y : posY , width : buttonWidth , height : buttonHeight ) myButton . backgroundColor = UIColor . red myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . setTitle ( \"UIAlert\u3092\u767a\u52d5\" , for : . normal ) myButton . setTitleColor ( UIColor . white , for : . normal ) myButton . addTarget ( self , action : #selector ( onClickMyButton ( sender :)), for : . touchDown ) // \u30dc\u30bf\u30f3\u3092View\u306b\u8ffd\u52a0\u3059\u308b self . view . addSubview ( myButton ) } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8 */ @objc internal func onClickMyButton ( sender : UIButton ){ // UIAlertController\u3092\u4f5c\u6210\u3059\u308b. let myAlert : UIAlertController = UIAlertController ( title : \"\u30bf\u30a4\u30c8\u30eb\" , message : \"\u30e1\u30c3\u30bb\u30fc\u30b8\" , preferredStyle : . alert ) // OK\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3059\u308b. let myOkAction = UIAlertAction ( title : \"OK\" , style : . default ) { action in print ( \"Action OK!!\" ) } // OK\u306eAction\u3092\u8ffd\u52a0\u3059\u308b. myAlert . addAction ( myOkAction ) // UIAlert\u3092\u767a\u52d5\u3059\u308b. present ( myAlert , animated : true , completion : nil ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 // // ViewController.swift // UIKit010 // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // View\u306e\u80cc\u666f\u3092Cyan\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . cyan // Button\u306e\u5b9a\u7fa9\u3059\u308b. let myButton : UIButton = UIButton () let buttonWidth : CGFloat = 200 let buttonHeight : CGFloat = 40 let posX : CGFloat = ( self . view . bounds . width - buttonWidth ) / 2 let posY : CGFloat = 200 myButton . frame = CGRect ( x : posX , y : posY , width : buttonWidth , height : buttonHeight ) myButton . backgroundColor = UIColor . red myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . setTitle ( \"UIAlert\u3092\u767a\u52d5\" , for : . normal ) myButton . setTitleColor ( UIColor . white , for : . normal ) myButton . addTarget ( self , action : #selector ( onClickMyButton ( sender :)), for : . touchDown ) // \u30dc\u30bf\u30f3\u3092View\u306b\u8ffd\u52a0\u3059\u308b self . view . addSubview ( myButton ) } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8 */ internal func onClickMyButton ( sender : UIButton ){ // UIAlertController\u3092\u4f5c\u6210\u3059\u308b. let myAlert : UIAlertController = UIAlertController ( title : \"\u30bf\u30a4\u30c8\u30eb\" , message : \"\u30e1\u30c3\u30bb\u30fc\u30b8\" , preferredStyle : . alert ) // OK\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3059\u308b. let myOkAction = UIAlertAction ( title : \"OK\" , style : . default ) { action in print ( \"Action OK!!\" ) } // OK\u306eAction\u3092\u8ffd\u52a0\u3059\u308b. myAlert . addAction ( myOkAction ) // UIAlert\u3092\u767a\u52d5\u3059\u308b. present ( myAlert , animated : true , completion : nil ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 // // ViewController.swift // UIKit010 // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // View\u306e\u80cc\u666f\u3092Cyan\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . cyanColor () // Button\u306e\u5b9a\u7fa9\u3059\u308b. let myButton : UIButton = UIButton () let buttonWidth : CGFloat = 200 let buttonHeight : CGFloat = 40 let posX : CGFloat = ( self . view . bounds . width - buttonWidth ) / 2 let posY : CGFloat = 200 myButton . frame = CGRectMake ( posX , posY , buttonWidth , buttonHeight ) myButton . backgroundColor = UIColor . redColor () myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . setTitle ( \"UIAlert\u3092\u767a\u52d5\" , forState : . Normal ) myButton . setTitleColor ( UIColor . whiteColor (), forState : . Normal ) myButton . addTarget ( self , action : #selector ( onClickMyButton ( _ :)), forControlEvents : . TouchDown ) // \u30dc\u30bf\u30f3\u3092View\u306b\u8ffd\u52a0\u3059\u308b self . view . addSubview ( myButton ) } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8 */ internal func onClickMyButton ( sender : UIButton ){ // UIAlertController\u3092\u4f5c\u6210\u3059\u308b. let myAlert : UIAlertController = UIAlertController ( title : \"\u30bf\u30a4\u30c8\u30eb\" , message : \"\u30e1\u30c3\u30bb\u30fc\u30b8\" , preferredStyle : . Alert ) // OK\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3059\u308b. let myOkAction = UIAlertAction ( title : \"OK\" , style : . Default ) { action in print ( \"Action OK!!\" ) } // OK\u306eAction\u3092\u8ffd\u52a0\u3059\u308b. myAlert . addAction ( myOkAction ) // UIAlert\u3092\u767a\u52d5\u3059\u308b. presentViewController ( myAlert , animated : true , completion : nil ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } 3.0\u30684.0\u306e\u5dee\u5206 internal func onClickMyButton(sender: UIButton) \u306b @objc \u3092\u8ffd\u52a0 2.3\u30683.0\u306e\u5dee\u5206 presentViewController()\u304cpresent()\u306b\u5909\u66f4. Reference UserNotifications https://developer.apple.com/reference/uikit/uialertcontroller","title":"UIAlertController\u3067\u30a2\u30e9\u30fc\u30c8\u3092\u8868\u793a"},{"location":"1.uikit/010_uialertcontroller/#uialertcontroller","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 // // ViewController.swift // UIKit010 // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // View\u306e\u80cc\u666f\u3092Cyan\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . cyan // Button\u306e\u5b9a\u7fa9\u3059\u308b. let myButton : UIButton = UIButton () let buttonWidth : CGFloat = 200 let buttonHeight : CGFloat = 40 let posX : CGFloat = ( self . view . bounds . width - buttonWidth ) / 2 let posY : CGFloat = 200 myButton . frame = CGRect ( x : posX , y : posY , width : buttonWidth , height : buttonHeight ) myButton . backgroundColor = UIColor . red myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . setTitle ( \"UIAlert\u3092\u767a\u52d5\" , for : . normal ) myButton . setTitleColor ( UIColor . white , for : . normal ) myButton . addTarget ( self , action : #selector ( onClickMyButton ( sender :)), for : . touchDown ) // \u30dc\u30bf\u30f3\u3092View\u306b\u8ffd\u52a0\u3059\u308b self . view . addSubview ( myButton ) } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8 */ @objc internal func onClickMyButton ( sender : UIButton ){ // UIAlertController\u3092\u4f5c\u6210\u3059\u308b. let myAlert : UIAlertController = UIAlertController ( title : \"\u30bf\u30a4\u30c8\u30eb\" , message : \"\u30e1\u30c3\u30bb\u30fc\u30b8\" , preferredStyle : . alert ) // OK\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3059\u308b. let myOkAction = UIAlertAction ( title : \"OK\" , style : . default ) { action in print ( \"Action OK!!\" ) } // OK\u306eAction\u3092\u8ffd\u52a0\u3059\u308b. myAlert . addAction ( myOkAction ) // UIAlert\u3092\u767a\u52d5\u3059\u308b. present ( myAlert , animated : true , completion : nil ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 // // ViewController.swift // UIKit010 // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // View\u306e\u80cc\u666f\u3092Cyan\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . cyan // Button\u306e\u5b9a\u7fa9\u3059\u308b. let myButton : UIButton = UIButton () let buttonWidth : CGFloat = 200 let buttonHeight : CGFloat = 40 let posX : CGFloat = ( self . view . bounds . width - buttonWidth ) / 2 let posY : CGFloat = 200 myButton . frame = CGRect ( x : posX , y : posY , width : buttonWidth , height : buttonHeight ) myButton . backgroundColor = UIColor . red myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . setTitle ( \"UIAlert\u3092\u767a\u52d5\" , for : . normal ) myButton . setTitleColor ( UIColor . white , for : . normal ) myButton . addTarget ( self , action : #selector ( onClickMyButton ( sender :)), for : . touchDown ) // \u30dc\u30bf\u30f3\u3092View\u306b\u8ffd\u52a0\u3059\u308b self . view . addSubview ( myButton ) } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8 */ internal func onClickMyButton ( sender : UIButton ){ // UIAlertController\u3092\u4f5c\u6210\u3059\u308b. let myAlert : UIAlertController = UIAlertController ( title : \"\u30bf\u30a4\u30c8\u30eb\" , message : \"\u30e1\u30c3\u30bb\u30fc\u30b8\" , preferredStyle : . alert ) // OK\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3059\u308b. let myOkAction = UIAlertAction ( title : \"OK\" , style : . default ) { action in print ( \"Action OK!!\" ) } // OK\u306eAction\u3092\u8ffd\u52a0\u3059\u308b. myAlert . addAction ( myOkAction ) // UIAlert\u3092\u767a\u52d5\u3059\u308b. present ( myAlert , animated : true , completion : nil ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 // // ViewController.swift // UIKit010 // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // View\u306e\u80cc\u666f\u3092Cyan\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . cyanColor () // Button\u306e\u5b9a\u7fa9\u3059\u308b. let myButton : UIButton = UIButton () let buttonWidth : CGFloat = 200 let buttonHeight : CGFloat = 40 let posX : CGFloat = ( self . view . bounds . width - buttonWidth ) / 2 let posY : CGFloat = 200 myButton . frame = CGRectMake ( posX , posY , buttonWidth , buttonHeight ) myButton . backgroundColor = UIColor . redColor () myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . setTitle ( \"UIAlert\u3092\u767a\u52d5\" , forState : . Normal ) myButton . setTitleColor ( UIColor . whiteColor (), forState : . Normal ) myButton . addTarget ( self , action : #selector ( onClickMyButton ( _ :)), forControlEvents : . TouchDown ) // \u30dc\u30bf\u30f3\u3092View\u306b\u8ffd\u52a0\u3059\u308b self . view . addSubview ( myButton ) } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8 */ internal func onClickMyButton ( sender : UIButton ){ // UIAlertController\u3092\u4f5c\u6210\u3059\u308b. let myAlert : UIAlertController = UIAlertController ( title : \"\u30bf\u30a4\u30c8\u30eb\" , message : \"\u30e1\u30c3\u30bb\u30fc\u30b8\" , preferredStyle : . Alert ) // OK\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3059\u308b. let myOkAction = UIAlertAction ( title : \"OK\" , style : . Default ) { action in print ( \"Action OK!!\" ) } // OK\u306eAction\u3092\u8ffd\u52a0\u3059\u308b. myAlert . addAction ( myOkAction ) // UIAlert\u3092\u767a\u52d5\u3059\u308b. presentViewController ( myAlert , animated : true , completion : nil ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } }","title":"UIAlertController\u3067\u30a2\u30e9\u30fc\u30c8\u3092\u8868\u793a"},{"location":"1.uikit/010_uialertcontroller/#3040","text":"internal func onClickMyButton(sender: UIButton) \u306b @objc \u3092\u8ffd\u52a0","title":"3.0\u30684.0\u306e\u5dee\u5206"},{"location":"1.uikit/010_uialertcontroller/#2330","text":"presentViewController()\u304cpresent()\u306b\u5909\u66f4.","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/010_uialertcontroller/#reference","text":"UserNotifications https://developer.apple.com/reference/uikit/uialertcontroller","title":"Reference"},{"location":"1.uikit/011_uipickerview/","text":"UIPickerView\u3067\u5024\u306e\u9078\u629e Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 // // ViewController.swift // UIKit011 // import UIKit class ViewController : UIViewController , UIPickerViewDelegate , UIPickerViewDataSource { // UIPickerView. private var myUIPicker : UIPickerView ! // \u8868\u793a\u3059\u308b\u5024\u306e\u914d\u5217. private let myValues : NSArray = [ \"\u305d\u306e\u4e00\" , \"\u305d\u306e\u4e8c\" , \"\u305d\u306e\u4e09\" , \"\u305d\u306e\u56db\" ] override func viewDidLoad () { super . viewDidLoad () // UIPickerView\u3092\u751f\u6210. myUIPicker = UIPickerView () // \u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3059\u308b. myUIPicker . frame = CGRect ( x : 0 , y : 0 , width : self . view . bounds . width , height : 180.0 ) // Delegate\u3092\u8a2d\u5b9a\u3059\u308b. myUIPicker . delegate = self // DataSource\u3092\u8a2d\u5b9a\u3059\u308b. myUIPicker . dataSource = self // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myUIPicker ) } func numberOfComponents ( in pickerView : UIPickerView ) -> Int { return 1 } /* picker\u306b\u8868\u793a\u3059\u308b\u884c\u6570\u3092\u8fd4\u3059\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u30e1\u30bd\u30c3\u30c9. (\u5b9f\u88c5\u5fc5\u9808) */ func pickerView ( _ pickerView : UIPickerView , numberOfRowsInComponent component : Int ) -> Int { return myValues . count } /* picker\u306b\u8868\u793a\u3059\u308b\u5024\u3092\u8fd4\u3059\u30c7\u30ea\u30b2\u30fc\u30c8\u30e1\u30bd\u30c3\u30c9. */ func pickerView ( _ pickerView : UIPickerView , titleForRow row : Int , forComponent component : Int ) -> String ? { return myValues [ row ] as ? String } /* picker\u304c\u9078\u629e\u3055\u308c\u305f\u969b\u306b\u547c\u3070\u308c\u308b\u30c7\u30ea\u30b2\u30fc\u30c8\u30e1\u30bd\u30c3\u30c9. */ func pickerView ( _ pickerView : UIPickerView , didSelectRow row : Int , inComponent component : Int ) { print ( \"row: \\( row ) \" ) print ( \"value: \\( myValues [ row ] ) \" ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 // // ViewController.swift // UIKit011 // import UIKit class ViewController : UIViewController , UIPickerViewDelegate , UIPickerViewDataSource { // UIPickerView. private var myUIPicker : UIPickerView ! // \u8868\u793a\u3059\u308b\u5024\u306e\u914d\u5217. private let myValues : NSArray = [ \"\u305d\u306e\u4e00\" , \"\u305d\u306e\u4e8c\" , \"\u305d\u306e\u4e09\" , \"\u305d\u306e\u56db\" ] override func viewDidLoad () { super . viewDidLoad () // UIPickerView\u3092\u751f\u6210. myUIPicker = UIPickerView () // \u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3059\u308b. myUIPicker . frame = CGRectMake ( 0 , 0 , self . view . bounds . width , 180.0 ) // Delegate\u3092\u8a2d\u5b9a\u3059\u308b. myUIPicker . delegate = self // DataSource\u3092\u8a2d\u5b9a\u3059\u308b. myUIPicker . dataSource = self // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myUIPicker ) } /* picker\u306b\u8868\u793a\u3059\u308b\u5217\u6570\u3092\u8fd4\u3059\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u30e1\u30bd\u30c3\u30c9. (\u5b9f\u88c5\u5fc5\u9808) */ func numberOfComponentsInPickerView ( pickerView : UIPickerView ) -> Int { return 1 } /* picker\u306b\u8868\u793a\u3059\u308b\u884c\u6570\u3092\u8fd4\u3059\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u30e1\u30bd\u30c3\u30c9. (\u5b9f\u88c5\u5fc5\u9808) */ func pickerView ( pickerView : UIPickerView , numberOfRowsInComponent component : Int ) -> Int { return myValues . count } /* picker\u306b\u8868\u793a\u3059\u308b\u5024\u3092\u8fd4\u3059\u30c7\u30ea\u30b2\u30fc\u30c8\u30e1\u30bd\u30c3\u30c9. */ func pickerView ( pickerView : UIPickerView , titleForRow row : Int , forComponent component : Int ) -> String ? { return myValues [ row ] as ? String } /* picker\u304c\u9078\u629e\u3055\u308c\u305f\u969b\u306b\u547c\u3070\u308c\u308b\u30c7\u30ea\u30b2\u30fc\u30c8\u30e1\u30bd\u30c3\u30c9. */ func pickerView ( pickerView : UIPickerView , didSelectRow row : Int , inComponent component : Int ) { print ( \"row: \\( row ) \" ) print ( \"value: \\( myValues [ row ] ) \" ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } 2.3\u30683.0\u306e\u5dee\u5206 numberOfComponentsInPickerView()\u304c\u3001numberOfComponents()\u306b\u5909\u66f4. Reference UIPIckerView https://developer.apple.com/reference/uikit/uipickerview","title":"UIPickerView\u3067\u5024\u306e\u9078\u629e"},{"location":"1.uikit/011_uipickerview/#uipickerview","text":"Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 // // ViewController.swift // UIKit011 // import UIKit class ViewController : UIViewController , UIPickerViewDelegate , UIPickerViewDataSource { // UIPickerView. private var myUIPicker : UIPickerView ! // \u8868\u793a\u3059\u308b\u5024\u306e\u914d\u5217. private let myValues : NSArray = [ \"\u305d\u306e\u4e00\" , \"\u305d\u306e\u4e8c\" , \"\u305d\u306e\u4e09\" , \"\u305d\u306e\u56db\" ] override func viewDidLoad () { super . viewDidLoad () // UIPickerView\u3092\u751f\u6210. myUIPicker = UIPickerView () // \u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3059\u308b. myUIPicker . frame = CGRect ( x : 0 , y : 0 , width : self . view . bounds . width , height : 180.0 ) // Delegate\u3092\u8a2d\u5b9a\u3059\u308b. myUIPicker . delegate = self // DataSource\u3092\u8a2d\u5b9a\u3059\u308b. myUIPicker . dataSource = self // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myUIPicker ) } func numberOfComponents ( in pickerView : UIPickerView ) -> Int { return 1 } /* picker\u306b\u8868\u793a\u3059\u308b\u884c\u6570\u3092\u8fd4\u3059\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u30e1\u30bd\u30c3\u30c9. (\u5b9f\u88c5\u5fc5\u9808) */ func pickerView ( _ pickerView : UIPickerView , numberOfRowsInComponent component : Int ) -> Int { return myValues . count } /* picker\u306b\u8868\u793a\u3059\u308b\u5024\u3092\u8fd4\u3059\u30c7\u30ea\u30b2\u30fc\u30c8\u30e1\u30bd\u30c3\u30c9. */ func pickerView ( _ pickerView : UIPickerView , titleForRow row : Int , forComponent component : Int ) -> String ? { return myValues [ row ] as ? String } /* picker\u304c\u9078\u629e\u3055\u308c\u305f\u969b\u306b\u547c\u3070\u308c\u308b\u30c7\u30ea\u30b2\u30fc\u30c8\u30e1\u30bd\u30c3\u30c9. */ func pickerView ( _ pickerView : UIPickerView , didSelectRow row : Int , inComponent component : Int ) { print ( \"row: \\( row ) \" ) print ( \"value: \\( myValues [ row ] ) \" ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 // // ViewController.swift // UIKit011 // import UIKit class ViewController : UIViewController , UIPickerViewDelegate , UIPickerViewDataSource { // UIPickerView. private var myUIPicker : UIPickerView ! // \u8868\u793a\u3059\u308b\u5024\u306e\u914d\u5217. private let myValues : NSArray = [ \"\u305d\u306e\u4e00\" , \"\u305d\u306e\u4e8c\" , \"\u305d\u306e\u4e09\" , \"\u305d\u306e\u56db\" ] override func viewDidLoad () { super . viewDidLoad () // UIPickerView\u3092\u751f\u6210. myUIPicker = UIPickerView () // \u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3059\u308b. myUIPicker . frame = CGRectMake ( 0 , 0 , self . view . bounds . width , 180.0 ) // Delegate\u3092\u8a2d\u5b9a\u3059\u308b. myUIPicker . delegate = self // DataSource\u3092\u8a2d\u5b9a\u3059\u308b. myUIPicker . dataSource = self // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myUIPicker ) } /* picker\u306b\u8868\u793a\u3059\u308b\u5217\u6570\u3092\u8fd4\u3059\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u30e1\u30bd\u30c3\u30c9. (\u5b9f\u88c5\u5fc5\u9808) */ func numberOfComponentsInPickerView ( pickerView : UIPickerView ) -> Int { return 1 } /* picker\u306b\u8868\u793a\u3059\u308b\u884c\u6570\u3092\u8fd4\u3059\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u30e1\u30bd\u30c3\u30c9. (\u5b9f\u88c5\u5fc5\u9808) */ func pickerView ( pickerView : UIPickerView , numberOfRowsInComponent component : Int ) -> Int { return myValues . count } /* picker\u306b\u8868\u793a\u3059\u308b\u5024\u3092\u8fd4\u3059\u30c7\u30ea\u30b2\u30fc\u30c8\u30e1\u30bd\u30c3\u30c9. */ func pickerView ( pickerView : UIPickerView , titleForRow row : Int , forComponent component : Int ) -> String ? { return myValues [ row ] as ? String } /* picker\u304c\u9078\u629e\u3055\u308c\u305f\u969b\u306b\u547c\u3070\u308c\u308b\u30c7\u30ea\u30b2\u30fc\u30c8\u30e1\u30bd\u30c3\u30c9. */ func pickerView ( pickerView : UIPickerView , didSelectRow row : Int , inComponent component : Int ) { print ( \"row: \\( row ) \" ) print ( \"value: \\( myValues [ row ] ) \" ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } }","title":"UIPickerView\u3067\u5024\u306e\u9078\u629e"},{"location":"1.uikit/011_uipickerview/#2330","text":"numberOfComponentsInPickerView()\u304c\u3001numberOfComponents()\u306b\u5909\u66f4.","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/011_uipickerview/#reference","text":"UIPIckerView https://developer.apple.com/reference/uikit/uipickerview","title":"Reference"},{"location":"1.uikit/012_uinavigationcontroller/","text":"UUINavigationController\u306e\u8868\u793a AppDelegate.swift Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 // // AppDelegate.swift // UIKit012 // // Copyright \u00a9 2018\u5e74 FaBo, Inc. All rights reserved. // import UIKit @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { var window : UIWindow ? func application ( _ application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ UIApplication . LaunchOptionsKey : Any ]? = nil ) -> Bool { // ViewController\u3092\u751f\u6210\u3059\u308b. let myFirstViewController : FirstViewController = FirstViewController () // myFirstViewController\u3092rootview\u306b\u8a2d\u5b9a\u3057\u3001Navication Controller\u3092\u751f\u6210\u3059\u308b. let myNavigationController : UINavigationController = UINavigationController ( rootViewController : myFirstViewController ) // rootViewController\u306bNavigationController\u3092\u8a2d\u5b9a\u3059\u308b. self . window ?. rootViewController = myNavigationController // NavigationController\u3092\u8868\u793a\u3059\u308b. self . window ?. makeKeyAndVisible () return true } func applicationWillResignActive ( _ application : UIApplication ) { // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state. // Use this method to pause ongoing tasks, disable timers, and invalidate graphics rendering callbacks. Games should use this method to pause the game. } func applicationDidEnterBackground ( _ application : UIApplication ) { // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later. // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits. } func applicationWillEnterForeground ( _ application : UIApplication ) { // Called as part of the transition from the background to the active state; here you can undo many of the changes made on entering the background. } func applicationDidBecomeActive ( _ application : UIApplication ) { // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface. } func applicationWillTerminate ( _ application : UIApplication ) { // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:. } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 // // AppDelegate.swift // UIKit012 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { var window : UIWindow ? func application ( _ application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ NSObject : AnyObject ]?) -> Bool { // ViewController\u3092\u751f\u6210\u3059\u308b. let myFirstViewController : FirstViewController = FirstViewController () // myFirstViewController\u3092rootview\u306b\u8a2d\u5b9a\u3057\u3001Navication Controller\u3092\u751f\u6210\u3059\u308b. let myNavigationController : UINavigationController = UINavigationController ( rootViewController : myFirstViewController ) // rootViewController\u306bNavigationController\u3092\u8a2d\u5b9a\u3059\u308b. self . window ?. rootViewController = myNavigationController // NavigationController\u3092\u8868\u793a\u3059\u308b. self . window ?. makeKeyAndVisible () return true } func applicationWillResignActive ( _ application : UIApplication ) { // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state. // Use this method to pause ongoing tasks, disable timers, and invalidate graphics rendering callbacks. Games should use this method to pause the game. } func applicationDidEnterBackground ( _ application : UIApplication ) { // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later. // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits. } func applicationWillEnterForeground ( _ application : UIApplication ) { // Called as part of the transition from the background to the active state; here you can undo many of the changes made on entering the background. } func applicationDidBecomeActive ( _ application : UIApplication ) { // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface. } func applicationWillTerminate ( _ application : UIApplication ) { // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:. } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 // // AppDelegate.swift // UIKit012 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { var window : UIWindow ? func application ( application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ NSObject : AnyObject ]?) -> Bool { // ViewController\u3092\u751f\u6210\u3059\u308b. let myFirstViewController : FirstViewController = FirstViewController () // myFirstViewController\u3092rootview\u306b\u8a2d\u5b9a\u3057\u3001Navication Controller\u3092\u751f\u6210\u3059\u308b. var myNavigationController : UINavigationController = UINavigationController ( rootViewController : myFirstViewController ) // rootViewController\u306bNavigationController\u3092\u8a2d\u5b9a\u3059\u308b. self . window ?. rootViewController = myNavigationController // NavigationController\u3092\u8868\u793a\u3059\u308b. self . window ?. makeKeyAndVisible () return true } func applicationWillResignActive ( application : UIApplication ) { // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state. // Use this method to pause ongoing tasks, disable timers, and throttle down OpenGL ES frame rates. Games should use this method to pause the game. } func applicationDidEnterBackground ( application : UIApplication ) { // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later. // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits. } func applicationWillEnterForeground ( application : UIApplication ) { // Called as part of the transition from the background to the inactive state; here you can undo many of the changes made on entering the background. } func applicationDidBecomeActive ( application : UIApplication ) { // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface. } func applicationWillTerminate ( application : UIApplication ) { // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:. } } FirstViewController.swift Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 // // FirstViewController.swift // UIKit012 // // Copyright \u00a9 2018\u5e74 FaBo, Inc. All rights reserved. // import UIKit class FirstViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // Controller\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b. self . title = \"My First View\" // View\u306e\u80cc\u666f\u8272\u3092Cyan\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . cyan // \u30dc\u30bf\u30f3\u306e\u5b9a\u7fa9\u3092\u304a\u3053\u306a\u3046. let buttonWidth : CGFloat = 100 let buttonHeight : CGFloat = 50 let posX : CGFloat = ( self . view . bounds . width - buttonWidth ) / 2 let posY : CGFloat = 200 let myButton = UIButton ( frame : CGRect ( x : posX , y : posY , width : buttonWidth , height : buttonHeight )) myButton . backgroundColor = UIColor . orange myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . setTitle ( \"\u30dc\u30bf\u30f3\" , for : . normal ) myButton . addTarget ( self , action : #selector ( onClickMyButton ( sender :)), for : . touchUpInside ) // \u30dc\u30bf\u30f3\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myButton ); } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8 */ @objc internal func onClickMyButton ( sender : UIButton ){ // \u79fb\u52d5\u5148\u306eView\u3092\u5b9a\u7fa9\u3059\u308b. let secondViewController = SecondViewController () // SecondView\u306b\u79fb\u52d5\u3059\u308b. self . navigationController ?. pushViewController ( secondViewController , animated : true ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 // // FirstViewController.swift // UIKit012 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class FirstViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // Controller\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b. self . title = \"My First View\" // View\u306e\u80cc\u666f\u8272\u3092Cyan\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . cyan // \u30dc\u30bf\u30f3\u306e\u5b9a\u7fa9\u3092\u304a\u3053\u306a\u3046. let buttonWidth : CGFloat = 100 let buttonHeight : CGFloat = 50 let posX : CGFloat = ( self . view . bounds . width - buttonWidth ) / 2 let posY : CGFloat = 200 let myButton = UIButton ( frame : CGRect ( x : posX , y : posY , width : buttonWidth , height : buttonHeight )) myButton . backgroundColor = UIColor . orange myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . setTitle ( \"\u30dc\u30bf\u30f3\" , for : . normal ) myButton . addTarget ( self , action : #selector ( onClickMyButton ( sender :)), for : . touchUpInside ) // \u30dc\u30bf\u30f3\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myButton ); } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8 */ internal func onClickMyButton ( sender : UIButton ){ // \u79fb\u52d5\u5148\u306eView\u3092\u5b9a\u7fa9\u3059\u308b. let secondViewController = SecondViewController () // SecondView\u306b\u79fb\u52d5\u3059\u308b. self . navigationController ?. pushViewController ( secondViewController , animated : true ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 // // FirstViewController.swift // UIKit012 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class FirstViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // Controller\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b. self . title = \"My First View\" // View\u306e\u80cc\u666f\u8272\u3092Cyan\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . cyanColor () // \u30dc\u30bf\u30f3\u306e\u5b9a\u7fa9\u3092\u304a\u3053\u306a\u3046. let buttonWidth : CGFloat = 100 let buttonHeight : CGFloat = 50 let posX : CGFloat = ( self . view . bounds . width - buttonWidth ) / 2 let posY : CGFloat = 200 let myButton = UIButton ( frame : CGRectMake ( posX , posY , buttonWidth , buttonHeight )) myButton . backgroundColor = UIColor . orangeColor () myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . setTitle ( \"\u30dc\u30bf\u30f3\" , forState : . Normal ) myButton . addTarget ( self , action : #selector ( onClickMyButton ( _ :)), forControlEvents : . TouchUpInside ) // \u30dc\u30bf\u30f3\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myButton ); } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8 */ internal func onClickMyButton ( sender : UIButton ){ // \u79fb\u52d5\u5148\u306eView\u3092\u5b9a\u7fa9\u3059\u308b. let secondViewController = SecondViewController () // SecondView\u306b\u79fb\u52d5\u3059\u308b. self . navigationController ?. pushViewController ( secondViewController , animated : true ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } } SecondViewController.swift Swift 4.x/3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 // // SecondViewController.swift // UIKit012 // // Copyright \u00a9 2018\u5e74 FaBo, Inc. All rights reserved. // import UIKit class SecondViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // Controller\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b. self . title = \"My Second View\" // View\u306e\u80cc\u666f\u8272\u3092\u5b9a\u7fa9\u3059\u308b. self . view . backgroundColor = UIColor . green } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 // // SecondViewController.swift // UIKit012 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class SecondViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // Controller\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b. self . title = \"My Second View\" // View\u306e\u80cc\u666f\u8272\u3092\u5b9a\u7fa9\u3059\u308b. self . view . backgroundColor = UIColor . greenColor () } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } } 3.0\u30684.0\u306e\u5dee\u5206 [NSObject: AnyObject]? \u304c\u3001 [UIApplication.LaunchOptionsKey : Any]? = nil \u306b\u5909\u66f4 internal func onClickMyButton(sender: UIButton) \u306b @objc \u3092\u8ffd\u52a0 2.3\u30683.0\u306e\u5dee\u5206 UIScreen.mainScreen()\u304cUIScreen.main\u306b\u5909\u66f4. Reference UINavigationController https://developer.apple.com/reference/uikit/uinavigationcontroller","title":"UUINavigationController\u306e\u8868\u793a"},{"location":"1.uikit/012_uinavigationcontroller/#uuinavigationcontroller","text":"","title":"UUINavigationController\u306e\u8868\u793a"},{"location":"1.uikit/012_uinavigationcontroller/#appdelegateswift","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 // // AppDelegate.swift // UIKit012 // // Copyright \u00a9 2018\u5e74 FaBo, Inc. All rights reserved. // import UIKit @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { var window : UIWindow ? func application ( _ application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ UIApplication . LaunchOptionsKey : Any ]? = nil ) -> Bool { // ViewController\u3092\u751f\u6210\u3059\u308b. let myFirstViewController : FirstViewController = FirstViewController () // myFirstViewController\u3092rootview\u306b\u8a2d\u5b9a\u3057\u3001Navication Controller\u3092\u751f\u6210\u3059\u308b. let myNavigationController : UINavigationController = UINavigationController ( rootViewController : myFirstViewController ) // rootViewController\u306bNavigationController\u3092\u8a2d\u5b9a\u3059\u308b. self . window ?. rootViewController = myNavigationController // NavigationController\u3092\u8868\u793a\u3059\u308b. self . window ?. makeKeyAndVisible () return true } func applicationWillResignActive ( _ application : UIApplication ) { // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state. // Use this method to pause ongoing tasks, disable timers, and invalidate graphics rendering callbacks. Games should use this method to pause the game. } func applicationDidEnterBackground ( _ application : UIApplication ) { // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later. // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits. } func applicationWillEnterForeground ( _ application : UIApplication ) { // Called as part of the transition from the background to the active state; here you can undo many of the changes made on entering the background. } func applicationDidBecomeActive ( _ application : UIApplication ) { // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface. } func applicationWillTerminate ( _ application : UIApplication ) { // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:. } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 // // AppDelegate.swift // UIKit012 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { var window : UIWindow ? func application ( _ application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ NSObject : AnyObject ]?) -> Bool { // ViewController\u3092\u751f\u6210\u3059\u308b. let myFirstViewController : FirstViewController = FirstViewController () // myFirstViewController\u3092rootview\u306b\u8a2d\u5b9a\u3057\u3001Navication Controller\u3092\u751f\u6210\u3059\u308b. let myNavigationController : UINavigationController = UINavigationController ( rootViewController : myFirstViewController ) // rootViewController\u306bNavigationController\u3092\u8a2d\u5b9a\u3059\u308b. self . window ?. rootViewController = myNavigationController // NavigationController\u3092\u8868\u793a\u3059\u308b. self . window ?. makeKeyAndVisible () return true } func applicationWillResignActive ( _ application : UIApplication ) { // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state. // Use this method to pause ongoing tasks, disable timers, and invalidate graphics rendering callbacks. Games should use this method to pause the game. } func applicationDidEnterBackground ( _ application : UIApplication ) { // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later. // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits. } func applicationWillEnterForeground ( _ application : UIApplication ) { // Called as part of the transition from the background to the active state; here you can undo many of the changes made on entering the background. } func applicationDidBecomeActive ( _ application : UIApplication ) { // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface. } func applicationWillTerminate ( _ application : UIApplication ) { // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:. } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 // // AppDelegate.swift // UIKit012 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { var window : UIWindow ? func application ( application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ NSObject : AnyObject ]?) -> Bool { // ViewController\u3092\u751f\u6210\u3059\u308b. let myFirstViewController : FirstViewController = FirstViewController () // myFirstViewController\u3092rootview\u306b\u8a2d\u5b9a\u3057\u3001Navication Controller\u3092\u751f\u6210\u3059\u308b. var myNavigationController : UINavigationController = UINavigationController ( rootViewController : myFirstViewController ) // rootViewController\u306bNavigationController\u3092\u8a2d\u5b9a\u3059\u308b. self . window ?. rootViewController = myNavigationController // NavigationController\u3092\u8868\u793a\u3059\u308b. self . window ?. makeKeyAndVisible () return true } func applicationWillResignActive ( application : UIApplication ) { // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state. // Use this method to pause ongoing tasks, disable timers, and throttle down OpenGL ES frame rates. Games should use this method to pause the game. } func applicationDidEnterBackground ( application : UIApplication ) { // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later. // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits. } func applicationWillEnterForeground ( application : UIApplication ) { // Called as part of the transition from the background to the inactive state; here you can undo many of the changes made on entering the background. } func applicationDidBecomeActive ( application : UIApplication ) { // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface. } func applicationWillTerminate ( application : UIApplication ) { // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:. } }","title":"AppDelegate.swift"},{"location":"1.uikit/012_uinavigationcontroller/#firstviewcontrollerswift","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 // // FirstViewController.swift // UIKit012 // // Copyright \u00a9 2018\u5e74 FaBo, Inc. All rights reserved. // import UIKit class FirstViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // Controller\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b. self . title = \"My First View\" // View\u306e\u80cc\u666f\u8272\u3092Cyan\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . cyan // \u30dc\u30bf\u30f3\u306e\u5b9a\u7fa9\u3092\u304a\u3053\u306a\u3046. let buttonWidth : CGFloat = 100 let buttonHeight : CGFloat = 50 let posX : CGFloat = ( self . view . bounds . width - buttonWidth ) / 2 let posY : CGFloat = 200 let myButton = UIButton ( frame : CGRect ( x : posX , y : posY , width : buttonWidth , height : buttonHeight )) myButton . backgroundColor = UIColor . orange myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . setTitle ( \"\u30dc\u30bf\u30f3\" , for : . normal ) myButton . addTarget ( self , action : #selector ( onClickMyButton ( sender :)), for : . touchUpInside ) // \u30dc\u30bf\u30f3\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myButton ); } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8 */ @objc internal func onClickMyButton ( sender : UIButton ){ // \u79fb\u52d5\u5148\u306eView\u3092\u5b9a\u7fa9\u3059\u308b. let secondViewController = SecondViewController () // SecondView\u306b\u79fb\u52d5\u3059\u308b. self . navigationController ?. pushViewController ( secondViewController , animated : true ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 // // FirstViewController.swift // UIKit012 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class FirstViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // Controller\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b. self . title = \"My First View\" // View\u306e\u80cc\u666f\u8272\u3092Cyan\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . cyan // \u30dc\u30bf\u30f3\u306e\u5b9a\u7fa9\u3092\u304a\u3053\u306a\u3046. let buttonWidth : CGFloat = 100 let buttonHeight : CGFloat = 50 let posX : CGFloat = ( self . view . bounds . width - buttonWidth ) / 2 let posY : CGFloat = 200 let myButton = UIButton ( frame : CGRect ( x : posX , y : posY , width : buttonWidth , height : buttonHeight )) myButton . backgroundColor = UIColor . orange myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . setTitle ( \"\u30dc\u30bf\u30f3\" , for : . normal ) myButton . addTarget ( self , action : #selector ( onClickMyButton ( sender :)), for : . touchUpInside ) // \u30dc\u30bf\u30f3\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myButton ); } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8 */ internal func onClickMyButton ( sender : UIButton ){ // \u79fb\u52d5\u5148\u306eView\u3092\u5b9a\u7fa9\u3059\u308b. let secondViewController = SecondViewController () // SecondView\u306b\u79fb\u52d5\u3059\u308b. self . navigationController ?. pushViewController ( secondViewController , animated : true ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 // // FirstViewController.swift // UIKit012 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class FirstViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // Controller\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b. self . title = \"My First View\" // View\u306e\u80cc\u666f\u8272\u3092Cyan\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . cyanColor () // \u30dc\u30bf\u30f3\u306e\u5b9a\u7fa9\u3092\u304a\u3053\u306a\u3046. let buttonWidth : CGFloat = 100 let buttonHeight : CGFloat = 50 let posX : CGFloat = ( self . view . bounds . width - buttonWidth ) / 2 let posY : CGFloat = 200 let myButton = UIButton ( frame : CGRectMake ( posX , posY , buttonWidth , buttonHeight )) myButton . backgroundColor = UIColor . orangeColor () myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . setTitle ( \"\u30dc\u30bf\u30f3\" , forState : . Normal ) myButton . addTarget ( self , action : #selector ( onClickMyButton ( _ :)), forControlEvents : . TouchUpInside ) // \u30dc\u30bf\u30f3\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myButton ); } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8 */ internal func onClickMyButton ( sender : UIButton ){ // \u79fb\u52d5\u5148\u306eView\u3092\u5b9a\u7fa9\u3059\u308b. let secondViewController = SecondViewController () // SecondView\u306b\u79fb\u52d5\u3059\u308b. self . navigationController ?. pushViewController ( secondViewController , animated : true ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } }","title":"FirstViewController.swift"},{"location":"1.uikit/012_uinavigationcontroller/#secondviewcontrollerswift","text":"Swift 4.x/3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 // // SecondViewController.swift // UIKit012 // // Copyright \u00a9 2018\u5e74 FaBo, Inc. All rights reserved. // import UIKit class SecondViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // Controller\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b. self . title = \"My Second View\" // View\u306e\u80cc\u666f\u8272\u3092\u5b9a\u7fa9\u3059\u308b. self . view . backgroundColor = UIColor . green } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 // // SecondViewController.swift // UIKit012 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class SecondViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // Controller\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b. self . title = \"My Second View\" // View\u306e\u80cc\u666f\u8272\u3092\u5b9a\u7fa9\u3059\u308b. self . view . backgroundColor = UIColor . greenColor () } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } }","title":"SecondViewController.swift"},{"location":"1.uikit/012_uinavigationcontroller/#3040","text":"[NSObject: AnyObject]? \u304c\u3001 [UIApplication.LaunchOptionsKey : Any]? = nil \u306b\u5909\u66f4 internal func onClickMyButton(sender: UIButton) \u306b @objc \u3092\u8ffd\u52a0","title":"3.0\u30684.0\u306e\u5dee\u5206"},{"location":"1.uikit/012_uinavigationcontroller/#2330","text":"UIScreen.mainScreen()\u304cUIScreen.main\u306b\u5909\u66f4.","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/012_uinavigationcontroller/#reference","text":"UINavigationController https://developer.apple.com/reference/uikit/uinavigationcontroller","title":"Reference"},{"location":"1.uikit/013_uitabbarcontroller/","text":"UITabBarController\u3067\u30bf\u30d6\u306e\u8868\u793a AppDelegate.swift Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 // // AppDelegate.swift // UIKit013_3.0 // // Created by akira on 2016/08/13. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { var window : UIWindow ? func application ( _ application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ UIApplication . LaunchOptionsKey : Any ]? = nil ) -> Bool { // Tab\u306b\u8a2d\u5b9a\u3059\u308bViewController\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210. let myFirstTab : UIViewController = FirstViewController () let mySecondTab : UIViewController = SecondViewController () // \u30bf\u30d6\u3092\u8981\u7d20\u306b\u6301\u3064Array\u306e.\u3092\u4f5c\u6210\u3059\u308b. let myTabs = NSArray ( objects : myFirstTab , mySecondTab ) // UITabController\u306e\u4f5c\u6210\u3059\u308b. let myTabBarController : UITabBarController = UITabBarController () // ViewController\u3092\u8a2d\u5b9a\u3059\u308b. myTabBarController . setViewControllers ( myTabs as ? [ UIViewController ], animated : false ) // RootViewController\u306b\u8a2d\u5b9a\u3059\u308b. self . window !. rootViewController = myTabBarController // Window\u3092\u8868\u793a\u3059\u308b. self . window !. makeKeyAndVisible () return true } func applicationWillResignActive ( _ application : UIApplication ) { // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state. // Use this method to pause ongoing tasks, disable timers, and invalidate graphics rendering callbacks. Games should use this method to pause the game. } func applicationDidEnterBackground ( _ application : UIApplication ) { // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later. // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits. } func applicationWillEnterForeground ( _ application : UIApplication ) { // Called as part of the transition from the background to the active state; here you can undo many of the changes made on entering the background. } func applicationDidBecomeActive ( _ application : UIApplication ) { // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface. } func applicationWillTerminate ( _ application : UIApplication ) { // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:. } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 // // AppDelegate.swift // UIKit013_3.0 // // Created by akira on 2016/08/13. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { var window : UIWindow ? func application ( _ application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ NSObject : AnyObject ]?) -> Bool { // Tab\u306b\u8a2d\u5b9a\u3059\u308bViewController\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210. let myFirstTab : UIViewController = FirstViewController () let mySecondTab : UIViewController = SecondViewController () // \u30bf\u30d6\u3092\u8981\u7d20\u306b\u6301\u3064Array\u306e.\u3092\u4f5c\u6210\u3059\u308b. let myTabs = NSArray ( objects : myFirstTab , mySecondTab ) // UITabController\u306e\u4f5c\u6210\u3059\u308b. let myTabBarController : UITabBarController = UITabBarController () // ViewController\u3092\u8a2d\u5b9a\u3059\u308b. myTabBarController . setViewControllers ( myTabs as ? [ UIViewController ], animated : false ) // RootViewController\u306b\u8a2d\u5b9a\u3059\u308b. self . window !. rootViewController = myTabBarController // Window\u3092\u8868\u793a\u3059\u308b. self . window !. makeKeyAndVisible () return true } func applicationWillResignActive ( _ application : UIApplication ) { // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state. // Use this method to pause ongoing tasks, disable timers, and invalidate graphics rendering callbacks. Games should use this method to pause the game. } func applicationDidEnterBackground ( _ application : UIApplication ) { // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later. // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits. } func applicationWillEnterForeground ( _ application : UIApplication ) { // Called as part of the transition from the background to the active state; here you can undo many of the changes made on entering the background. } func applicationDidBecomeActive ( _ application : UIApplication ) { // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface. } func applicationWillTerminate ( _ application : UIApplication ) { // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:. } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 // // AppDelegate.swift // UIKit013 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { var window : UIWindow ? func application ( application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ NSObject : AnyObject ]?) -> Bool { // Tab\u306b\u8a2d\u5b9a\u3059\u308bViewController\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210. let myFirstTab : UIViewController = FirstViewController () let mySecondTab : UIViewController = SecondViewController () // \u30bf\u30d6\u3092\u8981\u7d20\u306b\u6301\u3064Array\u306e.\u3092\u4f5c\u6210\u3059\u308b. let myTabs = NSArray ( objects : myFirstTab , mySecondTab ) // UITabController\u306e\u4f5c\u6210\u3059\u308b. let myTabBarController : UITabBarController = UITabBarController () // ViewController\u3092\u8a2d\u5b9a\u3059\u308b. myTabBarController . setViewControllers ( myTabs as ? [ UIViewController ], animated : false ) // RootViewController\u306b\u8a2d\u5b9a\u3059\u308b. self . window !. rootViewController = myTabBarController // Window\u3092\u8868\u793a\u3059\u308b. self . window !. makeKeyAndVisible () return true } func applicationWillResignActive ( application : UIApplication ) { // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state. // Use this method to pause ongoing tasks, disable timers, and throttle down OpenGL ES frame rates. Games should use this method to pause the game. } func applicationDidEnterBackground ( application : UIApplication ) { // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later. // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits. } func applicationWillEnterForeground ( application : UIApplication ) { // Called as part of the transition from the background to the inactive state; here you can undo many of the changes made on entering the background. } func applicationDidBecomeActive ( application : UIApplication ) { // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface. } func applicationWillTerminate ( application : UIApplication ) { // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:. } } FirstViewController.swift Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 // // FirstViewController.swift // UIKit013 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class FirstViewController : UIViewController { init () { super . init ( nibName : nil , bundle : nil ) // View\u306e\u80cc\u666f\u8272\u3092Cyan\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . cyan //tabBarItem\u306e\u30a2\u30a4\u30b3\u30f3\u3092Featured\u306b\u3001\u30bf\u30b0\u30921\u3068\u5b9a\u7fa9\u3059\u308b. self . tabBarItem = UITabBarItem ( tabBarSystemItem : . featured , tag : 1 ) } required init ?( coder aDecoder : NSCoder ) { super . init ( coder : aDecoder ) } required override init ( nibName nibNameOrNil : String !, bundle nibBundleOrNil : Bundle !) { super . init ( nibName : nibNameOrNil , bundle : nibBundleOrNil ) } override func viewDidLoad () { super . viewDidLoad () } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 // // FirstViewController.swift // UIKit013 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class FirstViewController : UIViewController { init () { super . init ( nibName : nil , bundle : nil ) // View\u306e\u80cc\u666f\u8272\u3092Cyan\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . cyanColor () //tabBarItem\u306e\u30a2\u30a4\u30b3\u30f3\u3092Featured\u306b\u3001\u30bf\u30b0\u30921\u3068\u5b9a\u7fa9\u3059\u308b. self . tabBarItem = UITabBarItem ( tabBarSystemItem : UITabBarSystemItem . Featured , tag : 1 ) } required init ?( coder aDecoder : NSCoder ) { super . init ( coder : aDecoder ) } required override init ( nibName nibNameOrNil : String !, bundle nibBundleOrNil : NSBundle !) { super . init ( nibName : nibNameOrNil , bundle : nibBundleOrNil ) } override func viewDidLoad () { super . viewDidLoad () } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } SecondViewController.swift Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 // // SecondViewController.swift // UIKit013 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class SecondViewController : UIViewController { init () { super . init ( nibName : nil , bundle : nil ) // View\u306e\u80cc\u666f\u8272\u3092Green\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . green // tabBarItem\u306e\u30a2\u30a4\u30b3\u30f3\u3092Featured\u306b\u3001\u30bf\u30b0\u30922\u3068\u5b9a\u7fa9\u3059\u308b. self . tabBarItem = UITabBarItem ( tabBarSystemItem : . featured , tag : 2 ) } required init ?( coder aDecoder : NSCoder ) { super . init ( coder : aDecoder ) } required override init ( nibName nibNameOrNil : String !, bundle nibBundleOrNil : Bundle !) { super . init ( nibName : nibNameOrNil , bundle : nibBundleOrNil ) } override func viewDidLoad () { super . viewDidLoad () } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 /// // SecondViewController.swift // UIKit013 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class SecondViewController : UIViewController { init () { super . init ( nibName : nil , bundle : nil ) // View\u306e\u80cc\u666f\u8272\u3092Green\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . greenColor () // tabBarItem\u306e\u30a2\u30a4\u30b3\u30f3\u3092Featured\u306b\u3001\u30bf\u30b0\u30922\u3068\u5b9a\u7fa9\u3059\u308b. self . tabBarItem = UITabBarItem ( tabBarSystemItem : UITabBarSystemItem . Featured , tag : 2 ) } required init ?( coder aDecoder : NSCoder ) { super . init ( coder : aDecoder ) } required override init ( nibName nibNameOrNil : String !, bundle nibBundleOrNil : NSBundle !) { super . init ( nibName : nibNameOrNil , bundle : nibBundleOrNil ) } override func viewDidLoad () { super . viewDidLoad () } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } 3.0\u30684.0\u306e\u5dee\u5206 [NSObject: AnyObject]? \u304c\u3001 [UIApplication.LaunchOptionsKey : Any]? = nil \u306b\u5909\u66f4 2.3\u30683.0\u306e\u5dee\u5206 UIScreen.mainScreen()\u304cUIScreen.main\u306b\u5909\u66f4. Reference UITabBarController https://developer.apple.com/reference/uikit/uitabbarcontroller","title":"UITabBarController\u3067\u30bf\u30d6\u306e\u8868\u793a"},{"location":"1.uikit/013_uitabbarcontroller/#uitabbarcontroller","text":"","title":"UITabBarController\u3067\u30bf\u30d6\u306e\u8868\u793a"},{"location":"1.uikit/013_uitabbarcontroller/#appdelegateswift","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 // // AppDelegate.swift // UIKit013_3.0 // // Created by akira on 2016/08/13. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { var window : UIWindow ? func application ( _ application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ UIApplication . LaunchOptionsKey : Any ]? = nil ) -> Bool { // Tab\u306b\u8a2d\u5b9a\u3059\u308bViewController\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210. let myFirstTab : UIViewController = FirstViewController () let mySecondTab : UIViewController = SecondViewController () // \u30bf\u30d6\u3092\u8981\u7d20\u306b\u6301\u3064Array\u306e.\u3092\u4f5c\u6210\u3059\u308b. let myTabs = NSArray ( objects : myFirstTab , mySecondTab ) // UITabController\u306e\u4f5c\u6210\u3059\u308b. let myTabBarController : UITabBarController = UITabBarController () // ViewController\u3092\u8a2d\u5b9a\u3059\u308b. myTabBarController . setViewControllers ( myTabs as ? [ UIViewController ], animated : false ) // RootViewController\u306b\u8a2d\u5b9a\u3059\u308b. self . window !. rootViewController = myTabBarController // Window\u3092\u8868\u793a\u3059\u308b. self . window !. makeKeyAndVisible () return true } func applicationWillResignActive ( _ application : UIApplication ) { // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state. // Use this method to pause ongoing tasks, disable timers, and invalidate graphics rendering callbacks. Games should use this method to pause the game. } func applicationDidEnterBackground ( _ application : UIApplication ) { // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later. // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits. } func applicationWillEnterForeground ( _ application : UIApplication ) { // Called as part of the transition from the background to the active state; here you can undo many of the changes made on entering the background. } func applicationDidBecomeActive ( _ application : UIApplication ) { // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface. } func applicationWillTerminate ( _ application : UIApplication ) { // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:. } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 // // AppDelegate.swift // UIKit013_3.0 // // Created by akira on 2016/08/13. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { var window : UIWindow ? func application ( _ application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ NSObject : AnyObject ]?) -> Bool { // Tab\u306b\u8a2d\u5b9a\u3059\u308bViewController\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210. let myFirstTab : UIViewController = FirstViewController () let mySecondTab : UIViewController = SecondViewController () // \u30bf\u30d6\u3092\u8981\u7d20\u306b\u6301\u3064Array\u306e.\u3092\u4f5c\u6210\u3059\u308b. let myTabs = NSArray ( objects : myFirstTab , mySecondTab ) // UITabController\u306e\u4f5c\u6210\u3059\u308b. let myTabBarController : UITabBarController = UITabBarController () // ViewController\u3092\u8a2d\u5b9a\u3059\u308b. myTabBarController . setViewControllers ( myTabs as ? [ UIViewController ], animated : false ) // RootViewController\u306b\u8a2d\u5b9a\u3059\u308b. self . window !. rootViewController = myTabBarController // Window\u3092\u8868\u793a\u3059\u308b. self . window !. makeKeyAndVisible () return true } func applicationWillResignActive ( _ application : UIApplication ) { // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state. // Use this method to pause ongoing tasks, disable timers, and invalidate graphics rendering callbacks. Games should use this method to pause the game. } func applicationDidEnterBackground ( _ application : UIApplication ) { // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later. // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits. } func applicationWillEnterForeground ( _ application : UIApplication ) { // Called as part of the transition from the background to the active state; here you can undo many of the changes made on entering the background. } func applicationDidBecomeActive ( _ application : UIApplication ) { // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface. } func applicationWillTerminate ( _ application : UIApplication ) { // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:. } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 // // AppDelegate.swift // UIKit013 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { var window : UIWindow ? func application ( application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ NSObject : AnyObject ]?) -> Bool { // Tab\u306b\u8a2d\u5b9a\u3059\u308bViewController\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210. let myFirstTab : UIViewController = FirstViewController () let mySecondTab : UIViewController = SecondViewController () // \u30bf\u30d6\u3092\u8981\u7d20\u306b\u6301\u3064Array\u306e.\u3092\u4f5c\u6210\u3059\u308b. let myTabs = NSArray ( objects : myFirstTab , mySecondTab ) // UITabController\u306e\u4f5c\u6210\u3059\u308b. let myTabBarController : UITabBarController = UITabBarController () // ViewController\u3092\u8a2d\u5b9a\u3059\u308b. myTabBarController . setViewControllers ( myTabs as ? [ UIViewController ], animated : false ) // RootViewController\u306b\u8a2d\u5b9a\u3059\u308b. self . window !. rootViewController = myTabBarController // Window\u3092\u8868\u793a\u3059\u308b. self . window !. makeKeyAndVisible () return true } func applicationWillResignActive ( application : UIApplication ) { // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state. // Use this method to pause ongoing tasks, disable timers, and throttle down OpenGL ES frame rates. Games should use this method to pause the game. } func applicationDidEnterBackground ( application : UIApplication ) { // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later. // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits. } func applicationWillEnterForeground ( application : UIApplication ) { // Called as part of the transition from the background to the inactive state; here you can undo many of the changes made on entering the background. } func applicationDidBecomeActive ( application : UIApplication ) { // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface. } func applicationWillTerminate ( application : UIApplication ) { // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:. } }","title":"AppDelegate.swift"},{"location":"1.uikit/013_uitabbarcontroller/#firstviewcontrollerswift","text":"Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 // // FirstViewController.swift // UIKit013 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class FirstViewController : UIViewController { init () { super . init ( nibName : nil , bundle : nil ) // View\u306e\u80cc\u666f\u8272\u3092Cyan\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . cyan //tabBarItem\u306e\u30a2\u30a4\u30b3\u30f3\u3092Featured\u306b\u3001\u30bf\u30b0\u30921\u3068\u5b9a\u7fa9\u3059\u308b. self . tabBarItem = UITabBarItem ( tabBarSystemItem : . featured , tag : 1 ) } required init ?( coder aDecoder : NSCoder ) { super . init ( coder : aDecoder ) } required override init ( nibName nibNameOrNil : String !, bundle nibBundleOrNil : Bundle !) { super . init ( nibName : nibNameOrNil , bundle : nibBundleOrNil ) } override func viewDidLoad () { super . viewDidLoad () } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 // // FirstViewController.swift // UIKit013 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class FirstViewController : UIViewController { init () { super . init ( nibName : nil , bundle : nil ) // View\u306e\u80cc\u666f\u8272\u3092Cyan\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . cyanColor () //tabBarItem\u306e\u30a2\u30a4\u30b3\u30f3\u3092Featured\u306b\u3001\u30bf\u30b0\u30921\u3068\u5b9a\u7fa9\u3059\u308b. self . tabBarItem = UITabBarItem ( tabBarSystemItem : UITabBarSystemItem . Featured , tag : 1 ) } required init ?( coder aDecoder : NSCoder ) { super . init ( coder : aDecoder ) } required override init ( nibName nibNameOrNil : String !, bundle nibBundleOrNil : NSBundle !) { super . init ( nibName : nibNameOrNil , bundle : nibBundleOrNil ) } override func viewDidLoad () { super . viewDidLoad () } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } }","title":"FirstViewController.swift"},{"location":"1.uikit/013_uitabbarcontroller/#secondviewcontrollerswift","text":"Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 // // SecondViewController.swift // UIKit013 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class SecondViewController : UIViewController { init () { super . init ( nibName : nil , bundle : nil ) // View\u306e\u80cc\u666f\u8272\u3092Green\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . green // tabBarItem\u306e\u30a2\u30a4\u30b3\u30f3\u3092Featured\u306b\u3001\u30bf\u30b0\u30922\u3068\u5b9a\u7fa9\u3059\u308b. self . tabBarItem = UITabBarItem ( tabBarSystemItem : . featured , tag : 2 ) } required init ?( coder aDecoder : NSCoder ) { super . init ( coder : aDecoder ) } required override init ( nibName nibNameOrNil : String !, bundle nibBundleOrNil : Bundle !) { super . init ( nibName : nibNameOrNil , bundle : nibBundleOrNil ) } override func viewDidLoad () { super . viewDidLoad () } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 /// // SecondViewController.swift // UIKit013 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class SecondViewController : UIViewController { init () { super . init ( nibName : nil , bundle : nil ) // View\u306e\u80cc\u666f\u8272\u3092Green\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . greenColor () // tabBarItem\u306e\u30a2\u30a4\u30b3\u30f3\u3092Featured\u306b\u3001\u30bf\u30b0\u30922\u3068\u5b9a\u7fa9\u3059\u308b. self . tabBarItem = UITabBarItem ( tabBarSystemItem : UITabBarSystemItem . Featured , tag : 2 ) } required init ?( coder aDecoder : NSCoder ) { super . init ( coder : aDecoder ) } required override init ( nibName nibNameOrNil : String !, bundle nibBundleOrNil : NSBundle !) { super . init ( nibName : nibNameOrNil , bundle : nibBundleOrNil ) } override func viewDidLoad () { super . viewDidLoad () } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } }","title":"SecondViewController.swift"},{"location":"1.uikit/013_uitabbarcontroller/#3040","text":"[NSObject: AnyObject]? \u304c\u3001 [UIApplication.LaunchOptionsKey : Any]? = nil \u306b\u5909\u66f4","title":"3.0\u30684.0\u306e\u5dee\u5206"},{"location":"1.uikit/013_uitabbarcontroller/#2330","text":"UIScreen.mainScreen()\u304cUIScreen.main\u306b\u5909\u66f4.","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/013_uitabbarcontroller/#reference","text":"UITabBarController https://developer.apple.com/reference/uikit/uitabbarcontroller","title":"Reference"},{"location":"1.uikit/014_uiimageview/","text":"UIImageView\u3067\u753b\u50cf\u3092\u8868\u793a Swift4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 // // ViewController.swift // UIKit014 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // \u753b\u50cf\u3092\u8a2d\u5b9a\u3059\u308b. let myImage : UIImage = UIImage ( named : \"fabo_logo.png\" ) ! let imageWidth : CGFloat = 300 let imageHeight : CGFloat = 100 // \u753b\u50cf\u3092\u7e2e\u5c0f\u3059\u308b(0.5\u500d) // \u8868\u793a\u3059\u308b\u5ea7\u6a19\u3092\u8a2d\u5b9a. let downPosX : CGFloat = ( self . view . bounds . width - imageWidth ) / 2 let downPosY : CGFloat = 50 // \u8868\u793a\u7528\u306eUIImageView\u3092\u751f\u6210. let myScaleDownView : UIImageView = UIImageView ( frame : CGRect ( x : downPosX , y : downPosY , width : imageWidth , height : imageHeight )) // UIImageView\u306b\u753b\u50cf\u3092\u8a2d\u5b9a\u3059\u308b. myScaleDownView . image = myImage // \u7e2e\u5c0f\u7528(0.5\u500d)\u306e\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u751f\u6210\u3059\u308b. myScaleDownView . transform = CGAffineTransform ( scaleX : 0.5 , y : 0.5 ) // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myScaleDownView ) // \u753b\u50cf\u3092\u62e1\u5927(1.2\u500d) // \u8868\u793a\u3059\u308b\u5ea7\u6a19\u3092\u8a2d\u5b9a. let upPosX : CGFloat = ( self . view . bounds . width - imageWidth ) / 2 let upPosY : CGFloat = 150 // \u8868\u793a\u7528\u306eUIImageView\u3092\u751f\u6210. let myScaleUpView : UIImageView = UIImageView ( frame : CGRect ( x : upPosX , y : upPosY , width : imageWidth , height : imageHeight )) // UIImageView\u306b\u753b\u50cf\u3092\u8a2d\u5b9a\u3059\u308b. myScaleUpView . image = myImage // \u7e2e\u5c0f\u7528(0.5\u500d)\u306e\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u751f\u6210\u3059\u308b. myScaleUpView . transform = CGAffineTransform ( scaleX : 1.2 , y : 1.2 ) // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myScaleUpView ) // \u753b\u50cf\u3092\u56de\u8ee2\u3059\u308b. // \u8868\u793a\u3059\u308b\u5ea7\u6a19\u3092\u8a2d\u5b9a. let rotatePosX : CGFloat = ( self . view . bounds . width - imageWidth ) / 2 let rotatePosY : CGFloat = 350 // \u8868\u793a\u7528\u306eUIImageView\u3092\u751f\u6210. let myRotateView : UIImageView = UIImageView ( frame : CGRect ( x : rotatePosX , y : rotatePosY , width : imageWidth , height : imageHeight )) // UIImageView\u306b\u753b\u50cf\u3092\u8a2d\u5b9a\u3059\u308b. myRotateView . image = myImage // radian\u3067\u56de\u8ee2\u89d2\u5ea6\u3092\u6307\u5b9a(30\u5ea6)\u3059\u308b. let angle : CGFloat = CGFloat (( 30.0 * M_PI ) / 180.0 ) // \u56de\u8ee2\u7528\u306e\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u751f\u6210\u3059\u308b. myRotateView . transform = CGAffineTransform ( rotationAngle : angle ) // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myRotateView ) // \u753b\u50cf\u3092\u53cd\u8ee2\u3059\u308b. // \u8868\u793a\u3059\u308b\u5ea7\u6a19\u3092\u8a2d\u5b9a. let reversePosX : CGFloat = ( self . view . bounds . width - imageWidth ) / 2 let reversePosY : CGFloat = 550 // \u8868\u793a\u7528\u306eUIImageView\u3092\u751f\u6210. let myReverseView : UIImageView = UIImageView ( frame : CGRect ( x : reversePosX , y : reversePosY , width : imageWidth , height : imageHeight )) // \u753b\u50cf\u3092\u8a2d\u5b9a\u3059\u308b. myReverseView . image = myImage // \u7e2e\u5c0f\u7528(0.5\u500d)\u306e\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u751f\u6210\u3059\u308b. myReverseView . transform = myReverseView . transform . scaledBy ( x : - 1.0 , y : 1.0 ) // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myReverseView ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 // // ViewController.swift // UIKit014 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // \u753b\u50cf\u3092\u8a2d\u5b9a\u3059\u308b. let myImage : UIImage = UIImage ( named : \"fabo_logo.png\" ) ! let imageWidth : CGFloat = 300 let imageHeight : CGFloat = 100 // \u753b\u50cf\u3092\u7e2e\u5c0f\u3059\u308b(0.5\u500d) // \u8868\u793a\u3059\u308b\u5ea7\u6a19\u3092\u8a2d\u5b9a. let downPosX : CGFloat = ( self . view . bounds . width - imageWidth ) / 2 let downPosY : CGFloat = 50 // \u8868\u793a\u7528\u306eUIImageView\u3092\u751f\u6210. let myScaleDownView : UIImageView = UIImageView ( frame : CGRect ( x : downPosX , y : downPosY , width : imageWidth , height : imageHeight )) // UIImageView\u306b\u753b\u50cf\u3092\u8a2d\u5b9a\u3059\u308b. myScaleDownView . image = myImage // \u7e2e\u5c0f\u7528(0.5\u500d)\u306e\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u751f\u6210\u3059\u308b. myScaleDownView . transform = CGAffineTransformMakeScale ( 0.5 , 0.5 ) // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myScaleDownView ) // \u753b\u50cf\u3092\u62e1\u5927(1.2\u500d) // \u8868\u793a\u3059\u308b\u5ea7\u6a19\u3092\u8a2d\u5b9a. let upPosX : CGFloat = ( self . view . bounds . width - imageWidth ) / 2 let upPosY : CGFloat = 150 // \u8868\u793a\u7528\u306eUIImageView\u3092\u751f\u6210. let myScaleUpView : UIImageView = UIImageView ( frame : CGRect ( x : upPosX , y : upPosY , width : imageWidth , height : imageHeight )) // UIImageView\u306b\u753b\u50cf\u3092\u8a2d\u5b9a\u3059\u308b. myScaleUpView . image = myImage // \u7e2e\u5c0f\u7528(0.5\u500d)\u306e\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u751f\u6210\u3059\u308b. myScaleUpView . transform = CGAffineTransformMakeScale ( 1.2 , 1.2 ) // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myScaleUpView ) // \u753b\u50cf\u3092\u56de\u8ee2\u3059\u308b. // \u8868\u793a\u3059\u308b\u5ea7\u6a19\u3092\u8a2d\u5b9a. let rotatePosX : CGFloat = ( self . view . bounds . width - imageWidth ) / 2 let rotatePosY : CGFloat = 350 // \u8868\u793a\u7528\u306eUIImageView\u3092\u751f\u6210. let myRotateView : UIImageView = UIImageView ( frame : CGRect ( x : rotatePosX , y : rotatePosY , width : imageWidth , height : imageHeight )) // UIImageView\u306b\u753b\u50cf\u3092\u8a2d\u5b9a\u3059\u308b. myRotateView . image = myImage // radian\u3067\u56de\u8ee2\u89d2\u5ea6\u3092\u6307\u5b9a(30\u5ea6)\u3059\u308b. let angle : CGFloat = CGFloat (( 30.0 * M_PI ) / 180.0 ) // \u56de\u8ee2\u7528\u306e\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u751f\u6210\u3059\u308b. myRotateView . transform = CGAffineTransformMakeRotation ( angle ) // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myRotateView ) // \u753b\u50cf\u3092\u53cd\u8ee2\u3059\u308b. // \u8868\u793a\u3059\u308b\u5ea7\u6a19\u3092\u8a2d\u5b9a. let reversePosX : CGFloat = ( self . view . bounds . width - imageWidth ) / 2 let reversePosY : CGFloat = 550 // \u8868\u793a\u7528\u306eUIImageView\u3092\u751f\u6210. let myReverseView : UIImageView = UIImageView ( frame : CGRect ( x : reversePosX , y : reversePosY , width : imageWidth , height : imageHeight )) // \u753b\u50cf\u3092\u8a2d\u5b9a\u3059\u308b. myReverseView . image = myImage // \u7e2e\u5c0f\u7528(0.5\u500d)\u306e\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u751f\u6210\u3059\u308b. myReverseView . transform = CGAffineTransformScale ( myReverseView . transform , - 1.0 , 1.0 ) // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myReverseView ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } } 2.3\u30683.0\u306e\u5dee\u5206 CGAffineTransform\u306e\u5f15\u6570\u5b9a\u7fa9\u306e\u5909\u66f4. Reference UserNotifications https://developer.apple.com/reference/uikit/uiimageview","title":"UIImageView\u3067\u753b\u50cf\u3092\u8868\u793a"},{"location":"1.uikit/014_uiimageview/#uiimageview","text":"Swift4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 // // ViewController.swift // UIKit014 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // \u753b\u50cf\u3092\u8a2d\u5b9a\u3059\u308b. let myImage : UIImage = UIImage ( named : \"fabo_logo.png\" ) ! let imageWidth : CGFloat = 300 let imageHeight : CGFloat = 100 // \u753b\u50cf\u3092\u7e2e\u5c0f\u3059\u308b(0.5\u500d) // \u8868\u793a\u3059\u308b\u5ea7\u6a19\u3092\u8a2d\u5b9a. let downPosX : CGFloat = ( self . view . bounds . width - imageWidth ) / 2 let downPosY : CGFloat = 50 // \u8868\u793a\u7528\u306eUIImageView\u3092\u751f\u6210. let myScaleDownView : UIImageView = UIImageView ( frame : CGRect ( x : downPosX , y : downPosY , width : imageWidth , height : imageHeight )) // UIImageView\u306b\u753b\u50cf\u3092\u8a2d\u5b9a\u3059\u308b. myScaleDownView . image = myImage // \u7e2e\u5c0f\u7528(0.5\u500d)\u306e\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u751f\u6210\u3059\u308b. myScaleDownView . transform = CGAffineTransform ( scaleX : 0.5 , y : 0.5 ) // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myScaleDownView ) // \u753b\u50cf\u3092\u62e1\u5927(1.2\u500d) // \u8868\u793a\u3059\u308b\u5ea7\u6a19\u3092\u8a2d\u5b9a. let upPosX : CGFloat = ( self . view . bounds . width - imageWidth ) / 2 let upPosY : CGFloat = 150 // \u8868\u793a\u7528\u306eUIImageView\u3092\u751f\u6210. let myScaleUpView : UIImageView = UIImageView ( frame : CGRect ( x : upPosX , y : upPosY , width : imageWidth , height : imageHeight )) // UIImageView\u306b\u753b\u50cf\u3092\u8a2d\u5b9a\u3059\u308b. myScaleUpView . image = myImage // \u7e2e\u5c0f\u7528(0.5\u500d)\u306e\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u751f\u6210\u3059\u308b. myScaleUpView . transform = CGAffineTransform ( scaleX : 1.2 , y : 1.2 ) // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myScaleUpView ) // \u753b\u50cf\u3092\u56de\u8ee2\u3059\u308b. // \u8868\u793a\u3059\u308b\u5ea7\u6a19\u3092\u8a2d\u5b9a. let rotatePosX : CGFloat = ( self . view . bounds . width - imageWidth ) / 2 let rotatePosY : CGFloat = 350 // \u8868\u793a\u7528\u306eUIImageView\u3092\u751f\u6210. let myRotateView : UIImageView = UIImageView ( frame : CGRect ( x : rotatePosX , y : rotatePosY , width : imageWidth , height : imageHeight )) // UIImageView\u306b\u753b\u50cf\u3092\u8a2d\u5b9a\u3059\u308b. myRotateView . image = myImage // radian\u3067\u56de\u8ee2\u89d2\u5ea6\u3092\u6307\u5b9a(30\u5ea6)\u3059\u308b. let angle : CGFloat = CGFloat (( 30.0 * M_PI ) / 180.0 ) // \u56de\u8ee2\u7528\u306e\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u751f\u6210\u3059\u308b. myRotateView . transform = CGAffineTransform ( rotationAngle : angle ) // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myRotateView ) // \u753b\u50cf\u3092\u53cd\u8ee2\u3059\u308b. // \u8868\u793a\u3059\u308b\u5ea7\u6a19\u3092\u8a2d\u5b9a. let reversePosX : CGFloat = ( self . view . bounds . width - imageWidth ) / 2 let reversePosY : CGFloat = 550 // \u8868\u793a\u7528\u306eUIImageView\u3092\u751f\u6210. let myReverseView : UIImageView = UIImageView ( frame : CGRect ( x : reversePosX , y : reversePosY , width : imageWidth , height : imageHeight )) // \u753b\u50cf\u3092\u8a2d\u5b9a\u3059\u308b. myReverseView . image = myImage // \u7e2e\u5c0f\u7528(0.5\u500d)\u306e\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u751f\u6210\u3059\u308b. myReverseView . transform = myReverseView . transform . scaledBy ( x : - 1.0 , y : 1.0 ) // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myReverseView ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 // // ViewController.swift // UIKit014 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // \u753b\u50cf\u3092\u8a2d\u5b9a\u3059\u308b. let myImage : UIImage = UIImage ( named : \"fabo_logo.png\" ) ! let imageWidth : CGFloat = 300 let imageHeight : CGFloat = 100 // \u753b\u50cf\u3092\u7e2e\u5c0f\u3059\u308b(0.5\u500d) // \u8868\u793a\u3059\u308b\u5ea7\u6a19\u3092\u8a2d\u5b9a. let downPosX : CGFloat = ( self . view . bounds . width - imageWidth ) / 2 let downPosY : CGFloat = 50 // \u8868\u793a\u7528\u306eUIImageView\u3092\u751f\u6210. let myScaleDownView : UIImageView = UIImageView ( frame : CGRect ( x : downPosX , y : downPosY , width : imageWidth , height : imageHeight )) // UIImageView\u306b\u753b\u50cf\u3092\u8a2d\u5b9a\u3059\u308b. myScaleDownView . image = myImage // \u7e2e\u5c0f\u7528(0.5\u500d)\u306e\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u751f\u6210\u3059\u308b. myScaleDownView . transform = CGAffineTransformMakeScale ( 0.5 , 0.5 ) // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myScaleDownView ) // \u753b\u50cf\u3092\u62e1\u5927(1.2\u500d) // \u8868\u793a\u3059\u308b\u5ea7\u6a19\u3092\u8a2d\u5b9a. let upPosX : CGFloat = ( self . view . bounds . width - imageWidth ) / 2 let upPosY : CGFloat = 150 // \u8868\u793a\u7528\u306eUIImageView\u3092\u751f\u6210. let myScaleUpView : UIImageView = UIImageView ( frame : CGRect ( x : upPosX , y : upPosY , width : imageWidth , height : imageHeight )) // UIImageView\u306b\u753b\u50cf\u3092\u8a2d\u5b9a\u3059\u308b. myScaleUpView . image = myImage // \u7e2e\u5c0f\u7528(0.5\u500d)\u306e\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u751f\u6210\u3059\u308b. myScaleUpView . transform = CGAffineTransformMakeScale ( 1.2 , 1.2 ) // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myScaleUpView ) // \u753b\u50cf\u3092\u56de\u8ee2\u3059\u308b. // \u8868\u793a\u3059\u308b\u5ea7\u6a19\u3092\u8a2d\u5b9a. let rotatePosX : CGFloat = ( self . view . bounds . width - imageWidth ) / 2 let rotatePosY : CGFloat = 350 // \u8868\u793a\u7528\u306eUIImageView\u3092\u751f\u6210. let myRotateView : UIImageView = UIImageView ( frame : CGRect ( x : rotatePosX , y : rotatePosY , width : imageWidth , height : imageHeight )) // UIImageView\u306b\u753b\u50cf\u3092\u8a2d\u5b9a\u3059\u308b. myRotateView . image = myImage // radian\u3067\u56de\u8ee2\u89d2\u5ea6\u3092\u6307\u5b9a(30\u5ea6)\u3059\u308b. let angle : CGFloat = CGFloat (( 30.0 * M_PI ) / 180.0 ) // \u56de\u8ee2\u7528\u306e\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u751f\u6210\u3059\u308b. myRotateView . transform = CGAffineTransformMakeRotation ( angle ) // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myRotateView ) // \u753b\u50cf\u3092\u53cd\u8ee2\u3059\u308b. // \u8868\u793a\u3059\u308b\u5ea7\u6a19\u3092\u8a2d\u5b9a. let reversePosX : CGFloat = ( self . view . bounds . width - imageWidth ) / 2 let reversePosY : CGFloat = 550 // \u8868\u793a\u7528\u306eUIImageView\u3092\u751f\u6210. let myReverseView : UIImageView = UIImageView ( frame : CGRect ( x : reversePosX , y : reversePosY , width : imageWidth , height : imageHeight )) // \u753b\u50cf\u3092\u8a2d\u5b9a\u3059\u308b. myReverseView . image = myImage // \u7e2e\u5c0f\u7528(0.5\u500d)\u306e\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u751f\u6210\u3059\u308b. myReverseView . transform = CGAffineTransformScale ( myReverseView . transform , - 1.0 , 1.0 ) // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myReverseView ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } }","title":"UIImageView\u3067\u753b\u50cf\u3092\u8868\u793a"},{"location":"1.uikit/014_uiimageview/#2330","text":"CGAffineTransform\u306e\u5f15\u6570\u5b9a\u7fa9\u306e\u5909\u66f4.","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/014_uiimageview/#reference","text":"UserNotifications https://developer.apple.com/reference/uikit/uiimageview","title":"Reference"},{"location":"1.uikit/015_uiviewcontroller/","text":"UIViewController\u3067\u753b\u9762\u9077\u79fb\u3059\u308b ViewController.swift Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 // // ViewController.swift // UIKit015_4.0 // // Created by akira on 2016/08/13. // Copyright \u00a9 2018\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u8272\u3092Green\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . green // \u30dc\u30bf\u30f3\u3092\u751f\u6210\u3059\u308b. let nextButton : UIButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 120 , height : 50 )) nextButton . backgroundColor = UIColor . red nextButton . layer . masksToBounds = true nextButton . setTitle ( \"Next\" , for : . normal ) nextButton . layer . cornerRadius = 20.0 nextButton . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : self . view . bounds . height - 50 ) nextButton . addTarget ( self , action : #selector ( onClickMyButton ( sender :)), for : . touchUpInside ) // \u30dc\u30bf\u30f3\u3092\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( nextButton ); } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8. */ @objc internal func onClickMyButton ( sender : UIButton ){ // \u9077\u79fb\u3059\u308bView\u3092\u5b9a\u7fa9\u3059\u308b. let mySecondViewController : UIViewController = SecondViewController () // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u8a2d\u5b9a\u3059\u308b. mySecondViewController . modalTransitionStyle = . partialCurl // View\u306e\u79fb\u52d5\u3059\u308b. self . present ( mySecondViewController , animated : true , completion : nil ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 // // ViewController.swift // UIKit015_3.0 // // Created by akira on 2016/08/13. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u8272\u3092Green\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . green // \u30dc\u30bf\u30f3\u3092\u751f\u6210\u3059\u308b. let nextButton : UIButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 120 , height : 50 )) nextButton . backgroundColor = UIColor . red nextButton . layer . masksToBounds = true nextButton . setTitle ( \"Next\" , for : . normal ) nextButton . layer . cornerRadius = 20.0 nextButton . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : self . view . bounds . height - 50 ) nextButton . addTarget ( self , action : #selector ( onClickMyButton ( sender :)), for : . touchUpInside ) // \u30dc\u30bf\u30f3\u3092\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( nextButton ); } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8. */ internal func onClickMyButton ( sender : UIButton ){ // \u9077\u79fb\u3059\u308bView\u3092\u5b9a\u7fa9\u3059\u308b. let mySecondViewController : UIViewController = SecondViewController () // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u8a2d\u5b9a\u3059\u308b. mySecondViewController . modalTransitionStyle = . partialCurl // View\u306e\u79fb\u52d5\u3059\u308b. self . present ( mySecondViewController , animated : true , completion : nil ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 /// // ViewController.swift // UIKit015 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u8272\u3092Green\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . greenColor () // \u30dc\u30bf\u30f3\u3092\u751f\u6210\u3059\u308b. let nextButton : UIButton = UIButton ( frame : CGRectMake ( 0 , 0 , 120 , 50 )) nextButton . backgroundColor = UIColor . redColor (); nextButton . layer . masksToBounds = true nextButton . setTitle ( \"Next\" , forState : . Normal ) nextButton . layer . cornerRadius = 20.0 nextButton . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : self . view . bounds . height - 50 ) nextButton . addTarget ( self , action : #selector ( onClickMyButton ( _ :)), forControlEvents : . TouchUpInside ) // \u30dc\u30bf\u30f3\u3092\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( nextButton ); } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8. */ internal func onClickMyButton ( sender : UIButton ){ // \u9077\u79fb\u3059\u308bView\u3092\u5b9a\u7fa9\u3059\u308b. let mySecondViewController : UIViewController = SecondViewController () // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u8a2d\u5b9a\u3059\u308b. mySecondViewController . modalTransitionStyle = UIModalTransitionStyle . PartialCurl // View\u306e\u79fb\u52d5\u3059\u308b. self . presentViewController ( mySecondViewController , animated : true , completion : nil ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } } SecondViewController.swift Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 // // SecondViewController.swift // UIKit015 // // Copyright \u00a9 2018\u5e74 FaBo, Inc. All rights reserved. // import UIKit class SecondViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u8272\u3092\u8a2d\u5b9a. self . view . backgroundColor = UIColor . blue // \u30dc\u30bf\u30f3\u3092\u4f5c\u6210. let backButton : UIButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 120 , height : 50 )) backButton . backgroundColor = UIColor . red backButton . layer . masksToBounds = true backButton . setTitle ( \"Back\" , for : . normal ) backButton . layer . cornerRadius = 20.0 backButton . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : self . view . bounds . height - 50 ) backButton . addTarget ( self , action : #selector ( onClickMyButton ( sender :)), for : . touchUpInside ) self . view . addSubview ( backButton ); } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8. */ @objc internal func onClickMyButton ( sender : UIButton ){ // \u9077\u79fb\u3059\u308bView\u3092\u5b9a\u7fa9. let myViewController : UIViewController = ViewController () // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u8a2d\u5b9a. myViewController . modalTransitionStyle = UIModalTransitionStyle . flipHorizontal // View\u306e\u79fb\u52d5. self . present ( myViewController , animated : true , completion : nil ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 // // SecondViewController.swift // UIKit015 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class SecondViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u8272\u3092\u8a2d\u5b9a. self . view . backgroundColor = UIColor . blueColor () // \u30dc\u30bf\u30f3\u3092\u4f5c\u6210. let backButton : UIButton = UIButton ( frame : CGRectMake ( 0 , 0 , 120 , 50 )) backButton . backgroundColor = UIColor . redColor (); backButton . layer . masksToBounds = true backButton . setTitle ( \"Back\" , forState : . Normal ) backButton . layer . cornerRadius = 20.0 backButton . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : self . view . bounds . height - 50 ) backButton . addTarget ( self , action : #selector ( onClickMyButton ( _ :)), forControlEvents : . TouchUpInside ) self . view . addSubview ( backButton ); } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8. */ internal func onClickMyButton ( sender : UIButton ){ // \u9077\u79fb\u3059\u308bView\u3092\u5b9a\u7fa9. let myViewController : UIViewController = ViewController () // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u8a2d\u5b9a. myViewController . modalTransitionStyle = UIModalTransitionStyle . FlipHorizontal // View\u306e\u79fb\u52d5. self . presentViewController ( myViewController , animated : true , completion : nil ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 // // SecondViewController.swift // UIKit015 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class SecondViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u8272\u3092\u8a2d\u5b9a. self . view . backgroundColor = UIColor . blueColor () // \u30dc\u30bf\u30f3\u3092\u4f5c\u6210. let backButton : UIButton = UIButton ( frame : CGRectMake ( 0 , 0 , 120 , 50 )) backButton . backgroundColor = UIColor . redColor (); backButton . layer . masksToBounds = true backButton . setTitle ( \"Back\" , forState : . Normal ) backButton . layer . cornerRadius = 20.0 backButton . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : self . view . bounds . height - 50 ) backButton . addTarget ( self , action : #selector ( onClickMyButton ( _ :)), forControlEvents : . TouchUpInside ) self . view . addSubview ( backButton ); } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8. */ internal func onClickMyButton ( sender : UIButton ){ // \u9077\u79fb\u3059\u308bView\u3092\u5b9a\u7fa9. let myViewController : UIViewController = ViewController () // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u8a2d\u5b9a. myViewController . modalTransitionStyle = UIModalTransitionStyle . FlipHorizontal // View\u306e\u79fb\u52d5. self . presentViewController ( myViewController , animated : true , completion : nil ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } } 3.x\u30684.x\u306e\u5dee\u5206 internal func onClickMyButton(sender: UIButton) \u306b @objc \u3092\u8ffd\u52a0 UIColor.blueColor() \u304c UIColor.blue \u306b\u5909\u66f4 UIButton(frame: CGRectMake(0,0,120,50)) \u304c\u3001 UIButton(frame: CGRect(x: 0, y: 0, width: 120, height: 50)) \u306b\u5909\u66f4 UIColor.redColor() \u304c UIColor.red \u306b\u5909\u66f4 setTitle(\"Back\", forState: .Normal) \u304c\u3001 setTitle(\"Back\", for: .normal) \u306b\u5909\u66f4 backButton.addTarget(self, action: #selector(onClickMyButton(_:)), forControlEvents: .TouchUpInside) \u304c\u3001 backButton.addTarget(self, action: #selector(onClickMyButton(sender:)), for: .touchUpInside) \u306b\u5909\u66f4 UIModalTransitionStyle.FlipHorizontal \u304c\u3001 UIModalTransitionStyle.flipHorizontal \u306b\u5909\u66f4 self.presentViewController(myViewController, animated: true, completion: nil) \u304c\u3001 self.present(myViewController, animated: true, completion: nil) \u306b\u5909\u66f4 2.3\u30683.0\u306e\u5dee\u5206 presentViewController()\u304cpresent()\u306b\u5909\u66f4. Reference UserNotifications https://developer.apple.com/reference/uikit/uialertcontroller","title":"UIViewController\u3067\u753b\u9762\u9077\u79fb\u3059\u308b"},{"location":"1.uikit/015_uiviewcontroller/#uiviewcontroller","text":"","title":"UIViewController\u3067\u753b\u9762\u9077\u79fb\u3059\u308b"},{"location":"1.uikit/015_uiviewcontroller/#viewcontrollerswift","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 // // ViewController.swift // UIKit015_4.0 // // Created by akira on 2016/08/13. // Copyright \u00a9 2018\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u8272\u3092Green\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . green // \u30dc\u30bf\u30f3\u3092\u751f\u6210\u3059\u308b. let nextButton : UIButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 120 , height : 50 )) nextButton . backgroundColor = UIColor . red nextButton . layer . masksToBounds = true nextButton . setTitle ( \"Next\" , for : . normal ) nextButton . layer . cornerRadius = 20.0 nextButton . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : self . view . bounds . height - 50 ) nextButton . addTarget ( self , action : #selector ( onClickMyButton ( sender :)), for : . touchUpInside ) // \u30dc\u30bf\u30f3\u3092\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( nextButton ); } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8. */ @objc internal func onClickMyButton ( sender : UIButton ){ // \u9077\u79fb\u3059\u308bView\u3092\u5b9a\u7fa9\u3059\u308b. let mySecondViewController : UIViewController = SecondViewController () // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u8a2d\u5b9a\u3059\u308b. mySecondViewController . modalTransitionStyle = . partialCurl // View\u306e\u79fb\u52d5\u3059\u308b. self . present ( mySecondViewController , animated : true , completion : nil ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 // // ViewController.swift // UIKit015_3.0 // // Created by akira on 2016/08/13. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u8272\u3092Green\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . green // \u30dc\u30bf\u30f3\u3092\u751f\u6210\u3059\u308b. let nextButton : UIButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 120 , height : 50 )) nextButton . backgroundColor = UIColor . red nextButton . layer . masksToBounds = true nextButton . setTitle ( \"Next\" , for : . normal ) nextButton . layer . cornerRadius = 20.0 nextButton . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : self . view . bounds . height - 50 ) nextButton . addTarget ( self , action : #selector ( onClickMyButton ( sender :)), for : . touchUpInside ) // \u30dc\u30bf\u30f3\u3092\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( nextButton ); } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8. */ internal func onClickMyButton ( sender : UIButton ){ // \u9077\u79fb\u3059\u308bView\u3092\u5b9a\u7fa9\u3059\u308b. let mySecondViewController : UIViewController = SecondViewController () // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u8a2d\u5b9a\u3059\u308b. mySecondViewController . modalTransitionStyle = . partialCurl // View\u306e\u79fb\u52d5\u3059\u308b. self . present ( mySecondViewController , animated : true , completion : nil ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 /// // ViewController.swift // UIKit015 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u8272\u3092Green\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . greenColor () // \u30dc\u30bf\u30f3\u3092\u751f\u6210\u3059\u308b. let nextButton : UIButton = UIButton ( frame : CGRectMake ( 0 , 0 , 120 , 50 )) nextButton . backgroundColor = UIColor . redColor (); nextButton . layer . masksToBounds = true nextButton . setTitle ( \"Next\" , forState : . Normal ) nextButton . layer . cornerRadius = 20.0 nextButton . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : self . view . bounds . height - 50 ) nextButton . addTarget ( self , action : #selector ( onClickMyButton ( _ :)), forControlEvents : . TouchUpInside ) // \u30dc\u30bf\u30f3\u3092\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( nextButton ); } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8. */ internal func onClickMyButton ( sender : UIButton ){ // \u9077\u79fb\u3059\u308bView\u3092\u5b9a\u7fa9\u3059\u308b. let mySecondViewController : UIViewController = SecondViewController () // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u8a2d\u5b9a\u3059\u308b. mySecondViewController . modalTransitionStyle = UIModalTransitionStyle . PartialCurl // View\u306e\u79fb\u52d5\u3059\u308b. self . presentViewController ( mySecondViewController , animated : true , completion : nil ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } }","title":"ViewController.swift"},{"location":"1.uikit/015_uiviewcontroller/#secondviewcontrollerswift","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 // // SecondViewController.swift // UIKit015 // // Copyright \u00a9 2018\u5e74 FaBo, Inc. All rights reserved. // import UIKit class SecondViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u8272\u3092\u8a2d\u5b9a. self . view . backgroundColor = UIColor . blue // \u30dc\u30bf\u30f3\u3092\u4f5c\u6210. let backButton : UIButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 120 , height : 50 )) backButton . backgroundColor = UIColor . red backButton . layer . masksToBounds = true backButton . setTitle ( \"Back\" , for : . normal ) backButton . layer . cornerRadius = 20.0 backButton . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : self . view . bounds . height - 50 ) backButton . addTarget ( self , action : #selector ( onClickMyButton ( sender :)), for : . touchUpInside ) self . view . addSubview ( backButton ); } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8. */ @objc internal func onClickMyButton ( sender : UIButton ){ // \u9077\u79fb\u3059\u308bView\u3092\u5b9a\u7fa9. let myViewController : UIViewController = ViewController () // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u8a2d\u5b9a. myViewController . modalTransitionStyle = UIModalTransitionStyle . flipHorizontal // View\u306e\u79fb\u52d5. self . present ( myViewController , animated : true , completion : nil ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 // // SecondViewController.swift // UIKit015 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class SecondViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u8272\u3092\u8a2d\u5b9a. self . view . backgroundColor = UIColor . blueColor () // \u30dc\u30bf\u30f3\u3092\u4f5c\u6210. let backButton : UIButton = UIButton ( frame : CGRectMake ( 0 , 0 , 120 , 50 )) backButton . backgroundColor = UIColor . redColor (); backButton . layer . masksToBounds = true backButton . setTitle ( \"Back\" , forState : . Normal ) backButton . layer . cornerRadius = 20.0 backButton . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : self . view . bounds . height - 50 ) backButton . addTarget ( self , action : #selector ( onClickMyButton ( _ :)), forControlEvents : . TouchUpInside ) self . view . addSubview ( backButton ); } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8. */ internal func onClickMyButton ( sender : UIButton ){ // \u9077\u79fb\u3059\u308bView\u3092\u5b9a\u7fa9. let myViewController : UIViewController = ViewController () // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u8a2d\u5b9a. myViewController . modalTransitionStyle = UIModalTransitionStyle . FlipHorizontal // View\u306e\u79fb\u52d5. self . presentViewController ( myViewController , animated : true , completion : nil ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 // // SecondViewController.swift // UIKit015 // // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class SecondViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u8272\u3092\u8a2d\u5b9a. self . view . backgroundColor = UIColor . blueColor () // \u30dc\u30bf\u30f3\u3092\u4f5c\u6210. let backButton : UIButton = UIButton ( frame : CGRectMake ( 0 , 0 , 120 , 50 )) backButton . backgroundColor = UIColor . redColor (); backButton . layer . masksToBounds = true backButton . setTitle ( \"Back\" , forState : . Normal ) backButton . layer . cornerRadius = 20.0 backButton . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : self . view . bounds . height - 50 ) backButton . addTarget ( self , action : #selector ( onClickMyButton ( _ :)), forControlEvents : . TouchUpInside ) self . view . addSubview ( backButton ); } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8. */ internal func onClickMyButton ( sender : UIButton ){ // \u9077\u79fb\u3059\u308bView\u3092\u5b9a\u7fa9. let myViewController : UIViewController = ViewController () // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u8a2d\u5b9a. myViewController . modalTransitionStyle = UIModalTransitionStyle . FlipHorizontal // View\u306e\u79fb\u52d5. self . presentViewController ( myViewController , animated : true , completion : nil ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } }","title":"SecondViewController.swift"},{"location":"1.uikit/015_uiviewcontroller/#3x4x","text":"internal func onClickMyButton(sender: UIButton) \u306b @objc \u3092\u8ffd\u52a0 UIColor.blueColor() \u304c UIColor.blue \u306b\u5909\u66f4 UIButton(frame: CGRectMake(0,0,120,50)) \u304c\u3001 UIButton(frame: CGRect(x: 0, y: 0, width: 120, height: 50)) \u306b\u5909\u66f4 UIColor.redColor() \u304c UIColor.red \u306b\u5909\u66f4 setTitle(\"Back\", forState: .Normal) \u304c\u3001 setTitle(\"Back\", for: .normal) \u306b\u5909\u66f4 backButton.addTarget(self, action: #selector(onClickMyButton(_:)), forControlEvents: .TouchUpInside) \u304c\u3001 backButton.addTarget(self, action: #selector(onClickMyButton(sender:)), for: .touchUpInside) \u306b\u5909\u66f4 UIModalTransitionStyle.FlipHorizontal \u304c\u3001 UIModalTransitionStyle.flipHorizontal \u306b\u5909\u66f4 self.presentViewController(myViewController, animated: true, completion: nil) \u304c\u3001 self.present(myViewController, animated: true, completion: nil) \u306b\u5909\u66f4","title":"3.x\u30684.x\u306e\u5dee\u5206"},{"location":"1.uikit/015_uiviewcontroller/#2330","text":"presentViewController()\u304cpresent()\u306b\u5909\u66f4.","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/015_uiviewcontroller/#reference","text":"UserNotifications https://developer.apple.com/reference/uikit/uialertcontroller","title":"Reference"},{"location":"1.uikit/016_uiscrollview/","text":"UIScrollView\u306e\u8868\u793a Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 // // ViewController.swift // UIKit016_3.0 // // Created by KimikoWatanabe on 2016/08/16. // Copyright \u00a9 2018\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myScrollView : UIScrollView ! override func viewDidLoad () { super . viewDidLoad () // ScrollView\u3092\u751f\u6210. myScrollView = UIScrollView () // ScrollView\u306e\u5927\u304d\u3055\u3092\u8a2d\u5b9a\u3059\u308b. myScrollView . frame = self . view . frame // UIImage\u306b\u753b\u50cf\u3092\u8a2d\u5b9a\u3059\u308b. let myImage = UIImage ( named : \"temple.jpg\" ) ! // UIImageView\u3092\u751f\u6210\u3059\u308b. let myImageView = UIImageView () // myImageView\u306eimage\u306bmyImage\u3092\u8a2d\u5b9a\u3059\u308b. myImageView . image = myImage // frame\u306e\u5024\u3092\u8a2d\u5b9a\u3059\u308b. myImageView . frame = myScrollView . frame // \u753b\u50cf\u306e\u30a2\u30b9\u30da\u30af\u30c8\u6bd4\u3092\u8a2d\u5b9a. myImageView . contentMode = UIView . ContentMode . scaleAspectFill // ScrollView\u306bmyImageView\u3092\u8ffd\u52a0\u3059\u308b. myScrollView . addSubview ( myImageView ) // Scroll\u306e\u9ad8\u3055\u3092\u8a08\u7b97\u3057\u3066\u304a\u304f. let scroll_height = myImage . size . height * ( self . view . frame . width / myImage . size . width ) // ScrollView\u306bcontentSize\u3092\u8a2d\u5b9a\u3059\u308b. myScrollView . contentSize = CGSize ( width : self . view . frame . width , height : scroll_height ) // View\u306bScrollView\u3092Add\u3059\u308b. self . view . addSubview ( myScrollView ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 // // ViewController.swift // UIKit016_3.0 // // Created by KimikoWatanabe on 2016/08/16. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myScrollView : UIScrollView ! override func viewDidLoad () { super . viewDidLoad () // ScrollView\u3092\u751f\u6210. myScrollView = UIScrollView () // ScrollView\u306e\u5927\u304d\u3055\u3092\u8a2d\u5b9a\u3059\u308b. myScrollView . frame = self . view . frame // UIImage\u306b\u753b\u50cf\u3092\u8a2d\u5b9a\u3059\u308b. let myImage = UIImage ( named : \"temple.jpg\" ) ! // UIImageView\u3092\u751f\u6210\u3059\u308b. let myImageView = UIImageView () // myImageView\u306eimage\u306bmyImage\u3092\u8a2d\u5b9a\u3059\u308b. myImageView . image = myImage // frame\u306e\u5024\u3092\u8a2d\u5b9a\u3059\u308b. myImageView . frame = myScrollView . frame // \u753b\u50cf\u306e\u30a2\u30b9\u30da\u30af\u30c8\u6bd4\u3092\u8a2d\u5b9a. myImageView . contentMode = UIViewContentMode . scaleAspectFill // ScrollView\u306bmyImageView\u3092\u8ffd\u52a0\u3059\u308b. myScrollView . addSubview ( myImageView ) // Scroll\u306e\u9ad8\u3055\u3092\u8a08\u7b97\u3057\u3066\u304a\u304f. let scroll_height = myImage . size . height * ( self . view . frame . width / myImage . size . width ) // ScrollView\u306bcontentSize\u3092\u8a2d\u5b9a\u3059\u308b. myScrollView . contentSize = CGSize ( width : self . view . frame . width , height : scroll_height ) // View\u306bScrollView\u3092Add\u3059\u308b. self . view . addSubview ( myScrollView ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 // // ViewController.swift // UIKit016_2.3 // // Created by KimikoWatanabe on 2016/08/16. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. import UIKit class ViewController : UIViewController { private var myScrollView : UIScrollView ! override func viewDidLoad () { super . viewDidLoad () // ScrollView\u3092\u751f\u6210. myScrollView = UIScrollView () // ScrollView\u306e\u5927\u304d\u3055\u3092\u8a2d\u5b9a\u3059\u308b. myScrollView . frame = self . view . frame // UIImage\u306b\u753b\u50cf\u3092\u8a2d\u5b9a\u3059\u308b. let myImage = UIImage ( named : \"temple.jpg\" ) ! // UIImageView\u3092\u751f\u6210\u3059\u308b. let myImageView = UIImageView () // myImageView\u306eimage\u306bmyImage\u3092\u8a2d\u5b9a\u3059\u308b. myImageView . image = myImage // frame\u306e\u5024\u3092\u8a2d\u5b9a\u3059\u308b. myImageView . frame = myScrollView . frame // \u753b\u50cf\u306e\u30a2\u30b9\u30da\u30af\u30c8\u6bd4\u3092\u8a2d\u5b9a. myImageView . contentMode = UIViewContentMode . ScaleAspectFill // ScrollView\u306bmyImageView\u3092\u8ffd\u52a0\u3059\u308b. myScrollView . addSubview ( myImageView ) // Scroll\u306e\u9ad8\u3055\u3092\u8a08\u7b97\u3057\u3066\u304a\u304f. let scroll_height = myImage . size . height * ( self . view . frame . width / myImage . size . width ) // ScrollView\u306bcontentSize\u3092\u8a2d\u5b9a\u3059\u308b. myScrollView . contentSize = CGSizeMake ( self . view . frame . width , scroll_height ) // View\u306bScrollView\u3092Add\u3059\u308b. self . view . addSubview ( myScrollView ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } 3.x\u30684.x\u306e\u5dee\u5206 UIViewContentMode \u304c\u3001 UIView.ContentMode \u306b\u5909\u66f4 2.3\u30683.0\u306e\u5dee\u5206 UIViewContentMode\u306e\u540d\u79f0\u304c\u5909\u66f4 CGSize\u306e\u751f\u6210\u65b9\u6cd5\u306e\u5909\u66f4(CGSizeMake\u306e\u5ec3\u6b62) Reference UIScrollView Class https://developer.apple.com/reference/uikit/uiscrollview UIImageView Class https://developer.apple.com/reference/uikit/uiimageview UIImage Class https://developer.apple.com/reference/uikit/uiimage","title":"UIScrollView\u306e\u8868\u793a"},{"location":"1.uikit/016_uiscrollview/#uiscrollview","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 // // ViewController.swift // UIKit016_3.0 // // Created by KimikoWatanabe on 2016/08/16. // Copyright \u00a9 2018\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myScrollView : UIScrollView ! override func viewDidLoad () { super . viewDidLoad () // ScrollView\u3092\u751f\u6210. myScrollView = UIScrollView () // ScrollView\u306e\u5927\u304d\u3055\u3092\u8a2d\u5b9a\u3059\u308b. myScrollView . frame = self . view . frame // UIImage\u306b\u753b\u50cf\u3092\u8a2d\u5b9a\u3059\u308b. let myImage = UIImage ( named : \"temple.jpg\" ) ! // UIImageView\u3092\u751f\u6210\u3059\u308b. let myImageView = UIImageView () // myImageView\u306eimage\u306bmyImage\u3092\u8a2d\u5b9a\u3059\u308b. myImageView . image = myImage // frame\u306e\u5024\u3092\u8a2d\u5b9a\u3059\u308b. myImageView . frame = myScrollView . frame // \u753b\u50cf\u306e\u30a2\u30b9\u30da\u30af\u30c8\u6bd4\u3092\u8a2d\u5b9a. myImageView . contentMode = UIView . ContentMode . scaleAspectFill // ScrollView\u306bmyImageView\u3092\u8ffd\u52a0\u3059\u308b. myScrollView . addSubview ( myImageView ) // Scroll\u306e\u9ad8\u3055\u3092\u8a08\u7b97\u3057\u3066\u304a\u304f. let scroll_height = myImage . size . height * ( self . view . frame . width / myImage . size . width ) // ScrollView\u306bcontentSize\u3092\u8a2d\u5b9a\u3059\u308b. myScrollView . contentSize = CGSize ( width : self . view . frame . width , height : scroll_height ) // View\u306bScrollView\u3092Add\u3059\u308b. self . view . addSubview ( myScrollView ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 // // ViewController.swift // UIKit016_3.0 // // Created by KimikoWatanabe on 2016/08/16. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myScrollView : UIScrollView ! override func viewDidLoad () { super . viewDidLoad () // ScrollView\u3092\u751f\u6210. myScrollView = UIScrollView () // ScrollView\u306e\u5927\u304d\u3055\u3092\u8a2d\u5b9a\u3059\u308b. myScrollView . frame = self . view . frame // UIImage\u306b\u753b\u50cf\u3092\u8a2d\u5b9a\u3059\u308b. let myImage = UIImage ( named : \"temple.jpg\" ) ! // UIImageView\u3092\u751f\u6210\u3059\u308b. let myImageView = UIImageView () // myImageView\u306eimage\u306bmyImage\u3092\u8a2d\u5b9a\u3059\u308b. myImageView . image = myImage // frame\u306e\u5024\u3092\u8a2d\u5b9a\u3059\u308b. myImageView . frame = myScrollView . frame // \u753b\u50cf\u306e\u30a2\u30b9\u30da\u30af\u30c8\u6bd4\u3092\u8a2d\u5b9a. myImageView . contentMode = UIViewContentMode . scaleAspectFill // ScrollView\u306bmyImageView\u3092\u8ffd\u52a0\u3059\u308b. myScrollView . addSubview ( myImageView ) // Scroll\u306e\u9ad8\u3055\u3092\u8a08\u7b97\u3057\u3066\u304a\u304f. let scroll_height = myImage . size . height * ( self . view . frame . width / myImage . size . width ) // ScrollView\u306bcontentSize\u3092\u8a2d\u5b9a\u3059\u308b. myScrollView . contentSize = CGSize ( width : self . view . frame . width , height : scroll_height ) // View\u306bScrollView\u3092Add\u3059\u308b. self . view . addSubview ( myScrollView ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 // // ViewController.swift // UIKit016_2.3 // // Created by KimikoWatanabe on 2016/08/16. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. import UIKit class ViewController : UIViewController { private var myScrollView : UIScrollView ! override func viewDidLoad () { super . viewDidLoad () // ScrollView\u3092\u751f\u6210. myScrollView = UIScrollView () // ScrollView\u306e\u5927\u304d\u3055\u3092\u8a2d\u5b9a\u3059\u308b. myScrollView . frame = self . view . frame // UIImage\u306b\u753b\u50cf\u3092\u8a2d\u5b9a\u3059\u308b. let myImage = UIImage ( named : \"temple.jpg\" ) ! // UIImageView\u3092\u751f\u6210\u3059\u308b. let myImageView = UIImageView () // myImageView\u306eimage\u306bmyImage\u3092\u8a2d\u5b9a\u3059\u308b. myImageView . image = myImage // frame\u306e\u5024\u3092\u8a2d\u5b9a\u3059\u308b. myImageView . frame = myScrollView . frame // \u753b\u50cf\u306e\u30a2\u30b9\u30da\u30af\u30c8\u6bd4\u3092\u8a2d\u5b9a. myImageView . contentMode = UIViewContentMode . ScaleAspectFill // ScrollView\u306bmyImageView\u3092\u8ffd\u52a0\u3059\u308b. myScrollView . addSubview ( myImageView ) // Scroll\u306e\u9ad8\u3055\u3092\u8a08\u7b97\u3057\u3066\u304a\u304f. let scroll_height = myImage . size . height * ( self . view . frame . width / myImage . size . width ) // ScrollView\u306bcontentSize\u3092\u8a2d\u5b9a\u3059\u308b. myScrollView . contentSize = CGSizeMake ( self . view . frame . width , scroll_height ) // View\u306bScrollView\u3092Add\u3059\u308b. self . view . addSubview ( myScrollView ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } }","title":"UIScrollView\u306e\u8868\u793a"},{"location":"1.uikit/016_uiscrollview/#3x4x","text":"UIViewContentMode \u304c\u3001 UIView.ContentMode \u306b\u5909\u66f4","title":"3.x\u30684.x\u306e\u5dee\u5206"},{"location":"1.uikit/016_uiscrollview/#2330","text":"UIViewContentMode\u306e\u540d\u79f0\u304c\u5909\u66f4 CGSize\u306e\u751f\u6210\u65b9\u6cd5\u306e\u5909\u66f4(CGSizeMake\u306e\u5ec3\u6b62)","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/016_uiscrollview/#reference","text":"UIScrollView Class https://developer.apple.com/reference/uikit/uiscrollview UIImageView Class https://developer.apple.com/reference/uikit/uiimageview UIImage Class https://developer.apple.com/reference/uikit/uiimage","title":"Reference"},{"location":"1.uikit/017_uibarbuttonitem/","text":"UIBarButtonItem\u306e\u8a2d\u7f6e Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 // // AppDelegate.swift // UIKit017_3.0 // // Created by KimikoWatanabe on 2016/08/16. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { internal var window : UIWindow ? func applicationDidFinishLaunching ( _ application : UIApplication ) { // viewConroller\u3092\u751f\u6210. let myViewController = ViewController () // navigationController\u3092\u751f\u6210. let navigationController = UINavigationController ( rootViewController : myViewController ) // window\u3092\u751f\u6210. window = UIWindow ( frame : UIScreen . main . bounds ) // rootViewController\u306bnavigationController\u3092\u8a2d\u5b9a. window ?. rootViewController = navigationController window ?. makeKeyAndVisible () //return true } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 // // AppDelegate.swift // UIKit017_2.3 // // Created by KimikoWatanabe on 2016/08/16. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { internal var window : UIWindow ? func application ( application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ NSObject : AnyObject ]?) -> Bool { // viewConroller\u3092\u751f\u6210. let myViewController = ViewController () // navigationController\u3092\u751f\u6210. let navigationController = UINavigationController ( rootViewController : myViewController ) // window\u3092\u751f\u6210. window = UIWindow ( frame : UIScreen . mainScreen (). bounds ) // rootViewController\u306bnavigationController\u3092\u8a2d\u5b9a. window ?. rootViewController = navigationController window ?. makeKeyAndVisible () return true } } ViewController.swift Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 // // ViewController.swift // UIKit017_4.0 // // Created by KimikoWatanabe on 2016/08/16. // Copyright \u00a9 2018\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myLeftButton : UIBarButtonItem ! private var myRightButton : UIBarButtonItem ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u8272\u3092Cyan\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . cyan // NavigationController\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b. self . title = \"My Navigation\" // \u5de6\u30dc\u30bf\u30f3\u3092\u4f5c\u6210\u3059\u308b.. myLeftButton = UIBarButtonItem ( barButtonSystemItem : . add , target : self , action : #selector ( ViewController . onClickMyButton ( sender :))) // \u53f3\u30dc\u30bf\u30f3\u3092\u4f5c\u6210\u3059\u308b. myRightButton = UIBarButtonItem ( title : \"RightBtn\" , style : . plain , target : self , action : #selector ( ViewController . onClickMyButton ( sender :))) // tag\u3092\u8a2d\u5b9a\u3059\u308b. myLeftButton . tag = 1 myRightButton . tag = 2 // \u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30d0\u30fc\u306e\u5de6\u306b\u8a2d\u7f6e\u3059\u308b. self . navigationItem . leftBarButtonItem = myLeftButton // \u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30d0\u30fc\u306e\u53f3\u306b\u8a2d\u7f6e\u3059\u308b. self . navigationItem . rightBarButtonItem = myRightButton } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8. */ @objc internal func onClickMyButton ( sender : UIButton ){ switch ( sender . tag ){ case 1 : // \u80cc\u666f\u8272\u3092\u9752\u8272\u306b\u5909\u3048\u308b. self . view . backgroundColor = UIColor . blue case 2 : // \u80cc\u666f\u8272\u3092\u8d64\u8272\u306b\u5909\u3048\u308b. self . view . backgroundColor = UIColor . red default : print ( \"error\" ) } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 // // ViewController.swift // UIKit017_3.0 // // Created by KimikoWatanabe on 2016/08/16. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myLeftButton : UIBarButtonItem ! private var myRightButton : UIBarButtonItem ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u8272\u3092Cyan\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . cyan // NavigationController\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b. self . title = \"My Navigation\" // \u5de6\u30dc\u30bf\u30f3\u3092\u4f5c\u6210\u3059\u308b.. myLeftButton = UIBarButtonItem ( barButtonSystemItem : . add , target : self , action : #selector ( ViewController . onClickMyButton ( sender :))) // \u53f3\u30dc\u30bf\u30f3\u3092\u4f5c\u6210\u3059\u308b. myRightButton = UIBarButtonItem ( title : \"RightBtn\" , style : . plain , target : self , action : #selector ( ViewController . onClickMyButton ( sender :))) // tag\u3092\u8a2d\u5b9a\u3059\u308b. myLeftButton . tag = 1 myRightButton . tag = 2 // \u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30d0\u30fc\u306e\u5de6\u306b\u8a2d\u7f6e\u3059\u308b. self . navigationItem . leftBarButtonItem = myLeftButton // \u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30d0\u30fc\u306e\u53f3\u306b\u8a2d\u7f6e\u3059\u308b. self . navigationItem . rightBarButtonItem = myRightButton } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8. */ internal func onClickMyButton ( sender : UIButton ){ switch ( sender . tag ){ case 1 : // \u80cc\u666f\u8272\u3092\u9752\u8272\u306b\u5909\u3048\u308b. self . view . backgroundColor = UIColor . blue case 2 : // \u80cc\u666f\u8272\u3092\u8d64\u8272\u306b\u5909\u3048\u308b. self . view . backgroundColor = UIColor . red default : print ( \"error\" ) } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 // // ViewController.swift // UIKit017_2.3 // // Created by KimikoWatanabe on 2016/08/16. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myLeftButton : UIBarButtonItem ! private var myRightButton : UIBarButtonItem ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u8272\u3092Cyan\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . cyanColor () // NavigationController\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b. self . title = \"My Navigation\" // \u5de6\u30dc\u30bf\u30f3\u3092\u4f5c\u6210\u3059\u308b.. myLeftButton = UIBarButtonItem ( barButtonSystemItem : . Add , target : self , action : \"onClickMyButton:\" ) // \u53f3\u30dc\u30bf\u30f3\u3092\u4f5c\u6210\u3059\u308b. myRightButton = UIBarButtonItem ( title : \"RightBtn\" , style : . Plain , target : self , action : \"onClickMyButton:\" ) // tag\u3092\u8a2d\u5b9a\u3059\u308b. myLeftButton . tag = 1 myRightButton . tag = 2 // \u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30d0\u30fc\u306e\u5de6\u306b\u8a2d\u7f6e\u3059\u308b. self . navigationItem . leftBarButtonItem = myLeftButton // \u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30d0\u30fc\u306e\u53f3\u306b\u8a2d\u7f6e\u3059\u308b. self . navigationItem . rightBarButtonItem = myRightButton } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8. */ internal func onClickMyButton ( sender : UIButton ){ switch ( sender . tag ){ case 1 : // \u80cc\u666f\u8272\u3092\u9752\u8272\u306b\u5909\u3048\u308b. self . view . backgroundColor = UIColor . blueColor () case 2 : // \u80cc\u666f\u8272\u3092\u8d64\u8272\u306b\u5909\u3048\u308b. self . view . backgroundColor = UIColor . redColor () default : print ( \"error\" ) } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } 3.x\u30684.x\u306e\u5dee\u5206 internal func onClickMyButton(sender: UIButton) \u306b @objc \u3092\u8ffd\u52a0 2.3\u30683.0\u306e\u5dee\u5206 UIApplicationDelegate\u306eDelegate\u30e1\u30bd\u30c3\u30c9\u540d\u304c\u5909\u66f4 UIScreen\u304b\u3089\u30b9\u30af\u30ea\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u53d6\u5f97\u306e\u65b9\u6cd5\u304c\u5909\u66f4(UIScreen.mainScreen() -> UIScreen.main) UIBarButtonItemStyle\u306e\u540d\u79f0\u304c\u5909\u66f4 Reference UIBarButtonItem Class https://developer.apple.com/reference/uikit/uibarbuttonitem UINavigationController Class https://developer.apple.com/reference/uikit/uinavigationcontroller UIViewController Class https://developer.apple.com/reference/uikit/uiviewcontroller","title":"UIBarButtonItem\u306e\u8a2d\u7f6e"},{"location":"1.uikit/017_uibarbuttonitem/#uibarbuttonitem","text":"Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 // // AppDelegate.swift // UIKit017_3.0 // // Created by KimikoWatanabe on 2016/08/16. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { internal var window : UIWindow ? func applicationDidFinishLaunching ( _ application : UIApplication ) { // viewConroller\u3092\u751f\u6210. let myViewController = ViewController () // navigationController\u3092\u751f\u6210. let navigationController = UINavigationController ( rootViewController : myViewController ) // window\u3092\u751f\u6210. window = UIWindow ( frame : UIScreen . main . bounds ) // rootViewController\u306bnavigationController\u3092\u8a2d\u5b9a. window ?. rootViewController = navigationController window ?. makeKeyAndVisible () //return true } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 // // AppDelegate.swift // UIKit017_2.3 // // Created by KimikoWatanabe on 2016/08/16. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { internal var window : UIWindow ? func application ( application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ NSObject : AnyObject ]?) -> Bool { // viewConroller\u3092\u751f\u6210. let myViewController = ViewController () // navigationController\u3092\u751f\u6210. let navigationController = UINavigationController ( rootViewController : myViewController ) // window\u3092\u751f\u6210. window = UIWindow ( frame : UIScreen . mainScreen (). bounds ) // rootViewController\u306bnavigationController\u3092\u8a2d\u5b9a. window ?. rootViewController = navigationController window ?. makeKeyAndVisible () return true } }","title":"UIBarButtonItem\u306e\u8a2d\u7f6e"},{"location":"1.uikit/017_uibarbuttonitem/#viewcontrollerswift","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 // // ViewController.swift // UIKit017_4.0 // // Created by KimikoWatanabe on 2016/08/16. // Copyright \u00a9 2018\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myLeftButton : UIBarButtonItem ! private var myRightButton : UIBarButtonItem ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u8272\u3092Cyan\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . cyan // NavigationController\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b. self . title = \"My Navigation\" // \u5de6\u30dc\u30bf\u30f3\u3092\u4f5c\u6210\u3059\u308b.. myLeftButton = UIBarButtonItem ( barButtonSystemItem : . add , target : self , action : #selector ( ViewController . onClickMyButton ( sender :))) // \u53f3\u30dc\u30bf\u30f3\u3092\u4f5c\u6210\u3059\u308b. myRightButton = UIBarButtonItem ( title : \"RightBtn\" , style : . plain , target : self , action : #selector ( ViewController . onClickMyButton ( sender :))) // tag\u3092\u8a2d\u5b9a\u3059\u308b. myLeftButton . tag = 1 myRightButton . tag = 2 // \u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30d0\u30fc\u306e\u5de6\u306b\u8a2d\u7f6e\u3059\u308b. self . navigationItem . leftBarButtonItem = myLeftButton // \u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30d0\u30fc\u306e\u53f3\u306b\u8a2d\u7f6e\u3059\u308b. self . navigationItem . rightBarButtonItem = myRightButton } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8. */ @objc internal func onClickMyButton ( sender : UIButton ){ switch ( sender . tag ){ case 1 : // \u80cc\u666f\u8272\u3092\u9752\u8272\u306b\u5909\u3048\u308b. self . view . backgroundColor = UIColor . blue case 2 : // \u80cc\u666f\u8272\u3092\u8d64\u8272\u306b\u5909\u3048\u308b. self . view . backgroundColor = UIColor . red default : print ( \"error\" ) } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 // // ViewController.swift // UIKit017_3.0 // // Created by KimikoWatanabe on 2016/08/16. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myLeftButton : UIBarButtonItem ! private var myRightButton : UIBarButtonItem ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u8272\u3092Cyan\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . cyan // NavigationController\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b. self . title = \"My Navigation\" // \u5de6\u30dc\u30bf\u30f3\u3092\u4f5c\u6210\u3059\u308b.. myLeftButton = UIBarButtonItem ( barButtonSystemItem : . add , target : self , action : #selector ( ViewController . onClickMyButton ( sender :))) // \u53f3\u30dc\u30bf\u30f3\u3092\u4f5c\u6210\u3059\u308b. myRightButton = UIBarButtonItem ( title : \"RightBtn\" , style : . plain , target : self , action : #selector ( ViewController . onClickMyButton ( sender :))) // tag\u3092\u8a2d\u5b9a\u3059\u308b. myLeftButton . tag = 1 myRightButton . tag = 2 // \u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30d0\u30fc\u306e\u5de6\u306b\u8a2d\u7f6e\u3059\u308b. self . navigationItem . leftBarButtonItem = myLeftButton // \u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30d0\u30fc\u306e\u53f3\u306b\u8a2d\u7f6e\u3059\u308b. self . navigationItem . rightBarButtonItem = myRightButton } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8. */ internal func onClickMyButton ( sender : UIButton ){ switch ( sender . tag ){ case 1 : // \u80cc\u666f\u8272\u3092\u9752\u8272\u306b\u5909\u3048\u308b. self . view . backgroundColor = UIColor . blue case 2 : // \u80cc\u666f\u8272\u3092\u8d64\u8272\u306b\u5909\u3048\u308b. self . view . backgroundColor = UIColor . red default : print ( \"error\" ) } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 // // ViewController.swift // UIKit017_2.3 // // Created by KimikoWatanabe on 2016/08/16. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myLeftButton : UIBarButtonItem ! private var myRightButton : UIBarButtonItem ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u8272\u3092Cyan\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . cyanColor () // NavigationController\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b. self . title = \"My Navigation\" // \u5de6\u30dc\u30bf\u30f3\u3092\u4f5c\u6210\u3059\u308b.. myLeftButton = UIBarButtonItem ( barButtonSystemItem : . Add , target : self , action : \"onClickMyButton:\" ) // \u53f3\u30dc\u30bf\u30f3\u3092\u4f5c\u6210\u3059\u308b. myRightButton = UIBarButtonItem ( title : \"RightBtn\" , style : . Plain , target : self , action : \"onClickMyButton:\" ) // tag\u3092\u8a2d\u5b9a\u3059\u308b. myLeftButton . tag = 1 myRightButton . tag = 2 // \u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30d0\u30fc\u306e\u5de6\u306b\u8a2d\u7f6e\u3059\u308b. self . navigationItem . leftBarButtonItem = myLeftButton // \u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30d0\u30fc\u306e\u53f3\u306b\u8a2d\u7f6e\u3059\u308b. self . navigationItem . rightBarButtonItem = myRightButton } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8. */ internal func onClickMyButton ( sender : UIButton ){ switch ( sender . tag ){ case 1 : // \u80cc\u666f\u8272\u3092\u9752\u8272\u306b\u5909\u3048\u308b. self . view . backgroundColor = UIColor . blueColor () case 2 : // \u80cc\u666f\u8272\u3092\u8d64\u8272\u306b\u5909\u3048\u308b. self . view . backgroundColor = UIColor . redColor () default : print ( \"error\" ) } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } }","title":"ViewController.swift"},{"location":"1.uikit/017_uibarbuttonitem/#3x4x","text":"internal func onClickMyButton(sender: UIButton) \u306b @objc \u3092\u8ffd\u52a0","title":"3.x\u30684.x\u306e\u5dee\u5206"},{"location":"1.uikit/017_uibarbuttonitem/#2330","text":"UIApplicationDelegate\u306eDelegate\u30e1\u30bd\u30c3\u30c9\u540d\u304c\u5909\u66f4 UIScreen\u304b\u3089\u30b9\u30af\u30ea\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u53d6\u5f97\u306e\u65b9\u6cd5\u304c\u5909\u66f4(UIScreen.mainScreen() -> UIScreen.main) UIBarButtonItemStyle\u306e\u540d\u79f0\u304c\u5909\u66f4","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/017_uibarbuttonitem/#reference","text":"UIBarButtonItem Class https://developer.apple.com/reference/uikit/uibarbuttonitem UINavigationController Class https://developer.apple.com/reference/uikit/uinavigationcontroller UIViewController Class https://developer.apple.com/reference/uikit/uiviewcontroller","title":"Reference"},{"location":"1.uikit/018_uipagecontrol/","text":"UIPageControl\u306e\u8868\u793a Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 // // ViewController.swift // UIKit018_4.0 // // Created by KimikoWatanabe on 2016/08/13. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UIScrollViewDelegate { private var pageControl : UIPageControl ! private var scrollView : UIScrollView ! override func viewDidLoad () { // \u30d3\u30e5\u30fc\u306e\u7e26\u3001\u6a2a\u306e\u30b5\u30a4\u30ba\u3092\u53d6\u5f97\u3059\u308b. let width = self . view . frame . maxX , height = self . view . frame . maxY // \u80cc\u666f\u306e\u8272\u3092Cyan\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . cyan // ScrollView\u3092\u53d6\u5f97\u3059\u308b. scrollView = UIScrollView ( frame : self . view . frame ) // \u30da\u30fc\u30b8\u6570\u3092\u5b9a\u7fa9\u3059\u308b. let pageSize = 4 // \u7e26\u65b9\u5411\u3068\u3001\u6a2a\u65b9\u5411\u306e\u30a4\u30f3\u30c7\u30a3\u30b1\u30fc\u30bf\u3092\u975e\u8868\u793a\u306b\u3059\u308b. scrollView . showsHorizontalScrollIndicator = false ; scrollView . showsVerticalScrollIndicator = false // \u30da\u30fc\u30b8\u30f3\u30b0\u3092\u8a31\u53ef\u3059\u308b. scrollView . isPagingEnabled = true // ScrollView\u306e\u30c7\u30ea\u30b2\u30fc\u30c8\u3092\u8a2d\u5b9a\u3059\u308b. scrollView . delegate = self // \u30b9\u30af\u30ed\u30fc\u30eb\u306e\u753b\u9762\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3059\u308b. scrollView . contentSize = CGSize ( width : CGFloat ( pageSize ) * width , height : 0 ) // ScrollView\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( scrollView ) // \u30da\u30fc\u30b8\u6570\u5206\u30dc\u30bf\u30f3\u3092\u751f\u6210\u3059\u308b. for i in 0 .. < pageSize { // \u30da\u30fc\u30b8\u3054\u3068\u306b\u7570\u306a\u308b\u30e9\u30d9\u30eb\u3092\u751f\u6210\u3059\u308b. let myLabel : UILabel = UILabel ( frame : CGRect ( x : CGFloat ( i ) * width + width / 2 - 40 , y : height / 2 - 40 , width : 80 , height : 80 )) myLabel . backgroundColor = UIColor . black myLabel . textColor = UIColor . white myLabel . textAlignment = NSTextAlignment . center myLabel . layer . masksToBounds = true myLabel . text = \"Page \\( i ) \" myLabel . font = UIFont . systemFont ( ofSize : UIFont . smallSystemFontSize ) myLabel . layer . cornerRadius = 40.0 scrollView . addSubview ( myLabel ) } // PageControl\u3092\u4f5c\u6210\u3059\u308b. pageControl = UIPageControl ( frame : CGRect ( x : 0 , y : self . view . frame . maxY - 100 , width : width , height : 50 )) pageControl . backgroundColor = UIColor . orange // PageControl\u3059\u308b\u30da\u30fc\u30b8\u6570\u3092\u8a2d\u5b9a\u3059\u308b. pageControl . numberOfPages = pageSize // \u73fe\u5728\u30da\u30fc\u30b8\u3092\u8a2d\u5b9a\u3059\u308b. pageControl . currentPage = 0 pageControl . isUserInteractionEnabled = false self . view . addSubview ( pageControl ) } func scrollViewDidEndDecelerating ( _ scrollView : UIScrollView ) { // \u30b9\u30af\u30ed\u30fc\u30eb\u6570\u304c1\u30da\u30fc\u30b8\u5206\u306b\u306a\u3063\u305f\u3089\u6642. if fmod ( scrollView . contentOffset . x , scrollView . frame . maxX ) == 0 { // \u30da\u30fc\u30b8\u306e\u5834\u6240\u3092\u5207\u308a\u66ff\u3048\u308b. pageControl . currentPage = Int ( scrollView . contentOffset . x / scrollView . frame . maxX ) } } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 // // ViewController.swift // UIKit018_3.0 // // Created by KimikoWatanabe on 2016/08/13. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UIScrollViewDelegate { private var pageControl : UIPageControl ! private var scrollView : UIScrollView ! override func viewDidLoad () { // \u30d3\u30e5\u30fc\u306e\u7e26\u3001\u6a2a\u306e\u30b5\u30a4\u30ba\u3092\u53d6\u5f97\u3059\u308b. let width = self . view . frame . maxX , height = self . view . frame . maxY // \u80cc\u666f\u306e\u8272\u3092Cyan\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . cyan // ScrollView\u3092\u53d6\u5f97\u3059\u308b. scrollView = UIScrollView ( frame : self . view . frame ) // \u30da\u30fc\u30b8\u6570\u3092\u5b9a\u7fa9\u3059\u308b. let pageSize = 4 // \u7e26\u65b9\u5411\u3068\u3001\u6a2a\u65b9\u5411\u306e\u30a4\u30f3\u30c7\u30a3\u30b1\u30fc\u30bf\u3092\u975e\u8868\u793a\u306b\u3059\u308b. scrollView . showsHorizontalScrollIndicator = false ; scrollView . showsVerticalScrollIndicator = false // \u30da\u30fc\u30b8\u30f3\u30b0\u3092\u8a31\u53ef\u3059\u308b. scrollView . isPagingEnabled = true // ScrollView\u306e\u30c7\u30ea\u30b2\u30fc\u30c8\u3092\u8a2d\u5b9a\u3059\u308b. scrollView . delegate = self // \u30b9\u30af\u30ed\u30fc\u30eb\u306e\u753b\u9762\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3059\u308b. scrollView . contentSize = CGSize ( width : CGFloat ( pageSize ) * width , height : 0 ) // ScrollView\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( scrollView ) // \u30da\u30fc\u30b8\u6570\u5206\u30dc\u30bf\u30f3\u3092\u751f\u6210\u3059\u308b. for i in 0 .. < pageSize { // \u30da\u30fc\u30b8\u3054\u3068\u306b\u7570\u306a\u308b\u30e9\u30d9\u30eb\u3092\u751f\u6210\u3059\u308b. let myLabel : UILabel = UILabel ( frame : CGRect ( x : CGFloat ( i ) * width + width / 2 - 40 , y : height / 2 - 40 , width : 80 , height : 80 )) myLabel . backgroundColor = UIColor . black myLabel . textColor = UIColor . white myLabel . textAlignment = NSTextAlignment . center myLabel . layer . masksToBounds = true myLabel . text = \"Page \\( i ) \" myLabel . font = UIFont . systemFont ( ofSize : UIFont . smallSystemFontSize ) myLabel . layer . cornerRadius = 40.0 scrollView . addSubview ( myLabel ) } // PageControl\u3092\u4f5c\u6210\u3059\u308b. pageControl = UIPageControl ( frame : CGRect ( x : 0 , y : self . view . frame . maxY - 100 , width : width , height : 50 )) pageControl . backgroundColor = UIColor . orange // PageControl\u3059\u308b\u30da\u30fc\u30b8\u6570\u3092\u8a2d\u5b9a\u3059\u308b. pageControl . numberOfPages = pageSize // \u73fe\u5728\u30da\u30fc\u30b8\u3092\u8a2d\u5b9a\u3059\u308b. pageControl . currentPage = 0 pageControl . isUserInteractionEnabled = false self . view . addSubview ( pageControl ) } func scrollViewDidEndDecelerating ( scrollView : UIScrollView ) { // \u30b9\u30af\u30ed\u30fc\u30eb\u6570\u304c1\u30da\u30fc\u30b8\u5206\u306b\u306a\u3063\u305f\u3089\u6642. if fmod ( scrollView . contentOffset . x , scrollView . frame . maxX ) == 0 { // \u30da\u30fc\u30b8\u306e\u5834\u6240\u3092\u5207\u308a\u66ff\u3048\u308b. pageControl . currentPage = Int ( scrollView . contentOffset . x / scrollView . frame . maxX ) } } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 // // ViewController.swift // UIKit018_2.3 // // Created by KimikoWatanabe on 2016/08/16. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UIScrollViewDelegate { private var pageControl : UIPageControl ! private var scrollView : UIScrollView ! override func viewDidLoad () { // \u30d3\u30e5\u30fc\u306e\u7e26\u3001\u6a2a\u306e\u30b5\u30a4\u30ba\u3092\u53d6\u5f97\u3059\u308b. let width = self . view . frame . maxX , height = self . view . frame . maxY // \u80cc\u666f\u306e\u8272\u3092Cyan\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . cyanColor () // ScrollView\u3092\u53d6\u5f97\u3059\u308b. scrollView = UIScrollView ( frame : self . view . frame ) // \u30da\u30fc\u30b8\u6570\u3092\u5b9a\u7fa9\u3059\u308b. let pageSize = 4 // \u7e26\u65b9\u5411\u3068\u3001\u6a2a\u65b9\u5411\u306e\u30a4\u30f3\u30c7\u30a3\u30b1\u30fc\u30bf\u3092\u975e\u8868\u793a\u306b\u3059\u308b. scrollView . showsHorizontalScrollIndicator = false ; scrollView . showsVerticalScrollIndicator = false // \u30da\u30fc\u30b8\u30f3\u30b0\u3092\u8a31\u53ef\u3059\u308b. scrollView . pagingEnabled = true // ScrollView\u306e\u30c7\u30ea\u30b2\u30fc\u30c8\u3092\u8a2d\u5b9a\u3059\u308b. scrollView . delegate = self // \u30b9\u30af\u30ed\u30fc\u30eb\u306e\u753b\u9762\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3059\u308b. scrollView . contentSize = CGSizeMake ( CGFloat ( pageSize ) * width , 0 ) // ScrollView\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( scrollView ) // \u30da\u30fc\u30b8\u6570\u5206\u30dc\u30bf\u30f3\u3092\u751f\u6210\u3059\u308b. for var i = 0 ; i < pageSize ; i ++ { // \u30da\u30fc\u30b8\u3054\u3068\u306b\u7570\u306a\u308b\u30e9\u30d9\u30eb\u3092\u751f\u6210\u3059\u308b. let myLabel : UILabel = UILabel ( frame : CGRectMake ( CGFloat ( i ) * width + width / 2 - 40 , height / 2 - 40 , 80 , 80 )) myLabel . backgroundColor = UIColor . blackColor () myLabel . textColor = UIColor . whiteColor () myLabel . textAlignment = NSTextAlignment . Center myLabel . layer . masksToBounds = true myLabel . text = \"Page \\( i ) \" myLabel . font = UIFont . systemFontOfSize ( UIFont . smallSystemFontSize ()) myLabel . layer . cornerRadius = 40.0 scrollView . addSubview ( myLabel ) } // PageControl\u3092\u4f5c\u6210\u3059\u308b. pageControl = UIPageControl ( frame : CGRectMake ( 0 , self . view . frame . maxY - 100 , width , 50 )) pageControl . backgroundColor = UIColor . orangeColor () // PageControl\u3059\u308b\u30da\u30fc\u30b8\u6570\u3092\u8a2d\u5b9a\u3059\u308b. pageControl . numberOfPages = pageSize // \u73fe\u5728\u30da\u30fc\u30b8\u3092\u8a2d\u5b9a\u3059\u308b. pageControl . currentPage = 0 pageControl . userInteractionEnabled = false self . view . addSubview ( pageControl ) } func scrollViewDidEndDecelerating ( scrollView : UIScrollView ) { // \u30b9\u30af\u30ed\u30fc\u30eb\u6570\u304c1\u30da\u30fc\u30b8\u5206\u306b\u306a\u3063\u305f\u3089\u6642. if fmod ( scrollView . contentOffset . x , scrollView . frame . maxX ) == 0 { // \u30da\u30fc\u30b8\u306e\u5834\u6240\u3092\u5207\u308a\u66ff\u3048\u308b. pageControl . currentPage = Int ( scrollView . contentOffset . x / scrollView . frame . maxX ) } } } 3.x\u30684.x\u306e\u5dee\u5206 scrollViewDidEndDecelerating(scrollView: UIScrollView) \u304c\u3001 scrollViewDidEndDecelerating(_ scrollView: UIScrollView) \u306b\u5909\u66f4 2.3\u30683.0\u306e\u5dee\u5206 UIColor\u306e\u6307\u5b9a\u304c\u5909\u66f4 UIScrollView\u3068UIPageControl\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u540d\u304c\u5909\u66f4 CGSize,CGRect\u306e\u751f\u6210\u65b9\u6cd5\u304c\u5909\u66f4(CGSizeMake,CGRectMake\u30e1\u30bd\u30c3\u30c9\u304c\u5ec3\u6b62) Reference UIPageControl Class https://developer.apple.com/reference/uikit/uipagecontrol","title":"UIPageControl\u306e\u8868\u793a"},{"location":"1.uikit/018_uipagecontrol/#uipagecontrol","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 // // ViewController.swift // UIKit018_4.0 // // Created by KimikoWatanabe on 2016/08/13. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UIScrollViewDelegate { private var pageControl : UIPageControl ! private var scrollView : UIScrollView ! override func viewDidLoad () { // \u30d3\u30e5\u30fc\u306e\u7e26\u3001\u6a2a\u306e\u30b5\u30a4\u30ba\u3092\u53d6\u5f97\u3059\u308b. let width = self . view . frame . maxX , height = self . view . frame . maxY // \u80cc\u666f\u306e\u8272\u3092Cyan\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . cyan // ScrollView\u3092\u53d6\u5f97\u3059\u308b. scrollView = UIScrollView ( frame : self . view . frame ) // \u30da\u30fc\u30b8\u6570\u3092\u5b9a\u7fa9\u3059\u308b. let pageSize = 4 // \u7e26\u65b9\u5411\u3068\u3001\u6a2a\u65b9\u5411\u306e\u30a4\u30f3\u30c7\u30a3\u30b1\u30fc\u30bf\u3092\u975e\u8868\u793a\u306b\u3059\u308b. scrollView . showsHorizontalScrollIndicator = false ; scrollView . showsVerticalScrollIndicator = false // \u30da\u30fc\u30b8\u30f3\u30b0\u3092\u8a31\u53ef\u3059\u308b. scrollView . isPagingEnabled = true // ScrollView\u306e\u30c7\u30ea\u30b2\u30fc\u30c8\u3092\u8a2d\u5b9a\u3059\u308b. scrollView . delegate = self // \u30b9\u30af\u30ed\u30fc\u30eb\u306e\u753b\u9762\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3059\u308b. scrollView . contentSize = CGSize ( width : CGFloat ( pageSize ) * width , height : 0 ) // ScrollView\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( scrollView ) // \u30da\u30fc\u30b8\u6570\u5206\u30dc\u30bf\u30f3\u3092\u751f\u6210\u3059\u308b. for i in 0 .. < pageSize { // \u30da\u30fc\u30b8\u3054\u3068\u306b\u7570\u306a\u308b\u30e9\u30d9\u30eb\u3092\u751f\u6210\u3059\u308b. let myLabel : UILabel = UILabel ( frame : CGRect ( x : CGFloat ( i ) * width + width / 2 - 40 , y : height / 2 - 40 , width : 80 , height : 80 )) myLabel . backgroundColor = UIColor . black myLabel . textColor = UIColor . white myLabel . textAlignment = NSTextAlignment . center myLabel . layer . masksToBounds = true myLabel . text = \"Page \\( i ) \" myLabel . font = UIFont . systemFont ( ofSize : UIFont . smallSystemFontSize ) myLabel . layer . cornerRadius = 40.0 scrollView . addSubview ( myLabel ) } // PageControl\u3092\u4f5c\u6210\u3059\u308b. pageControl = UIPageControl ( frame : CGRect ( x : 0 , y : self . view . frame . maxY - 100 , width : width , height : 50 )) pageControl . backgroundColor = UIColor . orange // PageControl\u3059\u308b\u30da\u30fc\u30b8\u6570\u3092\u8a2d\u5b9a\u3059\u308b. pageControl . numberOfPages = pageSize // \u73fe\u5728\u30da\u30fc\u30b8\u3092\u8a2d\u5b9a\u3059\u308b. pageControl . currentPage = 0 pageControl . isUserInteractionEnabled = false self . view . addSubview ( pageControl ) } func scrollViewDidEndDecelerating ( _ scrollView : UIScrollView ) { // \u30b9\u30af\u30ed\u30fc\u30eb\u6570\u304c1\u30da\u30fc\u30b8\u5206\u306b\u306a\u3063\u305f\u3089\u6642. if fmod ( scrollView . contentOffset . x , scrollView . frame . maxX ) == 0 { // \u30da\u30fc\u30b8\u306e\u5834\u6240\u3092\u5207\u308a\u66ff\u3048\u308b. pageControl . currentPage = Int ( scrollView . contentOffset . x / scrollView . frame . maxX ) } } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 // // ViewController.swift // UIKit018_3.0 // // Created by KimikoWatanabe on 2016/08/13. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UIScrollViewDelegate { private var pageControl : UIPageControl ! private var scrollView : UIScrollView ! override func viewDidLoad () { // \u30d3\u30e5\u30fc\u306e\u7e26\u3001\u6a2a\u306e\u30b5\u30a4\u30ba\u3092\u53d6\u5f97\u3059\u308b. let width = self . view . frame . maxX , height = self . view . frame . maxY // \u80cc\u666f\u306e\u8272\u3092Cyan\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . cyan // ScrollView\u3092\u53d6\u5f97\u3059\u308b. scrollView = UIScrollView ( frame : self . view . frame ) // \u30da\u30fc\u30b8\u6570\u3092\u5b9a\u7fa9\u3059\u308b. let pageSize = 4 // \u7e26\u65b9\u5411\u3068\u3001\u6a2a\u65b9\u5411\u306e\u30a4\u30f3\u30c7\u30a3\u30b1\u30fc\u30bf\u3092\u975e\u8868\u793a\u306b\u3059\u308b. scrollView . showsHorizontalScrollIndicator = false ; scrollView . showsVerticalScrollIndicator = false // \u30da\u30fc\u30b8\u30f3\u30b0\u3092\u8a31\u53ef\u3059\u308b. scrollView . isPagingEnabled = true // ScrollView\u306e\u30c7\u30ea\u30b2\u30fc\u30c8\u3092\u8a2d\u5b9a\u3059\u308b. scrollView . delegate = self // \u30b9\u30af\u30ed\u30fc\u30eb\u306e\u753b\u9762\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3059\u308b. scrollView . contentSize = CGSize ( width : CGFloat ( pageSize ) * width , height : 0 ) // ScrollView\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( scrollView ) // \u30da\u30fc\u30b8\u6570\u5206\u30dc\u30bf\u30f3\u3092\u751f\u6210\u3059\u308b. for i in 0 .. < pageSize { // \u30da\u30fc\u30b8\u3054\u3068\u306b\u7570\u306a\u308b\u30e9\u30d9\u30eb\u3092\u751f\u6210\u3059\u308b. let myLabel : UILabel = UILabel ( frame : CGRect ( x : CGFloat ( i ) * width + width / 2 - 40 , y : height / 2 - 40 , width : 80 , height : 80 )) myLabel . backgroundColor = UIColor . black myLabel . textColor = UIColor . white myLabel . textAlignment = NSTextAlignment . center myLabel . layer . masksToBounds = true myLabel . text = \"Page \\( i ) \" myLabel . font = UIFont . systemFont ( ofSize : UIFont . smallSystemFontSize ) myLabel . layer . cornerRadius = 40.0 scrollView . addSubview ( myLabel ) } // PageControl\u3092\u4f5c\u6210\u3059\u308b. pageControl = UIPageControl ( frame : CGRect ( x : 0 , y : self . view . frame . maxY - 100 , width : width , height : 50 )) pageControl . backgroundColor = UIColor . orange // PageControl\u3059\u308b\u30da\u30fc\u30b8\u6570\u3092\u8a2d\u5b9a\u3059\u308b. pageControl . numberOfPages = pageSize // \u73fe\u5728\u30da\u30fc\u30b8\u3092\u8a2d\u5b9a\u3059\u308b. pageControl . currentPage = 0 pageControl . isUserInteractionEnabled = false self . view . addSubview ( pageControl ) } func scrollViewDidEndDecelerating ( scrollView : UIScrollView ) { // \u30b9\u30af\u30ed\u30fc\u30eb\u6570\u304c1\u30da\u30fc\u30b8\u5206\u306b\u306a\u3063\u305f\u3089\u6642. if fmod ( scrollView . contentOffset . x , scrollView . frame . maxX ) == 0 { // \u30da\u30fc\u30b8\u306e\u5834\u6240\u3092\u5207\u308a\u66ff\u3048\u308b. pageControl . currentPage = Int ( scrollView . contentOffset . x / scrollView . frame . maxX ) } } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 // // ViewController.swift // UIKit018_2.3 // // Created by KimikoWatanabe on 2016/08/16. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UIScrollViewDelegate { private var pageControl : UIPageControl ! private var scrollView : UIScrollView ! override func viewDidLoad () { // \u30d3\u30e5\u30fc\u306e\u7e26\u3001\u6a2a\u306e\u30b5\u30a4\u30ba\u3092\u53d6\u5f97\u3059\u308b. let width = self . view . frame . maxX , height = self . view . frame . maxY // \u80cc\u666f\u306e\u8272\u3092Cyan\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . cyanColor () // ScrollView\u3092\u53d6\u5f97\u3059\u308b. scrollView = UIScrollView ( frame : self . view . frame ) // \u30da\u30fc\u30b8\u6570\u3092\u5b9a\u7fa9\u3059\u308b. let pageSize = 4 // \u7e26\u65b9\u5411\u3068\u3001\u6a2a\u65b9\u5411\u306e\u30a4\u30f3\u30c7\u30a3\u30b1\u30fc\u30bf\u3092\u975e\u8868\u793a\u306b\u3059\u308b. scrollView . showsHorizontalScrollIndicator = false ; scrollView . showsVerticalScrollIndicator = false // \u30da\u30fc\u30b8\u30f3\u30b0\u3092\u8a31\u53ef\u3059\u308b. scrollView . pagingEnabled = true // ScrollView\u306e\u30c7\u30ea\u30b2\u30fc\u30c8\u3092\u8a2d\u5b9a\u3059\u308b. scrollView . delegate = self // \u30b9\u30af\u30ed\u30fc\u30eb\u306e\u753b\u9762\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3059\u308b. scrollView . contentSize = CGSizeMake ( CGFloat ( pageSize ) * width , 0 ) // ScrollView\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( scrollView ) // \u30da\u30fc\u30b8\u6570\u5206\u30dc\u30bf\u30f3\u3092\u751f\u6210\u3059\u308b. for var i = 0 ; i < pageSize ; i ++ { // \u30da\u30fc\u30b8\u3054\u3068\u306b\u7570\u306a\u308b\u30e9\u30d9\u30eb\u3092\u751f\u6210\u3059\u308b. let myLabel : UILabel = UILabel ( frame : CGRectMake ( CGFloat ( i ) * width + width / 2 - 40 , height / 2 - 40 , 80 , 80 )) myLabel . backgroundColor = UIColor . blackColor () myLabel . textColor = UIColor . whiteColor () myLabel . textAlignment = NSTextAlignment . Center myLabel . layer . masksToBounds = true myLabel . text = \"Page \\( i ) \" myLabel . font = UIFont . systemFontOfSize ( UIFont . smallSystemFontSize ()) myLabel . layer . cornerRadius = 40.0 scrollView . addSubview ( myLabel ) } // PageControl\u3092\u4f5c\u6210\u3059\u308b. pageControl = UIPageControl ( frame : CGRectMake ( 0 , self . view . frame . maxY - 100 , width , 50 )) pageControl . backgroundColor = UIColor . orangeColor () // PageControl\u3059\u308b\u30da\u30fc\u30b8\u6570\u3092\u8a2d\u5b9a\u3059\u308b. pageControl . numberOfPages = pageSize // \u73fe\u5728\u30da\u30fc\u30b8\u3092\u8a2d\u5b9a\u3059\u308b. pageControl . currentPage = 0 pageControl . userInteractionEnabled = false self . view . addSubview ( pageControl ) } func scrollViewDidEndDecelerating ( scrollView : UIScrollView ) { // \u30b9\u30af\u30ed\u30fc\u30eb\u6570\u304c1\u30da\u30fc\u30b8\u5206\u306b\u306a\u3063\u305f\u3089\u6642. if fmod ( scrollView . contentOffset . x , scrollView . frame . maxX ) == 0 { // \u30da\u30fc\u30b8\u306e\u5834\u6240\u3092\u5207\u308a\u66ff\u3048\u308b. pageControl . currentPage = Int ( scrollView . contentOffset . x / scrollView . frame . maxX ) } } }","title":"UIPageControl\u306e\u8868\u793a"},{"location":"1.uikit/018_uipagecontrol/#3x4x","text":"scrollViewDidEndDecelerating(scrollView: UIScrollView) \u304c\u3001 scrollViewDidEndDecelerating(_ scrollView: UIScrollView) \u306b\u5909\u66f4","title":"3.x\u30684.x\u306e\u5dee\u5206"},{"location":"1.uikit/018_uipagecontrol/#2330","text":"UIColor\u306e\u6307\u5b9a\u304c\u5909\u66f4 UIScrollView\u3068UIPageControl\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u540d\u304c\u5909\u66f4 CGSize,CGRect\u306e\u751f\u6210\u65b9\u6cd5\u304c\u5909\u66f4(CGSizeMake,CGRectMake\u30e1\u30bd\u30c3\u30c9\u304c\u5ec3\u6b62)","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/018_uipagecontrol/#reference","text":"UIPageControl Class https://developer.apple.com/reference/uikit/uipagecontrol","title":"Reference"},{"location":"1.uikit/019_sectionuitableview/","text":"\u30bb\u30af\u30b7\u30e7\u30f3\u5206\u3051\u3057\u305fUITableView\u3092\u4f5c\u308b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 // // ViewController.swift // UIKit019_3.0 // // Created by KimikoWatanabe on 2016/08/16. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UITableViewDelegate , UITableViewDataSource { // Table\u3067\u4f7f\u7528\u3059\u308b\u914d\u5217\u3092\u5b9a\u7fa9\u3059\u308b. private let myiPhoneItems : NSArray = [ \"iOS9\" , \"iOS8\" , \"iOS7\" , \"iOS6\" , \"iOS5\" , \"iOS4\" ] private let myAndroidItems : NSArray = [ \"5.x\" , \"4.x\" , \"2.x\" , \"1.x\" ] // Section\u3067\u4f7f\u7528\u3059\u308b\u914d\u5217\u3092\u5b9a\u7fa9\u3059\u308b. private let mySections : NSArray = [ \"iPhone\" , \"Android\" ] override func viewDidLoad () { super . viewDidLoad () // Status Bar\u306e\u9ad8\u3055\u3092\u53d6\u5f97\u3092.\u3059\u308b. let barHeight : CGFloat = UIApplication . shared . statusBarFrame . size . height // View\u306e\u9ad8\u3055\u3068\u5e45\u3092\u53d6\u5f97\u3059\u308b. let displayWidth : CGFloat = self . view . frame . width let displayHeight : CGFloat = self . view . frame . height // TableView\u306e\u751f\u6210( status bar\u306e\u9ad8\u3055\u5206\u305a\u3089\u3057\u3066\u8868\u793a ). let myTableView : UITableView = UITableView ( frame : CGRect ( x : 0 , y : barHeight , width : displayWidth , height : displayHeight - barHeight )) // Cell\u540d\u306e\u767b\u9332\u3092\u304a\u3053\u306a\u3046. myTableView . register ( UITableViewCell . self , forCellReuseIdentifier : \"MyCell\" ) // DataSource\u306e\u8a2d\u5b9a\u3092\u3059\u308b. myTableView . dataSource = self // Delegate\u3092\u8a2d\u5b9a\u3059\u308b. myTableView . delegate = self // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myTableView ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } /* \u30bb\u30af\u30b7\u30e7\u30f3\u306e\u6570\u3092\u8fd4\u3059. */ func numberOfSections ( in tableView : UITableView ) -> Int { return mySections . count } /* \u30bb\u30af\u30b7\u30e7\u30f3\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u8fd4\u3059. */ func tableView ( _ tableView : UITableView , titleForHeaderInSection section : Int ) -> String ? { return mySections [ section ] as ? String } /* Cell\u304c\u9078\u629e\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ func tableView ( _ tableView : UITableView , didSelectRowAt indexPath : IndexPath ) { if indexPath . section == 0 { print ( \"Value: \\( myiPhoneItems [ indexPath . row ] ) \" ) } else if indexPath . section == 1 { print ( \"Value: \\( myAndroidItems [ indexPath . row ] ) \" ) } } /* \u30c6\u30fc\u30d6\u30eb\u306b\u8868\u793a\u3059\u308b\u914d\u5217\u306e\u7dcf\u6570\u3092\u8fd4\u3059. */ func tableView ( _ tableView : UITableView , numberOfRowsInSection section : Int ) -> Int { if section == 0 { return myiPhoneItems . count } else if section == 1 { return myAndroidItems . count } else { return 0 } } /* Cell\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b. */ func tableView ( _ tableView : UITableView , cellForRowAt indexPath : IndexPath ) -> UITableViewCell { let cell = tableView . dequeueReusableCell ( withIdentifier : \"MyCell\" , for : indexPath ) if indexPath . section == 0 { cell . textLabel ?. text = \" \\( myiPhoneItems [ indexPath . row ] ) \" } else if indexPath . section == 1 { cell . textLabel ?. text = \" \\( myAndroidItems [ indexPath . row ] ) \" } return cell } } ```swift\u3000fct_label=\"Swift 2.3\" // // ViewController.swift // UIKit019_2.3 // // Created by KimikoWatanabe on 2016/08/16. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController: UIViewController, UITableViewDelegate, UITableViewDataSource { 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 // Table\u3067\u4f7f\u7528\u3059\u308b\u914d\u5217\u3092\u5b9a\u7fa9\u3059\u308b . private let myiPhoneItems : NSArray = [ \"iOS9\" , \"iOS8\" , \"iOS7\" , \"iOS6\" , \"iOS5\" , \"iOS4\" ] private let myAndroidItems : NSArray = [ \"5.x\" , \"4.x\" , \"2.x\" , \"1.x\" ] // Section\u3067\u4f7f\u7528\u3059\u308b\u914d\u5217\u3092\u5b9a\u7fa9\u3059\u308b . private let mySections : NSArray = [ \"iPhone\" , \"Android\" ] override func viewDidLoad () { super.viewDidLoad() // Status Bar\u306e\u9ad8\u3055\u3092\u53d6\u5f97\u3092.\u3059\u308b. let barHeight : CGFloat = UIApplication . sharedApplication () . statusBarFrame . size . height // View\u306e\u9ad8\u3055\u3068\u5e45\u3092\u53d6\u5f97\u3059\u308b . let displayWidth : CGFloat = self . view . frame . width let displayHeight : CGFloat = self . view . frame . height // TableView\u306e\u751f\u6210 ( status bar\u306e\u9ad8\u3055\u5206\u305a\u3089\u3057\u3066\u8868\u793a ) . let myTableView : UITableView = UITableView ( frame : CGRect ( x : 0 , y : barHeight , width : displayWidth , height : displayHeight - barHeight )) // Cell\u540d\u306e\u767b\u9332\u3092\u304a\u3053\u306a\u3046 . myTableView . registerClass ( UITableViewCell . self , forCellReuseIdentifier : \"MyCell\" ) // DataSource\u306e\u8a2d\u5b9a\u3092\u3059\u308b . myTableView . dataSource = self // Delegate\u3092\u8a2d\u5b9a\u3059\u308b . myTableView . delegate = self // View\u306b\u8ffd\u52a0\u3059\u308b . self . view . addSubview ( myTableView ) } override func didReceiveMemoryWarning () { super.didReceiveMemoryWarning() } /* \u30bb\u30af\u30b7\u30e7\u30f3\u306e\u6570\u3092\u8fd4\u3059. */ func numberOfSectionsInTableView ( tableView : UITableView ) - & gt ; Int { return mySections.count } /* \u30bb\u30af\u30b7\u30e7\u30f3\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u8fd4\u3059. */ func tableView ( tableView : UITableView , titleForHeaderInSection section : Int ) - & gt ; String ? { return mySections [ section ] as? String } /* Cell\u304c\u9078\u629e\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ func tableView ( tableView : UITableView , didSelectRowAtIndexPath indexPath : NSIndexPath ) { if indexPath.section == 0 { print(\" Value : \\ ( myiPhoneItems [ indexPath.row ] ) \") } else if indexPath.section == 1 { print(\" Value : \\ ( myAndroidItems [ indexPath.row ] ) \") } } /* \u30c6\u30fc\u30d6\u30eb\u306b\u8868\u793a\u3059\u308b\u914d\u5217\u306e\u7dcf\u6570\u3092\u8fd4\u3059. */ func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { if section == 0 { return myiPhoneItems.count } else if section == 1 { return myAndroidItems.count } else { return 0 } } /* Cell\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b. */ func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell { let cell = tableView.dequeueReusableCellWithIdentifier(\" MyCell \", forIndexPath: indexPath) if indexPath.section == 0 { cell.textLabel?.text = \" \\ ( myiPhoneItems [ indexPath.row ] ) \" } else if indexPath.section == 1 { cell.textLabel?.text = \" \\ ( myAndroidItems [ indexPath.row ] ) \" } return cell } } ``` 2.3\u30683.0\u306e\u5dee\u5206 UITableViewDelegate\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u304c\u4e00\u90e8\u5909\u66f4 Reference UITableView Class https://developer.apple.com/reference/uikit/uitableview UITableVIewDelegate Protocol https://developer.apple.com/reference/uikit/uitableviewdelegate UITableViewDataSource Protocol https://developer.apple.com/reference/uikit/uitableviewdatasource","title":"\u30bb\u30af\u30b7\u30e7\u30f3\u5206\u3051\u3057\u305fUITableView\u3092\u4f5c\u308b"},{"location":"1.uikit/019_sectionuitableview/#uitableview","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 // // ViewController.swift // UIKit019_3.0 // // Created by KimikoWatanabe on 2016/08/16. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UITableViewDelegate , UITableViewDataSource { // Table\u3067\u4f7f\u7528\u3059\u308b\u914d\u5217\u3092\u5b9a\u7fa9\u3059\u308b. private let myiPhoneItems : NSArray = [ \"iOS9\" , \"iOS8\" , \"iOS7\" , \"iOS6\" , \"iOS5\" , \"iOS4\" ] private let myAndroidItems : NSArray = [ \"5.x\" , \"4.x\" , \"2.x\" , \"1.x\" ] // Section\u3067\u4f7f\u7528\u3059\u308b\u914d\u5217\u3092\u5b9a\u7fa9\u3059\u308b. private let mySections : NSArray = [ \"iPhone\" , \"Android\" ] override func viewDidLoad () { super . viewDidLoad () // Status Bar\u306e\u9ad8\u3055\u3092\u53d6\u5f97\u3092.\u3059\u308b. let barHeight : CGFloat = UIApplication . shared . statusBarFrame . size . height // View\u306e\u9ad8\u3055\u3068\u5e45\u3092\u53d6\u5f97\u3059\u308b. let displayWidth : CGFloat = self . view . frame . width let displayHeight : CGFloat = self . view . frame . height // TableView\u306e\u751f\u6210( status bar\u306e\u9ad8\u3055\u5206\u305a\u3089\u3057\u3066\u8868\u793a ). let myTableView : UITableView = UITableView ( frame : CGRect ( x : 0 , y : barHeight , width : displayWidth , height : displayHeight - barHeight )) // Cell\u540d\u306e\u767b\u9332\u3092\u304a\u3053\u306a\u3046. myTableView . register ( UITableViewCell . self , forCellReuseIdentifier : \"MyCell\" ) // DataSource\u306e\u8a2d\u5b9a\u3092\u3059\u308b. myTableView . dataSource = self // Delegate\u3092\u8a2d\u5b9a\u3059\u308b. myTableView . delegate = self // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myTableView ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } /* \u30bb\u30af\u30b7\u30e7\u30f3\u306e\u6570\u3092\u8fd4\u3059. */ func numberOfSections ( in tableView : UITableView ) -> Int { return mySections . count } /* \u30bb\u30af\u30b7\u30e7\u30f3\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u8fd4\u3059. */ func tableView ( _ tableView : UITableView , titleForHeaderInSection section : Int ) -> String ? { return mySections [ section ] as ? String } /* Cell\u304c\u9078\u629e\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ func tableView ( _ tableView : UITableView , didSelectRowAt indexPath : IndexPath ) { if indexPath . section == 0 { print ( \"Value: \\( myiPhoneItems [ indexPath . row ] ) \" ) } else if indexPath . section == 1 { print ( \"Value: \\( myAndroidItems [ indexPath . row ] ) \" ) } } /* \u30c6\u30fc\u30d6\u30eb\u306b\u8868\u793a\u3059\u308b\u914d\u5217\u306e\u7dcf\u6570\u3092\u8fd4\u3059. */ func tableView ( _ tableView : UITableView , numberOfRowsInSection section : Int ) -> Int { if section == 0 { return myiPhoneItems . count } else if section == 1 { return myAndroidItems . count } else { return 0 } } /* Cell\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b. */ func tableView ( _ tableView : UITableView , cellForRowAt indexPath : IndexPath ) -> UITableViewCell { let cell = tableView . dequeueReusableCell ( withIdentifier : \"MyCell\" , for : indexPath ) if indexPath . section == 0 { cell . textLabel ?. text = \" \\( myiPhoneItems [ indexPath . row ] ) \" } else if indexPath . section == 1 { cell . textLabel ?. text = \" \\( myAndroidItems [ indexPath . row ] ) \" } return cell } } ```swift\u3000fct_label=\"Swift 2.3\" // // ViewController.swift // UIKit019_2.3 // // Created by KimikoWatanabe on 2016/08/16. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController: UIViewController, UITableViewDelegate, UITableViewDataSource { 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 // Table\u3067\u4f7f\u7528\u3059\u308b\u914d\u5217\u3092\u5b9a\u7fa9\u3059\u308b . private let myiPhoneItems : NSArray = [ \"iOS9\" , \"iOS8\" , \"iOS7\" , \"iOS6\" , \"iOS5\" , \"iOS4\" ] private let myAndroidItems : NSArray = [ \"5.x\" , \"4.x\" , \"2.x\" , \"1.x\" ] // Section\u3067\u4f7f\u7528\u3059\u308b\u914d\u5217\u3092\u5b9a\u7fa9\u3059\u308b . private let mySections : NSArray = [ \"iPhone\" , \"Android\" ] override func viewDidLoad () { super.viewDidLoad() // Status Bar\u306e\u9ad8\u3055\u3092\u53d6\u5f97\u3092.\u3059\u308b. let barHeight : CGFloat = UIApplication . sharedApplication () . statusBarFrame . size . height // View\u306e\u9ad8\u3055\u3068\u5e45\u3092\u53d6\u5f97\u3059\u308b . let displayWidth : CGFloat = self . view . frame . width let displayHeight : CGFloat = self . view . frame . height // TableView\u306e\u751f\u6210 ( status bar\u306e\u9ad8\u3055\u5206\u305a\u3089\u3057\u3066\u8868\u793a ) . let myTableView : UITableView = UITableView ( frame : CGRect ( x : 0 , y : barHeight , width : displayWidth , height : displayHeight - barHeight )) // Cell\u540d\u306e\u767b\u9332\u3092\u304a\u3053\u306a\u3046 . myTableView . registerClass ( UITableViewCell . self , forCellReuseIdentifier : \"MyCell\" ) // DataSource\u306e\u8a2d\u5b9a\u3092\u3059\u308b . myTableView . dataSource = self // Delegate\u3092\u8a2d\u5b9a\u3059\u308b . myTableView . delegate = self // View\u306b\u8ffd\u52a0\u3059\u308b . self . view . addSubview ( myTableView ) } override func didReceiveMemoryWarning () { super.didReceiveMemoryWarning() } /* \u30bb\u30af\u30b7\u30e7\u30f3\u306e\u6570\u3092\u8fd4\u3059. */ func numberOfSectionsInTableView ( tableView : UITableView ) - & gt ; Int { return mySections.count } /* \u30bb\u30af\u30b7\u30e7\u30f3\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u8fd4\u3059. */ func tableView ( tableView : UITableView , titleForHeaderInSection section : Int ) - & gt ; String ? { return mySections [ section ] as? String } /* Cell\u304c\u9078\u629e\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ func tableView ( tableView : UITableView , didSelectRowAtIndexPath indexPath : NSIndexPath ) { if indexPath.section == 0 { print(\" Value : \\ ( myiPhoneItems [ indexPath.row ] ) \") } else if indexPath.section == 1 { print(\" Value : \\ ( myAndroidItems [ indexPath.row ] ) \") } } /* \u30c6\u30fc\u30d6\u30eb\u306b\u8868\u793a\u3059\u308b\u914d\u5217\u306e\u7dcf\u6570\u3092\u8fd4\u3059. */ func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { if section == 0 { return myiPhoneItems.count } else if section == 1 { return myAndroidItems.count } else { return 0 } } /* Cell\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b. */ func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell { let cell = tableView.dequeueReusableCellWithIdentifier(\" MyCell \", forIndexPath: indexPath) if indexPath.section == 0 { cell.textLabel?.text = \" \\ ( myiPhoneItems [ indexPath.row ] ) \" } else if indexPath.section == 1 { cell.textLabel?.text = \" \\ ( myAndroidItems [ indexPath.row ] ) \" } return cell } } ```","title":"\u30bb\u30af\u30b7\u30e7\u30f3\u5206\u3051\u3057\u305fUITableView\u3092\u4f5c\u308b"},{"location":"1.uikit/019_sectionuitableview/#2330","text":"UITableViewDelegate\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u304c\u4e00\u90e8\u5909\u66f4","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/019_sectionuitableview/#reference","text":"UITableView Class https://developer.apple.com/reference/uikit/uitableview UITableVIewDelegate Protocol https://developer.apple.com/reference/uikit/uitableviewdelegate UITableViewDataSource Protocol https://developer.apple.com/reference/uikit/uitableviewdatasource","title":"Reference"},{"location":"1.uikit/020_uitextview/","text":"UITextView\u3067\u8907\u6570\u884c\u306e\u30c6\u30ad\u30b9\u30c8\u306e\u8868\u793a Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 // // ViewController.swift // UIKit020_3.0 // // Created by KimikoWatanabe on 2016/08/13. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u7070\u8272\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor ( red : 0.9 , green : 0.9 , blue : 0.9 , alpha : 1.0 ) // TextView\u751f\u6210\u3059\u308b. let myTextView : UITextView = UITextView ( frame : CGRect ( x : 10 , y : 50 , width : self . view . frame . width - 20 , height : 500 )) // TextView\u306e\u80cc\u666f\u3092\u9ec3\u8272\u306b\u8a2d\u5b9a\u3059\u308b. myTextView . backgroundColor = UIColor ( red : 0.9 , green : 0.9 , blue : 1 , alpha : 1.0 ) // \u8868\u793a\u3055\u305b\u308b\u30c6\u30ad\u30b9\u30c8\u3092\u8a2d\u5b9a\u3059\u308b. myTextView . text = \"1234567890abcdefghijklmnopqrstuwxyz 1234567890 abcdefghijklmnopqrstuwxyz \\n a \\n b \\n c \\n defghijklmnopqrstuwxyz \\n http://www.gclue.com \\n \" // \u89d2\u306b\u4e38\u307f\u3092\u3064\u3051\u308b. myTextView . layer . masksToBounds = true // \u4e38\u307f\u306e\u30b5\u30a4\u30ba\u3092\u8a2d\u5b9a\u3059\u308b. myTextView . layer . cornerRadius = 20.0 // \u67a0\u7dda\u306e\u592a\u3055\u3092\u8a2d\u5b9a\u3059\u308b. myTextView . layer . borderWidth = 1 // \u67a0\u7dda\u306e\u8272\u3092\u9ed2\u306b\u8a2d\u5b9a\u3059\u308b. myTextView . layer . borderColor = UIColor . black . cgColor // \u30d5\u30a9\u30f3\u30c8\u306e\u8a2d\u5b9a\u3092\u3059\u308b. myTextView . font = UIFont . systemFont ( ofSize : 20.0 ) // \u30d5\u30a9\u30f3\u30c8\u306e\u8272\u306e\u8a2d\u5b9a\u3092\u3059\u308b. myTextView . textColor = UIColor . black // \u5de6\u8a70\u3081\u306e\u8a2d\u5b9a\u3092\u3059\u308b. myTextView . textAlignment = NSTextAlignment . left // \u30ea\u30f3\u30af\u3001\u65e5\u4ed8\u306a\u3069\u3092\u81ea\u52d5\u7684\u306b\u691c\u51fa\u3057\u3066\u30ea\u30f3\u30af\u306b\u5909\u63db\u3059\u308b. myTextView . dataDetectorTypes = UIDataDetectorTypes . all // \u5f71\u306e\u6fc3\u3055\u3092\u8a2d\u5b9a\u3059\u308b. myTextView . layer . shadowOpacity = 0.5 // \u30c6\u30ad\u30b9\u30c8\u3092\u7de8\u96c6\u4e0d\u53ef\u306b\u3059\u308b. myTextView . isEditable = false // TextView\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myTextView ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 // // ViewController.swift // UIKit020_2.3 // // Created by KimikoWatanabe on 2016/08/16. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u7070\u8272\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor ( red : 0.9 , green : 0.9 , blue : 0.9 , alpha : 1.0 ) // TextView\u751f\u6210\u3059\u308b. let myTextView : UITextView = UITextView ( frame : CGRectMake ( 10 , 50 , self . view . frame . width - 20 , 500 )) // TextView\u306e\u80cc\u666f\u3092\u9ec3\u8272\u306b\u8a2d\u5b9a\u3059\u308b. myTextView . backgroundColor = UIColor ( red : 0.9 , green : 0.9 , blue : 1 , alpha : 1.0 ) // \u8868\u793a\u3055\u305b\u308b\u30c6\u30ad\u30b9\u30c8\u3092\u8a2d\u5b9a\u3059\u308b. myTextView . text = \"1234567890abcdefghijklmnopqrstuwxyz 1234567890 abcdefghijklmnopqrstuwxyz \\n a \\n b \\n c \\n defghijklmnopqrstuwxyz \\n http://www.gclue.com \\n \" // \u89d2\u306b\u4e38\u307f\u3092\u3064\u3051\u308b. myTextView . layer . masksToBounds = true // \u4e38\u307f\u306e\u30b5\u30a4\u30ba\u3092\u8a2d\u5b9a\u3059\u308b. myTextView . layer . cornerRadius = 20.0 // \u67a0\u7dda\u306e\u592a\u3055\u3092\u8a2d\u5b9a\u3059\u308b. myTextView . layer . borderWidth = 1 // \u67a0\u7dda\u306e\u8272\u3092\u9ed2\u306b\u8a2d\u5b9a\u3059\u308b. myTextView . layer . borderColor = UIColor . blackColor (). CGColor // \u30d5\u30a9\u30f3\u30c8\u306e\u8a2d\u5b9a\u3092\u3059\u308b. myTextView . font = UIFont . systemFontOfSize ( CGFloat ( 20 )) // \u30d5\u30a9\u30f3\u30c8\u306e\u8272\u306e\u8a2d\u5b9a\u3092\u3059\u308b. myTextView . textColor = UIColor . blackColor () // \u5de6\u8a70\u3081\u306e\u8a2d\u5b9a\u3092\u3059\u308b. myTextView . textAlignment = NSTextAlignment . Left // \u30ea\u30f3\u30af\u3001\u65e5\u4ed8\u306a\u3069\u3092\u81ea\u52d5\u7684\u306b\u691c\u51fa\u3057\u3066\u30ea\u30f3\u30af\u306b\u5909\u63db\u3059\u308b. myTextView . dataDetectorTypes = UIDataDetectorTypes . All // \u5f71\u306e\u6fc3\u3055\u3092\u8a2d\u5b9a\u3059\u308b. myTextView . layer . shadowOpacity = 0.5 // \u30c6\u30ad\u30b9\u30c8\u3092\u7de8\u96c6\u4e0d\u53ef\u306b\u3059\u308b. myTextView . editable = false // TextView\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myTextView ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } 2.3\u30683.0\u306e\u5dee\u5206 NSTextAlignment\u306e\u540d\u79f0\u304c\u5909\u66f4(\u982d\u6587\u5b57\u304c\u5927\u6587\u5b57\u304b\u3089\u5c0f\u6587\u5b57\u306b) UITextView\u306e\u4e00\u90e8\u30d7\u30ed\u30d1\u30c6\u30a3\u540d\u304c\u5909\u66f4 Reference UITextView Class https://developer.apple.com/reference/uikit/uitextview","title":"UITextView\u3067\u8907\u6570\u884c\u306e\u30c6\u30ad\u30b9\u30c8\u306e\u8868\u793a"},{"location":"1.uikit/020_uitextview/#uitextview","text":"Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 // // ViewController.swift // UIKit020_3.0 // // Created by KimikoWatanabe on 2016/08/13. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u7070\u8272\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor ( red : 0.9 , green : 0.9 , blue : 0.9 , alpha : 1.0 ) // TextView\u751f\u6210\u3059\u308b. let myTextView : UITextView = UITextView ( frame : CGRect ( x : 10 , y : 50 , width : self . view . frame . width - 20 , height : 500 )) // TextView\u306e\u80cc\u666f\u3092\u9ec3\u8272\u306b\u8a2d\u5b9a\u3059\u308b. myTextView . backgroundColor = UIColor ( red : 0.9 , green : 0.9 , blue : 1 , alpha : 1.0 ) // \u8868\u793a\u3055\u305b\u308b\u30c6\u30ad\u30b9\u30c8\u3092\u8a2d\u5b9a\u3059\u308b. myTextView . text = \"1234567890abcdefghijklmnopqrstuwxyz 1234567890 abcdefghijklmnopqrstuwxyz \\n a \\n b \\n c \\n defghijklmnopqrstuwxyz \\n http://www.gclue.com \\n \" // \u89d2\u306b\u4e38\u307f\u3092\u3064\u3051\u308b. myTextView . layer . masksToBounds = true // \u4e38\u307f\u306e\u30b5\u30a4\u30ba\u3092\u8a2d\u5b9a\u3059\u308b. myTextView . layer . cornerRadius = 20.0 // \u67a0\u7dda\u306e\u592a\u3055\u3092\u8a2d\u5b9a\u3059\u308b. myTextView . layer . borderWidth = 1 // \u67a0\u7dda\u306e\u8272\u3092\u9ed2\u306b\u8a2d\u5b9a\u3059\u308b. myTextView . layer . borderColor = UIColor . black . cgColor // \u30d5\u30a9\u30f3\u30c8\u306e\u8a2d\u5b9a\u3092\u3059\u308b. myTextView . font = UIFont . systemFont ( ofSize : 20.0 ) // \u30d5\u30a9\u30f3\u30c8\u306e\u8272\u306e\u8a2d\u5b9a\u3092\u3059\u308b. myTextView . textColor = UIColor . black // \u5de6\u8a70\u3081\u306e\u8a2d\u5b9a\u3092\u3059\u308b. myTextView . textAlignment = NSTextAlignment . left // \u30ea\u30f3\u30af\u3001\u65e5\u4ed8\u306a\u3069\u3092\u81ea\u52d5\u7684\u306b\u691c\u51fa\u3057\u3066\u30ea\u30f3\u30af\u306b\u5909\u63db\u3059\u308b. myTextView . dataDetectorTypes = UIDataDetectorTypes . all // \u5f71\u306e\u6fc3\u3055\u3092\u8a2d\u5b9a\u3059\u308b. myTextView . layer . shadowOpacity = 0.5 // \u30c6\u30ad\u30b9\u30c8\u3092\u7de8\u96c6\u4e0d\u53ef\u306b\u3059\u308b. myTextView . isEditable = false // TextView\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myTextView ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 // // ViewController.swift // UIKit020_2.3 // // Created by KimikoWatanabe on 2016/08/16. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u7070\u8272\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor ( red : 0.9 , green : 0.9 , blue : 0.9 , alpha : 1.0 ) // TextView\u751f\u6210\u3059\u308b. let myTextView : UITextView = UITextView ( frame : CGRectMake ( 10 , 50 , self . view . frame . width - 20 , 500 )) // TextView\u306e\u80cc\u666f\u3092\u9ec3\u8272\u306b\u8a2d\u5b9a\u3059\u308b. myTextView . backgroundColor = UIColor ( red : 0.9 , green : 0.9 , blue : 1 , alpha : 1.0 ) // \u8868\u793a\u3055\u305b\u308b\u30c6\u30ad\u30b9\u30c8\u3092\u8a2d\u5b9a\u3059\u308b. myTextView . text = \"1234567890abcdefghijklmnopqrstuwxyz 1234567890 abcdefghijklmnopqrstuwxyz \\n a \\n b \\n c \\n defghijklmnopqrstuwxyz \\n http://www.gclue.com \\n \" // \u89d2\u306b\u4e38\u307f\u3092\u3064\u3051\u308b. myTextView . layer . masksToBounds = true // \u4e38\u307f\u306e\u30b5\u30a4\u30ba\u3092\u8a2d\u5b9a\u3059\u308b. myTextView . layer . cornerRadius = 20.0 // \u67a0\u7dda\u306e\u592a\u3055\u3092\u8a2d\u5b9a\u3059\u308b. myTextView . layer . borderWidth = 1 // \u67a0\u7dda\u306e\u8272\u3092\u9ed2\u306b\u8a2d\u5b9a\u3059\u308b. myTextView . layer . borderColor = UIColor . blackColor (). CGColor // \u30d5\u30a9\u30f3\u30c8\u306e\u8a2d\u5b9a\u3092\u3059\u308b. myTextView . font = UIFont . systemFontOfSize ( CGFloat ( 20 )) // \u30d5\u30a9\u30f3\u30c8\u306e\u8272\u306e\u8a2d\u5b9a\u3092\u3059\u308b. myTextView . textColor = UIColor . blackColor () // \u5de6\u8a70\u3081\u306e\u8a2d\u5b9a\u3092\u3059\u308b. myTextView . textAlignment = NSTextAlignment . Left // \u30ea\u30f3\u30af\u3001\u65e5\u4ed8\u306a\u3069\u3092\u81ea\u52d5\u7684\u306b\u691c\u51fa\u3057\u3066\u30ea\u30f3\u30af\u306b\u5909\u63db\u3059\u308b. myTextView . dataDetectorTypes = UIDataDetectorTypes . All // \u5f71\u306e\u6fc3\u3055\u3092\u8a2d\u5b9a\u3059\u308b. myTextView . layer . shadowOpacity = 0.5 // \u30c6\u30ad\u30b9\u30c8\u3092\u7de8\u96c6\u4e0d\u53ef\u306b\u3059\u308b. myTextView . editable = false // TextView\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myTextView ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } }","title":"UITextView\u3067\u8907\u6570\u884c\u306e\u30c6\u30ad\u30b9\u30c8\u306e\u8868\u793a"},{"location":"1.uikit/020_uitextview/#2330","text":"NSTextAlignment\u306e\u540d\u79f0\u304c\u5909\u66f4(\u982d\u6587\u5b57\u304c\u5927\u6587\u5b57\u304b\u3089\u5c0f\u6587\u5b57\u306b) UITextView\u306e\u4e00\u90e8\u30d7\u30ed\u30d1\u30c6\u30a3\u540d\u304c\u5909\u66f4","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/020_uitextview/#reference","text":"UITextView Class https://developer.apple.com/reference/uikit/uitextview","title":"Reference"},{"location":"1.uikit/021_uislider/","text":"UISlider\u306e\u8868\u793a Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 // // ViewController.swift // UIKit021_4.0 // // Created by KimikoWatanabe on 2016/08/13. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { // \u753b\u50cf\u3092\u8a2d\u5b9a\u3059\u308b. private let myInputImage = CIImage ( image : UIImage ( named : \"sakura.jpg\" ) ! ) // ImageView\u3092.\u5b9a\u7fa9\u3059\u308b. private var myImageView : UIImageView ! override func viewDidLoad () { // UIImageView\u3092\u4f5c\u6210\u3059\u308b. myImageView = UIImageView ( frame : self . view . frame ) myImageView . image = UIImage ( ciImage : myInputImage !) self . view . addSubview ( myImageView ) // Slider\u3092\u4f5c\u6210\u3059\u308b. let myGreenSlider = UISlider ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 30 )) myGreenSlider . layer . position = CGPoint ( x : self . view . frame . midX , y : 500 ) myGreenSlider . backgroundColor = UIColor . white myGreenSlider . layer . cornerRadius = 10.0 myGreenSlider . layer . shadowOpacity = 0.5 myGreenSlider . layer . masksToBounds = false // \u6700\u5c0f\u5024\u3068\u6700\u5927\u5024\u3092\u8a2d\u5b9a\u3059\u308b. myGreenSlider . minimumValue = 0 myGreenSlider . maximumValue = 1 // Slider\u306e\u4f4d\u7f6e\u3092\u8a2d\u5b9a\u3059\u308b. myGreenSlider . value = 0.5 // Slider\u306e\u73fe\u5728\u4f4d\u7f6e\u3088\u308a\u53f3\u306eTint\u30ab\u30e9\u30fc\u3092\u5909\u3048\u308b. myGreenSlider . maximumTrackTintColor = UIColor . gray // Slider\u306e\u73fe\u5728\u4f4d\u7f6e\u3088\u308a\u5de6\u306eTint\u30ab\u30e9\u30fc\u3092\u5909\u3048\u308b. myGreenSlider . minimumTrackTintColor = UIColor . black myGreenSlider . addTarget ( self , action : #selector ( ViewController . onChangeValueMySlider ( sender :)), for : UIControl . Event . valueChanged ) self . view . addSubview ( myGreenSlider ) self . view . backgroundColor = UIColor ( red : 0 , green : CGFloat ( myGreenSlider . value ), blue : 0 , alpha : 1 ) } /* Slider\u306e\u5024\u304c\u5909\u308f\u3063\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9 */ @objc internal func onChangeValueMySlider ( sender : UISlider ){ // Slider\u306e\u5024\u306b\u5fdc\u3058\u3066view\u306e\u80cc\u666f\u306egreen\u5024\u3092\u5909\u3048\u308b. self . view . backgroundColor = UIColor ( red : 0 , green : CGFloat ( sender . value ), blue : 0 , alpha : 1 ) // \u30ab\u30e9\u30fc\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u6307\u5b9a\u3057\u3066CIFilter\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3059\u308b. let myColorFilter = CIFilter ( name : \"CIColorCrossPolynomial\" ) // \u30a4\u30e1\u30fc\u30b8\u3092\u8a2d\u5b9a\u3059\u308b. myColorFilter !. setValue ( myInputImage , forKey : kCIInputImageKey ) // RGB\u306e\u5909\u63db\u5024\u3092\u4f5c\u6210\u3059\u308b. let r : [ CGFloat ] = [ 0.0 , CGFloat ( sender . value ), 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 ] let g : [ CGFloat ] = [ 0.0 , 0.0 , 1.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 ] let b : [ CGFloat ] = [ 1.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 ] // \u5024\u306e\u8abf\u6574\u3092\u3059\u308b. myColorFilter !. setValue ( CIVector ( values : r , count : 10 ), forKey : \"inputRedCoefficients\" ) myColorFilter !. setValue ( CIVector ( values : g , count : 10 ), forKey : \"inputGreenCoefficients\" ) myColorFilter !. setValue ( CIVector ( values : b , count : 10 ), forKey : \"inputBlueCoefficients\" ) // \u30d5\u30a3\u30eb\u30bf\u30fc\u3067\u51e6\u7406\u3057\u305f\u753b\u50cf\u3092\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u3059\u308b. let myOutputImage : CIImage = myColorFilter !. outputImage ! // \u518d\u3073UIView\u51e6\u7406\u6e08\u307f\u753b\u50cf\u3092\u8a2d\u5b9a\u3059\u308b. myImageView . image = UIImage ( ciImage : myOutputImage ) // \u518d\u63cf\u753b\u3092\u304a\u3053\u306a\u3046. myImageView . setNeedsDisplay () } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 // // ViewController.swift // UIKit021_3.0 // // Created by KimikoWatanabe on 2016/08/13. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { // \u753b\u50cf\u3092\u8a2d\u5b9a\u3059\u308b. private let myInputImage = CIImage ( image : UIImage ( named : \"sakura.jpg\" ) ! ) // ImageView\u3092.\u5b9a\u7fa9\u3059\u308b. private var myImageView : UIImageView ! override func viewDidLoad () { // UIImageView\u3092\u4f5c\u6210\u3059\u308b. myImageView = UIImageView ( frame : self . view . frame ) myImageView . image = UIImage ( ciImage : myInputImage !) self . view . addSubview ( myImageView ) // Slider\u3092\u4f5c\u6210\u3059\u308b. let myGreenSlider = UISlider ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 30 )) myGreenSlider . layer . position = CGPoint ( x : self . view . frame . midX , y : 500 ) myGreenSlider . backgroundColor = UIColor . white myGreenSlider . layer . cornerRadius = 10.0 myGreenSlider . layer . shadowOpacity = 0.5 myGreenSlider . layer . masksToBounds = false // \u6700\u5c0f\u5024\u3068\u6700\u5927\u5024\u3092\u8a2d\u5b9a\u3059\u308b. myGreenSlider . minimumValue = 0 myGreenSlider . maximumValue = 1 // Slider\u306e\u4f4d\u7f6e\u3092\u8a2d\u5b9a\u3059\u308b. myGreenSlider . value = 0.5 // Slider\u306e\u73fe\u5728\u4f4d\u7f6e\u3088\u308a\u53f3\u306eTint\u30ab\u30e9\u30fc\u3092\u5909\u3048\u308b. myGreenSlider . maximumTrackTintColor = UIColor . gray // Slider\u306e\u73fe\u5728\u4f4d\u7f6e\u3088\u308a\u5de6\u306eTint\u30ab\u30e9\u30fc\u3092\u5909\u3048\u308b. myGreenSlider . minimumTrackTintColor = UIColor . black myGreenSlider . addTarget ( self , action : #selector ( ViewController . onChangeValueMySlider ( sender :)), for : UIControlEvents . valueChanged ) self . view . addSubview ( myGreenSlider ) self . view . backgroundColor = UIColor ( red : 0 , green : CGFloat ( myGreenSlider . value ), blue : 0 , alpha : 1 ) } /* Slider\u306e\u5024\u304c\u5909\u308f\u3063\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9 */ internal func onChangeValueMySlider ( sender : UISlider ){ // Slider\u306e\u5024\u306b\u5fdc\u3058\u3066view\u306e\u80cc\u666f\u306egreen\u5024\u3092\u5909\u3048\u308b. self . view . backgroundColor = UIColor ( red : 0 , green : CGFloat ( sender . value ), blue : 0 , alpha : 1 ) // \u30ab\u30e9\u30fc\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u6307\u5b9a\u3057\u3066CIFilter\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3059\u308b. let myColorFilter = CIFilter ( name : \"CIColorCrossPolynomial\" ) // \u30a4\u30e1\u30fc\u30b8\u3092\u8a2d\u5b9a\u3059\u308b. myColorFilter !. setValue ( myInputImage , forKey : kCIInputImageKey ) // RGB\u306e\u5909\u63db\u5024\u3092\u4f5c\u6210\u3059\u308b. let r : [ CGFloat ] = [ 0.0 , CGFloat ( sender . value ), 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 ] let g : [ CGFloat ] = [ 0.0 , 0.0 , 1.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 ] let b : [ CGFloat ] = [ 1.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 ] // \u5024\u306e\u8abf\u6574\u3092\u3059\u308b. myColorFilter !. setValue ( CIVector ( values : r , count : 10 ), forKey : \"inputRedCoefficients\" ) myColorFilter !. setValue ( CIVector ( values : g , count : 10 ), forKey : \"inputGreenCoefficients\" ) myColorFilter !. setValue ( CIVector ( values : b , count : 10 ), forKey : \"inputBlueCoefficients\" ) // \u30d5\u30a3\u30eb\u30bf\u30fc\u3067\u51e6\u7406\u3057\u305f\u753b\u50cf\u3092\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u3059\u308b. let myOutputImage : CIImage = myColorFilter !. outputImage ! // \u518d\u3073UIView\u51e6\u7406\u6e08\u307f\u753b\u50cf\u3092\u8a2d\u5b9a\u3059\u308b. myImageView . image = UIImage ( ciImage : myOutputImage ) // \u518d\u63cf\u753b\u3092\u304a\u3053\u306a\u3046. myImageView . setNeedsDisplay () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 // // ViewController.swift // UIKit021_2.3 // // Created by KimikoWatanabe on 2016/08/16. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { // \u753b\u50cf\u3092\u8a2d\u5b9a\u3059\u308b. private let myInputImage = CIImage ( image : UIImage ( named : \"sakura.jpg\" ) ! ) // ImageView\u3092.\u5b9a\u7fa9\u3059\u308b. private var myImageView : UIImageView ! override func viewDidLoad () { // UIImageView\u3092\u4f5c\u6210\u3059\u308b. myImageView = UIImageView ( frame : self . view . frame ) myImageView . image = UIImage ( CIImage : myInputImage !) self . view . addSubview ( myImageView ) // Slider\u3092\u4f5c\u6210\u3059\u308b. let myGreenSlider = UISlider ( frame : CGRectMake ( 0 , 0 , 200 , 30 )) myGreenSlider . layer . position = CGPointMake ( self . view . frame . midX , 500 ) myGreenSlider . backgroundColor = UIColor . whiteColor () myGreenSlider . layer . cornerRadius = 10.0 myGreenSlider . layer . shadowOpacity = 0.5 myGreenSlider . layer . masksToBounds = false // \u6700\u5c0f\u5024\u3068\u6700\u5927\u5024\u3092\u8a2d\u5b9a\u3059\u308b. myGreenSlider . minimumValue = 0 myGreenSlider . maximumValue = 1 // Slider\u306e\u4f4d\u7f6e\u3092\u8a2d\u5b9a\u3059\u308b. myGreenSlider . value = 0.5 // Slider\u306e\u73fe\u5728\u4f4d\u7f6e\u3088\u308a\u53f3\u306eTint\u30ab\u30e9\u30fc\u3092\u5909\u3048\u308b. myGreenSlider . maximumTrackTintColor = UIColor . grayColor () // Slider\u306e\u73fe\u5728\u4f4d\u7f6e\u3088\u308a\u5de6\u306eTint\u30ab\u30e9\u30fc\u3092\u5909\u3048\u308b. myGreenSlider . minimumTrackTintColor = UIColor . blackColor () myGreenSlider . addTarget ( self , action : #selector ( ViewController . onChangeValueMySlider ( _ :)), forControlEvents : UIControlEvents . ValueChanged ) self . view . addSubview ( myGreenSlider ) self . view . backgroundColor = UIColor ( red : 0 , green : CGFloat ( myGreenSlider . value ), blue : 0 , alpha : 1 ) } /* Slider\u306e\u5024\u304c\u5909\u308f\u3063\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9 */ internal func onChangeValueMySlider ( sender : UISlider ){ // Slider\u306e\u5024\u306b\u5fdc\u3058\u3066view\u306e\u80cc\u666f\u306egreen\u5024\u3092\u5909\u3048\u308b. self . view . backgroundColor = UIColor ( red : 0 , green : CGFloat ( sender . value ), blue : 0 , alpha : 1 ) // \u30ab\u30e9\u30fc\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u6307\u5b9a\u3057\u3066CIFilter\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3059\u308b. let myColorFilter = CIFilter ( name : \"CIColorCrossPolynomial\" ) // \u30a4\u30e1\u30fc\u30b8\u3092\u8a2d\u5b9a\u3059\u308b. myColorFilter !. setValue ( myInputImage , forKey : kCIInputImageKey ) // RGB\u306e\u5909\u63db\u5024\u3092\u4f5c\u6210\u3059\u308b. let r : [ CGFloat ] = [ 0.0 , CGFloat ( sender . value ), 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 ] let g : [ CGFloat ] = [ 0.0 , 0.0 , 1.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 ] let b : [ CGFloat ] = [ 1.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 ] // \u5024\u306e\u8abf\u6574\u3092\u3059\u308b. myColorFilter !. setValue ( CIVector ( values : r , count : 10 ), forKey : \"inputRedCoefficients\" ) myColorFilter !. setValue ( CIVector ( values : g , count : 10 ), forKey : \"inputGreenCoefficients\" ) myColorFilter !. setValue ( CIVector ( values : b , count : 10 ), forKey : \"inputBlueCoefficients\" ) // \u30d5\u30a3\u30eb\u30bf\u30fc\u3067\u51e6\u7406\u3057\u305f\u753b\u50cf\u3092\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u3059\u308b. let myOutputImage : CIImage = myColorFilter !. outputImage ! // \u518d\u3073UIView\u51e6\u7406\u6e08\u307f\u753b\u50cf\u3092\u8a2d\u5b9a\u3059\u308b. myImageView . image = UIImage ( CIImage : myOutputImage ) // \u518d\u63cf\u753b\u3092\u304a\u3053\u306a\u3046. myImageView . setNeedsDisplay () } } 3.0\u30684.0\u306e\u5dee\u5206 UIControlEvents \u304c\u3001 UIControl.Event \u306b\u5909\u66f4 internal func onChangeValueMySlider(sender : UISlider) \u306b @objc \u3092\u8ffd\u52a0 2.3\u30683.0\u306e\u5dee\u5206 CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u30e1\u30bd\u30c3\u30c9\u306e\u5ec3\u6b62) UIColor\u306e\u547c\u3073\u51fa\u3057\u65b9\u6cd5\u306e\u5909\u66f4(UIColor.whiteColor() -> UIColor.white) UIImage\u306e\u521d\u671f\u5316\u306e\u5f15\u6570\u306e\u30e9\u30d9\u30eb\u540d\u304c\u5909\u66f4(CIImage -> ciImage) Reference UISlider Class https://developer.apple.com/reference/uikit/uislider","title":"UISlider\u306e\u8868\u793a"},{"location":"1.uikit/021_uislider/#uislider","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 // // ViewController.swift // UIKit021_4.0 // // Created by KimikoWatanabe on 2016/08/13. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { // \u753b\u50cf\u3092\u8a2d\u5b9a\u3059\u308b. private let myInputImage = CIImage ( image : UIImage ( named : \"sakura.jpg\" ) ! ) // ImageView\u3092.\u5b9a\u7fa9\u3059\u308b. private var myImageView : UIImageView ! override func viewDidLoad () { // UIImageView\u3092\u4f5c\u6210\u3059\u308b. myImageView = UIImageView ( frame : self . view . frame ) myImageView . image = UIImage ( ciImage : myInputImage !) self . view . addSubview ( myImageView ) // Slider\u3092\u4f5c\u6210\u3059\u308b. let myGreenSlider = UISlider ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 30 )) myGreenSlider . layer . position = CGPoint ( x : self . view . frame . midX , y : 500 ) myGreenSlider . backgroundColor = UIColor . white myGreenSlider . layer . cornerRadius = 10.0 myGreenSlider . layer . shadowOpacity = 0.5 myGreenSlider . layer . masksToBounds = false // \u6700\u5c0f\u5024\u3068\u6700\u5927\u5024\u3092\u8a2d\u5b9a\u3059\u308b. myGreenSlider . minimumValue = 0 myGreenSlider . maximumValue = 1 // Slider\u306e\u4f4d\u7f6e\u3092\u8a2d\u5b9a\u3059\u308b. myGreenSlider . value = 0.5 // Slider\u306e\u73fe\u5728\u4f4d\u7f6e\u3088\u308a\u53f3\u306eTint\u30ab\u30e9\u30fc\u3092\u5909\u3048\u308b. myGreenSlider . maximumTrackTintColor = UIColor . gray // Slider\u306e\u73fe\u5728\u4f4d\u7f6e\u3088\u308a\u5de6\u306eTint\u30ab\u30e9\u30fc\u3092\u5909\u3048\u308b. myGreenSlider . minimumTrackTintColor = UIColor . black myGreenSlider . addTarget ( self , action : #selector ( ViewController . onChangeValueMySlider ( sender :)), for : UIControl . Event . valueChanged ) self . view . addSubview ( myGreenSlider ) self . view . backgroundColor = UIColor ( red : 0 , green : CGFloat ( myGreenSlider . value ), blue : 0 , alpha : 1 ) } /* Slider\u306e\u5024\u304c\u5909\u308f\u3063\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9 */ @objc internal func onChangeValueMySlider ( sender : UISlider ){ // Slider\u306e\u5024\u306b\u5fdc\u3058\u3066view\u306e\u80cc\u666f\u306egreen\u5024\u3092\u5909\u3048\u308b. self . view . backgroundColor = UIColor ( red : 0 , green : CGFloat ( sender . value ), blue : 0 , alpha : 1 ) // \u30ab\u30e9\u30fc\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u6307\u5b9a\u3057\u3066CIFilter\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3059\u308b. let myColorFilter = CIFilter ( name : \"CIColorCrossPolynomial\" ) // \u30a4\u30e1\u30fc\u30b8\u3092\u8a2d\u5b9a\u3059\u308b. myColorFilter !. setValue ( myInputImage , forKey : kCIInputImageKey ) // RGB\u306e\u5909\u63db\u5024\u3092\u4f5c\u6210\u3059\u308b. let r : [ CGFloat ] = [ 0.0 , CGFloat ( sender . value ), 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 ] let g : [ CGFloat ] = [ 0.0 , 0.0 , 1.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 ] let b : [ CGFloat ] = [ 1.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 ] // \u5024\u306e\u8abf\u6574\u3092\u3059\u308b. myColorFilter !. setValue ( CIVector ( values : r , count : 10 ), forKey : \"inputRedCoefficients\" ) myColorFilter !. setValue ( CIVector ( values : g , count : 10 ), forKey : \"inputGreenCoefficients\" ) myColorFilter !. setValue ( CIVector ( values : b , count : 10 ), forKey : \"inputBlueCoefficients\" ) // \u30d5\u30a3\u30eb\u30bf\u30fc\u3067\u51e6\u7406\u3057\u305f\u753b\u50cf\u3092\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u3059\u308b. let myOutputImage : CIImage = myColorFilter !. outputImage ! // \u518d\u3073UIView\u51e6\u7406\u6e08\u307f\u753b\u50cf\u3092\u8a2d\u5b9a\u3059\u308b. myImageView . image = UIImage ( ciImage : myOutputImage ) // \u518d\u63cf\u753b\u3092\u304a\u3053\u306a\u3046. myImageView . setNeedsDisplay () } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 // // ViewController.swift // UIKit021_3.0 // // Created by KimikoWatanabe on 2016/08/13. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { // \u753b\u50cf\u3092\u8a2d\u5b9a\u3059\u308b. private let myInputImage = CIImage ( image : UIImage ( named : \"sakura.jpg\" ) ! ) // ImageView\u3092.\u5b9a\u7fa9\u3059\u308b. private var myImageView : UIImageView ! override func viewDidLoad () { // UIImageView\u3092\u4f5c\u6210\u3059\u308b. myImageView = UIImageView ( frame : self . view . frame ) myImageView . image = UIImage ( ciImage : myInputImage !) self . view . addSubview ( myImageView ) // Slider\u3092\u4f5c\u6210\u3059\u308b. let myGreenSlider = UISlider ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 30 )) myGreenSlider . layer . position = CGPoint ( x : self . view . frame . midX , y : 500 ) myGreenSlider . backgroundColor = UIColor . white myGreenSlider . layer . cornerRadius = 10.0 myGreenSlider . layer . shadowOpacity = 0.5 myGreenSlider . layer . masksToBounds = false // \u6700\u5c0f\u5024\u3068\u6700\u5927\u5024\u3092\u8a2d\u5b9a\u3059\u308b. myGreenSlider . minimumValue = 0 myGreenSlider . maximumValue = 1 // Slider\u306e\u4f4d\u7f6e\u3092\u8a2d\u5b9a\u3059\u308b. myGreenSlider . value = 0.5 // Slider\u306e\u73fe\u5728\u4f4d\u7f6e\u3088\u308a\u53f3\u306eTint\u30ab\u30e9\u30fc\u3092\u5909\u3048\u308b. myGreenSlider . maximumTrackTintColor = UIColor . gray // Slider\u306e\u73fe\u5728\u4f4d\u7f6e\u3088\u308a\u5de6\u306eTint\u30ab\u30e9\u30fc\u3092\u5909\u3048\u308b. myGreenSlider . minimumTrackTintColor = UIColor . black myGreenSlider . addTarget ( self , action : #selector ( ViewController . onChangeValueMySlider ( sender :)), for : UIControlEvents . valueChanged ) self . view . addSubview ( myGreenSlider ) self . view . backgroundColor = UIColor ( red : 0 , green : CGFloat ( myGreenSlider . value ), blue : 0 , alpha : 1 ) } /* Slider\u306e\u5024\u304c\u5909\u308f\u3063\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9 */ internal func onChangeValueMySlider ( sender : UISlider ){ // Slider\u306e\u5024\u306b\u5fdc\u3058\u3066view\u306e\u80cc\u666f\u306egreen\u5024\u3092\u5909\u3048\u308b. self . view . backgroundColor = UIColor ( red : 0 , green : CGFloat ( sender . value ), blue : 0 , alpha : 1 ) // \u30ab\u30e9\u30fc\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u6307\u5b9a\u3057\u3066CIFilter\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3059\u308b. let myColorFilter = CIFilter ( name : \"CIColorCrossPolynomial\" ) // \u30a4\u30e1\u30fc\u30b8\u3092\u8a2d\u5b9a\u3059\u308b. myColorFilter !. setValue ( myInputImage , forKey : kCIInputImageKey ) // RGB\u306e\u5909\u63db\u5024\u3092\u4f5c\u6210\u3059\u308b. let r : [ CGFloat ] = [ 0.0 , CGFloat ( sender . value ), 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 ] let g : [ CGFloat ] = [ 0.0 , 0.0 , 1.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 ] let b : [ CGFloat ] = [ 1.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 ] // \u5024\u306e\u8abf\u6574\u3092\u3059\u308b. myColorFilter !. setValue ( CIVector ( values : r , count : 10 ), forKey : \"inputRedCoefficients\" ) myColorFilter !. setValue ( CIVector ( values : g , count : 10 ), forKey : \"inputGreenCoefficients\" ) myColorFilter !. setValue ( CIVector ( values : b , count : 10 ), forKey : \"inputBlueCoefficients\" ) // \u30d5\u30a3\u30eb\u30bf\u30fc\u3067\u51e6\u7406\u3057\u305f\u753b\u50cf\u3092\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u3059\u308b. let myOutputImage : CIImage = myColorFilter !. outputImage ! // \u518d\u3073UIView\u51e6\u7406\u6e08\u307f\u753b\u50cf\u3092\u8a2d\u5b9a\u3059\u308b. myImageView . image = UIImage ( ciImage : myOutputImage ) // \u518d\u63cf\u753b\u3092\u304a\u3053\u306a\u3046. myImageView . setNeedsDisplay () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 // // ViewController.swift // UIKit021_2.3 // // Created by KimikoWatanabe on 2016/08/16. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { // \u753b\u50cf\u3092\u8a2d\u5b9a\u3059\u308b. private let myInputImage = CIImage ( image : UIImage ( named : \"sakura.jpg\" ) ! ) // ImageView\u3092.\u5b9a\u7fa9\u3059\u308b. private var myImageView : UIImageView ! override func viewDidLoad () { // UIImageView\u3092\u4f5c\u6210\u3059\u308b. myImageView = UIImageView ( frame : self . view . frame ) myImageView . image = UIImage ( CIImage : myInputImage !) self . view . addSubview ( myImageView ) // Slider\u3092\u4f5c\u6210\u3059\u308b. let myGreenSlider = UISlider ( frame : CGRectMake ( 0 , 0 , 200 , 30 )) myGreenSlider . layer . position = CGPointMake ( self . view . frame . midX , 500 ) myGreenSlider . backgroundColor = UIColor . whiteColor () myGreenSlider . layer . cornerRadius = 10.0 myGreenSlider . layer . shadowOpacity = 0.5 myGreenSlider . layer . masksToBounds = false // \u6700\u5c0f\u5024\u3068\u6700\u5927\u5024\u3092\u8a2d\u5b9a\u3059\u308b. myGreenSlider . minimumValue = 0 myGreenSlider . maximumValue = 1 // Slider\u306e\u4f4d\u7f6e\u3092\u8a2d\u5b9a\u3059\u308b. myGreenSlider . value = 0.5 // Slider\u306e\u73fe\u5728\u4f4d\u7f6e\u3088\u308a\u53f3\u306eTint\u30ab\u30e9\u30fc\u3092\u5909\u3048\u308b. myGreenSlider . maximumTrackTintColor = UIColor . grayColor () // Slider\u306e\u73fe\u5728\u4f4d\u7f6e\u3088\u308a\u5de6\u306eTint\u30ab\u30e9\u30fc\u3092\u5909\u3048\u308b. myGreenSlider . minimumTrackTintColor = UIColor . blackColor () myGreenSlider . addTarget ( self , action : #selector ( ViewController . onChangeValueMySlider ( _ :)), forControlEvents : UIControlEvents . ValueChanged ) self . view . addSubview ( myGreenSlider ) self . view . backgroundColor = UIColor ( red : 0 , green : CGFloat ( myGreenSlider . value ), blue : 0 , alpha : 1 ) } /* Slider\u306e\u5024\u304c\u5909\u308f\u3063\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9 */ internal func onChangeValueMySlider ( sender : UISlider ){ // Slider\u306e\u5024\u306b\u5fdc\u3058\u3066view\u306e\u80cc\u666f\u306egreen\u5024\u3092\u5909\u3048\u308b. self . view . backgroundColor = UIColor ( red : 0 , green : CGFloat ( sender . value ), blue : 0 , alpha : 1 ) // \u30ab\u30e9\u30fc\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u6307\u5b9a\u3057\u3066CIFilter\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3059\u308b. let myColorFilter = CIFilter ( name : \"CIColorCrossPolynomial\" ) // \u30a4\u30e1\u30fc\u30b8\u3092\u8a2d\u5b9a\u3059\u308b. myColorFilter !. setValue ( myInputImage , forKey : kCIInputImageKey ) // RGB\u306e\u5909\u63db\u5024\u3092\u4f5c\u6210\u3059\u308b. let r : [ CGFloat ] = [ 0.0 , CGFloat ( sender . value ), 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 ] let g : [ CGFloat ] = [ 0.0 , 0.0 , 1.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 ] let b : [ CGFloat ] = [ 1.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 ] // \u5024\u306e\u8abf\u6574\u3092\u3059\u308b. myColorFilter !. setValue ( CIVector ( values : r , count : 10 ), forKey : \"inputRedCoefficients\" ) myColorFilter !. setValue ( CIVector ( values : g , count : 10 ), forKey : \"inputGreenCoefficients\" ) myColorFilter !. setValue ( CIVector ( values : b , count : 10 ), forKey : \"inputBlueCoefficients\" ) // \u30d5\u30a3\u30eb\u30bf\u30fc\u3067\u51e6\u7406\u3057\u305f\u753b\u50cf\u3092\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u3059\u308b. let myOutputImage : CIImage = myColorFilter !. outputImage ! // \u518d\u3073UIView\u51e6\u7406\u6e08\u307f\u753b\u50cf\u3092\u8a2d\u5b9a\u3059\u308b. myImageView . image = UIImage ( CIImage : myOutputImage ) // \u518d\u63cf\u753b\u3092\u304a\u3053\u306a\u3046. myImageView . setNeedsDisplay () } }","title":"UISlider\u306e\u8868\u793a"},{"location":"1.uikit/021_uislider/#3040","text":"UIControlEvents \u304c\u3001 UIControl.Event \u306b\u5909\u66f4 internal func onChangeValueMySlider(sender : UISlider) \u306b @objc \u3092\u8ffd\u52a0","title":"3.0\u30684.0\u306e\u5dee\u5206"},{"location":"1.uikit/021_uislider/#2330","text":"CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u30e1\u30bd\u30c3\u30c9\u306e\u5ec3\u6b62) UIColor\u306e\u547c\u3073\u51fa\u3057\u65b9\u6cd5\u306e\u5909\u66f4(UIColor.whiteColor() -> UIColor.white) UIImage\u306e\u521d\u671f\u5316\u306e\u5f15\u6570\u306e\u30e9\u30d9\u30eb\u540d\u304c\u5909\u66f4(CIImage -> ciImage)","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/021_uislider/#reference","text":"UISlider Class https://developer.apple.com/reference/uikit/uislider","title":"Reference"},{"location":"1.uikit/022_uiswitch/","text":"UISwitch\u306e\u8868\u793a Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 // // ViewController.swift // UIKit022_4.0 // // Created by KimikoWatanabe on 2016/08/17. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myLabel : UILabel ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u8272\u3092Cyan\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . cyan // Swicth\u3092\u4f5c\u6210\u3059\u308b. let mySwicth : UISwitch = UISwitch () mySwicth . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height - 200 ) // Swicth\u306e\u67a0\u7dda\u3092\u8868\u793a\u3059\u308b. mySwicth . tintColor = UIColor . black // Switch\u3092On\u306b\u8a2d\u5b9a\u3059\u308b. mySwicth . isOn = true // Switch\u306eOn/Off\u5207\u308a\u66ff\u308f\u308a\u306e\u969b\u306b\u3001\u547c\u3070\u308c\u308b\u30a4\u30d9\u30f3\u30c8\u3092\u8a2d\u5b9a\u3059\u308b. mySwicth . addTarget ( self , action : #selector ( ViewController . onClickMySwicth ( sender :)), for : UIControl . Event . valueChanged ) // Switch\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( mySwicth ) // On/Off\u3092\u8868\u793a\u3059\u308b\u30e9\u30d9\u30eb\u3092\u4f5c\u6210\u3059\u308b. myLabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 150 , height : 150 )) myLabel . backgroundColor = UIColor . orange myLabel . layer . masksToBounds = true myLabel . layer . cornerRadius = 75.0 myLabel . textColor = UIColor . white myLabel . shadowColor = UIColor . gray myLabel . font = UIFont . systemFont ( ofSize : 30.0 ) myLabel . textAlignment = NSTextAlignment . center myLabel . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 200 ) myLabel . text = \"On\" // \u30e9\u30d9\u30eb\u3092view\u306b\u8ffd\u52a0 self . view . addSubview ( myLabel ) } @objc internal func onClickMySwicth ( sender : UISwitch ){ if sender . isOn { myLabel . text = \"On\" myLabel . backgroundColor = UIColor . orange } else { myLabel . text = \"Off\" myLabel . backgroundColor = UIColor . gray } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 // // ViewController.swift // UIKit022_3.0 // // Created by KimikoWatanabe on 2016/08/17. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myLabel : UILabel ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u8272\u3092Cyan\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . cyan // Swicth\u3092\u4f5c\u6210\u3059\u308b. let mySwicth : UISwitch = UISwitch () mySwicth . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height - 200 ) // Swicth\u306e\u67a0\u7dda\u3092\u8868\u793a\u3059\u308b. mySwicth . tintColor = UIColor . black // Switch\u3092On\u306b\u8a2d\u5b9a\u3059\u308b. mySwicth . isOn = true // Switch\u306eOn/Off\u5207\u308a\u66ff\u308f\u308a\u306e\u969b\u306b\u3001\u547c\u3070\u308c\u308b\u30a4\u30d9\u30f3\u30c8\u3092\u8a2d\u5b9a\u3059\u308b. mySwicth . addTarget ( self , action : #selector ( ViewController . onClickMySwicth ( sender :)), for : UIControlEvents . valueChanged ) // Switch\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( mySwicth ) // On/Off\u3092\u8868\u793a\u3059\u308b\u30e9\u30d9\u30eb\u3092\u4f5c\u6210\u3059\u308b. myLabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 150 , height : 150 )) myLabel . backgroundColor = UIColor . orange myLabel . layer . masksToBounds = true myLabel . layer . cornerRadius = 75.0 myLabel . textColor = UIColor . white myLabel . shadowColor = UIColor . gray myLabel . font = UIFont . systemFont ( ofSize : 30.0 ) myLabel . textAlignment = NSTextAlignment . center myLabel . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 200 ) myLabel . text = \"On\" // \u30e9\u30d9\u30eb\u3092view\u306b\u8ffd\u52a0 self . view . addSubview ( myLabel ) } internal func onClickMySwicth ( sender : UISwitch ){ if sender . isOn { myLabel . text = \"On\" myLabel . backgroundColor = UIColor . orange } else { myLabel . text = \"Off\" myLabel . backgroundColor = UIColor . gray } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 // // ViewController.swift // UIKit022_2.3 // // Created by KimikoWatanabe on 2016/08/17. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myLabel : UILabel ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u8272\u3092Cyan\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . cyanColor () // Swicth\u3092\u4f5c\u6210\u3059\u308b. let mySwicth : UISwitch = UISwitch () mySwicth . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height - 200 ) // Swicth\u306e\u67a0\u7dda\u3092\u8868\u793a\u3059\u308b. mySwicth . tintColor = UIColor . blackColor () // Switch\u3092On\u306b\u8a2d\u5b9a\u3059\u308b. mySwicth . on = true // Switch\u306eOn/Off\u5207\u308a\u66ff\u308f\u308a\u306e\u969b\u306b\u3001\u547c\u3070\u308c\u308b\u30a4\u30d9\u30f3\u30c8\u3092\u8a2d\u5b9a\u3059\u308b. mySwicth . addTarget ( self , action : #selector ( ViewController . onClickMySwicth ( _ :)), forControlEvents : UIControlEvents . ValueChanged ) // Switch\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( mySwicth ) // On/Off\u3092\u8868\u793a\u3059\u308b\u30e9\u30d9\u30eb\u3092\u4f5c\u6210\u3059\u308b. myLabel = UILabel ( frame : CGRectMake ( 0 , 0 , 150 , 150 )) myLabel . backgroundColor = UIColor . orangeColor () myLabel . layer . masksToBounds = true myLabel . layer . cornerRadius = 75.0 myLabel . textColor = UIColor . whiteColor () myLabel . shadowColor = UIColor . grayColor () myLabel . font = UIFont . systemFontOfSize ( CGFloat ( 30 )) myLabel . textAlignment = NSTextAlignment . Center myLabel . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 200 ) myLabel . text = \"On\" // \u30e9\u30d9\u30eb\u3092view\u306b\u8ffd\u52a0 self . view . addSubview ( myLabel ) } internal func onClickMySwicth ( sender : UISwitch ){ if sender . on { myLabel . text = \"On\" myLabel . backgroundColor = UIColor . orangeColor () } else { myLabel . text = \"Off\" myLabel . backgroundColor = UIColor . grayColor () } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } 3.0\u30684.0\u306e\u5dee\u5206 UIControlEvents \u3000\u304c UIControl.Event \u306b\u5909\u66f4 internal func onClickMySwicth(sender: UISwitch) \u306b @objc \u3092\u8ffd\u52a0 2.3\u30683.0\u306e\u5dee\u5206 UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u306e\u5909\u66f4(UIColor.cyanColor() -> UIColor.cyan) CGRect\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake\u30e1\u30bd\u30c3\u30c9\u306e\u5ec3\u6b62) UISwitch\u306e\u4e00\u90e8\u30d7\u30ed\u30d1\u30c6\u30a3\u540d\u306e\u5909\u66f4(on -> isOn) Reference UISwitch Class https://developer.apple.com/reference/uikit/uiswitch","title":"UISwitch\u306e\u8868\u793a"},{"location":"1.uikit/022_uiswitch/#uiswitch","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 // // ViewController.swift // UIKit022_4.0 // // Created by KimikoWatanabe on 2016/08/17. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myLabel : UILabel ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u8272\u3092Cyan\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . cyan // Swicth\u3092\u4f5c\u6210\u3059\u308b. let mySwicth : UISwitch = UISwitch () mySwicth . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height - 200 ) // Swicth\u306e\u67a0\u7dda\u3092\u8868\u793a\u3059\u308b. mySwicth . tintColor = UIColor . black // Switch\u3092On\u306b\u8a2d\u5b9a\u3059\u308b. mySwicth . isOn = true // Switch\u306eOn/Off\u5207\u308a\u66ff\u308f\u308a\u306e\u969b\u306b\u3001\u547c\u3070\u308c\u308b\u30a4\u30d9\u30f3\u30c8\u3092\u8a2d\u5b9a\u3059\u308b. mySwicth . addTarget ( self , action : #selector ( ViewController . onClickMySwicth ( sender :)), for : UIControl . Event . valueChanged ) // Switch\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( mySwicth ) // On/Off\u3092\u8868\u793a\u3059\u308b\u30e9\u30d9\u30eb\u3092\u4f5c\u6210\u3059\u308b. myLabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 150 , height : 150 )) myLabel . backgroundColor = UIColor . orange myLabel . layer . masksToBounds = true myLabel . layer . cornerRadius = 75.0 myLabel . textColor = UIColor . white myLabel . shadowColor = UIColor . gray myLabel . font = UIFont . systemFont ( ofSize : 30.0 ) myLabel . textAlignment = NSTextAlignment . center myLabel . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 200 ) myLabel . text = \"On\" // \u30e9\u30d9\u30eb\u3092view\u306b\u8ffd\u52a0 self . view . addSubview ( myLabel ) } @objc internal func onClickMySwicth ( sender : UISwitch ){ if sender . isOn { myLabel . text = \"On\" myLabel . backgroundColor = UIColor . orange } else { myLabel . text = \"Off\" myLabel . backgroundColor = UIColor . gray } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 // // ViewController.swift // UIKit022_3.0 // // Created by KimikoWatanabe on 2016/08/17. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myLabel : UILabel ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u8272\u3092Cyan\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . cyan // Swicth\u3092\u4f5c\u6210\u3059\u308b. let mySwicth : UISwitch = UISwitch () mySwicth . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height - 200 ) // Swicth\u306e\u67a0\u7dda\u3092\u8868\u793a\u3059\u308b. mySwicth . tintColor = UIColor . black // Switch\u3092On\u306b\u8a2d\u5b9a\u3059\u308b. mySwicth . isOn = true // Switch\u306eOn/Off\u5207\u308a\u66ff\u308f\u308a\u306e\u969b\u306b\u3001\u547c\u3070\u308c\u308b\u30a4\u30d9\u30f3\u30c8\u3092\u8a2d\u5b9a\u3059\u308b. mySwicth . addTarget ( self , action : #selector ( ViewController . onClickMySwicth ( sender :)), for : UIControlEvents . valueChanged ) // Switch\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( mySwicth ) // On/Off\u3092\u8868\u793a\u3059\u308b\u30e9\u30d9\u30eb\u3092\u4f5c\u6210\u3059\u308b. myLabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 150 , height : 150 )) myLabel . backgroundColor = UIColor . orange myLabel . layer . masksToBounds = true myLabel . layer . cornerRadius = 75.0 myLabel . textColor = UIColor . white myLabel . shadowColor = UIColor . gray myLabel . font = UIFont . systemFont ( ofSize : 30.0 ) myLabel . textAlignment = NSTextAlignment . center myLabel . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 200 ) myLabel . text = \"On\" // \u30e9\u30d9\u30eb\u3092view\u306b\u8ffd\u52a0 self . view . addSubview ( myLabel ) } internal func onClickMySwicth ( sender : UISwitch ){ if sender . isOn { myLabel . text = \"On\" myLabel . backgroundColor = UIColor . orange } else { myLabel . text = \"Off\" myLabel . backgroundColor = UIColor . gray } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 // // ViewController.swift // UIKit022_2.3 // // Created by KimikoWatanabe on 2016/08/17. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myLabel : UILabel ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u8272\u3092Cyan\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . cyanColor () // Swicth\u3092\u4f5c\u6210\u3059\u308b. let mySwicth : UISwitch = UISwitch () mySwicth . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height - 200 ) // Swicth\u306e\u67a0\u7dda\u3092\u8868\u793a\u3059\u308b. mySwicth . tintColor = UIColor . blackColor () // Switch\u3092On\u306b\u8a2d\u5b9a\u3059\u308b. mySwicth . on = true // Switch\u306eOn/Off\u5207\u308a\u66ff\u308f\u308a\u306e\u969b\u306b\u3001\u547c\u3070\u308c\u308b\u30a4\u30d9\u30f3\u30c8\u3092\u8a2d\u5b9a\u3059\u308b. mySwicth . addTarget ( self , action : #selector ( ViewController . onClickMySwicth ( _ :)), forControlEvents : UIControlEvents . ValueChanged ) // Switch\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( mySwicth ) // On/Off\u3092\u8868\u793a\u3059\u308b\u30e9\u30d9\u30eb\u3092\u4f5c\u6210\u3059\u308b. myLabel = UILabel ( frame : CGRectMake ( 0 , 0 , 150 , 150 )) myLabel . backgroundColor = UIColor . orangeColor () myLabel . layer . masksToBounds = true myLabel . layer . cornerRadius = 75.0 myLabel . textColor = UIColor . whiteColor () myLabel . shadowColor = UIColor . grayColor () myLabel . font = UIFont . systemFontOfSize ( CGFloat ( 30 )) myLabel . textAlignment = NSTextAlignment . Center myLabel . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 200 ) myLabel . text = \"On\" // \u30e9\u30d9\u30eb\u3092view\u306b\u8ffd\u52a0 self . view . addSubview ( myLabel ) } internal func onClickMySwicth ( sender : UISwitch ){ if sender . on { myLabel . text = \"On\" myLabel . backgroundColor = UIColor . orangeColor () } else { myLabel . text = \"Off\" myLabel . backgroundColor = UIColor . grayColor () } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } }","title":"UISwitch\u306e\u8868\u793a"},{"location":"1.uikit/022_uiswitch/#3040","text":"UIControlEvents \u3000\u304c UIControl.Event \u306b\u5909\u66f4 internal func onClickMySwicth(sender: UISwitch) \u306b @objc \u3092\u8ffd\u52a0","title":"3.0\u30684.0\u306e\u5dee\u5206"},{"location":"1.uikit/022_uiswitch/#2330","text":"UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u306e\u5909\u66f4(UIColor.cyanColor() -> UIColor.cyan) CGRect\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake\u30e1\u30bd\u30c3\u30c9\u306e\u5ec3\u6b62) UISwitch\u306e\u4e00\u90e8\u30d7\u30ed\u30d1\u30c6\u30a3\u540d\u306e\u5909\u66f4(on -> isOn)","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/022_uiswitch/#reference","text":"UISwitch Class https://developer.apple.com/reference/uikit/uiswitch","title":"Reference"},{"location":"1.uikit/023_uidatepicker/","text":"UIDatePicker\u306e\u8868\u793a Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 // // ViewController.swift // UIKit023_4.0 // // Created by KimikoWatanabe on 2016/08/17. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UIPickerViewDelegate { private var myTextField : UITextField ! override func viewDidLoad () { super . viewDidLoad () self . view . backgroundColor = UIColor . white // DatePicker\u3092\u751f\u6210\u3059\u308b. let myDatePicker : UIDatePicker = UIDatePicker () // datePicker\u3092\u8a2d\u5b9a\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u4f4d\u7f6e\u306f\u753b\u9762\u4e0a\u90e8\uff09\u3059\u308b. myDatePicker . frame = CGRect ( x : 0 , y : 50 , width : self . view . frame . width , height : 200 ) myDatePicker . timeZone = NSTimeZone . local myDatePicker . backgroundColor = UIColor . white myDatePicker . layer . cornerRadius = 5.0 myDatePicker . layer . shadowOpacity = 0.5 // \u5024\u304c\u5909\u308f\u3063\u305f\u969b\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u767b\u9332\u3059\u308b. myDatePicker . addTarget ( self , action : #selector ( ViewController . onDidChangeDate ( sender :)), for : . valueChanged ) // DataPicker\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myDatePicker ) // UITextField\u3092\u4f5c\u6210\u3059\u308b. myTextField = UITextField ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 30 )) myTextField . text = \"\" myTextField . borderStyle = UITextField . BorderStyle . roundedRect myTextField . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : self . view . bounds . height - 100 ); // UITextField\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myTextField ) } /* DatePicker\u304c\u9078\u3070\u308c\u305f\u969b\u306b\u547c\u3070\u308c\u308b. */ @objc internal func onDidChangeDate ( sender : UIDatePicker ){ // \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u751f\u6210. let myDateFormatter : DateFormatter = DateFormatter () myDateFormatter . dateFormat = \"yyyy/MM/dd hh:mm\" // \u65e5\u4ed8\u3092\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u5247\u3063\u3066\u53d6\u5f97. let mySelectedDate : NSString = myDateFormatter . string ( from : sender . date ) as NSString myTextField . text = mySelectedDate as String } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 // // ViewController.swift // UIKit023_3.0 // // Created by KimikoWatanabe on 2016/08/17. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UIPickerViewDelegate { private var myTextField : UITextField ! override func viewDidLoad () { super . viewDidLoad () self . view . backgroundColor = UIColor . white // DatePicker\u3092\u751f\u6210\u3059\u308b. let myDatePicker : UIDatePicker = UIDatePicker () // datePicker\u3092\u8a2d\u5b9a\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u4f4d\u7f6e\u306f\u753b\u9762\u4e0a\u90e8\uff09\u3059\u308b. myDatePicker . frame = CGRect ( x : 0 , y : 50 , width : self . view . frame . width , height : 200 ) myDatePicker . timeZone = NSTimeZone . local myDatePicker . backgroundColor = UIColor . white myDatePicker . layer . cornerRadius = 5.0 myDatePicker . layer . shadowOpacity = 0.5 // \u5024\u304c\u5909\u308f\u3063\u305f\u969b\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u767b\u9332\u3059\u308b. myDatePicker . addTarget ( self , action : #selector ( ViewController . onDidChangeDate ( sender :)), for : . valueChanged ) // DataPicker\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myDatePicker ) // UITextField\u3092\u4f5c\u6210\u3059\u308b. myTextField = UITextField ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 30 )) myTextField . text = \"\" myTextField . borderStyle = UITextBorderStyle . roundedRect myTextField . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : self . view . bounds . height - 100 ); // UITextField\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myTextField ) } /* DatePicker\u304c\u9078\u3070\u308c\u305f\u969b\u306b\u547c\u3070\u308c\u308b. */ internal func onDidChangeDate ( sender : UIDatePicker ){ // \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u751f\u6210. let myDateFormatter : DateFormatter = DateFormatter () myDateFormatter . dateFormat = \"yyyy/MM/dd hh:mm\" // \u65e5\u4ed8\u3092\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u5247\u3063\u3066\u53d6\u5f97. let mySelectedDate : NSString = myDateFormatter . string ( from : sender . date ) myTextField . text = mySelectedDate as String } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 // // ViewController.swift // UIKit023_2.3 // // Created by KimikoWatanabe on 2016/08/17. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UIPickerViewDelegate { private var myTextField : UITextField ! override func viewDidLoad () { super . viewDidLoad () self . view . backgroundColor = UIColor . whiteColor () // DatePicker\u3092\u751f\u6210\u3059\u308b. let myDatePicker : UIDatePicker = UIDatePicker () // datePicker\u3092\u8a2d\u5b9a\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u4f4d\u7f6e\u306f\u753b\u9762\u4e0a\u90e8\uff09\u3059\u308b. myDatePicker . frame = CGRectMake ( 0 , 50 , self . view . frame . width , 200 ) myDatePicker . timeZone = NSTimeZone . localTimeZone () myDatePicker . backgroundColor = UIColor . whiteColor () myDatePicker . layer . cornerRadius = 5.0 myDatePicker . layer . shadowOpacity = 0.5 // \u5024\u304c\u5909\u308f\u3063\u305f\u969b\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u767b\u9332\u3059\u308b. myDatePicker . addTarget ( self , action : #selector ( ViewController . onDidChangeDate ( _ :)), forControlEvents : . ValueChanged ) // DataPicker\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myDatePicker ) // UITextField\u3092\u4f5c\u6210\u3059\u308b. myTextField = UITextField ( frame : CGRectMake ( 0 , 0 , 200 , 30 )) myTextField . text = \"\" myTextField . borderStyle = UITextBorderStyle . RoundedRect myTextField . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : self . view . bounds . height - 100 ); // UITextField\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myTextField ) } /* DatePicker\u304c\u9078\u3070\u308c\u305f\u969b\u306b\u547c\u3070\u308c\u308b. */ internal func onDidChangeDate ( sender : UIDatePicker ){ // \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u751f\u6210. let myDateFormatter : NSDateFormatter = NSDateFormatter () myDateFormatter . dateFormat = \"yyyy/MM/dd hh:mm\" // \u65e5\u4ed8\u3092\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u5247\u3063\u3066\u53d6\u5f97. let mySelectedDate : NSString = myDateFormatter . stringFromDate ( sender . date ) myTextField . text = mySelectedDate as String } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } 3.0\u30684.0\u306e\u5dee\u5206 UITextBorderStyle.roundedRect \u304c\u3001 UITextField.BorderStyle.roundedRect \u306b\u5909\u66f4 internal func onDidChangeDate(sender: UIDatePicker) \u306b @objc \u3092\u8ffd\u52a0 myDateFormatter.string(from: sender.date) \u3092\u3001 myDateFormatter.string(from: sender.date) as NSString \u306b\u5909\u66f4 2.3\u30683.0\u306e\u5dee\u5206 NSDateFormatter\u306e\u5ec3\u6b62\u3001DateFormatter\u306b\u5909\u66f4 local\u306eNSTimeZone\u306e\u53d6\u5f97\u65b9\u6cd5\u306e\u5909\u66f4 Reference UIDatePicker Class https://developer.apple.com/reference/uikit/uidatepicker","title":"UIDatePicker\u306e\u8868\u793a"},{"location":"1.uikit/023_uidatepicker/#uidatepicker","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 // // ViewController.swift // UIKit023_4.0 // // Created by KimikoWatanabe on 2016/08/17. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UIPickerViewDelegate { private var myTextField : UITextField ! override func viewDidLoad () { super . viewDidLoad () self . view . backgroundColor = UIColor . white // DatePicker\u3092\u751f\u6210\u3059\u308b. let myDatePicker : UIDatePicker = UIDatePicker () // datePicker\u3092\u8a2d\u5b9a\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u4f4d\u7f6e\u306f\u753b\u9762\u4e0a\u90e8\uff09\u3059\u308b. myDatePicker . frame = CGRect ( x : 0 , y : 50 , width : self . view . frame . width , height : 200 ) myDatePicker . timeZone = NSTimeZone . local myDatePicker . backgroundColor = UIColor . white myDatePicker . layer . cornerRadius = 5.0 myDatePicker . layer . shadowOpacity = 0.5 // \u5024\u304c\u5909\u308f\u3063\u305f\u969b\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u767b\u9332\u3059\u308b. myDatePicker . addTarget ( self , action : #selector ( ViewController . onDidChangeDate ( sender :)), for : . valueChanged ) // DataPicker\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myDatePicker ) // UITextField\u3092\u4f5c\u6210\u3059\u308b. myTextField = UITextField ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 30 )) myTextField . text = \"\" myTextField . borderStyle = UITextField . BorderStyle . roundedRect myTextField . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : self . view . bounds . height - 100 ); // UITextField\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myTextField ) } /* DatePicker\u304c\u9078\u3070\u308c\u305f\u969b\u306b\u547c\u3070\u308c\u308b. */ @objc internal func onDidChangeDate ( sender : UIDatePicker ){ // \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u751f\u6210. let myDateFormatter : DateFormatter = DateFormatter () myDateFormatter . dateFormat = \"yyyy/MM/dd hh:mm\" // \u65e5\u4ed8\u3092\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u5247\u3063\u3066\u53d6\u5f97. let mySelectedDate : NSString = myDateFormatter . string ( from : sender . date ) as NSString myTextField . text = mySelectedDate as String } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 // // ViewController.swift // UIKit023_3.0 // // Created by KimikoWatanabe on 2016/08/17. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UIPickerViewDelegate { private var myTextField : UITextField ! override func viewDidLoad () { super . viewDidLoad () self . view . backgroundColor = UIColor . white // DatePicker\u3092\u751f\u6210\u3059\u308b. let myDatePicker : UIDatePicker = UIDatePicker () // datePicker\u3092\u8a2d\u5b9a\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u4f4d\u7f6e\u306f\u753b\u9762\u4e0a\u90e8\uff09\u3059\u308b. myDatePicker . frame = CGRect ( x : 0 , y : 50 , width : self . view . frame . width , height : 200 ) myDatePicker . timeZone = NSTimeZone . local myDatePicker . backgroundColor = UIColor . white myDatePicker . layer . cornerRadius = 5.0 myDatePicker . layer . shadowOpacity = 0.5 // \u5024\u304c\u5909\u308f\u3063\u305f\u969b\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u767b\u9332\u3059\u308b. myDatePicker . addTarget ( self , action : #selector ( ViewController . onDidChangeDate ( sender :)), for : . valueChanged ) // DataPicker\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myDatePicker ) // UITextField\u3092\u4f5c\u6210\u3059\u308b. myTextField = UITextField ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 30 )) myTextField . text = \"\" myTextField . borderStyle = UITextBorderStyle . roundedRect myTextField . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : self . view . bounds . height - 100 ); // UITextField\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myTextField ) } /* DatePicker\u304c\u9078\u3070\u308c\u305f\u969b\u306b\u547c\u3070\u308c\u308b. */ internal func onDidChangeDate ( sender : UIDatePicker ){ // \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u751f\u6210. let myDateFormatter : DateFormatter = DateFormatter () myDateFormatter . dateFormat = \"yyyy/MM/dd hh:mm\" // \u65e5\u4ed8\u3092\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u5247\u3063\u3066\u53d6\u5f97. let mySelectedDate : NSString = myDateFormatter . string ( from : sender . date ) myTextField . text = mySelectedDate as String } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 // // ViewController.swift // UIKit023_2.3 // // Created by KimikoWatanabe on 2016/08/17. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UIPickerViewDelegate { private var myTextField : UITextField ! override func viewDidLoad () { super . viewDidLoad () self . view . backgroundColor = UIColor . whiteColor () // DatePicker\u3092\u751f\u6210\u3059\u308b. let myDatePicker : UIDatePicker = UIDatePicker () // datePicker\u3092\u8a2d\u5b9a\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u4f4d\u7f6e\u306f\u753b\u9762\u4e0a\u90e8\uff09\u3059\u308b. myDatePicker . frame = CGRectMake ( 0 , 50 , self . view . frame . width , 200 ) myDatePicker . timeZone = NSTimeZone . localTimeZone () myDatePicker . backgroundColor = UIColor . whiteColor () myDatePicker . layer . cornerRadius = 5.0 myDatePicker . layer . shadowOpacity = 0.5 // \u5024\u304c\u5909\u308f\u3063\u305f\u969b\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u767b\u9332\u3059\u308b. myDatePicker . addTarget ( self , action : #selector ( ViewController . onDidChangeDate ( _ :)), forControlEvents : . ValueChanged ) // DataPicker\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myDatePicker ) // UITextField\u3092\u4f5c\u6210\u3059\u308b. myTextField = UITextField ( frame : CGRectMake ( 0 , 0 , 200 , 30 )) myTextField . text = \"\" myTextField . borderStyle = UITextBorderStyle . RoundedRect myTextField . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : self . view . bounds . height - 100 ); // UITextField\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myTextField ) } /* DatePicker\u304c\u9078\u3070\u308c\u305f\u969b\u306b\u547c\u3070\u308c\u308b. */ internal func onDidChangeDate ( sender : UIDatePicker ){ // \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u751f\u6210. let myDateFormatter : NSDateFormatter = NSDateFormatter () myDateFormatter . dateFormat = \"yyyy/MM/dd hh:mm\" // \u65e5\u4ed8\u3092\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u5247\u3063\u3066\u53d6\u5f97. let mySelectedDate : NSString = myDateFormatter . stringFromDate ( sender . date ) myTextField . text = mySelectedDate as String } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } }","title":"UIDatePicker\u306e\u8868\u793a"},{"location":"1.uikit/023_uidatepicker/#3040","text":"UITextBorderStyle.roundedRect \u304c\u3001 UITextField.BorderStyle.roundedRect \u306b\u5909\u66f4 internal func onDidChangeDate(sender: UIDatePicker) \u306b @objc \u3092\u8ffd\u52a0 myDateFormatter.string(from: sender.date) \u3092\u3001 myDateFormatter.string(from: sender.date) as NSString \u306b\u5909\u66f4","title":"3.0\u30684.0\u306e\u5dee\u5206"},{"location":"1.uikit/023_uidatepicker/#2330","text":"NSDateFormatter\u306e\u5ec3\u6b62\u3001DateFormatter\u306b\u5909\u66f4 local\u306eNSTimeZone\u306e\u53d6\u5f97\u65b9\u6cd5\u306e\u5909\u66f4","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/023_uidatepicker/#reference","text":"UIDatePicker Class https://developer.apple.com/reference/uikit/uidatepicker","title":"Reference"},{"location":"1.uikit/024_uiactivityindicator/","text":"UIActivityIndicator\u306e\u8868\u793a Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 // // ViewController.swift // UIKit024_4.0 // // Created by KimikoWatanabe on 2016/08/17. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myActivityIndicator : UIActivityIndicatorView ! private var myButton : UIButton ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u8272\u3092\u9ed2\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . black // \u30a4\u30f3\u30b8\u30b1\u30fc\u30bf\u3092\u4f5c\u6210\u3059\u308b. myActivityIndicator = UIActivityIndicatorView () myActivityIndicator . frame = CGRect ( x : 0 , y : 0 , width : 50 , height : 50 ) myActivityIndicator . center = self . view . center // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u304c\u505c\u6b62\u3057\u3066\u3044\u308b\u6642\u3082\u30a4\u30f3\u30b8\u30b1\u30fc\u30bf\u3092\u8868\u793a\u3055\u305b\u308b. myActivityIndicator . hidesWhenStopped = false myActivityIndicator . style = UIActivityIndicatorView . Style . white // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u958b\u59cb\u3059\u308b. myActivityIndicator . startAnimating () // \u30a4\u30f3\u30b8\u30b1\u30fc\u30bf\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myActivityIndicator ) // \u30dc\u30bf\u30f3\u3092\u751f\u6210\u3059\u308b. myButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 60 , height : 60 )) myButton . backgroundColor = UIColor . red myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 30.0 myButton . setTitle ( \"Stop\" , for : . normal ) myButton . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : self . view . bounds . height - 50 ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchUpInside ) // \u30dc\u30bf\u30f3\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myButton ) } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8. */ @objc internal func onClickMyButton ( sender : UIButton ){ if myActivityIndicator . isAnimating { myActivityIndicator . stopAnimating () myButton . setTitle ( \"Start\" , for : . normal ) myButton . backgroundColor = UIColor . blue } else { myActivityIndicator . startAnimating () myButton . setTitle ( \"Stop\" , for : . normal ) myButton . backgroundColor = UIColor . red } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 // // ViewController.swift // UIKit024_3.0 // // Created by KimikoWatanabe on 2016/08/17. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myActivityIndicator : UIActivityIndicatorView ! private var myButton : UIButton ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u8272\u3092\u9ed2\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . black // \u30a4\u30f3\u30b8\u30b1\u30fc\u30bf\u3092\u4f5c\u6210\u3059\u308b. myActivityIndicator = UIActivityIndicatorView () myActivityIndicator . frame = CGRect ( x : 0 , y : 0 , width : 50 , height : 50 ) myActivityIndicator . center = self . view . center // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u304c\u505c\u6b62\u3057\u3066\u3044\u308b\u6642\u3082\u30a4\u30f3\u30b8\u30b1\u30fc\u30bf\u3092\u8868\u793a\u3055\u305b\u308b. myActivityIndicator . hidesWhenStopped = false myActivityIndicator . activityIndicatorViewStyle = UIActivityIndicatorViewStyle . white // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u958b\u59cb\u3059\u308b. myActivityIndicator . startAnimating () // \u30a4\u30f3\u30b8\u30b1\u30fc\u30bf\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myActivityIndicator ) // \u30dc\u30bf\u30f3\u3092\u751f\u6210\u3059\u308b. myButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 60 , height : 60 )) myButton . backgroundColor = UIColor . red myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 30.0 myButton . setTitle ( \"Stop\" , for : . normal ) myButton . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : self . view . bounds . height - 50 ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchUpInside ) // \u30dc\u30bf\u30f3\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myButton ) } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8. */ internal func onClickMyButton ( sender : UIButton ){ if myActivityIndicator . isAnimating { myActivityIndicator . stopAnimating () myButton . setTitle ( \"Start\" , for : . normal ) myButton . backgroundColor = UIColor . blue } else { myActivityIndicator . startAnimating () myButton . setTitle ( \"Stop\" , for : . normal ) myButton . backgroundColor = UIColor . red } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 // // ViewController.swift // UIKit024_2.3 // // Created by KimikoWatanabe on 2016/08/17. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myActivityIndicator : UIActivityIndicatorView ! private var myButton : UIButton ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u8272\u3092\u9ed2\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . blackColor () // \u30a4\u30f3\u30b8\u30b1\u30fc\u30bf\u3092\u4f5c\u6210\u3059\u308b. myActivityIndicator = UIActivityIndicatorView () myActivityIndicator . frame = CGRectMake ( 0 , 0 , 50 , 50 ) myActivityIndicator . center = self . view . center // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u304c\u505c\u6b62\u3057\u3066\u3044\u308b\u6642\u3082\u30a4\u30f3\u30b8\u30b1\u30fc\u30bf\u3092\u8868\u793a\u3055\u305b\u308b. myActivityIndicator . hidesWhenStopped = false myActivityIndicator . activityIndicatorViewStyle = UIActivityIndicatorViewStyle . White // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u958b\u59cb\u3059\u308b. myActivityIndicator . startAnimating () // \u30a4\u30f3\u30b8\u30b1\u30fc\u30bf\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myActivityIndicator ) // \u30dc\u30bf\u30f3\u3092\u751f\u6210\u3059\u308b. myButton = UIButton ( frame : CGRectMake ( 0 , 0 , 60 , 60 )) myButton . backgroundColor = UIColor . redColor () myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 30.0 myButton . setTitle ( \"Stop\" , forState : . Normal ) myButton . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : self . view . bounds . height - 50 ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : . TouchUpInside ) // \u30dc\u30bf\u30f3\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myButton ) } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8. */ internal func onClickMyButton ( sender : UIButton ){ if myActivityIndicator . isAnimating () { myActivityIndicator . stopAnimating () myButton . setTitle ( \"Start\" , forState : . Normal ) myButton . backgroundColor = UIColor . blueColor () } else { myActivityIndicator . startAnimating () myButton . setTitle ( \"Stop\" , forState : . Normal ) myButton . backgroundColor = UIColor . redColor () } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } 3.0\u30684.0\u306e\u5dee\u5206 activityIndicatorViewStyle \u304c style \u306b\u5909\u66f4 UIActivityIndicatorViewStyle \u304c UIActivityIndicatorView.Style \u306b\u5909\u66f4 internal func onClickMyButton(sender: UIButton) \u306b @objc \u3092\u8ffd\u52a0 2.3\u30683.0\u306e\u5dee\u5206 myActivityIndicator.isAnimating\u304c\u30e1\u30bd\u30c3\u30c9\u304b\u3089\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u5909\u66f4 Reference UIActivityIndicatorView Class https://developer.apple.com/reference/uikit/uiactivityindicatorview","title":"UIActivityIndicator\u306e\u8868\u793a"},{"location":"1.uikit/024_uiactivityindicator/#uiactivityindicator","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 // // ViewController.swift // UIKit024_4.0 // // Created by KimikoWatanabe on 2016/08/17. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myActivityIndicator : UIActivityIndicatorView ! private var myButton : UIButton ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u8272\u3092\u9ed2\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . black // \u30a4\u30f3\u30b8\u30b1\u30fc\u30bf\u3092\u4f5c\u6210\u3059\u308b. myActivityIndicator = UIActivityIndicatorView () myActivityIndicator . frame = CGRect ( x : 0 , y : 0 , width : 50 , height : 50 ) myActivityIndicator . center = self . view . center // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u304c\u505c\u6b62\u3057\u3066\u3044\u308b\u6642\u3082\u30a4\u30f3\u30b8\u30b1\u30fc\u30bf\u3092\u8868\u793a\u3055\u305b\u308b. myActivityIndicator . hidesWhenStopped = false myActivityIndicator . style = UIActivityIndicatorView . Style . white // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u958b\u59cb\u3059\u308b. myActivityIndicator . startAnimating () // \u30a4\u30f3\u30b8\u30b1\u30fc\u30bf\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myActivityIndicator ) // \u30dc\u30bf\u30f3\u3092\u751f\u6210\u3059\u308b. myButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 60 , height : 60 )) myButton . backgroundColor = UIColor . red myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 30.0 myButton . setTitle ( \"Stop\" , for : . normal ) myButton . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : self . view . bounds . height - 50 ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchUpInside ) // \u30dc\u30bf\u30f3\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myButton ) } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8. */ @objc internal func onClickMyButton ( sender : UIButton ){ if myActivityIndicator . isAnimating { myActivityIndicator . stopAnimating () myButton . setTitle ( \"Start\" , for : . normal ) myButton . backgroundColor = UIColor . blue } else { myActivityIndicator . startAnimating () myButton . setTitle ( \"Stop\" , for : . normal ) myButton . backgroundColor = UIColor . red } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 // // ViewController.swift // UIKit024_3.0 // // Created by KimikoWatanabe on 2016/08/17. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myActivityIndicator : UIActivityIndicatorView ! private var myButton : UIButton ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u8272\u3092\u9ed2\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . black // \u30a4\u30f3\u30b8\u30b1\u30fc\u30bf\u3092\u4f5c\u6210\u3059\u308b. myActivityIndicator = UIActivityIndicatorView () myActivityIndicator . frame = CGRect ( x : 0 , y : 0 , width : 50 , height : 50 ) myActivityIndicator . center = self . view . center // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u304c\u505c\u6b62\u3057\u3066\u3044\u308b\u6642\u3082\u30a4\u30f3\u30b8\u30b1\u30fc\u30bf\u3092\u8868\u793a\u3055\u305b\u308b. myActivityIndicator . hidesWhenStopped = false myActivityIndicator . activityIndicatorViewStyle = UIActivityIndicatorViewStyle . white // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u958b\u59cb\u3059\u308b. myActivityIndicator . startAnimating () // \u30a4\u30f3\u30b8\u30b1\u30fc\u30bf\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myActivityIndicator ) // \u30dc\u30bf\u30f3\u3092\u751f\u6210\u3059\u308b. myButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 60 , height : 60 )) myButton . backgroundColor = UIColor . red myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 30.0 myButton . setTitle ( \"Stop\" , for : . normal ) myButton . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : self . view . bounds . height - 50 ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchUpInside ) // \u30dc\u30bf\u30f3\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myButton ) } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8. */ internal func onClickMyButton ( sender : UIButton ){ if myActivityIndicator . isAnimating { myActivityIndicator . stopAnimating () myButton . setTitle ( \"Start\" , for : . normal ) myButton . backgroundColor = UIColor . blue } else { myActivityIndicator . startAnimating () myButton . setTitle ( \"Stop\" , for : . normal ) myButton . backgroundColor = UIColor . red } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 // // ViewController.swift // UIKit024_2.3 // // Created by KimikoWatanabe on 2016/08/17. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myActivityIndicator : UIActivityIndicatorView ! private var myButton : UIButton ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u8272\u3092\u9ed2\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . blackColor () // \u30a4\u30f3\u30b8\u30b1\u30fc\u30bf\u3092\u4f5c\u6210\u3059\u308b. myActivityIndicator = UIActivityIndicatorView () myActivityIndicator . frame = CGRectMake ( 0 , 0 , 50 , 50 ) myActivityIndicator . center = self . view . center // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u304c\u505c\u6b62\u3057\u3066\u3044\u308b\u6642\u3082\u30a4\u30f3\u30b8\u30b1\u30fc\u30bf\u3092\u8868\u793a\u3055\u305b\u308b. myActivityIndicator . hidesWhenStopped = false myActivityIndicator . activityIndicatorViewStyle = UIActivityIndicatorViewStyle . White // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u958b\u59cb\u3059\u308b. myActivityIndicator . startAnimating () // \u30a4\u30f3\u30b8\u30b1\u30fc\u30bf\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myActivityIndicator ) // \u30dc\u30bf\u30f3\u3092\u751f\u6210\u3059\u308b. myButton = UIButton ( frame : CGRectMake ( 0 , 0 , 60 , 60 )) myButton . backgroundColor = UIColor . redColor () myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 30.0 myButton . setTitle ( \"Stop\" , forState : . Normal ) myButton . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : self . view . bounds . height - 50 ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : . TouchUpInside ) // \u30dc\u30bf\u30f3\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myButton ) } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8. */ internal func onClickMyButton ( sender : UIButton ){ if myActivityIndicator . isAnimating () { myActivityIndicator . stopAnimating () myButton . setTitle ( \"Start\" , forState : . Normal ) myButton . backgroundColor = UIColor . blueColor () } else { myActivityIndicator . startAnimating () myButton . setTitle ( \"Stop\" , forState : . Normal ) myButton . backgroundColor = UIColor . redColor () } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } }","title":"UIActivityIndicator\u306e\u8868\u793a"},{"location":"1.uikit/024_uiactivityindicator/#3040","text":"activityIndicatorViewStyle \u304c style \u306b\u5909\u66f4 UIActivityIndicatorViewStyle \u304c UIActivityIndicatorView.Style \u306b\u5909\u66f4 internal func onClickMyButton(sender: UIButton) \u306b @objc \u3092\u8ffd\u52a0","title":"3.0\u30684.0\u306e\u5dee\u5206"},{"location":"1.uikit/024_uiactivityindicator/#2330","text":"myActivityIndicator.isAnimating\u304c\u30e1\u30bd\u30c3\u30c9\u304b\u3089\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u5909\u66f4","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/024_uiactivityindicator/#reference","text":"UIActivityIndicatorView Class https://developer.apple.com/reference/uikit/uiactivityindicatorview","title":"Reference"},{"location":"1.uikit/025_uisearchbar/","text":"UISearchBar\u306e\u8868\u793a ```swift\u3000fct_label=\"Swift 4.x\" // // ViewController.swift // UIKit025_4.0 // // Created by KimikoWatanabe on 2016/08/17. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController: UIViewController, UISearchBarDelegate { 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 private var mySearchBar: UISearchBar! private var myLabel : UILabel! override func viewDidLoad() { super.viewDidLoad() // \u80cc\u666f\u3092\u767d\u306b\u8a2d\u5b9a\u3059\u308b. self.view.backgroundColor = UIColor.white // \u691c\u7d22\u30d0\u30fc\u3092\u4f5c\u6210\u3059\u308b. mySearchBar = UISearchBar() mySearchBar.delegate = self mySearchBar.frame = CGRect(x:0, y:0, width:300, height:80) mySearchBar.layer.position = CGPoint(x: self.view.bounds.width/2, y: 100) // \u5f71\u3092\u3064\u3051\u308b. mySearchBar.layer.shadowColor = UIColor.black.cgColor mySearchBar.layer.shadowOpacity = 0.5 mySearchBar.layer.masksToBounds = false // \u30ad\u30e3\u30f3\u30bb\u30eb\u30dc\u30bf\u30f3\u3092\u6709\u52b9\u306b\u3059\u308b. mySearchBar.showsCancelButton = true // \u30d6\u30c3\u30af\u30de\u30fc\u30af\u30dc\u30bf\u30f3\u3092\u7121\u52b9\u306b\u3059\u308b. mySearchBar.showsBookmarkButton = false // \u30d0\u30fc\u30b9\u30bf\u30a4\u30eb\u3092Default\u306b\u8a2d\u5b9a\u3059\u308b. mySearchBar.searchBarStyle = UISearchBar.Style.default // \u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b. mySearchBar.prompt = \"\u30bf\u30a4\u30c8\u30eb\" // \u8aac\u660e\u6587\u3092\u8a2d\u5b9a\u3059\u308b. mySearchBar.placeholder = \"\u3053\u3053\u306b\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\" // \u30ab\u30fc\u30bd\u30eb\u3001\u30ad\u30e3\u30f3\u30bb\u30eb\u30dc\u30bf\u30f3\u306e\u8272\u3092\u8a2d\u5b9a\u3059\u308b. mySearchBar.tintColor = UIColor.red // \u691c\u7d22\u7d50\u679c\u8868\u793a\u30dc\u30bf\u30f3\u306f\u975e\u8868\u793a\u306b\u3059\u308b. mySearchBar.showsSearchResultsButton = false // \u691c\u7d22\u30d0\u30fc\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self.view.addSubview(mySearchBar) // UITextField\u3092\u4f5c\u6210\u3059\u308b. myLabel = UILabel(frame: CGRect(x:0,y:0,width:200,height:30)) myLabel.center = CGPoint(x: self.view.frame.width/2, y: self.view.frame.height/2) myLabel.text = \"\" myLabel.layer.borderWidth = 1.0 myLabel.layer.borderColor = UIColor.gray.cgColor myLabel.layer.cornerRadius = 10.0 // View\u306b\u8ffd\u52a0\u3059\u308b. self.view.addSubview(myLabel) } /* \u30c6\u30ad\u30b9\u30c8\u304c\u5909\u66f4\u3055\u308c\u308b\u6bce\u306b\u547c\u3070\u308c\u308b */ func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) { myLabel.text = searchText } /* Cancel\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b */ func searchBarCancelButtonClicked(_ searchBar: UISearchBar) { myLabel.text = \"\" mySearchBar.text = \"\" } /* Search\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b */ func searchBarSearchButtonClicked(_ searchBar: UISearchBar) { myLabel.text = \"Searching\" mySearchBar.text = \"\" self.view.endEditing(true) } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 `` ` swift fct_label = \"Swift3.x\" // // ViewController . swift // UIKit025_3 . 0 // // Created by KimikoWatanabe on 2016 / 08 / 17. // Copyright \u00a9 2016 \u5e74 FaBo , Inc . All rights reserved . // import UIKit class ViewController : UIViewController , UISearchBarDelegate { private var mySearchBar : UISearchBar ! private var myLabel : UILabel ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u767d\u306b\u8a2d\u5b9a\u3059\u308b . self . view . backgroundColor = UIColor . white // \u691c\u7d22\u30d0\u30fc\u3092\u4f5c\u6210\u3059\u308b . mySearchBar = UISearchBar () mySearchBar . delegate = self mySearchBar . frame = CGRect ( x : 0 , y : 0 , width : 300 , height : 80 ) mySearchBar . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 100 ) // \u5f71\u3092\u3064\u3051\u308b . mySearchBar . layer . shadowColor = UIColor . black . cgColor mySearchBar . layer . shadowOpacity = 0.5 mySearchBar . layer . masksToBounds = false // \u30ad\u30e3\u30f3\u30bb\u30eb\u30dc\u30bf\u30f3\u3092\u6709\u52b9\u306b\u3059\u308b . mySearchBar . showsCancelButton = true // \u30d6\u30c3\u30af\u30de\u30fc\u30af\u30dc\u30bf\u30f3\u3092\u7121\u52b9\u306b\u3059\u308b . mySearchBar . showsBookmarkButton = false // \u30d0\u30fc\u30b9\u30bf\u30a4\u30eb\u3092 Default\u306b\u8a2d\u5b9a\u3059\u308b . mySearchBar . searchBarStyle = UISearchBarStyle . default // \u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b . mySearchBar . prompt = \"\u30bf\u30a4\u30c8\u30eb\" // \u8aac\u660e\u6587\u3092\u8a2d\u5b9a\u3059\u308b . mySearchBar . placeholder = \"\u3053\u3053\u306b\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\" // \u30ab\u30fc\u30bd\u30eb\u3001\u30ad\u30e3\u30f3\u30bb\u30eb\u30dc\u30bf\u30f3\u306e\u8272\u3092\u8a2d\u5b9a\u3059\u308b . mySearchBar . tintColor = UIColor . red // \u691c\u7d22\u7d50\u679c\u8868\u793a\u30dc\u30bf\u30f3\u306f\u975e\u8868\u793a\u306b\u3059\u308b . mySearchBar . showsSearchResultsButton = false // \u691c\u7d22\u30d0\u30fc\u3092 View\u306b\u8ffd\u52a0\u3059\u308b . self . view . addSubview ( mySearchBar ) // UITextField\u3092\u4f5c\u6210\u3059\u308b . myLabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 30 )) myLabel . center = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height / 2 ) myLabel . text = \"\" myLabel . layer . borderWidth = 1.0 myLabel . layer . borderColor = UIColor . gray . cgColor myLabel . layer . cornerRadius = 10.0 // View\u306b\u8ffd\u52a0\u3059\u308b . self . view . addSubview ( myLabel ) } /* \u30c6\u30ad\u30b9\u30c8\u304c\u5909\u66f4\u3055\u308c\u308b\u6bce\u306b\u547c\u3070\u308c\u308b */ func searchBar ( _ searchBar : UISearchBar , textDidChange searchText : String ) { myLabel . text = searchText } /* Cancel\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b */ func searchBarCancelButtonClicked ( _ searchBar : UISearchBar ) { myLabel . text = \"\" mySearchBar . text = \"\" } /* Search\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b */ func searchBarSearchButtonClicked ( _ searchBar : UISearchBar ) { myLabel . text = \"Searching\" mySearchBar . text = \"\" self . view . endEditing ( true ) } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 // // ViewController.swift // UIKit025_2.3 // // Created by KimikoWatanabe on 2016/08/17. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UISearchBarDelegate { private var mySearchBar : UISearchBar ! private var myLabel : UILabel ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u767d\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . whiteColor () // \u691c\u7d22\u30d0\u30fc\u3092\u4f5c\u6210\u3059\u308b. mySearchBar = UISearchBar () mySearchBar . delegate = self mySearchBar . frame = CGRectMake ( 0 , 0 , 300 , 80 ) mySearchBar . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 100 ) // \u5f71\u3092\u3064\u3051\u308b. mySearchBar . layer . shadowColor = UIColor . blackColor (). CGColor mySearchBar . layer . shadowOpacity = 0.5 mySearchBar . layer . masksToBounds = false // \u30ad\u30e3\u30f3\u30bb\u30eb\u30dc\u30bf\u30f3\u3092\u6709\u52b9\u306b\u3059\u308b. mySearchBar . showsCancelButton = true // \u30d6\u30c3\u30af\u30de\u30fc\u30af\u30dc\u30bf\u30f3\u3092\u7121\u52b9\u306b\u3059\u308b. mySearchBar . showsBookmarkButton = false // \u30d0\u30fc\u30b9\u30bf\u30a4\u30eb\u3092Default\u306b\u8a2d\u5b9a\u3059\u308b. mySearchBar . searchBarStyle = UISearchBarStyle . Default // \u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b. mySearchBar . prompt = \"\u30bf\u30a4\u30c8\u30eb\" // \u8aac\u660e\u6587\u3092\u8a2d\u5b9a\u3059\u308b. mySearchBar . placeholder = \"\u3053\u3053\u306b\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\" // \u30ab\u30fc\u30bd\u30eb\u3001\u30ad\u30e3\u30f3\u30bb\u30eb\u30dc\u30bf\u30f3\u306e\u8272\u3092\u8a2d\u5b9a\u3059\u308b. mySearchBar . tintColor = UIColor . redColor () // \u691c\u7d22\u7d50\u679c\u8868\u793a\u30dc\u30bf\u30f3\u306f\u975e\u8868\u793a\u306b\u3059\u308b. mySearchBar . showsSearchResultsButton = false // \u691c\u7d22\u30d0\u30fc\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( mySearchBar ) // UITextField\u3092\u4f5c\u6210\u3059\u308b. myLabel = UILabel ( frame : CGRectMake ( 0 , 0 , 200 , 30 )) myLabel . center = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height / 2 ) myLabel . text = \"\" myLabel . layer . borderWidth = 1.0 myLabel . layer . borderColor = UIColor . grayColor (). CGColor myLabel . layer . cornerRadius = 10.0 // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myLabel ) } /* \u30c6\u30ad\u30b9\u30c8\u304c\u5909\u66f4\u3055\u308c\u308b\u6bce\u306b\u547c\u3070\u308c\u308b */ func searchBar ( searchBar : UISearchBar , textDidChange searchText : String ) { myLabel . text = searchText } /* Cancel\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b */ func searchBarCancelButtonClicked ( searchBar : UISearchBar ) { myLabel . text = \"\" mySearchBar . text = \"\" } /* Search\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b */ func searchBarSearchButtonClicked ( searchBar : UISearchBar ) { myLabel . text = \"Searching\" mySearchBar . text = \"\" self . view . endEditing ( true ) } } 3.0\u30684.0\u306e\u5dee\u5206 UISearchBarStyle.default \u304c\u3001 UISearchBar.Style.default \u306b\u5909\u66f4 2.3\u30683.0\u306e\u5dee\u5206 UIColor\u306e\u53c2\u7167\u540d\u304c\u5909\u66f4(UIColor.blackColor() -> UIColor.black) CGRect\u306e\u521d\u671f\u5316\u65b9\u6cd5\u304c\u5909\u66f4(CGRectMake\u30e1\u30bd\u30c3\u30c9\u306e\u5ec3\u6b62) UISearchBarDelegate\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u304c\u5909\u66f4 Reference UISearchBar Class https://developer.apple.com/reference/uikit/uisearchbar","title":"UISearchBar\u306e\u8868\u793a"},{"location":"1.uikit/025_uisearchbar/#uisearchbar","text":"```swift\u3000fct_label=\"Swift 4.x\" // // ViewController.swift // UIKit025_4.0 // // Created by KimikoWatanabe on 2016/08/17. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController: UIViewController, UISearchBarDelegate { 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 private var mySearchBar: UISearchBar! private var myLabel : UILabel! override func viewDidLoad() { super.viewDidLoad() // \u80cc\u666f\u3092\u767d\u306b\u8a2d\u5b9a\u3059\u308b. self.view.backgroundColor = UIColor.white // \u691c\u7d22\u30d0\u30fc\u3092\u4f5c\u6210\u3059\u308b. mySearchBar = UISearchBar() mySearchBar.delegate = self mySearchBar.frame = CGRect(x:0, y:0, width:300, height:80) mySearchBar.layer.position = CGPoint(x: self.view.bounds.width/2, y: 100) // \u5f71\u3092\u3064\u3051\u308b. mySearchBar.layer.shadowColor = UIColor.black.cgColor mySearchBar.layer.shadowOpacity = 0.5 mySearchBar.layer.masksToBounds = false // \u30ad\u30e3\u30f3\u30bb\u30eb\u30dc\u30bf\u30f3\u3092\u6709\u52b9\u306b\u3059\u308b. mySearchBar.showsCancelButton = true // \u30d6\u30c3\u30af\u30de\u30fc\u30af\u30dc\u30bf\u30f3\u3092\u7121\u52b9\u306b\u3059\u308b. mySearchBar.showsBookmarkButton = false // \u30d0\u30fc\u30b9\u30bf\u30a4\u30eb\u3092Default\u306b\u8a2d\u5b9a\u3059\u308b. mySearchBar.searchBarStyle = UISearchBar.Style.default // \u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b. mySearchBar.prompt = \"\u30bf\u30a4\u30c8\u30eb\" // \u8aac\u660e\u6587\u3092\u8a2d\u5b9a\u3059\u308b. mySearchBar.placeholder = \"\u3053\u3053\u306b\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\" // \u30ab\u30fc\u30bd\u30eb\u3001\u30ad\u30e3\u30f3\u30bb\u30eb\u30dc\u30bf\u30f3\u306e\u8272\u3092\u8a2d\u5b9a\u3059\u308b. mySearchBar.tintColor = UIColor.red // \u691c\u7d22\u7d50\u679c\u8868\u793a\u30dc\u30bf\u30f3\u306f\u975e\u8868\u793a\u306b\u3059\u308b. mySearchBar.showsSearchResultsButton = false // \u691c\u7d22\u30d0\u30fc\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self.view.addSubview(mySearchBar) // UITextField\u3092\u4f5c\u6210\u3059\u308b. myLabel = UILabel(frame: CGRect(x:0,y:0,width:200,height:30)) myLabel.center = CGPoint(x: self.view.frame.width/2, y: self.view.frame.height/2) myLabel.text = \"\" myLabel.layer.borderWidth = 1.0 myLabel.layer.borderColor = UIColor.gray.cgColor myLabel.layer.cornerRadius = 10.0 // View\u306b\u8ffd\u52a0\u3059\u308b. self.view.addSubview(myLabel) } /* \u30c6\u30ad\u30b9\u30c8\u304c\u5909\u66f4\u3055\u308c\u308b\u6bce\u306b\u547c\u3070\u308c\u308b */ func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) { myLabel.text = searchText } /* Cancel\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b */ func searchBarCancelButtonClicked(_ searchBar: UISearchBar) { myLabel.text = \"\" mySearchBar.text = \"\" } /* Search\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b */ func searchBarSearchButtonClicked(_ searchBar: UISearchBar) { myLabel.text = \"Searching\" mySearchBar.text = \"\" self.view.endEditing(true) } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 `` ` swift fct_label = \"Swift3.x\" // // ViewController . swift // UIKit025_3 . 0 // // Created by KimikoWatanabe on 2016 / 08 / 17. // Copyright \u00a9 2016 \u5e74 FaBo , Inc . All rights reserved . // import UIKit class ViewController : UIViewController , UISearchBarDelegate { private var mySearchBar : UISearchBar ! private var myLabel : UILabel ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u767d\u306b\u8a2d\u5b9a\u3059\u308b . self . view . backgroundColor = UIColor . white // \u691c\u7d22\u30d0\u30fc\u3092\u4f5c\u6210\u3059\u308b . mySearchBar = UISearchBar () mySearchBar . delegate = self mySearchBar . frame = CGRect ( x : 0 , y : 0 , width : 300 , height : 80 ) mySearchBar . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 100 ) // \u5f71\u3092\u3064\u3051\u308b . mySearchBar . layer . shadowColor = UIColor . black . cgColor mySearchBar . layer . shadowOpacity = 0.5 mySearchBar . layer . masksToBounds = false // \u30ad\u30e3\u30f3\u30bb\u30eb\u30dc\u30bf\u30f3\u3092\u6709\u52b9\u306b\u3059\u308b . mySearchBar . showsCancelButton = true // \u30d6\u30c3\u30af\u30de\u30fc\u30af\u30dc\u30bf\u30f3\u3092\u7121\u52b9\u306b\u3059\u308b . mySearchBar . showsBookmarkButton = false // \u30d0\u30fc\u30b9\u30bf\u30a4\u30eb\u3092 Default\u306b\u8a2d\u5b9a\u3059\u308b . mySearchBar . searchBarStyle = UISearchBarStyle . default // \u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b . mySearchBar . prompt = \"\u30bf\u30a4\u30c8\u30eb\" // \u8aac\u660e\u6587\u3092\u8a2d\u5b9a\u3059\u308b . mySearchBar . placeholder = \"\u3053\u3053\u306b\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\" // \u30ab\u30fc\u30bd\u30eb\u3001\u30ad\u30e3\u30f3\u30bb\u30eb\u30dc\u30bf\u30f3\u306e\u8272\u3092\u8a2d\u5b9a\u3059\u308b . mySearchBar . tintColor = UIColor . red // \u691c\u7d22\u7d50\u679c\u8868\u793a\u30dc\u30bf\u30f3\u306f\u975e\u8868\u793a\u306b\u3059\u308b . mySearchBar . showsSearchResultsButton = false // \u691c\u7d22\u30d0\u30fc\u3092 View\u306b\u8ffd\u52a0\u3059\u308b . self . view . addSubview ( mySearchBar ) // UITextField\u3092\u4f5c\u6210\u3059\u308b . myLabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 30 )) myLabel . center = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height / 2 ) myLabel . text = \"\" myLabel . layer . borderWidth = 1.0 myLabel . layer . borderColor = UIColor . gray . cgColor myLabel . layer . cornerRadius = 10.0 // View\u306b\u8ffd\u52a0\u3059\u308b . self . view . addSubview ( myLabel ) } /* \u30c6\u30ad\u30b9\u30c8\u304c\u5909\u66f4\u3055\u308c\u308b\u6bce\u306b\u547c\u3070\u308c\u308b */ func searchBar ( _ searchBar : UISearchBar , textDidChange searchText : String ) { myLabel . text = searchText } /* Cancel\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b */ func searchBarCancelButtonClicked ( _ searchBar : UISearchBar ) { myLabel . text = \"\" mySearchBar . text = \"\" } /* Search\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b */ func searchBarSearchButtonClicked ( _ searchBar : UISearchBar ) { myLabel . text = \"Searching\" mySearchBar . text = \"\" self . view . endEditing ( true ) } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 // // ViewController.swift // UIKit025_2.3 // // Created by KimikoWatanabe on 2016/08/17. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UISearchBarDelegate { private var mySearchBar : UISearchBar ! private var myLabel : UILabel ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u767d\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . whiteColor () // \u691c\u7d22\u30d0\u30fc\u3092\u4f5c\u6210\u3059\u308b. mySearchBar = UISearchBar () mySearchBar . delegate = self mySearchBar . frame = CGRectMake ( 0 , 0 , 300 , 80 ) mySearchBar . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 100 ) // \u5f71\u3092\u3064\u3051\u308b. mySearchBar . layer . shadowColor = UIColor . blackColor (). CGColor mySearchBar . layer . shadowOpacity = 0.5 mySearchBar . layer . masksToBounds = false // \u30ad\u30e3\u30f3\u30bb\u30eb\u30dc\u30bf\u30f3\u3092\u6709\u52b9\u306b\u3059\u308b. mySearchBar . showsCancelButton = true // \u30d6\u30c3\u30af\u30de\u30fc\u30af\u30dc\u30bf\u30f3\u3092\u7121\u52b9\u306b\u3059\u308b. mySearchBar . showsBookmarkButton = false // \u30d0\u30fc\u30b9\u30bf\u30a4\u30eb\u3092Default\u306b\u8a2d\u5b9a\u3059\u308b. mySearchBar . searchBarStyle = UISearchBarStyle . Default // \u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b. mySearchBar . prompt = \"\u30bf\u30a4\u30c8\u30eb\" // \u8aac\u660e\u6587\u3092\u8a2d\u5b9a\u3059\u308b. mySearchBar . placeholder = \"\u3053\u3053\u306b\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\" // \u30ab\u30fc\u30bd\u30eb\u3001\u30ad\u30e3\u30f3\u30bb\u30eb\u30dc\u30bf\u30f3\u306e\u8272\u3092\u8a2d\u5b9a\u3059\u308b. mySearchBar . tintColor = UIColor . redColor () // \u691c\u7d22\u7d50\u679c\u8868\u793a\u30dc\u30bf\u30f3\u306f\u975e\u8868\u793a\u306b\u3059\u308b. mySearchBar . showsSearchResultsButton = false // \u691c\u7d22\u30d0\u30fc\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( mySearchBar ) // UITextField\u3092\u4f5c\u6210\u3059\u308b. myLabel = UILabel ( frame : CGRectMake ( 0 , 0 , 200 , 30 )) myLabel . center = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height / 2 ) myLabel . text = \"\" myLabel . layer . borderWidth = 1.0 myLabel . layer . borderColor = UIColor . grayColor (). CGColor myLabel . layer . cornerRadius = 10.0 // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myLabel ) } /* \u30c6\u30ad\u30b9\u30c8\u304c\u5909\u66f4\u3055\u308c\u308b\u6bce\u306b\u547c\u3070\u308c\u308b */ func searchBar ( searchBar : UISearchBar , textDidChange searchText : String ) { myLabel . text = searchText } /* Cancel\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b */ func searchBarCancelButtonClicked ( searchBar : UISearchBar ) { myLabel . text = \"\" mySearchBar . text = \"\" } /* Search\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b */ func searchBarSearchButtonClicked ( searchBar : UISearchBar ) { myLabel . text = \"Searching\" mySearchBar . text = \"\" self . view . endEditing ( true ) } }","title":"UISearchBar\u306e\u8868\u793a"},{"location":"1.uikit/025_uisearchbar/#3040","text":"UISearchBarStyle.default \u304c\u3001 UISearchBar.Style.default \u306b\u5909\u66f4","title":"3.0\u30684.0\u306e\u5dee\u5206"},{"location":"1.uikit/025_uisearchbar/#2330","text":"UIColor\u306e\u53c2\u7167\u540d\u304c\u5909\u66f4(UIColor.blackColor() -> UIColor.black) CGRect\u306e\u521d\u671f\u5316\u65b9\u6cd5\u304c\u5909\u66f4(CGRectMake\u30e1\u30bd\u30c3\u30c9\u306e\u5ec3\u6b62) UISearchBarDelegate\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u304c\u5909\u66f4","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/025_uisearchbar/#reference","text":"UISearchBar Class https://developer.apple.com/reference/uikit/uisearchbar","title":"Reference"},{"location":"1.uikit/026_uiwindow/","text":"UIWindow\u306e\u8868\u793a Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 // // ViewController.swift // UIKit026_4.0 // // Created by KimikoWatanabe on 2016/08/17. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myWindow : UIWindow ! private var myWindowButton : UIButton ! private var myButton : UIButton ! override func viewDidLoad () { super . viewDidLoad () myWindow = UIWindow () myWindowButton = UIButton () myButton = UIButton () // \u80cc\u666f\u306b\u753b\u50cf\u3092\u8a2d\u5b9a\u3059\u308b. let myImage : UIImage = UIImage ( named : \"oouchi.jpg\" ) ! let myImageView : UIImageView = UIImageView () myImageView . image = myImage // \u753b\u50cf\u306escale\u3092\u8a08\u7b97. let scale = self . view . frame . width / myImage . size . width myImageView . frame = CGRect ( x : 0 , y : 0 , width : myImage . size . width * scale , height : myImage . size . height * scale ) self . view . addSubview ( myImageView ) // \u30dc\u30bf\u30f3\u3092\u751f\u6210\u3059\u308b. myButton . frame = CGRect ( x : 0 , y : 0 , width : 60 , height : 60 ) myButton . backgroundColor = UIColor . red myButton . setTitle ( \"Dialog\" , for : . normal ) myButton . setTitleColor ( UIColor . white , for : . normal ) myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 30.0 myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height - 100 ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchUpInside ) // \u30dc\u30bf\u30f3\u3092\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myButton ) } /* \u81ea\u4f5cWindow\u3092\u751f\u6210\u3059\u308b */ internal func makeMyWindow (){ // \u80cc\u666f\u3092\u767d\u306b\u8a2d\u5b9a\u3059\u308b. myWindow . backgroundColor = UIColor . white myWindow . frame = CGRect ( x : 0 , y : 0 , width : 200 , height : 250 ) myWindow . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height / 2 ) myWindow . alpha = 0.8 myWindow . layer . cornerRadius = 20 // myWindow\u3092keyWindow\u306b\u3059\u308b. myWindow . makeKey () // window\u3092\u8868\u793a\u3059\u308b. self . myWindow . makeKeyAndVisible () // \u30dc\u30bf\u30f3\u3092\u4f5c\u6210\u3059\u308b. myWindowButton . frame = CGRect ( x : 0 , y : 0 , width : 100 , height : 60 ) myWindowButton . backgroundColor = UIColor . orange myWindowButton . setTitle ( \"Close\" , for : . normal ) myWindowButton . setTitleColor ( UIColor . white , for : . normal ) myWindowButton . layer . masksToBounds = true myWindowButton . layer . cornerRadius = 20.0 myWindowButton . layer . position = CGPoint ( x : self . myWindow . frame . width / 2 , y : self . myWindow . frame . height - 50 ) myWindowButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchUpInside ) self . myWindow . addSubview ( myWindowButton ) // TextView\u3092\u4f5c\u6210\u3059\u308b. let myTextView : UITextView = UITextView ( frame : CGRect ( x : 10 , y : 10 , width : self . myWindow . frame . width - 20 , height : 150 )) myTextView . backgroundColor = UIColor . clear myTextView . text = \"\u5927\u5185\u5bbf\u306f\u3001\u4f1a\u6d25\u57ce\u4e0b\u3068\u4e0b\u91ce\u306e\u56fd\uff08\u65e5\u5149\u4eca\u5e02\uff09\u3092\u7d50\u307632\u91cc\u306e\u533a\u9593\u306e\u4e2d\u3067\u4f1a\u6d25\u304b\u30892\u756a\u76ee\u306e\u5bbf\u99c5\u3068\u3057\u30661640\u5e74\u3054\u308d\u306b\u6574\u5099\u3055\u308c\u305f\u5bbf\u5834\u753a\u3067\u3059\u3002\" myTextView . font = UIFont . systemFont ( ofSize : 15.0 ) myTextView . textColor = UIColor . black myTextView . textAlignment = NSTextAlignment . left myTextView . isEditable = false self . myWindow . addSubview ( myTextView ) } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8 */ @objc internal func onClickMyButton ( sender : UIButton ) { if sender == myWindowButton { myWindow . isHidden = true } else if sender == myButton { makeMyWindow () } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 // // ViewController.swift // UIKit026_3.0 // // Created by KimikoWatanabe on 2016/08/17. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myWindow : UIWindow ! private var myWindowButton : UIButton ! private var myButton : UIButton ! override func viewDidLoad () { super . viewDidLoad () myWindow = UIWindow () myWindowButton = UIButton () myButton = UIButton () // \u80cc\u666f\u306b\u753b\u50cf\u3092\u8a2d\u5b9a\u3059\u308b. let myImage : UIImage = UIImage ( named : \"oouchi.jpg\" ) ! let myImageView : UIImageView = UIImageView () myImageView . image = myImage // \u753b\u50cf\u306escale\u3092\u8a08\u7b97. let scale = self . view . frame . width / myImage . size . width myImageView . frame = CGRect ( x : 0 , y : 0 , width : myImage . size . width * scale , height : myImage . size . height * scale ) self . view . addSubview ( myImageView ) // \u30dc\u30bf\u30f3\u3092\u751f\u6210\u3059\u308b. myButton . frame = CGRect ( x : 0 , y : 0 , width : 60 , height : 60 ) myButton . backgroundColor = UIColor . red myButton . setTitle ( \"Dialog\" , for : . normal ) myButton . setTitleColor ( UIColor . white , for : . normal ) myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 30.0 myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height - 100 ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchUpInside ) // \u30dc\u30bf\u30f3\u3092\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myButton ) } /* \u81ea\u4f5cWindow\u3092\u751f\u6210\u3059\u308b */ internal func makeMyWindow (){ // \u80cc\u666f\u3092\u767d\u306b\u8a2d\u5b9a\u3059\u308b. myWindow . backgroundColor = UIColor . white myWindow . frame = CGRect ( x : 0 , y : 0 , width : 200 , height : 250 ) myWindow . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height / 2 ) myWindow . alpha = 0.8 myWindow . layer . cornerRadius = 20 // myWindow\u3092keyWindow\u306b\u3059\u308b. myWindow . makeKey () // window\u3092\u8868\u793a\u3059\u308b. self . myWindow . makeKeyAndVisible () // \u30dc\u30bf\u30f3\u3092\u4f5c\u6210\u3059\u308b. myWindowButton . frame = CGRect ( x : 0 , y : 0 , width : 100 , height : 60 ) myWindowButton . backgroundColor = UIColor . orange myWindowButton . setTitle ( \"Close\" , for : . normal ) myWindowButton . setTitleColor ( UIColor . white , for : . normal ) myWindowButton . layer . masksToBounds = true myWindowButton . layer . cornerRadius = 20.0 myWindowButton . layer . position = CGPoint ( x : self . myWindow . frame . width / 2 , y : self . myWindow . frame . height - 50 ) myWindowButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchUpInside ) self . myWindow . addSubview ( myWindowButton ) // TextView\u3092\u4f5c\u6210\u3059\u308b. let myTextView : UITextView = UITextView ( frame : CGRect ( x : 10 , y : 10 , width : self . myWindow . frame . width - 20 , height : 150 )) myTextView . backgroundColor = UIColor . clear myTextView . text = \"\u5927\u5185\u5bbf\u306f\u3001\u4f1a\u6d25\u57ce\u4e0b\u3068\u4e0b\u91ce\u306e\u56fd\uff08\u65e5\u5149\u4eca\u5e02\uff09\u3092\u7d50\u307632\u91cc\u306e\u533a\u9593\u306e\u4e2d\u3067\u4f1a\u6d25\u304b\u30892\u756a\u76ee\u306e\u5bbf\u99c5\u3068\u3057\u30661640\u5e74\u3054\u308d\u306b\u6574\u5099\u3055\u308c\u305f\u5bbf\u5834\u753a\u3067\u3059\u3002\" myTextView . font = UIFont . systemFont ( ofSize : 15.0 ) myTextView . textColor = UIColor . black myTextView . textAlignment = NSTextAlignment . left myTextView . isEditable = false self . myWindow . addSubview ( myTextView ) } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8 */ internal func onClickMyButton ( sender : UIButton ) { if sender == myWindowButton { myWindow . isHidden = true } else if sender == myButton { makeMyWindow () } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 // // ViewController.swift // UIKit026_2.3 // // Created by KimikoWatanabe on 2016/08/17. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myWindow : UIWindow ! private var myWindowButton : UIButton ! private var myButton : UIButton ! override func viewDidLoad () { super . viewDidLoad () myWindow = UIWindow () myWindowButton = UIButton () myButton = UIButton () // \u80cc\u666f\u306b\u753b\u50cf\u3092\u8a2d\u5b9a\u3059\u308b. let myImage : UIImage = UIImage ( named : \"oouchi.jpg\" ) ! let myImageView : UIImageView = UIImageView () myImageView . image = myImage // \u753b\u50cf\u306escale\u3092\u8a08\u7b97. let scale = self . view . frame . width / myImage . size . width myImageView . frame = CGRectMake ( 0 , 0 , myImage . size . width * scale , myImage . size . height * scale ) self . view . addSubview ( myImageView ) // \u30dc\u30bf\u30f3\u3092\u751f\u6210\u3059\u308b. myButton . frame = CGRectMake ( 0 , 0 , 60 , 60 ) myButton . backgroundColor = UIColor . redColor () myButton . setTitle ( \"Dialog\" , forState : . Normal ) myButton . setTitleColor ( UIColor . whiteColor (), forState : . Normal ) myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 30.0 myButton . layer . position = CGPointMake ( self . view . frame . width / 2 , self . view . frame . height - 100 ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : . TouchUpInside ) // \u30dc\u30bf\u30f3\u3092\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myButton ) } /* \u81ea\u4f5cWindow\u3092\u751f\u6210\u3059\u308b */ internal func makeMyWindow (){ // \u80cc\u666f\u3092\u767d\u306b\u8a2d\u5b9a\u3059\u308b. myWindow . backgroundColor = UIColor . whiteColor () myWindow . frame = CGRectMake ( 0 , 0 , 200 , 250 ) myWindow . layer . position = CGPointMake ( self . view . frame . width / 2 , self . view . frame . height / 2 ) myWindow . alpha = 0.8 myWindow . layer . cornerRadius = 20 // myWindow\u3092keyWindow\u306b\u3059\u308b. myWindow . makeKeyWindow () // window\u3092\u8868\u793a\u3059\u308b. self . myWindow . makeKeyAndVisible () // \u30dc\u30bf\u30f3\u3092\u4f5c\u6210\u3059\u308b. myWindowButton . frame = CGRectMake ( 0 , 0 , 100 , 60 ) myWindowButton . backgroundColor = UIColor . orangeColor () myWindowButton . setTitle ( \"Close\" , forState : . Normal ) myWindowButton . setTitleColor ( UIColor . whiteColor (), forState : . Normal ) myWindowButton . layer . masksToBounds = true myWindowButton . layer . cornerRadius = 20.0 myWindowButton . layer . position = CGPointMake ( self . myWindow . frame . width / 2 , self . myWindow . frame . height - 50 ) myWindowButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : . TouchUpInside ) self . myWindow . addSubview ( myWindowButton ) // TextView\u3092\u4f5c\u6210\u3059\u308b. let myTextView : UITextView = UITextView ( frame : CGRectMake ( 10 , 10 , self . myWindow . frame . width - 20 , 150 )) myTextView . backgroundColor = UIColor . clearColor () myTextView . text = \"\u5927\u5185\u5bbf\u306f\u3001\u4f1a\u6d25\u57ce\u4e0b\u3068\u4e0b\u91ce\u306e\u56fd\uff08\u65e5\u5149\u4eca\u5e02\uff09\u3092\u7d50\u307632\u91cc\u306e\u533a\u9593\u306e\u4e2d\u3067\u4f1a\u6d25\u304b\u30892\u756a\u76ee\u306e\u5bbf\u99c5\u3068\u3057\u30661640\u5e74\u3054\u308d\u306b\u6574\u5099\u3055\u308c\u305f\u5bbf\u5834\u753a\u3067\u3059\u3002\" myTextView . font = UIFont . systemFontOfSize ( CGFloat ( 15 )) myTextView . textColor = UIColor . blackColor () myTextView . textAlignment = NSTextAlignment . Left myTextView . editable = false self . myWindow . addSubview ( myTextView ) } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8 */ internal func onClickMyButton ( sender : UIButton ) { if sender == myWindowButton { myWindow . hidden = true } else if sender == myButton { makeMyWindow () } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } 3.0\u30684.0\u306e\u5dee\u5206 internal func onClickMyButton(sender: UIButton) \u306b @objc \u3092\u8ffd\u52a0 2.3\u30683.0\u306e\u5dee\u5206 CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u30e1\u30bd\u30c3\u30c9\u306e\u5ec3\u6b62) UIColor\u306e\u547c\u3073\u51fa\u3057\u65b9\u6cd5\u306e\u5909\u66f4(UIColor.whiteColor() -> UIColor.white) UIWindow\u306e\u4e00\u90e8\u30d7\u30ed\u30d1\u30c6\u30a3\u540d\u306e\u5909\u66f4(hidden->isHidden) Reference UIWindow Class https://developer.apple.com/reference/uikit/uiwindow","title":"UIWindow\u306e\u8868\u793a"},{"location":"1.uikit/026_uiwindow/#uiwindow","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 // // ViewController.swift // UIKit026_4.0 // // Created by KimikoWatanabe on 2016/08/17. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myWindow : UIWindow ! private var myWindowButton : UIButton ! private var myButton : UIButton ! override func viewDidLoad () { super . viewDidLoad () myWindow = UIWindow () myWindowButton = UIButton () myButton = UIButton () // \u80cc\u666f\u306b\u753b\u50cf\u3092\u8a2d\u5b9a\u3059\u308b. let myImage : UIImage = UIImage ( named : \"oouchi.jpg\" ) ! let myImageView : UIImageView = UIImageView () myImageView . image = myImage // \u753b\u50cf\u306escale\u3092\u8a08\u7b97. let scale = self . view . frame . width / myImage . size . width myImageView . frame = CGRect ( x : 0 , y : 0 , width : myImage . size . width * scale , height : myImage . size . height * scale ) self . view . addSubview ( myImageView ) // \u30dc\u30bf\u30f3\u3092\u751f\u6210\u3059\u308b. myButton . frame = CGRect ( x : 0 , y : 0 , width : 60 , height : 60 ) myButton . backgroundColor = UIColor . red myButton . setTitle ( \"Dialog\" , for : . normal ) myButton . setTitleColor ( UIColor . white , for : . normal ) myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 30.0 myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height - 100 ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchUpInside ) // \u30dc\u30bf\u30f3\u3092\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myButton ) } /* \u81ea\u4f5cWindow\u3092\u751f\u6210\u3059\u308b */ internal func makeMyWindow (){ // \u80cc\u666f\u3092\u767d\u306b\u8a2d\u5b9a\u3059\u308b. myWindow . backgroundColor = UIColor . white myWindow . frame = CGRect ( x : 0 , y : 0 , width : 200 , height : 250 ) myWindow . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height / 2 ) myWindow . alpha = 0.8 myWindow . layer . cornerRadius = 20 // myWindow\u3092keyWindow\u306b\u3059\u308b. myWindow . makeKey () // window\u3092\u8868\u793a\u3059\u308b. self . myWindow . makeKeyAndVisible () // \u30dc\u30bf\u30f3\u3092\u4f5c\u6210\u3059\u308b. myWindowButton . frame = CGRect ( x : 0 , y : 0 , width : 100 , height : 60 ) myWindowButton . backgroundColor = UIColor . orange myWindowButton . setTitle ( \"Close\" , for : . normal ) myWindowButton . setTitleColor ( UIColor . white , for : . normal ) myWindowButton . layer . masksToBounds = true myWindowButton . layer . cornerRadius = 20.0 myWindowButton . layer . position = CGPoint ( x : self . myWindow . frame . width / 2 , y : self . myWindow . frame . height - 50 ) myWindowButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchUpInside ) self . myWindow . addSubview ( myWindowButton ) // TextView\u3092\u4f5c\u6210\u3059\u308b. let myTextView : UITextView = UITextView ( frame : CGRect ( x : 10 , y : 10 , width : self . myWindow . frame . width - 20 , height : 150 )) myTextView . backgroundColor = UIColor . clear myTextView . text = \"\u5927\u5185\u5bbf\u306f\u3001\u4f1a\u6d25\u57ce\u4e0b\u3068\u4e0b\u91ce\u306e\u56fd\uff08\u65e5\u5149\u4eca\u5e02\uff09\u3092\u7d50\u307632\u91cc\u306e\u533a\u9593\u306e\u4e2d\u3067\u4f1a\u6d25\u304b\u30892\u756a\u76ee\u306e\u5bbf\u99c5\u3068\u3057\u30661640\u5e74\u3054\u308d\u306b\u6574\u5099\u3055\u308c\u305f\u5bbf\u5834\u753a\u3067\u3059\u3002\" myTextView . font = UIFont . systemFont ( ofSize : 15.0 ) myTextView . textColor = UIColor . black myTextView . textAlignment = NSTextAlignment . left myTextView . isEditable = false self . myWindow . addSubview ( myTextView ) } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8 */ @objc internal func onClickMyButton ( sender : UIButton ) { if sender == myWindowButton { myWindow . isHidden = true } else if sender == myButton { makeMyWindow () } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 // // ViewController.swift // UIKit026_3.0 // // Created by KimikoWatanabe on 2016/08/17. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myWindow : UIWindow ! private var myWindowButton : UIButton ! private var myButton : UIButton ! override func viewDidLoad () { super . viewDidLoad () myWindow = UIWindow () myWindowButton = UIButton () myButton = UIButton () // \u80cc\u666f\u306b\u753b\u50cf\u3092\u8a2d\u5b9a\u3059\u308b. let myImage : UIImage = UIImage ( named : \"oouchi.jpg\" ) ! let myImageView : UIImageView = UIImageView () myImageView . image = myImage // \u753b\u50cf\u306escale\u3092\u8a08\u7b97. let scale = self . view . frame . width / myImage . size . width myImageView . frame = CGRect ( x : 0 , y : 0 , width : myImage . size . width * scale , height : myImage . size . height * scale ) self . view . addSubview ( myImageView ) // \u30dc\u30bf\u30f3\u3092\u751f\u6210\u3059\u308b. myButton . frame = CGRect ( x : 0 , y : 0 , width : 60 , height : 60 ) myButton . backgroundColor = UIColor . red myButton . setTitle ( \"Dialog\" , for : . normal ) myButton . setTitleColor ( UIColor . white , for : . normal ) myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 30.0 myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height - 100 ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchUpInside ) // \u30dc\u30bf\u30f3\u3092\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myButton ) } /* \u81ea\u4f5cWindow\u3092\u751f\u6210\u3059\u308b */ internal func makeMyWindow (){ // \u80cc\u666f\u3092\u767d\u306b\u8a2d\u5b9a\u3059\u308b. myWindow . backgroundColor = UIColor . white myWindow . frame = CGRect ( x : 0 , y : 0 , width : 200 , height : 250 ) myWindow . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height / 2 ) myWindow . alpha = 0.8 myWindow . layer . cornerRadius = 20 // myWindow\u3092keyWindow\u306b\u3059\u308b. myWindow . makeKey () // window\u3092\u8868\u793a\u3059\u308b. self . myWindow . makeKeyAndVisible () // \u30dc\u30bf\u30f3\u3092\u4f5c\u6210\u3059\u308b. myWindowButton . frame = CGRect ( x : 0 , y : 0 , width : 100 , height : 60 ) myWindowButton . backgroundColor = UIColor . orange myWindowButton . setTitle ( \"Close\" , for : . normal ) myWindowButton . setTitleColor ( UIColor . white , for : . normal ) myWindowButton . layer . masksToBounds = true myWindowButton . layer . cornerRadius = 20.0 myWindowButton . layer . position = CGPoint ( x : self . myWindow . frame . width / 2 , y : self . myWindow . frame . height - 50 ) myWindowButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchUpInside ) self . myWindow . addSubview ( myWindowButton ) // TextView\u3092\u4f5c\u6210\u3059\u308b. let myTextView : UITextView = UITextView ( frame : CGRect ( x : 10 , y : 10 , width : self . myWindow . frame . width - 20 , height : 150 )) myTextView . backgroundColor = UIColor . clear myTextView . text = \"\u5927\u5185\u5bbf\u306f\u3001\u4f1a\u6d25\u57ce\u4e0b\u3068\u4e0b\u91ce\u306e\u56fd\uff08\u65e5\u5149\u4eca\u5e02\uff09\u3092\u7d50\u307632\u91cc\u306e\u533a\u9593\u306e\u4e2d\u3067\u4f1a\u6d25\u304b\u30892\u756a\u76ee\u306e\u5bbf\u99c5\u3068\u3057\u30661640\u5e74\u3054\u308d\u306b\u6574\u5099\u3055\u308c\u305f\u5bbf\u5834\u753a\u3067\u3059\u3002\" myTextView . font = UIFont . systemFont ( ofSize : 15.0 ) myTextView . textColor = UIColor . black myTextView . textAlignment = NSTextAlignment . left myTextView . isEditable = false self . myWindow . addSubview ( myTextView ) } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8 */ internal func onClickMyButton ( sender : UIButton ) { if sender == myWindowButton { myWindow . isHidden = true } else if sender == myButton { makeMyWindow () } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 // // ViewController.swift // UIKit026_2.3 // // Created by KimikoWatanabe on 2016/08/17. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myWindow : UIWindow ! private var myWindowButton : UIButton ! private var myButton : UIButton ! override func viewDidLoad () { super . viewDidLoad () myWindow = UIWindow () myWindowButton = UIButton () myButton = UIButton () // \u80cc\u666f\u306b\u753b\u50cf\u3092\u8a2d\u5b9a\u3059\u308b. let myImage : UIImage = UIImage ( named : \"oouchi.jpg\" ) ! let myImageView : UIImageView = UIImageView () myImageView . image = myImage // \u753b\u50cf\u306escale\u3092\u8a08\u7b97. let scale = self . view . frame . width / myImage . size . width myImageView . frame = CGRectMake ( 0 , 0 , myImage . size . width * scale , myImage . size . height * scale ) self . view . addSubview ( myImageView ) // \u30dc\u30bf\u30f3\u3092\u751f\u6210\u3059\u308b. myButton . frame = CGRectMake ( 0 , 0 , 60 , 60 ) myButton . backgroundColor = UIColor . redColor () myButton . setTitle ( \"Dialog\" , forState : . Normal ) myButton . setTitleColor ( UIColor . whiteColor (), forState : . Normal ) myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 30.0 myButton . layer . position = CGPointMake ( self . view . frame . width / 2 , self . view . frame . height - 100 ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : . TouchUpInside ) // \u30dc\u30bf\u30f3\u3092\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myButton ) } /* \u81ea\u4f5cWindow\u3092\u751f\u6210\u3059\u308b */ internal func makeMyWindow (){ // \u80cc\u666f\u3092\u767d\u306b\u8a2d\u5b9a\u3059\u308b. myWindow . backgroundColor = UIColor . whiteColor () myWindow . frame = CGRectMake ( 0 , 0 , 200 , 250 ) myWindow . layer . position = CGPointMake ( self . view . frame . width / 2 , self . view . frame . height / 2 ) myWindow . alpha = 0.8 myWindow . layer . cornerRadius = 20 // myWindow\u3092keyWindow\u306b\u3059\u308b. myWindow . makeKeyWindow () // window\u3092\u8868\u793a\u3059\u308b. self . myWindow . makeKeyAndVisible () // \u30dc\u30bf\u30f3\u3092\u4f5c\u6210\u3059\u308b. myWindowButton . frame = CGRectMake ( 0 , 0 , 100 , 60 ) myWindowButton . backgroundColor = UIColor . orangeColor () myWindowButton . setTitle ( \"Close\" , forState : . Normal ) myWindowButton . setTitleColor ( UIColor . whiteColor (), forState : . Normal ) myWindowButton . layer . masksToBounds = true myWindowButton . layer . cornerRadius = 20.0 myWindowButton . layer . position = CGPointMake ( self . myWindow . frame . width / 2 , self . myWindow . frame . height - 50 ) myWindowButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : . TouchUpInside ) self . myWindow . addSubview ( myWindowButton ) // TextView\u3092\u4f5c\u6210\u3059\u308b. let myTextView : UITextView = UITextView ( frame : CGRectMake ( 10 , 10 , self . myWindow . frame . width - 20 , 150 )) myTextView . backgroundColor = UIColor . clearColor () myTextView . text = \"\u5927\u5185\u5bbf\u306f\u3001\u4f1a\u6d25\u57ce\u4e0b\u3068\u4e0b\u91ce\u306e\u56fd\uff08\u65e5\u5149\u4eca\u5e02\uff09\u3092\u7d50\u307632\u91cc\u306e\u533a\u9593\u306e\u4e2d\u3067\u4f1a\u6d25\u304b\u30892\u756a\u76ee\u306e\u5bbf\u99c5\u3068\u3057\u30661640\u5e74\u3054\u308d\u306b\u6574\u5099\u3055\u308c\u305f\u5bbf\u5834\u753a\u3067\u3059\u3002\" myTextView . font = UIFont . systemFontOfSize ( CGFloat ( 15 )) myTextView . textColor = UIColor . blackColor () myTextView . textAlignment = NSTextAlignment . Left myTextView . editable = false self . myWindow . addSubview ( myTextView ) } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8 */ internal func onClickMyButton ( sender : UIButton ) { if sender == myWindowButton { myWindow . hidden = true } else if sender == myButton { makeMyWindow () } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } }","title":"UIWindow\u306e\u8868\u793a"},{"location":"1.uikit/026_uiwindow/#3040","text":"internal func onClickMyButton(sender: UIButton) \u306b @objc \u3092\u8ffd\u52a0","title":"3.0\u30684.0\u306e\u5dee\u5206"},{"location":"1.uikit/026_uiwindow/#2330","text":"CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u30e1\u30bd\u30c3\u30c9\u306e\u5ec3\u6b62) UIColor\u306e\u547c\u3073\u51fa\u3057\u65b9\u6cd5\u306e\u5909\u66f4(UIColor.whiteColor() -> UIColor.white) UIWindow\u306e\u4e00\u90e8\u30d7\u30ed\u30d1\u30c6\u30a3\u540d\u306e\u5909\u66f4(hidden->isHidden)","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/026_uiwindow/#reference","text":"UIWindow Class https://developer.apple.com/reference/uikit/uiwindow","title":"Reference"},{"location":"1.uikit/027_uitoolbar/","text":"UIToolBar\u306e\u8868\u793a Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 // // ViewController.swift // UIKit027_4.0 // // Created by KimikoWatanabe on 2016/08/13. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UIToolbarDelegate { private var myToolbar : UIToolbar ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u9752\u8272\u306b\u5909\u66f4\u3059\u308b. self . view . backgroundColor = UIColor . cyan // \u30c4\u30fc\u30eb\u30d0\u30fc\u306e\u30b5\u30a4\u30ba\u3092\u6c7a\u3081\u308b. myToolbar = UIToolbar ( frame : CGRect ( x : 0 , y : self . view . bounds . size . height - 44 , width : self . view . bounds . size . width , height : 40.0 )) // \u30c4\u30fc\u30eb\u30d0\u30fc\u306e\u4f4d\u7f6e\u3092\u6c7a\u3081\u308b. myToolbar . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : self . view . bounds . height - 20.0 ) // \u30c4\u30fc\u30eb\u30d0\u30fc\u306e\u8272\u3092\u6c7a\u3081\u308b. myToolbar . barStyle = . blackTranslucent myToolbar . tintColor = UIColor . white myToolbar . backgroundColor = UIColor . black // \u30dc\u30bf\u30f3\uff11\u3092\u751f\u6210\u3059\u308b. let myUIBarButtonGreen : UIBarButtonItem = UIBarButtonItem ( title : \"Green\" , style :. plain , target : self , action : #selector ( ViewController . onClickBarButton ( sender :))) myUIBarButtonGreen . tag = 1 // \u30dc\u30bf\u30f3\uff12\u3092\u751f\u6210\u3059\u308b. let myUIBarButtonBlue : UIBarButtonItem = UIBarButtonItem ( title : \"Blue\" , style :. plain , target : self , action : #selector ( ViewController . onClickBarButton ( sender :))) myUIBarButtonBlue . tag = 2 // \u30dc\u30bf\u30f33\u3092\u751f\u6210\u3059\u308b. let myUIBarButtonRed : UIBarButtonItem = UIBarButtonItem ( title : \"Red\" , style :. plain , target : self , action : #selector ( ViewController . onClickBarButton ( sender :))) myUIBarButtonRed . tag = 3 // \u30dc\u30bf\u30f3\u3092\u30c4\u30fc\u30eb\u30d0\u30fc\u306b\u5165\u308c\u308b. myToolbar . items = [ myUIBarButtonGreen , myUIBarButtonBlue , myUIBarButtonRed ] // \u30c4\u30fc\u30eb\u30d0\u30fc\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myToolbar ) } /* UIBarButtonItem\u304c\u62bc\u3055\u308c\u305f\u969b\u306b\u547c\u3070\u308c\u308b. */ @objc internal func onClickBarButton ( sender : UIBarButtonItem ) { switch sender . tag { case 1 : self . view . backgroundColor = UIColor . green case 2 : self . view . backgroundColor = UIColor . blue case 3 : self . view . backgroundColor = UIColor . red default : print ( \"ERROR!!\" ) } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 // // ViewController.swift // UIKit027_3.0 // // Created by KimikoWatanabe on 2016/08/13. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UIToolbarDelegate { private var myToolbar : UIToolbar ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u9752\u8272\u306b\u5909\u66f4\u3059\u308b. self . view . backgroundColor = UIColor . cyan // \u30c4\u30fc\u30eb\u30d0\u30fc\u306e\u30b5\u30a4\u30ba\u3092\u6c7a\u3081\u308b. myToolbar = UIToolbar ( frame : CGRect ( x : 0 , y : self . view . bounds . size . height - 44 , width : self . view . bounds . size . width , height : 40.0 )) // \u30c4\u30fc\u30eb\u30d0\u30fc\u306e\u4f4d\u7f6e\u3092\u6c7a\u3081\u308b. myToolbar . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : self . view . bounds . height - 20.0 ) // \u30c4\u30fc\u30eb\u30d0\u30fc\u306e\u8272\u3092\u6c7a\u3081\u308b. myToolbar . barStyle = . blackTranslucent myToolbar . tintColor = UIColor . white myToolbar . backgroundColor = UIColor . black // \u30dc\u30bf\u30f3\uff11\u3092\u751f\u6210\u3059\u308b. let myUIBarButtonGreen : UIBarButtonItem = UIBarButtonItem ( title : \"Green\" , style :. plain , target : self , action : #selector ( ViewController . onClickBarButton ( sender :))) myUIBarButtonGreen . tag = 1 // \u30dc\u30bf\u30f3\uff12\u3092\u751f\u6210\u3059\u308b. let myUIBarButtonBlue : UIBarButtonItem = UIBarButtonItem ( title : \"Blue\" , style :. plain , target : self , action : #selector ( ViewController . onClickBarButton ( sender :))) myUIBarButtonBlue . tag = 2 // \u30dc\u30bf\u30f33\u3092\u751f\u6210\u3059\u308b. let myUIBarButtonRed : UIBarButtonItem = UIBarButtonItem ( title : \"Red\" , style :. plain , target : self , action : #selector ( ViewController . onClickBarButton ( sender :))) myUIBarButtonRed . tag = 3 // \u30dc\u30bf\u30f3\u3092\u30c4\u30fc\u30eb\u30d0\u30fc\u306b\u5165\u308c\u308b. myToolbar . items = [ myUIBarButtonGreen , myUIBarButtonBlue , myUIBarButtonRed ] // \u30c4\u30fc\u30eb\u30d0\u30fc\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myToolbar ) } /* UIBarButtonItem\u304c\u62bc\u3055\u308c\u305f\u969b\u306b\u547c\u3070\u308c\u308b. */ internal func onClickBarButton ( sender : UIBarButtonItem ) { switch sender . tag { case 1 : self . view . backgroundColor = UIColor . green case 2 : self . view . backgroundColor = UIColor . blue case 3 : self . view . backgroundColor = UIColor . red default : print ( \"ERROR!!\" ) } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 // // ViewController.swift // UIKit027_2.3 // // Created by KimikoWatanabe on 2016/08/16. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UIToolbarDelegate { private var myToolbar : UIToolbar ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u9752\u8272\u306b\u5909\u66f4\u3059\u308b. self . view . backgroundColor = UIColor . cyanColor () // \u30c4\u30fc\u30eb\u30d0\u30fc\u306e\u30b5\u30a4\u30ba\u3092\u6c7a\u3081\u308b. myToolbar = UIToolbar ( frame : CGRectMake ( 0 , self . view . bounds . size . height - 44 , self . view . bounds . size . width , 40.0 )) // \u30c4\u30fc\u30eb\u30d0\u30fc\u306e\u4f4d\u7f6e\u3092\u6c7a\u3081\u308b. myToolbar . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : self . view . bounds . height - 20.0 ) // \u30c4\u30fc\u30eb\u30d0\u30fc\u306e\u8272\u3092\u6c7a\u3081\u308b. myToolbar . barStyle = . BlackTranslucent myToolbar . tintColor = UIColor . whiteColor () myToolbar . backgroundColor = UIColor . blackColor () // \u30dc\u30bf\u30f3\uff11\u3092\u751f\u6210\u3059\u308b. let myUIBarButtonGreen : UIBarButtonItem = UIBarButtonItem ( title : \"Green\" , style :. Plain , target : self , action : #selector ( ViewController . onClickBarButton ( _ :))) myUIBarButtonGreen . tag = 1 // \u30dc\u30bf\u30f3\uff12\u3092\u751f\u6210\u3059\u308b. let myUIBarButtonBlue : UIBarButtonItem = UIBarButtonItem ( title : \"Blue\" , style :. Plain , target : self , action : #selector ( ViewController . onClickBarButton ( _ :))) myUIBarButtonBlue . tag = 2 // \u30dc\u30bf\u30f33\u3092\u751f\u6210\u3059\u308b. let myUIBarButtonRed : UIBarButtonItem = UIBarButtonItem ( title : \"Red\" , style :. Plain , target : self , action : #selector ( ViewController . onClickBarButton ( _ :))) myUIBarButtonRed . tag = 3 // \u30dc\u30bf\u30f3\u3092\u30c4\u30fc\u30eb\u30d0\u30fc\u306b\u5165\u308c\u308b. myToolbar . items = [ myUIBarButtonGreen , myUIBarButtonBlue , myUIBarButtonRed ] // \u30c4\u30fc\u30eb\u30d0\u30fc\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myToolbar ) } /* UIBarButtonItem\u304c\u62bc\u3055\u308c\u305f\u969b\u306b\u547c\u3070\u308c\u308b. */ internal func onClickBarButton ( sender : UIBarButtonItem ) { switch sender . tag { case 1 : self . view . backgroundColor = UIColor . greenColor () case 2 : self . view . backgroundColor = UIColor . blueColor () case 3 : self . view . backgroundColor = UIColor . redColor () default : print ( \"ERROR!!\" ) } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } 3.0\u30684.0\u306e\u5dee\u5206 internal func onClickBarButton(sender: UIBarButtonItem) \u306b @objc \u3092\u8ffd\u52a0 2.3\u30683.0\u306e\u5dee\u5206 UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u306e\u5ec3\u6b62) Reference UIToolBar Class https://developer.apple.com/reference/uikit/uitoolbar","title":"UIToolBar\u306e\u8868\u793a"},{"location":"1.uikit/027_uitoolbar/#uitoolbar","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 // // ViewController.swift // UIKit027_4.0 // // Created by KimikoWatanabe on 2016/08/13. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UIToolbarDelegate { private var myToolbar : UIToolbar ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u9752\u8272\u306b\u5909\u66f4\u3059\u308b. self . view . backgroundColor = UIColor . cyan // \u30c4\u30fc\u30eb\u30d0\u30fc\u306e\u30b5\u30a4\u30ba\u3092\u6c7a\u3081\u308b. myToolbar = UIToolbar ( frame : CGRect ( x : 0 , y : self . view . bounds . size . height - 44 , width : self . view . bounds . size . width , height : 40.0 )) // \u30c4\u30fc\u30eb\u30d0\u30fc\u306e\u4f4d\u7f6e\u3092\u6c7a\u3081\u308b. myToolbar . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : self . view . bounds . height - 20.0 ) // \u30c4\u30fc\u30eb\u30d0\u30fc\u306e\u8272\u3092\u6c7a\u3081\u308b. myToolbar . barStyle = . blackTranslucent myToolbar . tintColor = UIColor . white myToolbar . backgroundColor = UIColor . black // \u30dc\u30bf\u30f3\uff11\u3092\u751f\u6210\u3059\u308b. let myUIBarButtonGreen : UIBarButtonItem = UIBarButtonItem ( title : \"Green\" , style :. plain , target : self , action : #selector ( ViewController . onClickBarButton ( sender :))) myUIBarButtonGreen . tag = 1 // \u30dc\u30bf\u30f3\uff12\u3092\u751f\u6210\u3059\u308b. let myUIBarButtonBlue : UIBarButtonItem = UIBarButtonItem ( title : \"Blue\" , style :. plain , target : self , action : #selector ( ViewController . onClickBarButton ( sender :))) myUIBarButtonBlue . tag = 2 // \u30dc\u30bf\u30f33\u3092\u751f\u6210\u3059\u308b. let myUIBarButtonRed : UIBarButtonItem = UIBarButtonItem ( title : \"Red\" , style :. plain , target : self , action : #selector ( ViewController . onClickBarButton ( sender :))) myUIBarButtonRed . tag = 3 // \u30dc\u30bf\u30f3\u3092\u30c4\u30fc\u30eb\u30d0\u30fc\u306b\u5165\u308c\u308b. myToolbar . items = [ myUIBarButtonGreen , myUIBarButtonBlue , myUIBarButtonRed ] // \u30c4\u30fc\u30eb\u30d0\u30fc\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myToolbar ) } /* UIBarButtonItem\u304c\u62bc\u3055\u308c\u305f\u969b\u306b\u547c\u3070\u308c\u308b. */ @objc internal func onClickBarButton ( sender : UIBarButtonItem ) { switch sender . tag { case 1 : self . view . backgroundColor = UIColor . green case 2 : self . view . backgroundColor = UIColor . blue case 3 : self . view . backgroundColor = UIColor . red default : print ( \"ERROR!!\" ) } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 // // ViewController.swift // UIKit027_3.0 // // Created by KimikoWatanabe on 2016/08/13. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UIToolbarDelegate { private var myToolbar : UIToolbar ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u9752\u8272\u306b\u5909\u66f4\u3059\u308b. self . view . backgroundColor = UIColor . cyan // \u30c4\u30fc\u30eb\u30d0\u30fc\u306e\u30b5\u30a4\u30ba\u3092\u6c7a\u3081\u308b. myToolbar = UIToolbar ( frame : CGRect ( x : 0 , y : self . view . bounds . size . height - 44 , width : self . view . bounds . size . width , height : 40.0 )) // \u30c4\u30fc\u30eb\u30d0\u30fc\u306e\u4f4d\u7f6e\u3092\u6c7a\u3081\u308b. myToolbar . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : self . view . bounds . height - 20.0 ) // \u30c4\u30fc\u30eb\u30d0\u30fc\u306e\u8272\u3092\u6c7a\u3081\u308b. myToolbar . barStyle = . blackTranslucent myToolbar . tintColor = UIColor . white myToolbar . backgroundColor = UIColor . black // \u30dc\u30bf\u30f3\uff11\u3092\u751f\u6210\u3059\u308b. let myUIBarButtonGreen : UIBarButtonItem = UIBarButtonItem ( title : \"Green\" , style :. plain , target : self , action : #selector ( ViewController . onClickBarButton ( sender :))) myUIBarButtonGreen . tag = 1 // \u30dc\u30bf\u30f3\uff12\u3092\u751f\u6210\u3059\u308b. let myUIBarButtonBlue : UIBarButtonItem = UIBarButtonItem ( title : \"Blue\" , style :. plain , target : self , action : #selector ( ViewController . onClickBarButton ( sender :))) myUIBarButtonBlue . tag = 2 // \u30dc\u30bf\u30f33\u3092\u751f\u6210\u3059\u308b. let myUIBarButtonRed : UIBarButtonItem = UIBarButtonItem ( title : \"Red\" , style :. plain , target : self , action : #selector ( ViewController . onClickBarButton ( sender :))) myUIBarButtonRed . tag = 3 // \u30dc\u30bf\u30f3\u3092\u30c4\u30fc\u30eb\u30d0\u30fc\u306b\u5165\u308c\u308b. myToolbar . items = [ myUIBarButtonGreen , myUIBarButtonBlue , myUIBarButtonRed ] // \u30c4\u30fc\u30eb\u30d0\u30fc\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myToolbar ) } /* UIBarButtonItem\u304c\u62bc\u3055\u308c\u305f\u969b\u306b\u547c\u3070\u308c\u308b. */ internal func onClickBarButton ( sender : UIBarButtonItem ) { switch sender . tag { case 1 : self . view . backgroundColor = UIColor . green case 2 : self . view . backgroundColor = UIColor . blue case 3 : self . view . backgroundColor = UIColor . red default : print ( \"ERROR!!\" ) } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 // // ViewController.swift // UIKit027_2.3 // // Created by KimikoWatanabe on 2016/08/16. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UIToolbarDelegate { private var myToolbar : UIToolbar ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u9752\u8272\u306b\u5909\u66f4\u3059\u308b. self . view . backgroundColor = UIColor . cyanColor () // \u30c4\u30fc\u30eb\u30d0\u30fc\u306e\u30b5\u30a4\u30ba\u3092\u6c7a\u3081\u308b. myToolbar = UIToolbar ( frame : CGRectMake ( 0 , self . view . bounds . size . height - 44 , self . view . bounds . size . width , 40.0 )) // \u30c4\u30fc\u30eb\u30d0\u30fc\u306e\u4f4d\u7f6e\u3092\u6c7a\u3081\u308b. myToolbar . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : self . view . bounds . height - 20.0 ) // \u30c4\u30fc\u30eb\u30d0\u30fc\u306e\u8272\u3092\u6c7a\u3081\u308b. myToolbar . barStyle = . BlackTranslucent myToolbar . tintColor = UIColor . whiteColor () myToolbar . backgroundColor = UIColor . blackColor () // \u30dc\u30bf\u30f3\uff11\u3092\u751f\u6210\u3059\u308b. let myUIBarButtonGreen : UIBarButtonItem = UIBarButtonItem ( title : \"Green\" , style :. Plain , target : self , action : #selector ( ViewController . onClickBarButton ( _ :))) myUIBarButtonGreen . tag = 1 // \u30dc\u30bf\u30f3\uff12\u3092\u751f\u6210\u3059\u308b. let myUIBarButtonBlue : UIBarButtonItem = UIBarButtonItem ( title : \"Blue\" , style :. Plain , target : self , action : #selector ( ViewController . onClickBarButton ( _ :))) myUIBarButtonBlue . tag = 2 // \u30dc\u30bf\u30f33\u3092\u751f\u6210\u3059\u308b. let myUIBarButtonRed : UIBarButtonItem = UIBarButtonItem ( title : \"Red\" , style :. Plain , target : self , action : #selector ( ViewController . onClickBarButton ( _ :))) myUIBarButtonRed . tag = 3 // \u30dc\u30bf\u30f3\u3092\u30c4\u30fc\u30eb\u30d0\u30fc\u306b\u5165\u308c\u308b. myToolbar . items = [ myUIBarButtonGreen , myUIBarButtonBlue , myUIBarButtonRed ] // \u30c4\u30fc\u30eb\u30d0\u30fc\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myToolbar ) } /* UIBarButtonItem\u304c\u62bc\u3055\u308c\u305f\u969b\u306b\u547c\u3070\u308c\u308b. */ internal func onClickBarButton ( sender : UIBarButtonItem ) { switch sender . tag { case 1 : self . view . backgroundColor = UIColor . greenColor () case 2 : self . view . backgroundColor = UIColor . blueColor () case 3 : self . view . backgroundColor = UIColor . redColor () default : print ( \"ERROR!!\" ) } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } }","title":"UIToolBar\u306e\u8868\u793a"},{"location":"1.uikit/027_uitoolbar/#3040","text":"internal func onClickBarButton(sender: UIBarButtonItem) \u306b @objc \u3092\u8ffd\u52a0","title":"3.0\u30684.0\u306e\u5dee\u5206"},{"location":"1.uikit/027_uitoolbar/#2330","text":"UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u306e\u5ec3\u6b62)","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/027_uitoolbar/#reference","text":"UIToolBar Class https://developer.apple.com/reference/uikit/uitoolbar","title":"Reference"},{"location":"1.uikit/028_uiprogressview/","text":"UIProgressView\u3067\u9032\u6357\u306e\u5177\u5408\u306e\u78ba\u8a8d Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 // // ViewController.swift // UIKit028_3.0 // // Created by KimikoWatanabe on 2016/08/13. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u8272\u3092\u9ed2\u8272\u306b\u3059\u308b. self . view . backgroundColor = UIColor . black // ProgressView\u3092\u4f5c\u6210\u3059\u308b. let myProgressView : UIProgressView = UIProgressView ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 10 )) myProgressView . progressTintColor = UIColor . green myProgressView . trackTintColor = UIColor . white // \u5ea7\u6a19\u3092\u8a2d\u5b9a\u3059\u308b. myProgressView . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : 200 ) // \u30d0\u30fc\u306e\u9ad8\u3055\u3092\u8a2d\u5b9a\u3059\u308b(\u6a2a\u306b1.0\u500d,\u7e26\u306b2.0\u500d). myProgressView . transform = CGAffineTransform ( scaleX : 1.0 , y : 2.0 ) // \u9032\u6357\u5177\u5408\u3092\u8a2d\u5b9a\u3059\u308b(0.0~1.0). myProgressView . progress = 0.3 // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u4ed8\u3051\u308b. myProgressView . setProgress ( 1.0 , animated : true ) // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myProgressView ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 // // ViewController.swift // UIKit028_2.3 // // Created by KimikoWatanabe on 2016/08/16. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u8272\u3092\u9ed2\u8272\u306b\u3059\u308b. self . view . backgroundColor = UIColor . blackColor () // ProgressView\u3092\u4f5c\u6210\u3059\u308b. let myProgressView : UIProgressView = UIProgressView ( frame : CGRectMake ( 0 , 0 , 200 , 10 )) myProgressView . progressTintColor = UIColor . greenColor () myProgressView . trackTintColor = UIColor . whiteColor () // \u5ea7\u6a19\u3092\u8a2d\u5b9a\u3059\u308b. myProgressView . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : 200 ) // \u30d0\u30fc\u306e\u9ad8\u3055\u3092\u8a2d\u5b9a\u3059\u308b(\u6a2a\u306b1.0\u500d,\u7e26\u306b2.0\u500d). myProgressView . transform = CGAffineTransformMakeScale ( 1.0 , 2.0 ) // \u9032\u6357\u5177\u5408\u3092\u8a2d\u5b9a\u3059\u308b(0.0~1.0). myProgressView . progress = 0.3 // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u4ed8\u3051\u308b. myProgressView . setProgress ( 1.0 , animated : true ) // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myProgressView ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } 2.3\u30683.0\u306e\u5dee\u5206 CGPoint\u306e\u521d\u671f\u5316\u306e\u5909\u66f4(CGPointMake\u306e\u5ec3\u6b62) CGAffineTransform\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGAffineTransformMakeScale\u306e\u5ec3\u6b62) Reference UIProgressView https://developer.apple.com/reference/uikit/uiprogressview","title":"UIProgressView\u3067\u9032\u6357\u306e\u5177\u5408\u306e\u78ba\u8a8d"},{"location":"1.uikit/028_uiprogressview/#uiprogressview","text":"Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 // // ViewController.swift // UIKit028_3.0 // // Created by KimikoWatanabe on 2016/08/13. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u8272\u3092\u9ed2\u8272\u306b\u3059\u308b. self . view . backgroundColor = UIColor . black // ProgressView\u3092\u4f5c\u6210\u3059\u308b. let myProgressView : UIProgressView = UIProgressView ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 10 )) myProgressView . progressTintColor = UIColor . green myProgressView . trackTintColor = UIColor . white // \u5ea7\u6a19\u3092\u8a2d\u5b9a\u3059\u308b. myProgressView . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : 200 ) // \u30d0\u30fc\u306e\u9ad8\u3055\u3092\u8a2d\u5b9a\u3059\u308b(\u6a2a\u306b1.0\u500d,\u7e26\u306b2.0\u500d). myProgressView . transform = CGAffineTransform ( scaleX : 1.0 , y : 2.0 ) // \u9032\u6357\u5177\u5408\u3092\u8a2d\u5b9a\u3059\u308b(0.0~1.0). myProgressView . progress = 0.3 // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u4ed8\u3051\u308b. myProgressView . setProgress ( 1.0 , animated : true ) // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myProgressView ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 // // ViewController.swift // UIKit028_2.3 // // Created by KimikoWatanabe on 2016/08/16. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u8272\u3092\u9ed2\u8272\u306b\u3059\u308b. self . view . backgroundColor = UIColor . blackColor () // ProgressView\u3092\u4f5c\u6210\u3059\u308b. let myProgressView : UIProgressView = UIProgressView ( frame : CGRectMake ( 0 , 0 , 200 , 10 )) myProgressView . progressTintColor = UIColor . greenColor () myProgressView . trackTintColor = UIColor . whiteColor () // \u5ea7\u6a19\u3092\u8a2d\u5b9a\u3059\u308b. myProgressView . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : 200 ) // \u30d0\u30fc\u306e\u9ad8\u3055\u3092\u8a2d\u5b9a\u3059\u308b(\u6a2a\u306b1.0\u500d,\u7e26\u306b2.0\u500d). myProgressView . transform = CGAffineTransformMakeScale ( 1.0 , 2.0 ) // \u9032\u6357\u5177\u5408\u3092\u8a2d\u5b9a\u3059\u308b(0.0~1.0). myProgressView . progress = 0.3 // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u4ed8\u3051\u308b. myProgressView . setProgress ( 1.0 , animated : true ) // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myProgressView ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } }","title":"UIProgressView\u3067\u9032\u6357\u306e\u5177\u5408\u306e\u78ba\u8a8d"},{"location":"1.uikit/028_uiprogressview/#2330","text":"CGPoint\u306e\u521d\u671f\u5316\u306e\u5909\u66f4(CGPointMake\u306e\u5ec3\u6b62) CGAffineTransform\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGAffineTransformMakeScale\u306e\u5ec3\u6b62)","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/028_uiprogressview/#reference","text":"UIProgressView https://developer.apple.com/reference/uikit/uiprogressview","title":"Reference"},{"location":"1.uikit/029_uisegmentedcontrol/","text":"UISegmentedControl\u306e\u8868\u793a Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 // // ViewController.swift // UIKit029_4.0 // // Created by KimikoWatanabe on 2016/08/17. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private let mySegLabel : UILabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 150 , height : 150 )) override func viewDidLoad () { super . viewDidLoad () // \u8868\u793a\u3059\u308b\u914d\u5217\u3092\u4f5c\u6210\u3059\u308b. let myArray : NSArray = [ \"Red\" , \"Blue\" , \"Green\" ] // SegmentedControl\u3092\u4f5c\u6210\u3059\u308b. let mySegcon : UISegmentedControl = UISegmentedControl ( items : myArray as [ AnyObject ]) mySegcon . center = CGPoint ( x : self . view . frame . width / 2 , y : 400 ) mySegcon . backgroundColor = UIColor . gray mySegcon . tintColor = UIColor . white // \u30a4\u30d9\u30f3\u30c8\u3092\u8ffd\u52a0\u3059\u308b. mySegcon . addTarget ( self , action : #selector ( ViewController . segconChanged ( segcon :)), for : UIControl . Event . valueChanged ) // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( mySegcon ) // Label\u3092\u4f5c\u6210\u3059\u308b. mySegLabel . backgroundColor = UIColor . white mySegLabel . layer . masksToBounds = true mySegLabel . layer . cornerRadius = 75.0 mySegLabel . textColor = UIColor . white mySegLabel . shadowColor = UIColor . gray mySegLabel . font = UIFont . systemFont ( ofSize : 30.0 ) mySegLabel . textAlignment = NSTextAlignment . center mySegLabel . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 200 ) // View\u306e\u80cc\u666f\u8272\u3092Cyan\u306b\u3059\u308b. self . view . backgroundColor = UIColor . cyan // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( mySegLabel ); } /* SwgmentedControl\u306e\u5024\u304c\u5909\u308f\u3063\u305f\u3068\u304d\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ @objc internal func segconChanged ( segcon : UISegmentedControl ){ switch segcon . selectedSegmentIndex { case 0 : mySegLabel . backgroundColor = UIColor . red case 1 : mySegLabel . backgroundColor = UIColor . blue case 2 : mySegLabel . backgroundColor = UIColor . green default : print ( \"Error\" ) } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 // // ViewController.swift // UIKit029_3.0 // // Created by KimikoWatanabe on 2016/08/17. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private let mySegLabel : UILabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 150 , height : 150 )) override func viewDidLoad () { super . viewDidLoad () // \u8868\u793a\u3059\u308b\u914d\u5217\u3092\u4f5c\u6210\u3059\u308b. let myArray : NSArray = [ \"Red\" , \"Blue\" , \"Green\" ] // SegmentedControl\u3092\u4f5c\u6210\u3059\u308b. let mySegcon : UISegmentedControl = UISegmentedControl ( items : myArray as [ AnyObject ]) mySegcon . center = CGPoint ( x : self . view . frame . width / 2 , y : 400 ) mySegcon . backgroundColor = UIColor . gray mySegcon . tintColor = UIColor . white // \u30a4\u30d9\u30f3\u30c8\u3092\u8ffd\u52a0\u3059\u308b. mySegcon . addTarget ( self , action : #selector ( ViewController . segconChanged ( segcon :)), for : UIControlEvents . valueChanged ) // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( mySegcon ) // Label\u3092\u4f5c\u6210\u3059\u308b. mySegLabel . backgroundColor = UIColor . white mySegLabel . layer . masksToBounds = true mySegLabel . layer . cornerRadius = 75.0 mySegLabel . textColor = UIColor . white mySegLabel . shadowColor = UIColor . gray mySegLabel . font = UIFont . systemFont ( ofSize : 30.0 ) mySegLabel . textAlignment = NSTextAlignment . center mySegLabel . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 200 ) // View\u306e\u80cc\u666f\u8272\u3092Cyan\u306b\u3059\u308b. self . view . backgroundColor = UIColor . cyan // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( mySegLabel ); } /* SwgmentedControl\u306e\u5024\u304c\u5909\u308f\u3063\u305f\u3068\u304d\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ internal func segconChanged ( segcon : UISegmentedControl ){ switch segcon . selectedSegmentIndex { case 0 : mySegLabel . backgroundColor = UIColor . red case 1 : mySegLabel . backgroundColor = UIColor . blue case 2 : mySegLabel . backgroundColor = UIColor . green default : print ( \"Error\" ) } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 // // ViewController.swift // UIKit029_2.3 // // Created by KimikoWatanabe on 2016/08/17. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private let mySegLabel : UILabel = UILabel ( frame : CGRectMake ( 0 , 0 , 150 , 150 )) override func viewDidLoad () { super . viewDidLoad () // \u8868\u793a\u3059\u308b\u914d\u5217\u3092\u4f5c\u6210\u3059\u308b. let myArray : NSArray = [ \"Red\" , \"Blue\" , \"Green\" ] // SegmentedControl\u3092\u4f5c\u6210\u3059\u308b. let mySegcon : UISegmentedControl = UISegmentedControl ( items : myArray as [ AnyObject ]) mySegcon . center = CGPoint ( x : self . view . frame . width / 2 , y : 400 ) mySegcon . backgroundColor = UIColor . grayColor () mySegcon . tintColor = UIColor . whiteColor () // \u30a4\u30d9\u30f3\u30c8\u3092\u8ffd\u52a0\u3059\u308b. mySegcon . addTarget ( self , action : #selector ( ViewController . segconChanged ( _ :)), forControlEvents : UIControlEvents . ValueChanged ) // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( mySegcon ) // Label\u3092\u4f5c\u6210\u3059\u308b. mySegLabel . backgroundColor = UIColor . whiteColor () mySegLabel . layer . masksToBounds = true mySegLabel . layer . cornerRadius = 75.0 mySegLabel . textColor = UIColor . whiteColor () mySegLabel . shadowColor = UIColor . grayColor () mySegLabel . font = UIFont . systemFontOfSize ( CGFloat ( 30 )) mySegLabel . textAlignment = NSTextAlignment . Center mySegLabel . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 200 ) // View\u306e\u80cc\u666f\u8272\u3092Cyan\u306b\u3059\u308b. self . view . backgroundColor = UIColor . cyanColor () // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( mySegLabel ); } /* SwgmentedControl\u306e\u5024\u304c\u5909\u308f\u3063\u305f\u3068\u304d\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ internal func segconChanged ( segcon : UISegmentedControl ){ switch segcon . selectedSegmentIndex { case 0 : mySegLabel . backgroundColor = UIColor . redColor () case 1 : mySegLabel . backgroundColor = UIColor . blueColor () case 2 : mySegLabel . backgroundColor = UIColor . greenColor () default : print ( \"Error\" ) } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } 3.0\u30684.0\u306e\u5dee\u5206 UIControlEvents.valueChanged \u304c\u3001 UIControl.Event.valueChanged \u306b\u5909\u66f4 internal func segconChanged(segcon: UISegmentedControl) \u306b @objc \u3092\u8ffd\u52a0 2.3\u30683.0\u306e\u5dee\u5206 UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGPointMake\u306e\u5ec3\u6b62) Reference UISegmentedControl Class https://developer.apple.com/reference/uikit/uisegmentedcontrol","title":"UISegmentedControl\u306e\u8868\u793a"},{"location":"1.uikit/029_uisegmentedcontrol/#uisegmentedcontrol","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 // // ViewController.swift // UIKit029_4.0 // // Created by KimikoWatanabe on 2016/08/17. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private let mySegLabel : UILabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 150 , height : 150 )) override func viewDidLoad () { super . viewDidLoad () // \u8868\u793a\u3059\u308b\u914d\u5217\u3092\u4f5c\u6210\u3059\u308b. let myArray : NSArray = [ \"Red\" , \"Blue\" , \"Green\" ] // SegmentedControl\u3092\u4f5c\u6210\u3059\u308b. let mySegcon : UISegmentedControl = UISegmentedControl ( items : myArray as [ AnyObject ]) mySegcon . center = CGPoint ( x : self . view . frame . width / 2 , y : 400 ) mySegcon . backgroundColor = UIColor . gray mySegcon . tintColor = UIColor . white // \u30a4\u30d9\u30f3\u30c8\u3092\u8ffd\u52a0\u3059\u308b. mySegcon . addTarget ( self , action : #selector ( ViewController . segconChanged ( segcon :)), for : UIControl . Event . valueChanged ) // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( mySegcon ) // Label\u3092\u4f5c\u6210\u3059\u308b. mySegLabel . backgroundColor = UIColor . white mySegLabel . layer . masksToBounds = true mySegLabel . layer . cornerRadius = 75.0 mySegLabel . textColor = UIColor . white mySegLabel . shadowColor = UIColor . gray mySegLabel . font = UIFont . systemFont ( ofSize : 30.0 ) mySegLabel . textAlignment = NSTextAlignment . center mySegLabel . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 200 ) // View\u306e\u80cc\u666f\u8272\u3092Cyan\u306b\u3059\u308b. self . view . backgroundColor = UIColor . cyan // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( mySegLabel ); } /* SwgmentedControl\u306e\u5024\u304c\u5909\u308f\u3063\u305f\u3068\u304d\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ @objc internal func segconChanged ( segcon : UISegmentedControl ){ switch segcon . selectedSegmentIndex { case 0 : mySegLabel . backgroundColor = UIColor . red case 1 : mySegLabel . backgroundColor = UIColor . blue case 2 : mySegLabel . backgroundColor = UIColor . green default : print ( \"Error\" ) } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 // // ViewController.swift // UIKit029_3.0 // // Created by KimikoWatanabe on 2016/08/17. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private let mySegLabel : UILabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 150 , height : 150 )) override func viewDidLoad () { super . viewDidLoad () // \u8868\u793a\u3059\u308b\u914d\u5217\u3092\u4f5c\u6210\u3059\u308b. let myArray : NSArray = [ \"Red\" , \"Blue\" , \"Green\" ] // SegmentedControl\u3092\u4f5c\u6210\u3059\u308b. let mySegcon : UISegmentedControl = UISegmentedControl ( items : myArray as [ AnyObject ]) mySegcon . center = CGPoint ( x : self . view . frame . width / 2 , y : 400 ) mySegcon . backgroundColor = UIColor . gray mySegcon . tintColor = UIColor . white // \u30a4\u30d9\u30f3\u30c8\u3092\u8ffd\u52a0\u3059\u308b. mySegcon . addTarget ( self , action : #selector ( ViewController . segconChanged ( segcon :)), for : UIControlEvents . valueChanged ) // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( mySegcon ) // Label\u3092\u4f5c\u6210\u3059\u308b. mySegLabel . backgroundColor = UIColor . white mySegLabel . layer . masksToBounds = true mySegLabel . layer . cornerRadius = 75.0 mySegLabel . textColor = UIColor . white mySegLabel . shadowColor = UIColor . gray mySegLabel . font = UIFont . systemFont ( ofSize : 30.0 ) mySegLabel . textAlignment = NSTextAlignment . center mySegLabel . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 200 ) // View\u306e\u80cc\u666f\u8272\u3092Cyan\u306b\u3059\u308b. self . view . backgroundColor = UIColor . cyan // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( mySegLabel ); } /* SwgmentedControl\u306e\u5024\u304c\u5909\u308f\u3063\u305f\u3068\u304d\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ internal func segconChanged ( segcon : UISegmentedControl ){ switch segcon . selectedSegmentIndex { case 0 : mySegLabel . backgroundColor = UIColor . red case 1 : mySegLabel . backgroundColor = UIColor . blue case 2 : mySegLabel . backgroundColor = UIColor . green default : print ( \"Error\" ) } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 // // ViewController.swift // UIKit029_2.3 // // Created by KimikoWatanabe on 2016/08/17. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private let mySegLabel : UILabel = UILabel ( frame : CGRectMake ( 0 , 0 , 150 , 150 )) override func viewDidLoad () { super . viewDidLoad () // \u8868\u793a\u3059\u308b\u914d\u5217\u3092\u4f5c\u6210\u3059\u308b. let myArray : NSArray = [ \"Red\" , \"Blue\" , \"Green\" ] // SegmentedControl\u3092\u4f5c\u6210\u3059\u308b. let mySegcon : UISegmentedControl = UISegmentedControl ( items : myArray as [ AnyObject ]) mySegcon . center = CGPoint ( x : self . view . frame . width / 2 , y : 400 ) mySegcon . backgroundColor = UIColor . grayColor () mySegcon . tintColor = UIColor . whiteColor () // \u30a4\u30d9\u30f3\u30c8\u3092\u8ffd\u52a0\u3059\u308b. mySegcon . addTarget ( self , action : #selector ( ViewController . segconChanged ( _ :)), forControlEvents : UIControlEvents . ValueChanged ) // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( mySegcon ) // Label\u3092\u4f5c\u6210\u3059\u308b. mySegLabel . backgroundColor = UIColor . whiteColor () mySegLabel . layer . masksToBounds = true mySegLabel . layer . cornerRadius = 75.0 mySegLabel . textColor = UIColor . whiteColor () mySegLabel . shadowColor = UIColor . grayColor () mySegLabel . font = UIFont . systemFontOfSize ( CGFloat ( 30 )) mySegLabel . textAlignment = NSTextAlignment . Center mySegLabel . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 200 ) // View\u306e\u80cc\u666f\u8272\u3092Cyan\u306b\u3059\u308b. self . view . backgroundColor = UIColor . cyanColor () // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( mySegLabel ); } /* SwgmentedControl\u306e\u5024\u304c\u5909\u308f\u3063\u305f\u3068\u304d\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ internal func segconChanged ( segcon : UISegmentedControl ){ switch segcon . selectedSegmentIndex { case 0 : mySegLabel . backgroundColor = UIColor . redColor () case 1 : mySegLabel . backgroundColor = UIColor . blueColor () case 2 : mySegLabel . backgroundColor = UIColor . greenColor () default : print ( \"Error\" ) } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } }","title":"UISegmentedControl\u306e\u8868\u793a"},{"location":"1.uikit/029_uisegmentedcontrol/#3040","text":"UIControlEvents.valueChanged \u304c\u3001 UIControl.Event.valueChanged \u306b\u5909\u66f4 internal func segconChanged(segcon: UISegmentedControl) \u306b @objc \u3092\u8ffd\u52a0","title":"3.0\u30684.0\u306e\u5dee\u5206"},{"location":"1.uikit/029_uisegmentedcontrol/#2330","text":"UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGPointMake\u306e\u5ec3\u6b62)","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/029_uisegmentedcontrol/#reference","text":"UISegmentedControl Class https://developer.apple.com/reference/uikit/uisegmentedcontrol","title":"Reference"},{"location":"1.uikit/030_uistepper/","text":"UIStepper\u306e\u8868\u793a Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 // // ViewController.swift // UIKit030_4.0 // // Created by KimikoWatanabe on 2016/08/17. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private let myStepLabel : UILabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 150 , height : 150 )) override func viewDidLoad () { super . viewDidLoad () // Stepper\u306e\u4f5c\u6210\u3059\u308b. let myStepper : UIStepper = UIStepper () myStepper . center = CGPoint ( x : self . view . frame . width / 2 , y : 400 ) myStepper . backgroundColor = UIColor . gray myStepper . tintColor = UIColor . white myStepper . addTarget ( self , action : #selector ( ViewController . stepperOneChanged ( stepper :)), for : UIControl . Event . valueChanged ) // \u6700\u5c0f\u5024, \u6700\u5927\u5024, \u898f\u5b9a\u5024\u306e\u8a2d\u5b9a\u3092\u3059\u308b. myStepper . minimumValue = 0 myStepper . maximumValue = 100 myStepper . value = 50 // \u30dc\u30bf\u30f3\u3092\u62bc\u3057\u305f\u969b\u306b\u52d5\u304f\u5024\u306e.\u3092\u8a2d\u5b9a\u3059\u308b. myStepper . stepValue = 10 // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myStepper ) // Label\u3092\u4f5c\u6210\u3059\u308b. myStepLabel . backgroundColor = UIColor . blue myStepLabel . layer . masksToBounds = true myStepLabel . layer . cornerRadius = 75.0 myStepLabel . textColor = UIColor . white myStepLabel . shadowColor = UIColor . gray myStepLabel . font = UIFont . systemFont ( ofSize : 30.0 ) myStepLabel . textAlignment = NSTextAlignment . center myStepLabel . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 200 ) myStepLabel . text = \" \\( myStepper . value ) \" // View\u306e\u80cc\u666f\u8272\u3092\u9752\u306b\u3059\u308b. self . view . backgroundColor = UIColor . cyan // view\u306bLabel\u3092\u8ffd\u52a0. self . view . addSubview ( myStepLabel ) } /* Stepper\u306e\u5024\u304c\u5909\u308f\u3063\u305f\u3068\u304d\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ @objc internal func stepperOneChanged ( stepper : UIStepper ){ myStepLabel . text = \" \\( stepper . value ) \" } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 // // ViewController.swift // UIKit030_3.0 // // Created by KimikoWatanabe on 2016/08/17. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private let myStepLabel : UILabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 150 , height : 150 )) override func viewDidLoad () { super . viewDidLoad () // Stepper\u306e\u4f5c\u6210\u3059\u308b. let myStepper : UIStepper = UIStepper () myStepper . center = CGPoint ( x : self . view . frame . width / 2 , y : 400 ) myStepper . backgroundColor = UIColor . gray myStepper . tintColor = UIColor . white myStepper . addTarget ( self , action : #selector ( ViewController . stepperOneChanged ( stepper :)), for : UIControlEvents . valueChanged ) // \u6700\u5c0f\u5024, \u6700\u5927\u5024, \u898f\u5b9a\u5024\u306e\u8a2d\u5b9a\u3092\u3059\u308b. myStepper . minimumValue = 0 myStepper . maximumValue = 100 myStepper . value = 50 // \u30dc\u30bf\u30f3\u3092\u62bc\u3057\u305f\u969b\u306b\u52d5\u304f\u5024\u306e.\u3092\u8a2d\u5b9a\u3059\u308b. myStepper . stepValue = 10 // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myStepper ) // Label\u3092\u4f5c\u6210\u3059\u308b. myStepLabel . backgroundColor = UIColor . blue myStepLabel . layer . masksToBounds = true myStepLabel . layer . cornerRadius = 75.0 myStepLabel . textColor = UIColor . white myStepLabel . shadowColor = UIColor . gray myStepLabel . font = UIFont . systemFont ( ofSize : 30.0 ) myStepLabel . textAlignment = NSTextAlignment . center myStepLabel . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 200 ) myStepLabel . text = \" \\( myStepper . value ) \" // View\u306e\u80cc\u666f\u8272\u3092\u9752\u306b\u3059\u308b. self . view . backgroundColor = UIColor . cyan // view\u306bLabel\u3092\u8ffd\u52a0. self . view . addSubview ( myStepLabel ) } /* Stepper\u306e\u5024\u304c\u5909\u308f\u3063\u305f\u3068\u304d\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ internal func stepperOneChanged ( stepper : UIStepper ){ myStepLabel . text = \" \\( stepper . value ) \" } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 // // ViewController.swift // UIKit030_2.3 // // Created by KimikoWatanabe on 2016/08/17. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private let myStepLabel : UILabel = UILabel ( frame : CGRectMake ( 0 , 0 , 150 , 150 )) override func viewDidLoad () { super . viewDidLoad () // Stepper\u306e\u4f5c\u6210\u3059\u308b. let myStepper : UIStepper = UIStepper () myStepper . center = CGPointMake ( self . view . frame . width / 2 , 400 ) myStepper . backgroundColor = UIColor . grayColor () myStepper . tintColor = UIColor . whiteColor () myStepper . addTarget ( self , action : #selector ( ViewController . stepperOneChanged ( _ :)), forControlEvents : UIControlEvents . ValueChanged ) // \u6700\u5c0f\u5024, \u6700\u5927\u5024, \u898f\u5b9a\u5024\u306e\u8a2d\u5b9a\u3092\u3059\u308b. myStepper . minimumValue = 0 myStepper . maximumValue = 100 myStepper . value = 50 // \u30dc\u30bf\u30f3\u3092\u62bc\u3057\u305f\u969b\u306b\u52d5\u304f\u5024\u306e.\u3092\u8a2d\u5b9a\u3059\u308b. myStepper . stepValue = 10 // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myStepper ) // Label\u3092\u4f5c\u6210\u3059\u308b. myStepLabel . backgroundColor = UIColor . blueColor () myStepLabel . layer . masksToBounds = true myStepLabel . layer . cornerRadius = 75.0 myStepLabel . textColor = UIColor . whiteColor () myStepLabel . shadowColor = UIColor . grayColor () myStepLabel . font = UIFont . systemFontOfSize ( CGFloat ( 30 )) myStepLabel . textAlignment = NSTextAlignment . Center myStepLabel . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 200 ) myStepLabel . text = \" \\( myStepper . value ) \" // View\u306e\u80cc\u666f\u8272\u3092\u9752\u306b\u3059\u308b. self . view . backgroundColor = UIColor . cyanColor () // view\u306bLabel\u3092\u8ffd\u52a0. self . view . addSubview ( myStepLabel ) } /* Stepper\u306e\u5024\u304c\u5909\u308f\u3063\u305f\u3068\u304d\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ internal func stepperOneChanged ( stepper : UIStepper ){ myStepLabel . text = \" \\( stepper . value ) \" } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } 3.0\u30684.0\u306e\u5dee\u5206 UIControlEvents.valueChanged \u304c\u3001 UIControl.Event.valueChanged \u306b\u5909\u66f4 internal func stepperOneChanged(stepper: UIStepper) \u306b @objc \u3092\u8ffd\u52a0 2.3\u30683.0\u306e\u5dee\u5206 UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u306e\u5ec3\u6b62) Reference UIStepper Class https://developer.apple.com/reference/uikit/uistepper","title":"UIStepper\u306e\u8868\u793a"},{"location":"1.uikit/030_uistepper/#uistepper","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 // // ViewController.swift // UIKit030_4.0 // // Created by KimikoWatanabe on 2016/08/17. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private let myStepLabel : UILabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 150 , height : 150 )) override func viewDidLoad () { super . viewDidLoad () // Stepper\u306e\u4f5c\u6210\u3059\u308b. let myStepper : UIStepper = UIStepper () myStepper . center = CGPoint ( x : self . view . frame . width / 2 , y : 400 ) myStepper . backgroundColor = UIColor . gray myStepper . tintColor = UIColor . white myStepper . addTarget ( self , action : #selector ( ViewController . stepperOneChanged ( stepper :)), for : UIControl . Event . valueChanged ) // \u6700\u5c0f\u5024, \u6700\u5927\u5024, \u898f\u5b9a\u5024\u306e\u8a2d\u5b9a\u3092\u3059\u308b. myStepper . minimumValue = 0 myStepper . maximumValue = 100 myStepper . value = 50 // \u30dc\u30bf\u30f3\u3092\u62bc\u3057\u305f\u969b\u306b\u52d5\u304f\u5024\u306e.\u3092\u8a2d\u5b9a\u3059\u308b. myStepper . stepValue = 10 // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myStepper ) // Label\u3092\u4f5c\u6210\u3059\u308b. myStepLabel . backgroundColor = UIColor . blue myStepLabel . layer . masksToBounds = true myStepLabel . layer . cornerRadius = 75.0 myStepLabel . textColor = UIColor . white myStepLabel . shadowColor = UIColor . gray myStepLabel . font = UIFont . systemFont ( ofSize : 30.0 ) myStepLabel . textAlignment = NSTextAlignment . center myStepLabel . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 200 ) myStepLabel . text = \" \\( myStepper . value ) \" // View\u306e\u80cc\u666f\u8272\u3092\u9752\u306b\u3059\u308b. self . view . backgroundColor = UIColor . cyan // view\u306bLabel\u3092\u8ffd\u52a0. self . view . addSubview ( myStepLabel ) } /* Stepper\u306e\u5024\u304c\u5909\u308f\u3063\u305f\u3068\u304d\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ @objc internal func stepperOneChanged ( stepper : UIStepper ){ myStepLabel . text = \" \\( stepper . value ) \" } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 // // ViewController.swift // UIKit030_3.0 // // Created by KimikoWatanabe on 2016/08/17. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private let myStepLabel : UILabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 150 , height : 150 )) override func viewDidLoad () { super . viewDidLoad () // Stepper\u306e\u4f5c\u6210\u3059\u308b. let myStepper : UIStepper = UIStepper () myStepper . center = CGPoint ( x : self . view . frame . width / 2 , y : 400 ) myStepper . backgroundColor = UIColor . gray myStepper . tintColor = UIColor . white myStepper . addTarget ( self , action : #selector ( ViewController . stepperOneChanged ( stepper :)), for : UIControlEvents . valueChanged ) // \u6700\u5c0f\u5024, \u6700\u5927\u5024, \u898f\u5b9a\u5024\u306e\u8a2d\u5b9a\u3092\u3059\u308b. myStepper . minimumValue = 0 myStepper . maximumValue = 100 myStepper . value = 50 // \u30dc\u30bf\u30f3\u3092\u62bc\u3057\u305f\u969b\u306b\u52d5\u304f\u5024\u306e.\u3092\u8a2d\u5b9a\u3059\u308b. myStepper . stepValue = 10 // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myStepper ) // Label\u3092\u4f5c\u6210\u3059\u308b. myStepLabel . backgroundColor = UIColor . blue myStepLabel . layer . masksToBounds = true myStepLabel . layer . cornerRadius = 75.0 myStepLabel . textColor = UIColor . white myStepLabel . shadowColor = UIColor . gray myStepLabel . font = UIFont . systemFont ( ofSize : 30.0 ) myStepLabel . textAlignment = NSTextAlignment . center myStepLabel . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 200 ) myStepLabel . text = \" \\( myStepper . value ) \" // View\u306e\u80cc\u666f\u8272\u3092\u9752\u306b\u3059\u308b. self . view . backgroundColor = UIColor . cyan // view\u306bLabel\u3092\u8ffd\u52a0. self . view . addSubview ( myStepLabel ) } /* Stepper\u306e\u5024\u304c\u5909\u308f\u3063\u305f\u3068\u304d\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ internal func stepperOneChanged ( stepper : UIStepper ){ myStepLabel . text = \" \\( stepper . value ) \" } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 // // ViewController.swift // UIKit030_2.3 // // Created by KimikoWatanabe on 2016/08/17. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private let myStepLabel : UILabel = UILabel ( frame : CGRectMake ( 0 , 0 , 150 , 150 )) override func viewDidLoad () { super . viewDidLoad () // Stepper\u306e\u4f5c\u6210\u3059\u308b. let myStepper : UIStepper = UIStepper () myStepper . center = CGPointMake ( self . view . frame . width / 2 , 400 ) myStepper . backgroundColor = UIColor . grayColor () myStepper . tintColor = UIColor . whiteColor () myStepper . addTarget ( self , action : #selector ( ViewController . stepperOneChanged ( _ :)), forControlEvents : UIControlEvents . ValueChanged ) // \u6700\u5c0f\u5024, \u6700\u5927\u5024, \u898f\u5b9a\u5024\u306e\u8a2d\u5b9a\u3092\u3059\u308b. myStepper . minimumValue = 0 myStepper . maximumValue = 100 myStepper . value = 50 // \u30dc\u30bf\u30f3\u3092\u62bc\u3057\u305f\u969b\u306b\u52d5\u304f\u5024\u306e.\u3092\u8a2d\u5b9a\u3059\u308b. myStepper . stepValue = 10 // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myStepper ) // Label\u3092\u4f5c\u6210\u3059\u308b. myStepLabel . backgroundColor = UIColor . blueColor () myStepLabel . layer . masksToBounds = true myStepLabel . layer . cornerRadius = 75.0 myStepLabel . textColor = UIColor . whiteColor () myStepLabel . shadowColor = UIColor . grayColor () myStepLabel . font = UIFont . systemFontOfSize ( CGFloat ( 30 )) myStepLabel . textAlignment = NSTextAlignment . Center myStepLabel . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 200 ) myStepLabel . text = \" \\( myStepper . value ) \" // View\u306e\u80cc\u666f\u8272\u3092\u9752\u306b\u3059\u308b. self . view . backgroundColor = UIColor . cyanColor () // view\u306bLabel\u3092\u8ffd\u52a0. self . view . addSubview ( myStepLabel ) } /* Stepper\u306e\u5024\u304c\u5909\u308f\u3063\u305f\u3068\u304d\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ internal func stepperOneChanged ( stepper : UIStepper ){ myStepLabel . text = \" \\( stepper . value ) \" } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } }","title":"UIStepper\u306e\u8868\u793a"},{"location":"1.uikit/030_uistepper/#3040","text":"UIControlEvents.valueChanged \u304c\u3001 UIControl.Event.valueChanged \u306b\u5909\u66f4 internal func stepperOneChanged(stepper: UIStepper) \u306b @objc \u3092\u8ffd\u52a0","title":"3.0\u30684.0\u306e\u5dee\u5206"},{"location":"1.uikit/030_uistepper/#2330","text":"UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u306e\u5ec3\u6b62)","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/030_uistepper/#reference","text":"UIStepper Class https://developer.apple.com/reference/uikit/uistepper","title":"Reference"},{"location":"1.uikit/031_uinavigationitem/","text":"UINavigationItem\u3067UINavigationBar\u3092\u8a2d\u5b9a AppDelegate.swift Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 // // AppDelegate.swift // UIKit031_4.0 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { var window : UIWindow ? func application ( _ application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ UIApplication . LaunchOptionsKey : Any ]? = nil ) -> Bool { // ViewController\u3092\u751f\u6210\u3059\u308b. let myFirstViewController : FirstViewController = FirstViewController () // Navication Controller\u3092\u751f\u6210\u3059\u308b. let myNavigationController : UINavigationController = UINavigationController ( rootViewController : myFirstViewController ) // UIWindow\u3092\u751f\u6210\u3059\u308b. self . window = UIWindow ( frame : UIScreen . main . bounds ) // rootViewController\u306bNatigationController\u3092\u8a2d\u5b9a\u3059\u308b. self . window ?. rootViewController = myNavigationController self . window ?. makeKeyAndVisible () return true } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 // // AppDelegate.swift // UIKit031_3.0 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { var window : UIWindow ? func application ( _ application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ NSObject : AnyObject ]?) -> Bool { // ViewController\u3092\u751f\u6210\u3059\u308b. let myFirstViewController : FirstViewController = FirstViewController () // Navication Controller\u3092\u751f\u6210\u3059\u308b. let myNavigationController : UINavigationController = UINavigationController ( rootViewController : myFirstViewController ) // UIWindow\u3092\u751f\u6210\u3059\u308b. self . window = UIWindow ( frame : UIScreen . main . bounds ) // rootViewController\u306bNatigationController\u3092\u8a2d\u5b9a\u3059\u308b. self . window ?. rootViewController = myNavigationController self . window ?. makeKeyAndVisible () return true } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 // // AppDelegate.swift // UIKit031_2.3 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { var window : UIWindow ? func application ( application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ NSObject : AnyObject ]?) -> Bool { // ViewController\u3092\u751f\u6210\u3059\u308b. let myFirstViewController : FirstViewController = FirstViewController () // Navication Controller\u3092\u751f\u6210\u3059\u308b. let myNavigationController : UINavigationController = UINavigationController ( rootViewController : myFirstViewController ) // UIWindow\u3092\u751f\u6210\u3059\u308b. self . window = UIWindow ( frame : UIScreen . mainScreen (). bounds ) // rootViewController\u306bNatigationController\u3092\u8a2d\u5b9a\u3059\u308b. self . window ?. rootViewController = myNavigationController self . window ?. makeKeyAndVisible () return true } } FirstViewController.swift Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 // // ViewController.swift // UIKit031_4.0 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class FirstViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // View\u306e\u80cc\u666f\u8272\u3092\u5b9a\u7fa9\u3059\u308b. self . view . backgroundColor = UIColor . cyan // \u30dc\u30bf\u30f3\u3092\u751f\u6210\u3059\u308b. let myButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 100 , height : 50 )) myButton . backgroundColor = UIColor . orange myButton . layer . masksToBounds = true myButton . setTitle ( \"\u30dc\u30bf\u30f3\" , for : . normal ) myButton . layer . cornerRadius = 20.0 myButton . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 200 ) myButton . addTarget ( self , action : #selector ( FirstViewController . onClickMyButton ( sender :)), for : . touchUpInside ) // \u30dc\u30bf\u30f3\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myButton ); // BarButtonItem\u3092\u4f5c\u6210\u3059\u308b. let myBarButton_1 = UIBarButtonItem ( barButtonSystemItem : UIBarButtonItem . SystemItem . camera , target : self , action : #selector ( FirstViewController . onClickMyButton ( sender :))) let myBarButton_2 = UIBarButtonItem ( barButtonSystemItem : UIBarButtonItem . SystemItem . add , target : self , action : #selector ( FirstViewController . onClickMyButton ( sender :))) let myBarButton_3 = UIBarButtonItem ( barButtonSystemItem : UIBarButtonItem . SystemItem . done , target : self , action : #selector ( FirstViewController . onClickMyButton ( sender :))) // Bar\u306e\u53f3\u306b\u914d\u7f6e\u3059\u308b\u30dc\u30bf\u30f3\u3092\u914d\u5217\u306b\u683c\u7d0d\u3059\u308b. let myRightButtons : NSArray = [ myBarButton_1 , myBarButton_2 ] // NavigationBar\u306e\u8868\u793a\u3059\u308b. self . navigationController ?. setNavigationBarHidden ( false , animated : false ) // \u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b. self . navigationItem . title = \"Title\" // \u30d7\u30ed\u30f3\u30d7\u30c8\u3092\u8a2d\u5b9a\u3059\u308b. self . navigationItem . prompt = \"Prompt\" // Bar\u306e\u53f3\u5074\u306b\u8907\u6570\u914d\u7f6e\u3059\u308b. self . navigationItem . setRightBarButtonItems ( myRightButtons as ? [ UIBarButtonItem ], animated : true ) // Bar\u306e\u5de6\u5074\u306b\u914d\u7f6e\u3059\u308b. self . navigationItem . setLeftBarButton ( myBarButton_3 , animated : true ) } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8 */ @objc internal func onClickMyButton ( sender : UIButton ){ print ( \"onClickMyButton:\" ) let secondViewController = SecondViewController () self . navigationController ?. pushViewController ( secondViewController , animated : true ) } /* BarButton\u30a4\u30d9\u30f3\u30c8 */ internal func onClickMyBarButton ( sender : UIButton ){ print ( \"onClickMyBarButton:\" ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 // // ViewController.swift // UIKit031_3.0 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class FirstViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // View\u306e\u80cc\u666f\u8272\u3092\u5b9a\u7fa9\u3059\u308b. self . view . backgroundColor = UIColor . cyan // \u30dc\u30bf\u30f3\u3092\u751f\u6210\u3059\u308b. let myButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 100 , height : 50 )) myButton . backgroundColor = UIColor . orange myButton . layer . masksToBounds = true myButton . setTitle ( \"\u30dc\u30bf\u30f3\" , for : . normal ) myButton . layer . cornerRadius = 20.0 myButton . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 200 ) myButton . addTarget ( self , action : #selector ( FirstViewController . onClickMyButton ( sender :)), for : . touchUpInside ) // \u30dc\u30bf\u30f3\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myButton ); // BarButtonItem\u3092\u4f5c\u6210\u3059\u308b. let myBarButton_1 = UIBarButtonItem ( barButtonSystemItem : UIBarButtonSystemItem . camera , target : self , action : #selector ( FirstViewController . onClickMyButton ( sender :))) let myBarButton_2 = UIBarButtonItem ( barButtonSystemItem : UIBarButtonSystemItem . add , target : self , action : #selector ( FirstViewController . onClickMyButton ( sender :))) let myBarButton_3 = UIBarButtonItem ( barButtonSystemItem : UIBarButtonSystemItem . done , target : self , action : #selector ( FirstViewController . onClickMyButton ( sender :))) // Bar\u306e\u53f3\u306b\u914d\u7f6e\u3059\u308b\u30dc\u30bf\u30f3\u3092\u914d\u5217\u306b\u683c\u7d0d\u3059\u308b. let myRightButtons : NSArray = [ myBarButton_1 , myBarButton_2 ] // NavigationBar\u306e\u8868\u793a\u3059\u308b. self . navigationController ?. setNavigationBarHidden ( false , animated : false ) // \u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b. self . navigationItem . title = \"Title\" // \u30d7\u30ed\u30f3\u30d7\u30c8\u3092\u8a2d\u5b9a\u3059\u308b. self . navigationItem . prompt = \"Prompt\" // Bar\u306e\u53f3\u5074\u306b\u8907\u6570\u914d\u7f6e\u3059\u308b. self . navigationItem . setRightBarButtonItems ( myRightButtons as ? [ UIBarButtonItem ], animated : true ) // Bar\u306e\u5de6\u5074\u306b\u914d\u7f6e\u3059\u308b. self . navigationItem . setLeftBarButton ( myBarButton_3 , animated : true ) } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8 */ internal func onClickMyButton ( sender : UIButton ){ print ( \"onClickMyButton:\" ) let secondViewController = SecondViewController () self . navigationController ?. pushViewController ( secondViewController , animated : true ) } /* BarButton\u30a4\u30d9\u30f3\u30c8 */ internal func onClickMyBarButton ( sender : UIButton ){ print ( \"onClickMyBarButton:\" ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 // // ViewController.swift // UIKit031_2.3 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class FirstViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // View\u306e\u80cc\u666f\u8272\u3092\u5b9a\u7fa9\u3059\u308b. self . view . backgroundColor = UIColor . cyanColor () // \u30dc\u30bf\u30f3\u3092\u751f\u6210\u3059\u308b. let myButton = UIButton ( frame : CGRectMake ( 0 , 0 , 100 , 50 )) myButton . backgroundColor = UIColor . orangeColor () myButton . layer . masksToBounds = true myButton . setTitle ( \"\u30dc\u30bf\u30f3\" , forState : . Normal ) myButton . layer . cornerRadius = 20.0 myButton . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 200 ) myButton . addTarget ( self , action : #selector ( FirstViewController . onClickMyButton ( _ :)), forControlEvents : . TouchUpInside ) // \u30dc\u30bf\u30f3\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myButton ); // BarButtonItem\u3092\u4f5c\u6210\u3059\u308b. let myBarButton_1 = UIBarButtonItem ( barButtonSystemItem : UIBarButtonSystemItem . Camera , target : self , action : #selector ( FirstViewController . onClickMyBarButton ( _ :))) let myBarButton_2 = UIBarButtonItem ( barButtonSystemItem : UIBarButtonSystemItem . Add , target : self , action : #selector ( FirstViewController . onClickMyBarButton ( _ :))) let myBarButton_3 = UIBarButtonItem ( barButtonSystemItem : UIBarButtonSystemItem . Done , target : self , action : #selector ( FirstViewController . onClickMyBarButton ( _ :))) // Bar\u306e\u53f3\u306b\u914d\u7f6e\u3059\u308b\u30dc\u30bf\u30f3\u3092\u914d\u5217\u306b\u683c\u7d0d\u3059\u308b. let myRightButtons : NSArray = [ myBarButton_1 , myBarButton_2 ] // NavigationBar\u3092\u53d6\u5f97\u3059\u308b. self . navigationController ?. navigationBar // NavigationBar\u306e\u8868\u793a\u3059\u308b. self . navigationController ?. setNavigationBarHidden ( false , animated : false ) // NavigationItem\u306e\u53d6\u5f97\u3059\u308b. self . navigationItem // \u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b. self . navigationItem . title = \"Title\" // \u30d7\u30ed\u30f3\u30d7\u30c8\u3092\u8a2d\u5b9a\u3059\u308b. self . navigationItem . prompt = \"Prompt\" // Bar\u306e\u53f3\u5074\u306b\u8907\u6570\u914d\u7f6e\u3059\u308b. self . navigationItem . setRightBarButtonItems ( myRightButtons as ? [ UIBarButtonItem ], animated : true ) // Bar\u306e\u5de6\u5074\u306b\u914d\u7f6e\u3059\u308b. self . navigationItem . setLeftBarButtonItem ( myBarButton_3 , animated : true ) } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8 */ internal func onClickMyButton ( sender : UIButton ){ print ( \"onClickMyButton:\" ) let secondViewController = SecondViewController () self . navigationController ?. pushViewController ( secondViewController , animated : true ) } /* BarButton\u30a4\u30d9\u30f3\u30c8 */ internal func onClickMyBarButton ( sender : UIButton ){ print ( \"onClickMyBarButton:\" ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } } SecoundViewController.swift Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 // // SecoundViewController.swift // UIKit031_4.0 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class SecondViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // Controller\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b. self . title = \"My 2nd View\" // View\u306e\u80cc\u666f\u8272\u3092\u5b9a\u7fa9\u3059\u308b. self . view . backgroundColor = UIColor . green } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 // // SecoundViewController.swift // UIKit031_2.3 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class SecondViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // Controller\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b. self . title = \"My 2nd View\" // View\u306e\u80cc\u666f\u8272\u3092\u5b9a\u7fa9\u3059\u308b. self . view . backgroundColor = UIColor . greenColor () } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } } 3.0\u30684.0\u306e\u5dee\u5206 func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject : AnyObject]?) -> Bool \u304c\u3001 func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]? = nil) -> Bool \u306b\u5909\u66f4 internal func onClickMyButton(sender: UIButton)\u306b@objc\u3092\u8ffd\u52a0 UIBarButtonSystemItem.camera \u304c UIBarButtonItem.SystemItem.camera \u306b\u5909\u66f4 UIBarButtonSystemItem.add \u304c UIBarButtonItem.SystemItem.add \u306b\u5909\u66f4 UIBarButtonSystemItem.done \u304c UIBarButtonItem.SystemItem.done \u306b\u5909\u66f4 2.3\u30683.0\u306e\u5dee\u5206 UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u306e\u5ec3\u6b62) UIScreen.mainScreen().bounds \u304c UIScreen.main.bounds \u306b\u5909\u66f4 sender\u306e\u8a18\u8ff0\u65b9\u6cd5\u306e\u5909\u66f4( .onClickMyBarButton(_:) -> .onClickMyButton(sender:) ) Reference UINavigationItem Class https://developer.apple.com/reference/uikit/uinavigationitem","title":"UINavigationItem\u3067UINavigationBar\u3092\u8a2d\u5b9a"},{"location":"1.uikit/031_uinavigationitem/#uinavigationitemuinavigationbar","text":"","title":"UINavigationItem\u3067UINavigationBar\u3092\u8a2d\u5b9a"},{"location":"1.uikit/031_uinavigationitem/#appdelegateswift","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 // // AppDelegate.swift // UIKit031_4.0 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { var window : UIWindow ? func application ( _ application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ UIApplication . LaunchOptionsKey : Any ]? = nil ) -> Bool { // ViewController\u3092\u751f\u6210\u3059\u308b. let myFirstViewController : FirstViewController = FirstViewController () // Navication Controller\u3092\u751f\u6210\u3059\u308b. let myNavigationController : UINavigationController = UINavigationController ( rootViewController : myFirstViewController ) // UIWindow\u3092\u751f\u6210\u3059\u308b. self . window = UIWindow ( frame : UIScreen . main . bounds ) // rootViewController\u306bNatigationController\u3092\u8a2d\u5b9a\u3059\u308b. self . window ?. rootViewController = myNavigationController self . window ?. makeKeyAndVisible () return true } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 // // AppDelegate.swift // UIKit031_3.0 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { var window : UIWindow ? func application ( _ application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ NSObject : AnyObject ]?) -> Bool { // ViewController\u3092\u751f\u6210\u3059\u308b. let myFirstViewController : FirstViewController = FirstViewController () // Navication Controller\u3092\u751f\u6210\u3059\u308b. let myNavigationController : UINavigationController = UINavigationController ( rootViewController : myFirstViewController ) // UIWindow\u3092\u751f\u6210\u3059\u308b. self . window = UIWindow ( frame : UIScreen . main . bounds ) // rootViewController\u306bNatigationController\u3092\u8a2d\u5b9a\u3059\u308b. self . window ?. rootViewController = myNavigationController self . window ?. makeKeyAndVisible () return true } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 // // AppDelegate.swift // UIKit031_2.3 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { var window : UIWindow ? func application ( application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ NSObject : AnyObject ]?) -> Bool { // ViewController\u3092\u751f\u6210\u3059\u308b. let myFirstViewController : FirstViewController = FirstViewController () // Navication Controller\u3092\u751f\u6210\u3059\u308b. let myNavigationController : UINavigationController = UINavigationController ( rootViewController : myFirstViewController ) // UIWindow\u3092\u751f\u6210\u3059\u308b. self . window = UIWindow ( frame : UIScreen . mainScreen (). bounds ) // rootViewController\u306bNatigationController\u3092\u8a2d\u5b9a\u3059\u308b. self . window ?. rootViewController = myNavigationController self . window ?. makeKeyAndVisible () return true } }","title":"AppDelegate.swift"},{"location":"1.uikit/031_uinavigationitem/#firstviewcontrollerswift","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 // // ViewController.swift // UIKit031_4.0 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class FirstViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // View\u306e\u80cc\u666f\u8272\u3092\u5b9a\u7fa9\u3059\u308b. self . view . backgroundColor = UIColor . cyan // \u30dc\u30bf\u30f3\u3092\u751f\u6210\u3059\u308b. let myButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 100 , height : 50 )) myButton . backgroundColor = UIColor . orange myButton . layer . masksToBounds = true myButton . setTitle ( \"\u30dc\u30bf\u30f3\" , for : . normal ) myButton . layer . cornerRadius = 20.0 myButton . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 200 ) myButton . addTarget ( self , action : #selector ( FirstViewController . onClickMyButton ( sender :)), for : . touchUpInside ) // \u30dc\u30bf\u30f3\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myButton ); // BarButtonItem\u3092\u4f5c\u6210\u3059\u308b. let myBarButton_1 = UIBarButtonItem ( barButtonSystemItem : UIBarButtonItem . SystemItem . camera , target : self , action : #selector ( FirstViewController . onClickMyButton ( sender :))) let myBarButton_2 = UIBarButtonItem ( barButtonSystemItem : UIBarButtonItem . SystemItem . add , target : self , action : #selector ( FirstViewController . onClickMyButton ( sender :))) let myBarButton_3 = UIBarButtonItem ( barButtonSystemItem : UIBarButtonItem . SystemItem . done , target : self , action : #selector ( FirstViewController . onClickMyButton ( sender :))) // Bar\u306e\u53f3\u306b\u914d\u7f6e\u3059\u308b\u30dc\u30bf\u30f3\u3092\u914d\u5217\u306b\u683c\u7d0d\u3059\u308b. let myRightButtons : NSArray = [ myBarButton_1 , myBarButton_2 ] // NavigationBar\u306e\u8868\u793a\u3059\u308b. self . navigationController ?. setNavigationBarHidden ( false , animated : false ) // \u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b. self . navigationItem . title = \"Title\" // \u30d7\u30ed\u30f3\u30d7\u30c8\u3092\u8a2d\u5b9a\u3059\u308b. self . navigationItem . prompt = \"Prompt\" // Bar\u306e\u53f3\u5074\u306b\u8907\u6570\u914d\u7f6e\u3059\u308b. self . navigationItem . setRightBarButtonItems ( myRightButtons as ? [ UIBarButtonItem ], animated : true ) // Bar\u306e\u5de6\u5074\u306b\u914d\u7f6e\u3059\u308b. self . navigationItem . setLeftBarButton ( myBarButton_3 , animated : true ) } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8 */ @objc internal func onClickMyButton ( sender : UIButton ){ print ( \"onClickMyButton:\" ) let secondViewController = SecondViewController () self . navigationController ?. pushViewController ( secondViewController , animated : true ) } /* BarButton\u30a4\u30d9\u30f3\u30c8 */ internal func onClickMyBarButton ( sender : UIButton ){ print ( \"onClickMyBarButton:\" ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 // // ViewController.swift // UIKit031_3.0 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class FirstViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // View\u306e\u80cc\u666f\u8272\u3092\u5b9a\u7fa9\u3059\u308b. self . view . backgroundColor = UIColor . cyan // \u30dc\u30bf\u30f3\u3092\u751f\u6210\u3059\u308b. let myButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 100 , height : 50 )) myButton . backgroundColor = UIColor . orange myButton . layer . masksToBounds = true myButton . setTitle ( \"\u30dc\u30bf\u30f3\" , for : . normal ) myButton . layer . cornerRadius = 20.0 myButton . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 200 ) myButton . addTarget ( self , action : #selector ( FirstViewController . onClickMyButton ( sender :)), for : . touchUpInside ) // \u30dc\u30bf\u30f3\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myButton ); // BarButtonItem\u3092\u4f5c\u6210\u3059\u308b. let myBarButton_1 = UIBarButtonItem ( barButtonSystemItem : UIBarButtonSystemItem . camera , target : self , action : #selector ( FirstViewController . onClickMyButton ( sender :))) let myBarButton_2 = UIBarButtonItem ( barButtonSystemItem : UIBarButtonSystemItem . add , target : self , action : #selector ( FirstViewController . onClickMyButton ( sender :))) let myBarButton_3 = UIBarButtonItem ( barButtonSystemItem : UIBarButtonSystemItem . done , target : self , action : #selector ( FirstViewController . onClickMyButton ( sender :))) // Bar\u306e\u53f3\u306b\u914d\u7f6e\u3059\u308b\u30dc\u30bf\u30f3\u3092\u914d\u5217\u306b\u683c\u7d0d\u3059\u308b. let myRightButtons : NSArray = [ myBarButton_1 , myBarButton_2 ] // NavigationBar\u306e\u8868\u793a\u3059\u308b. self . navigationController ?. setNavigationBarHidden ( false , animated : false ) // \u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b. self . navigationItem . title = \"Title\" // \u30d7\u30ed\u30f3\u30d7\u30c8\u3092\u8a2d\u5b9a\u3059\u308b. self . navigationItem . prompt = \"Prompt\" // Bar\u306e\u53f3\u5074\u306b\u8907\u6570\u914d\u7f6e\u3059\u308b. self . navigationItem . setRightBarButtonItems ( myRightButtons as ? [ UIBarButtonItem ], animated : true ) // Bar\u306e\u5de6\u5074\u306b\u914d\u7f6e\u3059\u308b. self . navigationItem . setLeftBarButton ( myBarButton_3 , animated : true ) } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8 */ internal func onClickMyButton ( sender : UIButton ){ print ( \"onClickMyButton:\" ) let secondViewController = SecondViewController () self . navigationController ?. pushViewController ( secondViewController , animated : true ) } /* BarButton\u30a4\u30d9\u30f3\u30c8 */ internal func onClickMyBarButton ( sender : UIButton ){ print ( \"onClickMyBarButton:\" ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 // // ViewController.swift // UIKit031_2.3 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class FirstViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // View\u306e\u80cc\u666f\u8272\u3092\u5b9a\u7fa9\u3059\u308b. self . view . backgroundColor = UIColor . cyanColor () // \u30dc\u30bf\u30f3\u3092\u751f\u6210\u3059\u308b. let myButton = UIButton ( frame : CGRectMake ( 0 , 0 , 100 , 50 )) myButton . backgroundColor = UIColor . orangeColor () myButton . layer . masksToBounds = true myButton . setTitle ( \"\u30dc\u30bf\u30f3\" , forState : . Normal ) myButton . layer . cornerRadius = 20.0 myButton . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 200 ) myButton . addTarget ( self , action : #selector ( FirstViewController . onClickMyButton ( _ :)), forControlEvents : . TouchUpInside ) // \u30dc\u30bf\u30f3\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myButton ); // BarButtonItem\u3092\u4f5c\u6210\u3059\u308b. let myBarButton_1 = UIBarButtonItem ( barButtonSystemItem : UIBarButtonSystemItem . Camera , target : self , action : #selector ( FirstViewController . onClickMyBarButton ( _ :))) let myBarButton_2 = UIBarButtonItem ( barButtonSystemItem : UIBarButtonSystemItem . Add , target : self , action : #selector ( FirstViewController . onClickMyBarButton ( _ :))) let myBarButton_3 = UIBarButtonItem ( barButtonSystemItem : UIBarButtonSystemItem . Done , target : self , action : #selector ( FirstViewController . onClickMyBarButton ( _ :))) // Bar\u306e\u53f3\u306b\u914d\u7f6e\u3059\u308b\u30dc\u30bf\u30f3\u3092\u914d\u5217\u306b\u683c\u7d0d\u3059\u308b. let myRightButtons : NSArray = [ myBarButton_1 , myBarButton_2 ] // NavigationBar\u3092\u53d6\u5f97\u3059\u308b. self . navigationController ?. navigationBar // NavigationBar\u306e\u8868\u793a\u3059\u308b. self . navigationController ?. setNavigationBarHidden ( false , animated : false ) // NavigationItem\u306e\u53d6\u5f97\u3059\u308b. self . navigationItem // \u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b. self . navigationItem . title = \"Title\" // \u30d7\u30ed\u30f3\u30d7\u30c8\u3092\u8a2d\u5b9a\u3059\u308b. self . navigationItem . prompt = \"Prompt\" // Bar\u306e\u53f3\u5074\u306b\u8907\u6570\u914d\u7f6e\u3059\u308b. self . navigationItem . setRightBarButtonItems ( myRightButtons as ? [ UIBarButtonItem ], animated : true ) // Bar\u306e\u5de6\u5074\u306b\u914d\u7f6e\u3059\u308b. self . navigationItem . setLeftBarButtonItem ( myBarButton_3 , animated : true ) } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8 */ internal func onClickMyButton ( sender : UIButton ){ print ( \"onClickMyButton:\" ) let secondViewController = SecondViewController () self . navigationController ?. pushViewController ( secondViewController , animated : true ) } /* BarButton\u30a4\u30d9\u30f3\u30c8 */ internal func onClickMyBarButton ( sender : UIButton ){ print ( \"onClickMyBarButton:\" ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } }","title":"FirstViewController.swift"},{"location":"1.uikit/031_uinavigationitem/#secoundviewcontrollerswift","text":"Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 // // SecoundViewController.swift // UIKit031_4.0 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class SecondViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // Controller\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b. self . title = \"My 2nd View\" // View\u306e\u80cc\u666f\u8272\u3092\u5b9a\u7fa9\u3059\u308b. self . view . backgroundColor = UIColor . green } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 // // SecoundViewController.swift // UIKit031_2.3 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class SecondViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // Controller\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\u3059\u308b. self . title = \"My 2nd View\" // View\u306e\u80cc\u666f\u8272\u3092\u5b9a\u7fa9\u3059\u308b. self . view . backgroundColor = UIColor . greenColor () } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } }","title":"SecoundViewController.swift"},{"location":"1.uikit/031_uinavigationitem/#3040","text":"func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject : AnyObject]?) -> Bool \u304c\u3001 func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]? = nil) -> Bool \u306b\u5909\u66f4 internal func onClickMyButton(sender: UIButton)\u306b@objc\u3092\u8ffd\u52a0 UIBarButtonSystemItem.camera \u304c UIBarButtonItem.SystemItem.camera \u306b\u5909\u66f4 UIBarButtonSystemItem.add \u304c UIBarButtonItem.SystemItem.add \u306b\u5909\u66f4 UIBarButtonSystemItem.done \u304c UIBarButtonItem.SystemItem.done \u306b\u5909\u66f4","title":"3.0\u30684.0\u306e\u5dee\u5206"},{"location":"1.uikit/031_uinavigationitem/#2330","text":"UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u306e\u5ec3\u6b62) UIScreen.mainScreen().bounds \u304c UIScreen.main.bounds \u306b\u5909\u66f4 sender\u306e\u8a18\u8ff0\u65b9\u6cd5\u306e\u5909\u66f4( .onClickMyBarButton(_:) -> .onClickMyButton(sender:) )","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/031_uinavigationitem/#reference","text":"UINavigationItem Class https://developer.apple.com/reference/uikit/uinavigationitem","title":"Reference"},{"location":"1.uikit/032_uialertController/","text":"UIAlertController\u3067ActionSheet\u8868\u793a Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 // // ViewController.swift // UIKit032_4.0 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidAppear ( _ animated : Bool ) { // \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u3000style\u306fActionSheet. let myAlert = UIAlertController ( title : \"\u30bf\u30a4\u30c8\u30eb\" , message : \"message\" , preferredStyle : UIAlertController . Style . actionSheet ) // \u30a2\u30af\u30b7\u30e7\u30f3\u3092\u751f\u6210. let myAction_1 = UIAlertAction ( title : \"Hello\" , style : UIAlertAction . Style . default , handler : { ( action : UIAlertAction !) in print ( \"Hello\" ) }) let myAction_2 = UIAlertAction ( title : \"yes\" , style : UIAlertAction . Style . destructive , handler : { ( action : UIAlertAction !) in print ( \"yes\" ) }) let myAction_3 = UIAlertAction ( title : \"no\" , style : UIAlertAction . Style . cancel , handler : { ( action : UIAlertAction !) in print ( \"no\" ) }) // \u30a2\u30af\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0. myAlert . addAction ( myAction_1 ) myAlert . addAction ( myAction_2 ) myAlert . addAction ( myAction_3 ) self . present ( myAlert , animated : true , completion : nil ) } override func viewDidLoad () { super . viewDidLoad () } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 // // ViewController.swift // UIKit032_3.0 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidAppear ( _ animated : Bool ) { // \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u3000style\u306fActionSheet. let myAlert = UIAlertController ( title : \"\u30bf\u30a4\u30c8\u30eb\" , message : \"message\" , preferredStyle : UIAlertControllerStyle . actionSheet ) // \u30a2\u30af\u30b7\u30e7\u30f3\u3092\u751f\u6210. let myAction_1 = UIAlertAction ( title : \"Hello\" , style : UIAlertActionStyle . default , handler : { ( action : UIAlertAction !) in print ( \"Hello\" ) }) let myAction_2 = UIAlertAction ( title : \"yes\" , style : UIAlertActionStyle . destructive , handler : { ( action : UIAlertAction !) in print ( \"yes\" ) }) let myAction_3 = UIAlertAction ( title : \"no\" , style : UIAlertActionStyle . cancel , handler : { ( action : UIAlertAction !) in print ( \"no\" ) }) // \u30a2\u30af\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0. myAlert . addAction ( myAction_1 ) myAlert . addAction ( myAction_2 ) myAlert . addAction ( myAction_3 ) self . present ( myAlert , animated : true , completion : nil ) } override func viewDidLoad () { super . viewDidLoad () } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 // // ViewController.swift // UIKit032_2.3 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidAppear ( animated : Bool ) { // \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u3000style\u306fActionSheet. let myAlert = UIAlertController ( title : \"\u30bf\u30a4\u30c8\u30eb\" , message : \"message\" , preferredStyle : UIAlertControllerStyle . ActionSheet ) // \u30a2\u30af\u30b7\u30e7\u30f3\u3092\u751f\u6210. let myAction_1 = UIAlertAction ( title : \"Hello\" , style : UIAlertActionStyle . Default , handler : { ( action : UIAlertAction !) in print ( \"Hello\" ) }) let myAction_2 = UIAlertAction ( title : \"yes\" , style : UIAlertActionStyle . Destructive , handler : { ( action : UIAlertAction !) in print ( \"yes\" ) }) let myAction_3 = UIAlertAction ( title : \"no\" , style : UIAlertActionStyle . Cancel , handler : { ( action : UIAlertAction !) in print ( \"no\" ) }) // \u30a2\u30af\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0. myAlert . addAction ( myAction_1 ) myAlert . addAction ( myAction_2 ) myAlert . addAction ( myAction_3 ) self . presentViewController ( myAlert , animated : true , completion : nil ) } override func viewDidLoad () { super . viewDidLoad () } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } 3.x\u30684.x\u306e\u5dee\u5206 UIAlertActionStyle \u304c UIAlertController.Style \u306b\u5909\u66f4 2.3\u30683.0\u306e\u5dee\u5206 UIAlertActionStyle\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u540d\u306e\u5909\u66f4 self.presentViewController \u304c self.present(myAlert, animated: true, completion: nil) \u306b\u5909\u66f4 Reference UIAlertController Class https://developer.apple.com/reference/uikit/uialertcontroller","title":"UIAlertController\u3067ActionSheet\u8868\u793a"},{"location":"1.uikit/032_uialertController/#uialertcontrolleractionsheet","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 // // ViewController.swift // UIKit032_4.0 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidAppear ( _ animated : Bool ) { // \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u3000style\u306fActionSheet. let myAlert = UIAlertController ( title : \"\u30bf\u30a4\u30c8\u30eb\" , message : \"message\" , preferredStyle : UIAlertController . Style . actionSheet ) // \u30a2\u30af\u30b7\u30e7\u30f3\u3092\u751f\u6210. let myAction_1 = UIAlertAction ( title : \"Hello\" , style : UIAlertAction . Style . default , handler : { ( action : UIAlertAction !) in print ( \"Hello\" ) }) let myAction_2 = UIAlertAction ( title : \"yes\" , style : UIAlertAction . Style . destructive , handler : { ( action : UIAlertAction !) in print ( \"yes\" ) }) let myAction_3 = UIAlertAction ( title : \"no\" , style : UIAlertAction . Style . cancel , handler : { ( action : UIAlertAction !) in print ( \"no\" ) }) // \u30a2\u30af\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0. myAlert . addAction ( myAction_1 ) myAlert . addAction ( myAction_2 ) myAlert . addAction ( myAction_3 ) self . present ( myAlert , animated : true , completion : nil ) } override func viewDidLoad () { super . viewDidLoad () } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 // // ViewController.swift // UIKit032_3.0 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidAppear ( _ animated : Bool ) { // \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u3000style\u306fActionSheet. let myAlert = UIAlertController ( title : \"\u30bf\u30a4\u30c8\u30eb\" , message : \"message\" , preferredStyle : UIAlertControllerStyle . actionSheet ) // \u30a2\u30af\u30b7\u30e7\u30f3\u3092\u751f\u6210. let myAction_1 = UIAlertAction ( title : \"Hello\" , style : UIAlertActionStyle . default , handler : { ( action : UIAlertAction !) in print ( \"Hello\" ) }) let myAction_2 = UIAlertAction ( title : \"yes\" , style : UIAlertActionStyle . destructive , handler : { ( action : UIAlertAction !) in print ( \"yes\" ) }) let myAction_3 = UIAlertAction ( title : \"no\" , style : UIAlertActionStyle . cancel , handler : { ( action : UIAlertAction !) in print ( \"no\" ) }) // \u30a2\u30af\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0. myAlert . addAction ( myAction_1 ) myAlert . addAction ( myAction_2 ) myAlert . addAction ( myAction_3 ) self . present ( myAlert , animated : true , completion : nil ) } override func viewDidLoad () { super . viewDidLoad () } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 // // ViewController.swift // UIKit032_2.3 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidAppear ( animated : Bool ) { // \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u3000style\u306fActionSheet. let myAlert = UIAlertController ( title : \"\u30bf\u30a4\u30c8\u30eb\" , message : \"message\" , preferredStyle : UIAlertControllerStyle . ActionSheet ) // \u30a2\u30af\u30b7\u30e7\u30f3\u3092\u751f\u6210. let myAction_1 = UIAlertAction ( title : \"Hello\" , style : UIAlertActionStyle . Default , handler : { ( action : UIAlertAction !) in print ( \"Hello\" ) }) let myAction_2 = UIAlertAction ( title : \"yes\" , style : UIAlertActionStyle . Destructive , handler : { ( action : UIAlertAction !) in print ( \"yes\" ) }) let myAction_3 = UIAlertAction ( title : \"no\" , style : UIAlertActionStyle . Cancel , handler : { ( action : UIAlertAction !) in print ( \"no\" ) }) // \u30a2\u30af\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0. myAlert . addAction ( myAction_1 ) myAlert . addAction ( myAction_2 ) myAlert . addAction ( myAction_3 ) self . presentViewController ( myAlert , animated : true , completion : nil ) } override func viewDidLoad () { super . viewDidLoad () } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } }","title":"UIAlertController\u3067ActionSheet\u8868\u793a"},{"location":"1.uikit/032_uialertController/#3x4x","text":"UIAlertActionStyle \u304c UIAlertController.Style \u306b\u5909\u66f4","title":"3.x\u30684.x\u306e\u5dee\u5206"},{"location":"1.uikit/032_uialertController/#2330","text":"UIAlertActionStyle\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u540d\u306e\u5909\u66f4 self.presentViewController \u304c self.present(myAlert, animated: true, completion: nil) \u306b\u5909\u66f4","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/032_uialertController/#reference","text":"UIAlertController Class https://developer.apple.com/reference/uikit/uialertcontroller","title":"Reference"},{"location":"1.uikit/033_uimenucontroller/","text":"UIMenuController\u306bMenuItem\u3092\u8ffd\u52a0 Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 // // ViewController.swift // UIKit033_4.0 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UITextFieldDelegate { override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u9752\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . cyan // TextField\u4f5c\u6210. let myTextField : UITextField = UITextField ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 30 )) myTextField . text = \"Hello Swift!\" myTextField . delegate = self myTextField . borderStyle = UITextField . BorderStyle . roundedRect myTextField . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : 100 ) // TextField\u3092view\u306b\u8ffd\u52a0. self . view . addSubview ( myTextField ) // MenuController\u751f\u6210. let myMenuController : UIMenuController = UIMenuController . shared // MenuController\u3092\u8868\u793a. myMenuController . isMenuVisible = true // \u77e2\u5370\u306e\u5411\u304d\u3092\u4e0b\u306b\u8a2d\u5b9a. myMenuController . arrowDirection = UIMenuController . ArrowDirection . down // rect\u3001view\u3092\u8a2d\u5b9a. myMenuController . setTargetRect ( CGRect . zero , in : self . view ) // MenuItem\u751f\u6210. let myMenuItem_1 : UIMenuItem = UIMenuItem ( title : \"Menu1\" , action : #selector ( ViewController . onMenu1 ( sender :))) let myMenuItem_2 : UIMenuItem = UIMenuItem ( title : \"Menu2\" , action : #selector ( ViewController . onMenu2 ( sender :))) let myMenuItem_3 : UIMenuItem = UIMenuItem ( title : \"Menu3\" , action : #selector ( ViewController . onMenu3 ( sender :))) // MenuItem\u3092\u914d\u5217\u306b\u683c\u7d0d. let myMenuItems : NSArray = [ myMenuItem_1 , myMenuItem_2 , myMenuItem_3 ] // MenuController\u306bMenuItem\u3092\u8ffd\u52a0. myMenuController . menuItems = myMenuItems as ? [ UIMenuItem ] } /* UITextField\u304c\u7de8\u96c6\u958b\u59cb\u3055\u308c\u305f\u76f4\u5f8c\u306b\u547c\u3070\u308c\u308b. */ func textFieldDidBeginEditing ( _ textField : UITextField ) { print ( \"textFieldDidBeginEditing:\" + textField . text !) } /* UITextField\u304c\u7de8\u96c6\u7d42\u4e86\u3059\u308b\u76f4\u524d\u306b\u547c\u3070\u308c\u308b. */ func textFieldShouldEndEditing ( _ textField : UITextField ) -> Bool { print ( \"textFieldShouldEndEditing:\" + textField . text !) return true } /* \u4f5c\u6210\u3057\u305fMenuItem\u304c\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306b\u3059\u308b. */ override func canPerformAction ( _ action : Selector , withSender sender : Any ?) -> Bool { if action == #selector ( ViewController . onMenu1 ( sender :)) || action == #selector ( ViewController . onMenu2 ( sender :)) || action == #selector ( ViewController . onMenu3 ( sender :)) { return true } return false } /* \u4f5c\u6210\u3057\u305fMenuItem\u304c\u62bc\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ @objc internal func onMenu1 ( sender : UIMenuItem ) { print ( \"onMenu1\" ) } @objc internal func onMenu2 ( sender : UIMenuItem ) { print ( \"onMenu2\" ) } @objc internal func onMenu3 ( sender : UIMenuItem ) { print ( \"onMenu3\" ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 // // ViewController.swift // UIKit033_3.0 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UITextFieldDelegate { override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u9752\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . cyan // TextField\u4f5c\u6210. let myTextField : UITextField = UITextField ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 30 )) myTextField . text = \"Hello Swift!\" myTextField . delegate = self myTextField . borderStyle = UITextBorderStyle . roundedRect myTextField . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : 100 ) // TextField\u3092view\u306b\u8ffd\u52a0. self . view . addSubview ( myTextField ) // MenuController\u751f\u6210. let myMenuController : UIMenuController = UIMenuController . shared // MenuController\u3092\u8868\u793a. myMenuController . isMenuVisible = true // \u77e2\u5370\u306e\u5411\u304d\u3092\u4e0b\u306b\u8a2d\u5b9a. myMenuController . arrowDirection = UIMenuControllerArrowDirection . down // rect\u3001view\u3092\u8a2d\u5b9a. myMenuController . setTargetRect ( CGRect . zero , in : self . view ) // MenuItem\u751f\u6210. let myMenuItem_1 : UIMenuItem = UIMenuItem ( title : \"Menu1\" , action : #selector ( ViewController . onMenu1 ( sender :))) let myMenuItem_2 : UIMenuItem = UIMenuItem ( title : \"Menu2\" , action : #selector ( ViewController . onMenu2 ( sender :))) let myMenuItem_3 : UIMenuItem = UIMenuItem ( title : \"Menu3\" , action : #selector ( ViewController . onMenu3 ( sender :))) // MenuItem\u3092\u914d\u5217\u306b\u683c\u7d0d. let myMenuItems : NSArray = [ myMenuItem_1 , myMenuItem_2 , myMenuItem_3 ] // MenuController\u306bMenuItem\u3092\u8ffd\u52a0. myMenuController . menuItems = myMenuItems as ? [ UIMenuItem ] } /* UITextField\u304c\u7de8\u96c6\u958b\u59cb\u3055\u308c\u305f\u76f4\u5f8c\u306b\u547c\u3070\u308c\u308b. */ func textFieldDidBeginEditing ( _ textField : UITextField ) { print ( \"textFieldDidBeginEditing:\" + textField . text !) } /* UITextField\u304c\u7de8\u96c6\u7d42\u4e86\u3059\u308b\u76f4\u524d\u306b\u547c\u3070\u308c\u308b. */ func textFieldShouldEndEditing ( _ textField : UITextField ) -> Bool { print ( \"textFieldShouldEndEditing:\" + textField . text !) return true } /* \u4f5c\u6210\u3057\u305fMenuItem\u304c\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306b\u3059\u308b. */ override func canPerformAction ( _ action : Selector , withSender sender : AnyObject !) -> Bool { if action == #selector ( ViewController . onMenu1 ( sender :)) || action == #selector ( ViewController . onMenu2 ( sender :)) || action == #selector ( ViewController . onMenu3 ( sender :)) { return true } return false } /* \u4f5c\u6210\u3057\u305fMenuItem\u304c\u62bc\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ internal func onMenu1 ( sender : UIMenuItem ) { print ( \"onMenu1\" ) } internal func onMenu2 ( sender : UIMenuItem ) { print ( \"onMenu2\" ) } internal func onMenu3 ( sender : UIMenuItem ) { print ( \"onMenu3\" ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 // // ViewController.swift // UIKit033_2.3 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UITextFieldDelegate { override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u9752\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . cyanColor () // TextField\u4f5c\u6210. let myTextField : UITextField = UITextField ( frame : CGRectMake ( 0 , 0 , 200 , 30 )) myTextField . text = \"Hello Swift!\" myTextField . delegate = self myTextField . borderStyle = UITextBorderStyle . RoundedRect myTextField . layer . position = CGPointMake ( self . view . frame . width / 2 , 100 ) // TextField\u3092view\u306b\u8ffd\u52a0. self . view . addSubview ( myTextField ) // MenuController\u751f\u6210. let myMenuController : UIMenuController = UIMenuController . sharedMenuController () // MenuController\u3092\u8868\u793a. myMenuController . menuVisible = true // \u77e2\u5370\u306e\u5411\u304d\u3092\u4e0b\u306b\u8a2d\u5b9a. myMenuController . arrowDirection = UIMenuControllerArrowDirection . Down // rect\u3001view\u3092\u8a2d\u5b9a. myMenuController . setTargetRect ( CGRectZero , inView : self . view ) // MenuItem\u751f\u6210. let myMenuItem_1 : UIMenuItem = UIMenuItem ( title : \"Menu1\" , action : #selector ( ViewController . onMenu1 ( _ :))) let myMenuItem_2 : UIMenuItem = UIMenuItem ( title : \"Menu2\" , action : #selector ( ViewController . onMenu2 ( _ :))) let myMenuItem_3 : UIMenuItem = UIMenuItem ( title : \"Menu3\" , action : #selector ( ViewController . onMenu3 ( _ :))) // MenuItem\u3092\u914d\u5217\u306b\u683c\u7d0d. let myMenuItems : NSArray = [ myMenuItem_1 , myMenuItem_2 , myMenuItem_3 ] // MenuController\u306bMenuItem\u3092\u8ffd\u52a0. myMenuController . menuItems = myMenuItems as ? [ UIMenuItem ] } /* UITextField\u304c\u7de8\u96c6\u958b\u59cb\u3055\u308c\u305f\u76f4\u5f8c\u306b\u547c\u3070\u308c\u308b. */ func textFieldDidBeginEditing ( textField : UITextField ) { print ( \"textFieldDidBeginEditing:\" + textField . text !) } /* UITextField\u304c\u7de8\u96c6\u7d42\u4e86\u3059\u308b\u76f4\u524d\u306b\u547c\u3070\u308c\u308b. */ func textFieldShouldEndEditing ( textField : UITextField ) -> Bool { print ( \"textFieldShouldEndEditing:\" + textField . text !) return true } /* \u4f5c\u6210\u3057\u305fMenuItem\u304c\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306b\u3059\u308b. */ override func canPerformAction ( action : Selector , withSender sender : AnyObject !) -> Bool { if action == #selector ( ViewController . onMenu1 ( _ :)) || action == #selector ( ViewController . onMenu2 ( _ :)) || action == #selector ( ViewController . onMenu3 ( _ :)) { return true } return false } /* \u4f5c\u6210\u3057\u305fMenuItem\u304c\u62bc\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ internal func onMenu1 ( sender : UIMenuItem ) { print ( \"onMenu1\" ) } internal func onMenu2 ( sender : UIMenuItem ) { print ( \"onMenu2\" ) } internal func onMenu3 ( sender : UIMenuItem ) { print ( \"onMenu3\" ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } 3.x\u30684.x\u306e\u5dee\u5206 UITextBorderStyle \u304c UITextField.BorderStyle \u306b\u5909\u66f4 UIMenuControllerArrowDirection \u304c UIMenuController.ArrowDirection \u306b\u5909\u66f4 internal func onMenu \u306e 1~3 \u306b @objc \u3092\u8ffd\u52a0 2.3\u30683.0\u306e\u5dee\u5206 UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u306e\u5ec3\u6b62) UIMenuController\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u540d\u3001\u30e1\u30bd\u30c3\u30c9\u540d\u304c\u4e00\u90e8\u5909\u66f4( sharedMenuController() -> shared ) UITextFieldDelegate\u306e\u30c7\u30ea\u30b2\u30fc\u30c8\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u304c\u5909\u5316 CGRectZero \u304c CGRect.zero \u306b\u5909\u66f4 Reference UIMenuController Class https://developer.apple.com/reference/uikit/uimenucontroller UIMenuItem Class https://developer.apple.com/reference/uikit/uimenuitem","title":"UIMenuController\u306bMenuItem\u3092\u8ffd\u52a0"},{"location":"1.uikit/033_uimenucontroller/#uimenucontrollermenuitem","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 // // ViewController.swift // UIKit033_4.0 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UITextFieldDelegate { override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u9752\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . cyan // TextField\u4f5c\u6210. let myTextField : UITextField = UITextField ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 30 )) myTextField . text = \"Hello Swift!\" myTextField . delegate = self myTextField . borderStyle = UITextField . BorderStyle . roundedRect myTextField . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : 100 ) // TextField\u3092view\u306b\u8ffd\u52a0. self . view . addSubview ( myTextField ) // MenuController\u751f\u6210. let myMenuController : UIMenuController = UIMenuController . shared // MenuController\u3092\u8868\u793a. myMenuController . isMenuVisible = true // \u77e2\u5370\u306e\u5411\u304d\u3092\u4e0b\u306b\u8a2d\u5b9a. myMenuController . arrowDirection = UIMenuController . ArrowDirection . down // rect\u3001view\u3092\u8a2d\u5b9a. myMenuController . setTargetRect ( CGRect . zero , in : self . view ) // MenuItem\u751f\u6210. let myMenuItem_1 : UIMenuItem = UIMenuItem ( title : \"Menu1\" , action : #selector ( ViewController . onMenu1 ( sender :))) let myMenuItem_2 : UIMenuItem = UIMenuItem ( title : \"Menu2\" , action : #selector ( ViewController . onMenu2 ( sender :))) let myMenuItem_3 : UIMenuItem = UIMenuItem ( title : \"Menu3\" , action : #selector ( ViewController . onMenu3 ( sender :))) // MenuItem\u3092\u914d\u5217\u306b\u683c\u7d0d. let myMenuItems : NSArray = [ myMenuItem_1 , myMenuItem_2 , myMenuItem_3 ] // MenuController\u306bMenuItem\u3092\u8ffd\u52a0. myMenuController . menuItems = myMenuItems as ? [ UIMenuItem ] } /* UITextField\u304c\u7de8\u96c6\u958b\u59cb\u3055\u308c\u305f\u76f4\u5f8c\u306b\u547c\u3070\u308c\u308b. */ func textFieldDidBeginEditing ( _ textField : UITextField ) { print ( \"textFieldDidBeginEditing:\" + textField . text !) } /* UITextField\u304c\u7de8\u96c6\u7d42\u4e86\u3059\u308b\u76f4\u524d\u306b\u547c\u3070\u308c\u308b. */ func textFieldShouldEndEditing ( _ textField : UITextField ) -> Bool { print ( \"textFieldShouldEndEditing:\" + textField . text !) return true } /* \u4f5c\u6210\u3057\u305fMenuItem\u304c\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306b\u3059\u308b. */ override func canPerformAction ( _ action : Selector , withSender sender : Any ?) -> Bool { if action == #selector ( ViewController . onMenu1 ( sender :)) || action == #selector ( ViewController . onMenu2 ( sender :)) || action == #selector ( ViewController . onMenu3 ( sender :)) { return true } return false } /* \u4f5c\u6210\u3057\u305fMenuItem\u304c\u62bc\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ @objc internal func onMenu1 ( sender : UIMenuItem ) { print ( \"onMenu1\" ) } @objc internal func onMenu2 ( sender : UIMenuItem ) { print ( \"onMenu2\" ) } @objc internal func onMenu3 ( sender : UIMenuItem ) { print ( \"onMenu3\" ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 // // ViewController.swift // UIKit033_3.0 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UITextFieldDelegate { override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u9752\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . cyan // TextField\u4f5c\u6210. let myTextField : UITextField = UITextField ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 30 )) myTextField . text = \"Hello Swift!\" myTextField . delegate = self myTextField . borderStyle = UITextBorderStyle . roundedRect myTextField . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : 100 ) // TextField\u3092view\u306b\u8ffd\u52a0. self . view . addSubview ( myTextField ) // MenuController\u751f\u6210. let myMenuController : UIMenuController = UIMenuController . shared // MenuController\u3092\u8868\u793a. myMenuController . isMenuVisible = true // \u77e2\u5370\u306e\u5411\u304d\u3092\u4e0b\u306b\u8a2d\u5b9a. myMenuController . arrowDirection = UIMenuControllerArrowDirection . down // rect\u3001view\u3092\u8a2d\u5b9a. myMenuController . setTargetRect ( CGRect . zero , in : self . view ) // MenuItem\u751f\u6210. let myMenuItem_1 : UIMenuItem = UIMenuItem ( title : \"Menu1\" , action : #selector ( ViewController . onMenu1 ( sender :))) let myMenuItem_2 : UIMenuItem = UIMenuItem ( title : \"Menu2\" , action : #selector ( ViewController . onMenu2 ( sender :))) let myMenuItem_3 : UIMenuItem = UIMenuItem ( title : \"Menu3\" , action : #selector ( ViewController . onMenu3 ( sender :))) // MenuItem\u3092\u914d\u5217\u306b\u683c\u7d0d. let myMenuItems : NSArray = [ myMenuItem_1 , myMenuItem_2 , myMenuItem_3 ] // MenuController\u306bMenuItem\u3092\u8ffd\u52a0. myMenuController . menuItems = myMenuItems as ? [ UIMenuItem ] } /* UITextField\u304c\u7de8\u96c6\u958b\u59cb\u3055\u308c\u305f\u76f4\u5f8c\u306b\u547c\u3070\u308c\u308b. */ func textFieldDidBeginEditing ( _ textField : UITextField ) { print ( \"textFieldDidBeginEditing:\" + textField . text !) } /* UITextField\u304c\u7de8\u96c6\u7d42\u4e86\u3059\u308b\u76f4\u524d\u306b\u547c\u3070\u308c\u308b. */ func textFieldShouldEndEditing ( _ textField : UITextField ) -> Bool { print ( \"textFieldShouldEndEditing:\" + textField . text !) return true } /* \u4f5c\u6210\u3057\u305fMenuItem\u304c\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306b\u3059\u308b. */ override func canPerformAction ( _ action : Selector , withSender sender : AnyObject !) -> Bool { if action == #selector ( ViewController . onMenu1 ( sender :)) || action == #selector ( ViewController . onMenu2 ( sender :)) || action == #selector ( ViewController . onMenu3 ( sender :)) { return true } return false } /* \u4f5c\u6210\u3057\u305fMenuItem\u304c\u62bc\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ internal func onMenu1 ( sender : UIMenuItem ) { print ( \"onMenu1\" ) } internal func onMenu2 ( sender : UIMenuItem ) { print ( \"onMenu2\" ) } internal func onMenu3 ( sender : UIMenuItem ) { print ( \"onMenu3\" ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 // // ViewController.swift // UIKit033_2.3 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UITextFieldDelegate { override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u9752\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . cyanColor () // TextField\u4f5c\u6210. let myTextField : UITextField = UITextField ( frame : CGRectMake ( 0 , 0 , 200 , 30 )) myTextField . text = \"Hello Swift!\" myTextField . delegate = self myTextField . borderStyle = UITextBorderStyle . RoundedRect myTextField . layer . position = CGPointMake ( self . view . frame . width / 2 , 100 ) // TextField\u3092view\u306b\u8ffd\u52a0. self . view . addSubview ( myTextField ) // MenuController\u751f\u6210. let myMenuController : UIMenuController = UIMenuController . sharedMenuController () // MenuController\u3092\u8868\u793a. myMenuController . menuVisible = true // \u77e2\u5370\u306e\u5411\u304d\u3092\u4e0b\u306b\u8a2d\u5b9a. myMenuController . arrowDirection = UIMenuControllerArrowDirection . Down // rect\u3001view\u3092\u8a2d\u5b9a. myMenuController . setTargetRect ( CGRectZero , inView : self . view ) // MenuItem\u751f\u6210. let myMenuItem_1 : UIMenuItem = UIMenuItem ( title : \"Menu1\" , action : #selector ( ViewController . onMenu1 ( _ :))) let myMenuItem_2 : UIMenuItem = UIMenuItem ( title : \"Menu2\" , action : #selector ( ViewController . onMenu2 ( _ :))) let myMenuItem_3 : UIMenuItem = UIMenuItem ( title : \"Menu3\" , action : #selector ( ViewController . onMenu3 ( _ :))) // MenuItem\u3092\u914d\u5217\u306b\u683c\u7d0d. let myMenuItems : NSArray = [ myMenuItem_1 , myMenuItem_2 , myMenuItem_3 ] // MenuController\u306bMenuItem\u3092\u8ffd\u52a0. myMenuController . menuItems = myMenuItems as ? [ UIMenuItem ] } /* UITextField\u304c\u7de8\u96c6\u958b\u59cb\u3055\u308c\u305f\u76f4\u5f8c\u306b\u547c\u3070\u308c\u308b. */ func textFieldDidBeginEditing ( textField : UITextField ) { print ( \"textFieldDidBeginEditing:\" + textField . text !) } /* UITextField\u304c\u7de8\u96c6\u7d42\u4e86\u3059\u308b\u76f4\u524d\u306b\u547c\u3070\u308c\u308b. */ func textFieldShouldEndEditing ( textField : UITextField ) -> Bool { print ( \"textFieldShouldEndEditing:\" + textField . text !) return true } /* \u4f5c\u6210\u3057\u305fMenuItem\u304c\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306b\u3059\u308b. */ override func canPerformAction ( action : Selector , withSender sender : AnyObject !) -> Bool { if action == #selector ( ViewController . onMenu1 ( _ :)) || action == #selector ( ViewController . onMenu2 ( _ :)) || action == #selector ( ViewController . onMenu3 ( _ :)) { return true } return false } /* \u4f5c\u6210\u3057\u305fMenuItem\u304c\u62bc\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ internal func onMenu1 ( sender : UIMenuItem ) { print ( \"onMenu1\" ) } internal func onMenu2 ( sender : UIMenuItem ) { print ( \"onMenu2\" ) } internal func onMenu3 ( sender : UIMenuItem ) { print ( \"onMenu3\" ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } }","title":"UIMenuController\u306bMenuItem\u3092\u8ffd\u52a0"},{"location":"1.uikit/033_uimenucontroller/#3x4x","text":"UITextBorderStyle \u304c UITextField.BorderStyle \u306b\u5909\u66f4 UIMenuControllerArrowDirection \u304c UIMenuController.ArrowDirection \u306b\u5909\u66f4 internal func onMenu \u306e 1~3 \u306b @objc \u3092\u8ffd\u52a0","title":"3.x\u30684.x\u306e\u5dee\u5206"},{"location":"1.uikit/033_uimenucontroller/#2330","text":"UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u306e\u5ec3\u6b62) UIMenuController\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u540d\u3001\u30e1\u30bd\u30c3\u30c9\u540d\u304c\u4e00\u90e8\u5909\u66f4( sharedMenuController() -> shared ) UITextFieldDelegate\u306e\u30c7\u30ea\u30b2\u30fc\u30c8\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u304c\u5909\u5316 CGRectZero \u304c CGRect.zero \u306b\u5909\u66f4","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/033_uimenucontroller/#reference","text":"UIMenuController Class https://developer.apple.com/reference/uikit/uimenucontroller UIMenuItem Class https://developer.apple.com/reference/uikit/uimenuitem","title":"Reference"},{"location":"1.uikit/034_uimotioneffect/","text":"UIView\u306bUIMotionEffect\u3092\u8ffd\u52a0 Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 // // ViewController.swift // UIKit034_4.0 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () self . view . backgroundColor = UIColor . cyan // UIView\u3092\u4f5c\u6210. let myBox = UIView ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 200 )) myBox . backgroundColor = UIColor . black myBox . layer . masksToBounds = true myBox . layer . cornerRadius = 20.0 myBox . layer . position = self . view . center myBox . layer . zPosition = 1 self . view . addSubview ( myBox ) // Label\u3092\u4f5c\u6210. let myLabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 200 )) myLabel . backgroundColor = UIColor . gray myLabel . layer . masksToBounds = true myLabel . layer . cornerRadius = 20.0 myLabel . text = \"Hello Swift!!\" myLabel . textColor = UIColor . white myLabel . shadowColor = UIColor . gray myLabel . textAlignment = NSTextAlignment . center myLabel . layer . position = self . view . center myLabel . layer . zPosition = 2 self . view . addSubview ( myLabel ) //\u7aef\u672b\u306e\uff58\u8ef8\u65b9\u5411\u306e\u50be\u304d\u306b\u5fdc\u3058\u3066myBox\u306e\u4f4d\u7f6e\u3092\u5909\u3048\u308b\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4f5c\u6210. let xAxis1 = UIInterpolatingMotionEffect ( keyPath : \"center.x\" , type : UIInterpolatingMotionEffect . EffectType . tiltAlongHorizontalAxis ) xAxis1 . minimumRelativeValue = - 100.0 xAxis1 . maximumRelativeValue = 100.0 //\u7aef\u672b\u306ey\u8ef8\u65b9\u5411\u306e\u50be\u304d\u306b\u5fdc\u3058\u3066myBox\u306e\u4f4d\u7f6e\u3092\u5909\u3048\u308b\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4f5c\u6210. let yAxis1 = UIInterpolatingMotionEffect ( keyPath : \"center.y\" , type : UIInterpolatingMotionEffect . EffectType . tiltAlongVerticalAxis ) yAxis1 . minimumRelativeValue = - 100.0 yAxis1 . maximumRelativeValue = 100.0 //\u30e2\u30fc\u30b7\u30e7\u30f3\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u30b0\u30eb\u30fc\u30d7\u3092\u4f5c\u6210. let group1 = UIMotionEffectGroup () group1 . motionEffects = [ xAxis1 , yAxis1 ] //\u7aef\u672b\u306e\uff58\u8ef8\u65b9\u5411\u306e\u50be\u304d\u306b\u5fdc\u3058\u3066myLabel\u306e\u4f4d\u7f6e\u3092\u5909\u3048\u308b\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4f5c\u6210. let xAxis = UIInterpolatingMotionEffect ( keyPath : \"center.x\" , type : UIInterpolatingMotionEffect . EffectType . tiltAlongHorizontalAxis ) xAxis . minimumRelativeValue = - 50.0 xAxis . maximumRelativeValue = 50.0 //\u7aef\u672b\u306ey\u8ef8\u65b9\u5411\u306e\u50be\u304d\u306b\u5fdc\u3058\u3066myLabel\u306e\u4f4d\u7f6e\u3092\u5909\u3048\u308b\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4f5c\u6210. let yAxis = UIInterpolatingMotionEffect ( keyPath : \"center.y\" , type : UIInterpolatingMotionEffect . EffectType . tiltAlongVerticalAxis ) yAxis . minimumRelativeValue = - 50.0 yAxis . maximumRelativeValue = 50.0 //\u30e2\u30fc\u30b7\u30e7\u30f3\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u30b0\u30eb\u30fc\u30d7\u3092\u4f5c\u6210. let group = UIMotionEffectGroup () group . motionEffects = [ xAxis , yAxis ] //myLabel\u306b\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u9069\u7528\u3055\u305b\u308b. myBox . addMotionEffect ( group ) myLabel . addMotionEffect ( group1 ) } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 // // ViewController.swift // UIKit034_3.0 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () self . view . backgroundColor = UIColor . cyan // UIView\u3092\u4f5c\u6210. let myBox = UIView ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 200 )) myBox . backgroundColor = UIColor . black myBox . layer . masksToBounds = true myBox . layer . cornerRadius = 20.0 myBox . layer . position = self . view . center myBox . layer . zPosition = 1 self . view . addSubview ( myBox ) // Label\u3092\u4f5c\u6210. let myLabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 200 )) myLabel . backgroundColor = UIColor . gray myLabel . layer . masksToBounds = true myLabel . layer . cornerRadius = 20.0 myLabel . text = \"Hello Swift!!\" myLabel . textColor = UIColor . white myLabel . shadowColor = UIColor . gray myLabel . textAlignment = NSTextAlignment . center myLabel . layer . position = self . view . center myLabel . layer . zPosition = 2 self . view . addSubview ( myLabel ) //\u7aef\u672b\u306e\uff58\u8ef8\u65b9\u5411\u306e\u50be\u304d\u306b\u5fdc\u3058\u3066myBox\u306e\u4f4d\u7f6e\u3092\u5909\u3048\u308b\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4f5c\u6210. let xAxis1 = UIInterpolatingMotionEffect ( keyPath : \"center.x\" , type : UIInterpolatingMotionEffectType . tiltAlongHorizontalAxis ) xAxis1 . minimumRelativeValue = - 100.0 xAxis1 . maximumRelativeValue = 100.0 //\u7aef\u672b\u306ey\u8ef8\u65b9\u5411\u306e\u50be\u304d\u306b\u5fdc\u3058\u3066myBox\u306e\u4f4d\u7f6e\u3092\u5909\u3048\u308b\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4f5c\u6210. let yAxis1 = UIInterpolatingMotionEffect ( keyPath : \"center.y\" , type : UIInterpolatingMotionEffectType . tiltAlongVerticalAxis ) yAxis1 . minimumRelativeValue = - 100.0 yAxis1 . maximumRelativeValue = 100.0 //\u30e2\u30fc\u30b7\u30e7\u30f3\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u30b0\u30eb\u30fc\u30d7\u3092\u4f5c\u6210. let group1 = UIMotionEffectGroup () group1 . motionEffects = [ xAxis1 , yAxis1 ] //\u7aef\u672b\u306e\uff58\u8ef8\u65b9\u5411\u306e\u50be\u304d\u306b\u5fdc\u3058\u3066myLabel\u306e\u4f4d\u7f6e\u3092\u5909\u3048\u308b\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4f5c\u6210. let xAxis = UIInterpolatingMotionEffect ( keyPath : \"center.x\" , type : UIInterpolatingMotionEffectType . tiltAlongHorizontalAxis ) xAxis . minimumRelativeValue = - 50.0 xAxis . maximumRelativeValue = 50.0 //\u7aef\u672b\u306ey\u8ef8\u65b9\u5411\u306e\u50be\u304d\u306b\u5fdc\u3058\u3066myLabel\u306e\u4f4d\u7f6e\u3092\u5909\u3048\u308b\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4f5c\u6210. let yAxis = UIInterpolatingMotionEffect ( keyPath : \"center.y\" , type : UIInterpolatingMotionEffectType . tiltAlongVerticalAxis ) yAxis . minimumRelativeValue = - 50.0 yAxis . maximumRelativeValue = 50.0 //\u30e2\u30fc\u30b7\u30e7\u30f3\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u30b0\u30eb\u30fc\u30d7\u3092\u4f5c\u6210. let group = UIMotionEffectGroup () group . motionEffects = [ xAxis , yAxis ] //myLabel\u306b\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u9069\u7528\u3055\u305b\u308b. myBox . addMotionEffect ( group ) myLabel . addMotionEffect ( group1 ) } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 // // ViewController.swift // UIKit034_2.3 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () self . view . backgroundColor = UIColor . cyanColor () // UIView\u3092\u4f5c\u6210. let myBox = UIView ( frame : CGRectMake ( 0 , 0 , 200 , 200 )) myBox . backgroundColor = UIColor . blackColor () myBox . layer . masksToBounds = true myBox . layer . cornerRadius = 20.0 myBox . layer . position = self . view . center myBox . layer . zPosition = 1 self . view . addSubview ( myBox ) // Label\u3092\u4f5c\u6210. let myLabel = UILabel ( frame : CGRectMake ( 0 , 0 , 200 , 200 )) myLabel . backgroundColor = UIColor . grayColor () myLabel . layer . masksToBounds = true myLabel . layer . cornerRadius = 20.0 myLabel . text = \"Hello Swift!!\" myLabel . textColor = UIColor . whiteColor () myLabel . shadowColor = UIColor . grayColor () myLabel . textAlignment = NSTextAlignment . Center myLabel . layer . position = self . view . center myLabel . layer . zPosition = 2 self . view . addSubview ( myLabel ) //\u7aef\u672b\u306e\uff58\u8ef8\u65b9\u5411\u306e\u50be\u304d\u306b\u5fdc\u3058\u3066myBox\u306e\u4f4d\u7f6e\u3092\u5909\u3048\u308b\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4f5c\u6210. let xAxis1 = UIInterpolatingMotionEffect ( keyPath : \"center.x\" , type : UIInterpolatingMotionEffectType . TiltAlongHorizontalAxis ) xAxis1 . minimumRelativeValue = - 100.0 xAxis1 . maximumRelativeValue = 100.0 //\u7aef\u672b\u306ey\u8ef8\u65b9\u5411\u306e\u50be\u304d\u306b\u5fdc\u3058\u3066myBox\u306e\u4f4d\u7f6e\u3092\u5909\u3048\u308b\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4f5c\u6210. let yAxis1 = UIInterpolatingMotionEffect ( keyPath : \"center.y\" , type : UIInterpolatingMotionEffectType . TiltAlongVerticalAxis ) yAxis1 . minimumRelativeValue = - 100.0 yAxis1 . maximumRelativeValue = 100.0 //\u30e2\u30fc\u30b7\u30e7\u30f3\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u30b0\u30eb\u30fc\u30d7\u3092\u4f5c\u6210. let group1 = UIMotionEffectGroup () group1 . motionEffects = [ xAxis1 , yAxis1 ] //\u7aef\u672b\u306e\uff58\u8ef8\u65b9\u5411\u306e\u50be\u304d\u306b\u5fdc\u3058\u3066myLabel\u306e\u4f4d\u7f6e\u3092\u5909\u3048\u308b\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4f5c\u6210. let xAxis = UIInterpolatingMotionEffect ( keyPath : \"center.x\" , type : UIInterpolatingMotionEffectType . TiltAlongHorizontalAxis ) xAxis . minimumRelativeValue = - 50.0 xAxis . maximumRelativeValue = 50.0 //\u7aef\u672b\u306ey\u8ef8\u65b9\u5411\u306e\u50be\u304d\u306b\u5fdc\u3058\u3066myLabel\u306e\u4f4d\u7f6e\u3092\u5909\u3048\u308b\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4f5c\u6210. let yAxis = UIInterpolatingMotionEffect ( keyPath : \"center.y\" , type : UIInterpolatingMotionEffectType . TiltAlongVerticalAxis ) yAxis . minimumRelativeValue = - 50.0 yAxis . maximumRelativeValue = 50.0 //\u30e2\u30fc\u30b7\u30e7\u30f3\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u30b0\u30eb\u30fc\u30d7\u3092\u4f5c\u6210. let group = UIMotionEffectGroup () group . motionEffects = [ xAxis , yAxis ] //myLabel\u306b\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u9069\u7528\u3055\u305b\u308b. myBox . addMotionEffect ( group ) myLabel . addMotionEffect ( group1 ) } } 3.x\u30684.x\u306e\u5dee\u5206 UIInterpolatingMotionEffectType \u304c UIInterpolatingMotionEffect.EffectType \u306b\u5909\u66f4 2.3\u30683.0\u306e\u5dee\u5206 UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u306e\u5ec3\u6b62) Reference UIInterpolatingMotionEffect Class https://developer.apple.com/reference/uikit/uiinterpolatingmotioneffect UIMotionEffectGroup Class https://developer.apple.com/reference/uikit/uimotioneffectgroup","title":"UIView\u306bUIMotionEffect\u3092\u8ffd\u52a0"},{"location":"1.uikit/034_uimotioneffect/#uiviewuimotioneffect","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 // // ViewController.swift // UIKit034_4.0 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () self . view . backgroundColor = UIColor . cyan // UIView\u3092\u4f5c\u6210. let myBox = UIView ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 200 )) myBox . backgroundColor = UIColor . black myBox . layer . masksToBounds = true myBox . layer . cornerRadius = 20.0 myBox . layer . position = self . view . center myBox . layer . zPosition = 1 self . view . addSubview ( myBox ) // Label\u3092\u4f5c\u6210. let myLabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 200 )) myLabel . backgroundColor = UIColor . gray myLabel . layer . masksToBounds = true myLabel . layer . cornerRadius = 20.0 myLabel . text = \"Hello Swift!!\" myLabel . textColor = UIColor . white myLabel . shadowColor = UIColor . gray myLabel . textAlignment = NSTextAlignment . center myLabel . layer . position = self . view . center myLabel . layer . zPosition = 2 self . view . addSubview ( myLabel ) //\u7aef\u672b\u306e\uff58\u8ef8\u65b9\u5411\u306e\u50be\u304d\u306b\u5fdc\u3058\u3066myBox\u306e\u4f4d\u7f6e\u3092\u5909\u3048\u308b\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4f5c\u6210. let xAxis1 = UIInterpolatingMotionEffect ( keyPath : \"center.x\" , type : UIInterpolatingMotionEffect . EffectType . tiltAlongHorizontalAxis ) xAxis1 . minimumRelativeValue = - 100.0 xAxis1 . maximumRelativeValue = 100.0 //\u7aef\u672b\u306ey\u8ef8\u65b9\u5411\u306e\u50be\u304d\u306b\u5fdc\u3058\u3066myBox\u306e\u4f4d\u7f6e\u3092\u5909\u3048\u308b\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4f5c\u6210. let yAxis1 = UIInterpolatingMotionEffect ( keyPath : \"center.y\" , type : UIInterpolatingMotionEffect . EffectType . tiltAlongVerticalAxis ) yAxis1 . minimumRelativeValue = - 100.0 yAxis1 . maximumRelativeValue = 100.0 //\u30e2\u30fc\u30b7\u30e7\u30f3\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u30b0\u30eb\u30fc\u30d7\u3092\u4f5c\u6210. let group1 = UIMotionEffectGroup () group1 . motionEffects = [ xAxis1 , yAxis1 ] //\u7aef\u672b\u306e\uff58\u8ef8\u65b9\u5411\u306e\u50be\u304d\u306b\u5fdc\u3058\u3066myLabel\u306e\u4f4d\u7f6e\u3092\u5909\u3048\u308b\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4f5c\u6210. let xAxis = UIInterpolatingMotionEffect ( keyPath : \"center.x\" , type : UIInterpolatingMotionEffect . EffectType . tiltAlongHorizontalAxis ) xAxis . minimumRelativeValue = - 50.0 xAxis . maximumRelativeValue = 50.0 //\u7aef\u672b\u306ey\u8ef8\u65b9\u5411\u306e\u50be\u304d\u306b\u5fdc\u3058\u3066myLabel\u306e\u4f4d\u7f6e\u3092\u5909\u3048\u308b\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4f5c\u6210. let yAxis = UIInterpolatingMotionEffect ( keyPath : \"center.y\" , type : UIInterpolatingMotionEffect . EffectType . tiltAlongVerticalAxis ) yAxis . minimumRelativeValue = - 50.0 yAxis . maximumRelativeValue = 50.0 //\u30e2\u30fc\u30b7\u30e7\u30f3\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u30b0\u30eb\u30fc\u30d7\u3092\u4f5c\u6210. let group = UIMotionEffectGroup () group . motionEffects = [ xAxis , yAxis ] //myLabel\u306b\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u9069\u7528\u3055\u305b\u308b. myBox . addMotionEffect ( group ) myLabel . addMotionEffect ( group1 ) } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 // // ViewController.swift // UIKit034_3.0 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () self . view . backgroundColor = UIColor . cyan // UIView\u3092\u4f5c\u6210. let myBox = UIView ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 200 )) myBox . backgroundColor = UIColor . black myBox . layer . masksToBounds = true myBox . layer . cornerRadius = 20.0 myBox . layer . position = self . view . center myBox . layer . zPosition = 1 self . view . addSubview ( myBox ) // Label\u3092\u4f5c\u6210. let myLabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 200 )) myLabel . backgroundColor = UIColor . gray myLabel . layer . masksToBounds = true myLabel . layer . cornerRadius = 20.0 myLabel . text = \"Hello Swift!!\" myLabel . textColor = UIColor . white myLabel . shadowColor = UIColor . gray myLabel . textAlignment = NSTextAlignment . center myLabel . layer . position = self . view . center myLabel . layer . zPosition = 2 self . view . addSubview ( myLabel ) //\u7aef\u672b\u306e\uff58\u8ef8\u65b9\u5411\u306e\u50be\u304d\u306b\u5fdc\u3058\u3066myBox\u306e\u4f4d\u7f6e\u3092\u5909\u3048\u308b\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4f5c\u6210. let xAxis1 = UIInterpolatingMotionEffect ( keyPath : \"center.x\" , type : UIInterpolatingMotionEffectType . tiltAlongHorizontalAxis ) xAxis1 . minimumRelativeValue = - 100.0 xAxis1 . maximumRelativeValue = 100.0 //\u7aef\u672b\u306ey\u8ef8\u65b9\u5411\u306e\u50be\u304d\u306b\u5fdc\u3058\u3066myBox\u306e\u4f4d\u7f6e\u3092\u5909\u3048\u308b\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4f5c\u6210. let yAxis1 = UIInterpolatingMotionEffect ( keyPath : \"center.y\" , type : UIInterpolatingMotionEffectType . tiltAlongVerticalAxis ) yAxis1 . minimumRelativeValue = - 100.0 yAxis1 . maximumRelativeValue = 100.0 //\u30e2\u30fc\u30b7\u30e7\u30f3\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u30b0\u30eb\u30fc\u30d7\u3092\u4f5c\u6210. let group1 = UIMotionEffectGroup () group1 . motionEffects = [ xAxis1 , yAxis1 ] //\u7aef\u672b\u306e\uff58\u8ef8\u65b9\u5411\u306e\u50be\u304d\u306b\u5fdc\u3058\u3066myLabel\u306e\u4f4d\u7f6e\u3092\u5909\u3048\u308b\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4f5c\u6210. let xAxis = UIInterpolatingMotionEffect ( keyPath : \"center.x\" , type : UIInterpolatingMotionEffectType . tiltAlongHorizontalAxis ) xAxis . minimumRelativeValue = - 50.0 xAxis . maximumRelativeValue = 50.0 //\u7aef\u672b\u306ey\u8ef8\u65b9\u5411\u306e\u50be\u304d\u306b\u5fdc\u3058\u3066myLabel\u306e\u4f4d\u7f6e\u3092\u5909\u3048\u308b\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4f5c\u6210. let yAxis = UIInterpolatingMotionEffect ( keyPath : \"center.y\" , type : UIInterpolatingMotionEffectType . tiltAlongVerticalAxis ) yAxis . minimumRelativeValue = - 50.0 yAxis . maximumRelativeValue = 50.0 //\u30e2\u30fc\u30b7\u30e7\u30f3\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u30b0\u30eb\u30fc\u30d7\u3092\u4f5c\u6210. let group = UIMotionEffectGroup () group . motionEffects = [ xAxis , yAxis ] //myLabel\u306b\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u9069\u7528\u3055\u305b\u308b. myBox . addMotionEffect ( group ) myLabel . addMotionEffect ( group1 ) } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 // // ViewController.swift // UIKit034_2.3 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () self . view . backgroundColor = UIColor . cyanColor () // UIView\u3092\u4f5c\u6210. let myBox = UIView ( frame : CGRectMake ( 0 , 0 , 200 , 200 )) myBox . backgroundColor = UIColor . blackColor () myBox . layer . masksToBounds = true myBox . layer . cornerRadius = 20.0 myBox . layer . position = self . view . center myBox . layer . zPosition = 1 self . view . addSubview ( myBox ) // Label\u3092\u4f5c\u6210. let myLabel = UILabel ( frame : CGRectMake ( 0 , 0 , 200 , 200 )) myLabel . backgroundColor = UIColor . grayColor () myLabel . layer . masksToBounds = true myLabel . layer . cornerRadius = 20.0 myLabel . text = \"Hello Swift!!\" myLabel . textColor = UIColor . whiteColor () myLabel . shadowColor = UIColor . grayColor () myLabel . textAlignment = NSTextAlignment . Center myLabel . layer . position = self . view . center myLabel . layer . zPosition = 2 self . view . addSubview ( myLabel ) //\u7aef\u672b\u306e\uff58\u8ef8\u65b9\u5411\u306e\u50be\u304d\u306b\u5fdc\u3058\u3066myBox\u306e\u4f4d\u7f6e\u3092\u5909\u3048\u308b\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4f5c\u6210. let xAxis1 = UIInterpolatingMotionEffect ( keyPath : \"center.x\" , type : UIInterpolatingMotionEffectType . TiltAlongHorizontalAxis ) xAxis1 . minimumRelativeValue = - 100.0 xAxis1 . maximumRelativeValue = 100.0 //\u7aef\u672b\u306ey\u8ef8\u65b9\u5411\u306e\u50be\u304d\u306b\u5fdc\u3058\u3066myBox\u306e\u4f4d\u7f6e\u3092\u5909\u3048\u308b\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4f5c\u6210. let yAxis1 = UIInterpolatingMotionEffect ( keyPath : \"center.y\" , type : UIInterpolatingMotionEffectType . TiltAlongVerticalAxis ) yAxis1 . minimumRelativeValue = - 100.0 yAxis1 . maximumRelativeValue = 100.0 //\u30e2\u30fc\u30b7\u30e7\u30f3\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u30b0\u30eb\u30fc\u30d7\u3092\u4f5c\u6210. let group1 = UIMotionEffectGroup () group1 . motionEffects = [ xAxis1 , yAxis1 ] //\u7aef\u672b\u306e\uff58\u8ef8\u65b9\u5411\u306e\u50be\u304d\u306b\u5fdc\u3058\u3066myLabel\u306e\u4f4d\u7f6e\u3092\u5909\u3048\u308b\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4f5c\u6210. let xAxis = UIInterpolatingMotionEffect ( keyPath : \"center.x\" , type : UIInterpolatingMotionEffectType . TiltAlongHorizontalAxis ) xAxis . minimumRelativeValue = - 50.0 xAxis . maximumRelativeValue = 50.0 //\u7aef\u672b\u306ey\u8ef8\u65b9\u5411\u306e\u50be\u304d\u306b\u5fdc\u3058\u3066myLabel\u306e\u4f4d\u7f6e\u3092\u5909\u3048\u308b\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4f5c\u6210. let yAxis = UIInterpolatingMotionEffect ( keyPath : \"center.y\" , type : UIInterpolatingMotionEffectType . TiltAlongVerticalAxis ) yAxis . minimumRelativeValue = - 50.0 yAxis . maximumRelativeValue = 50.0 //\u30e2\u30fc\u30b7\u30e7\u30f3\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u30b0\u30eb\u30fc\u30d7\u3092\u4f5c\u6210. let group = UIMotionEffectGroup () group . motionEffects = [ xAxis , yAxis ] //myLabel\u306b\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u9069\u7528\u3055\u305b\u308b. myBox . addMotionEffect ( group ) myLabel . addMotionEffect ( group1 ) } }","title":"UIView\u306bUIMotionEffect\u3092\u8ffd\u52a0"},{"location":"1.uikit/034_uimotioneffect/#3x4x","text":"UIInterpolatingMotionEffectType \u304c UIInterpolatingMotionEffect.EffectType \u306b\u5909\u66f4","title":"3.x\u30684.x\u306e\u5dee\u5206"},{"location":"1.uikit/034_uimotioneffect/#2330","text":"UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u306e\u5ec3\u6b62)","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/034_uimotioneffect/#reference","text":"UIInterpolatingMotionEffect Class https://developer.apple.com/reference/uikit/uiinterpolatingmotioneffect UIMotionEffectGroup Class https://developer.apple.com/reference/uikit/uimotioneffectgroup","title":"Reference"},{"location":"1.uikit/035_blureffect/","text":"UIView\u306bBlur\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u9069\u7528\u3055\u305b\u308b Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 // // ViewController.swift // UIKit035_4.0 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var effectView : UIVisualEffectView ! private var mySegcon : UISegmentedControl ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u753b\u50cf\u3092\u751f\u6210. let image = UIImage ( named : \"ci005\" ) let imageView = UIImageView ( frame : self . view . bounds ) imageView . image = image self . view . addSubview ( imageView ) // SegmentedControl\u3092\u751f\u6210. mySegcon = UISegmentedControl ( items : [ \"Dark\" , \"ExtraLight\" , \"Light\" ]) mySegcon . center = CGPoint ( x : self . view . center . x , y : self . view . bounds . maxY - 50 ) mySegcon . backgroundColor = UIColor . gray mySegcon . tintColor = UIColor . white mySegcon . addTarget ( self , action : #selector ( ViewController . onClickMySegmentedControl ( sender :)), for : UIControl . Event . valueChanged ) self . view . addSubview ( mySegcon ) } /* \u30a8\u30d5\u30a7\u30af\u30c8\u3092\u9069\u7528\u3059\u308b. */ internal func addVirtualEffectView ( effect : UIBlurEffect !){ if effectView != nil { effectView . removeFromSuperview () } // Blur\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u9069\u7528\u3059\u308bEffectView\u3092\u4f5c\u6210. effectView = UIVisualEffectView ( effect : effect ) effectView . frame = CGRect ( x : 0 , y : 0 , width : 200 , height : 400 ) effectView . layer . position = CGPoint ( x : mySegcon . bounds . midX , y : - ( effectView . frame . midY + 20 ) ) effectView . layer . masksToBounds = true effectView . layer . cornerRadius = 20.0 mySegcon . addSubview ( effectView ) } /* SegmentedControl\u306e\u5024\u304c\u5909\u308f\u3063\u305f\u6642\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ @objc internal func onClickMySegmentedControl ( sender : UISegmentedControl ){ var effect : UIBlurEffect ! switch sender . selectedSegmentIndex { case 0 : // Light\u306aBlur\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4f5c\u308b. effect = UIBlurEffect ( style : UIBlurEffect . Style . dark ) case 1 : // Dark\u306aBlur\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4f5c\u308b. effect = UIBlurEffect ( style : UIBlurEffect . Style . light ) case 2 : // ExtraLight\u306aBlur\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4f5c\u308b. effect = UIBlurEffect ( style : UIBlurEffect . Style . extraLight ) default : print ( \"Error\" ) } self . addVirtualEffectView ( effect : effect ) } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 // // ViewController.swift // UIKit035_3.0 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var effectView : UIVisualEffectView ! private var mySegcon : UISegmentedControl ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u753b\u50cf\u3092\u751f\u6210. let image = UIImage ( named : \"ci005\" ) let imageView = UIImageView ( frame : self . view . bounds ) imageView . image = image self . view . addSubview ( imageView ) // SegmentedControl\u3092\u751f\u6210. mySegcon = UISegmentedControl ( items : [ \"Dark\" , \"ExtraLight\" , \"Light\" ]) mySegcon . center = CGPoint ( x : self . view . center . x , y : self . view . bounds . maxY - 50 ) mySegcon . backgroundColor = UIColor . gray mySegcon . tintColor = UIColor . white mySegcon . addTarget ( self , action : #selector ( ViewController . onClickMySegmentedControl ( sender :)), for : UIControlEvents . valueChanged ) self . view . addSubview ( mySegcon ) } /* \u30a8\u30d5\u30a7\u30af\u30c8\u3092\u9069\u7528\u3059\u308b. */ internal func addVirtualEffectView ( effect : UIBlurEffect !){ if effectView != nil { effectView . removeFromSuperview () } // Blur\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u9069\u7528\u3059\u308bEffectView\u3092\u4f5c\u6210. effectView = UIVisualEffectView ( effect : effect ) effectView . frame = CGRect ( x : 0 , y : 0 , width : 200 , height : 400 ) effectView . layer . position = CGPoint ( x : mySegcon . bounds . midX , y : - ( effectView . frame . midY + 20 ) ) effectView . layer . masksToBounds = true effectView . layer . cornerRadius = 20.0 mySegcon . addSubview ( effectView ) } /* SegmentedControl\u306e\u5024\u304c\u5909\u308f\u3063\u305f\u6642\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ internal func onClickMySegmentedControl ( sender : UISegmentedControl ){ var effect : UIBlurEffect ! switch sender . selectedSegmentIndex { case 0 : // Light\u306aBlur\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4f5c\u308b. effect = UIBlurEffect ( style : UIBlurEffectStyle . dark ) case 1 : // Dark\u306aBlur\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4f5c\u308b. effect = UIBlurEffect ( style : UIBlurEffectStyle . light ) case 2 : // ExtraLight\u306aBlur\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4f5c\u308b. effect = UIBlurEffect ( style : UIBlurEffectStyle . extraLight ) default : print ( \"Error\" ) } self . addVirtualEffectView ( effect : effect ) } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 // // ViewController.swift // UIKit035_2.3 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var effectView : UIVisualEffectView ! private var mySegcon : UISegmentedControl ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u753b\u50cf\u3092\u751f\u6210. let image = UIImage ( named : \"ci005\" ) let imageView = UIImageView ( frame : self . view . bounds ) imageView . image = image self . view . addSubview ( imageView ) // SegmentedControl\u3092\u751f\u6210. mySegcon = UISegmentedControl ( items : [ \"Dark\" , \"ExtraLight\" , \"Light\" ]) mySegcon . center = CGPointMake ( self . view . center . x , self . view . bounds . maxY - 50 ) mySegcon . backgroundColor = UIColor . grayColor () mySegcon . tintColor = UIColor . whiteColor () mySegcon . addTarget ( self , action : #selector ( ViewController . onClickMySegmentedControl ( _ :)), forControlEvents : UIControlEvents . ValueChanged ) self . view . addSubview ( mySegcon ) } /* \u30a8\u30d5\u30a7\u30af\u30c8\u3092\u9069\u7528\u3059\u308b. */ internal func addVirtualEffectView ( effect : UIBlurEffect !){ if effectView != nil { effectView . removeFromSuperview () } // Blur\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u9069\u7528\u3059\u308bEffectView\u3092\u4f5c\u6210. effectView = UIVisualEffectView ( effect : effect ) effectView . frame = CGRectMake ( 0 , 0 , 200 , 400 ) effectView . layer . position = CGPointMake ( mySegcon . bounds . midX , - ( effectView . frame . midY + 20 ) ) effectView . layer . masksToBounds = true effectView . layer . cornerRadius = 20.0 mySegcon . addSubview ( effectView ) } /* SegmentedControl\u306e\u5024\u304c\u5909\u308f\u3063\u305f\u6642\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ internal func onClickMySegmentedControl ( sender : UISegmentedControl ){ var effect : UIBlurEffect ! switch sender . selectedSegmentIndex { case 0 : // Light\u306aBlur\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4f5c\u308b. effect = UIBlurEffect ( style : UIBlurEffectStyle . Dark ) case 1 : // Dark\u306aBlur\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4f5c\u308b. effect = UIBlurEffect ( style : UIBlurEffectStyle . Light ) case 2 : // ExtraLight\u306aBlur\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4f5c\u308b. effect = UIBlurEffect ( style : UIBlurEffectStyle . ExtraLight ) default : print ( \"Error\" ) } self . addVirtualEffectView ( effect ) } } 3.x\u30684.x\u306e\u5dee\u5206 UIControlEvents \u304c UIControl.Event \u306b\u5909\u66f4 internal func addVirtualEffectView(effect : UIBlurEffect!) \u306b @objc \u3092\u8ffd\u52a0 UIBlurEffectStyle \u304c UIBlurEffect.Style \u306b\u5909\u66f4 2.3\u30683.0\u306e\u5dee\u5206 UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u306e\u5ec3\u6b62) Reference UIVisualEffectView Class https://developer.apple.com/reference/uikit/uivisualeffectview UISegmentedControl Class https://developer.apple.com/reference/uikit/uisegmentedcontrol UIBlurEffect Class https://developer.apple.com/reference/uikit/uiblureffect UIVisualEffectView Class https://developer.apple.com/reference/uikit/uivisualeffectview","title":"UIView\u306bBlur\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u9069\u7528\u3055\u305b\u308b"},{"location":"1.uikit/035_blureffect/#uiviewblur","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 // // ViewController.swift // UIKit035_4.0 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var effectView : UIVisualEffectView ! private var mySegcon : UISegmentedControl ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u753b\u50cf\u3092\u751f\u6210. let image = UIImage ( named : \"ci005\" ) let imageView = UIImageView ( frame : self . view . bounds ) imageView . image = image self . view . addSubview ( imageView ) // SegmentedControl\u3092\u751f\u6210. mySegcon = UISegmentedControl ( items : [ \"Dark\" , \"ExtraLight\" , \"Light\" ]) mySegcon . center = CGPoint ( x : self . view . center . x , y : self . view . bounds . maxY - 50 ) mySegcon . backgroundColor = UIColor . gray mySegcon . tintColor = UIColor . white mySegcon . addTarget ( self , action : #selector ( ViewController . onClickMySegmentedControl ( sender :)), for : UIControl . Event . valueChanged ) self . view . addSubview ( mySegcon ) } /* \u30a8\u30d5\u30a7\u30af\u30c8\u3092\u9069\u7528\u3059\u308b. */ internal func addVirtualEffectView ( effect : UIBlurEffect !){ if effectView != nil { effectView . removeFromSuperview () } // Blur\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u9069\u7528\u3059\u308bEffectView\u3092\u4f5c\u6210. effectView = UIVisualEffectView ( effect : effect ) effectView . frame = CGRect ( x : 0 , y : 0 , width : 200 , height : 400 ) effectView . layer . position = CGPoint ( x : mySegcon . bounds . midX , y : - ( effectView . frame . midY + 20 ) ) effectView . layer . masksToBounds = true effectView . layer . cornerRadius = 20.0 mySegcon . addSubview ( effectView ) } /* SegmentedControl\u306e\u5024\u304c\u5909\u308f\u3063\u305f\u6642\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ @objc internal func onClickMySegmentedControl ( sender : UISegmentedControl ){ var effect : UIBlurEffect ! switch sender . selectedSegmentIndex { case 0 : // Light\u306aBlur\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4f5c\u308b. effect = UIBlurEffect ( style : UIBlurEffect . Style . dark ) case 1 : // Dark\u306aBlur\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4f5c\u308b. effect = UIBlurEffect ( style : UIBlurEffect . Style . light ) case 2 : // ExtraLight\u306aBlur\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4f5c\u308b. effect = UIBlurEffect ( style : UIBlurEffect . Style . extraLight ) default : print ( \"Error\" ) } self . addVirtualEffectView ( effect : effect ) } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 // // ViewController.swift // UIKit035_3.0 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var effectView : UIVisualEffectView ! private var mySegcon : UISegmentedControl ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u753b\u50cf\u3092\u751f\u6210. let image = UIImage ( named : \"ci005\" ) let imageView = UIImageView ( frame : self . view . bounds ) imageView . image = image self . view . addSubview ( imageView ) // SegmentedControl\u3092\u751f\u6210. mySegcon = UISegmentedControl ( items : [ \"Dark\" , \"ExtraLight\" , \"Light\" ]) mySegcon . center = CGPoint ( x : self . view . center . x , y : self . view . bounds . maxY - 50 ) mySegcon . backgroundColor = UIColor . gray mySegcon . tintColor = UIColor . white mySegcon . addTarget ( self , action : #selector ( ViewController . onClickMySegmentedControl ( sender :)), for : UIControlEvents . valueChanged ) self . view . addSubview ( mySegcon ) } /* \u30a8\u30d5\u30a7\u30af\u30c8\u3092\u9069\u7528\u3059\u308b. */ internal func addVirtualEffectView ( effect : UIBlurEffect !){ if effectView != nil { effectView . removeFromSuperview () } // Blur\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u9069\u7528\u3059\u308bEffectView\u3092\u4f5c\u6210. effectView = UIVisualEffectView ( effect : effect ) effectView . frame = CGRect ( x : 0 , y : 0 , width : 200 , height : 400 ) effectView . layer . position = CGPoint ( x : mySegcon . bounds . midX , y : - ( effectView . frame . midY + 20 ) ) effectView . layer . masksToBounds = true effectView . layer . cornerRadius = 20.0 mySegcon . addSubview ( effectView ) } /* SegmentedControl\u306e\u5024\u304c\u5909\u308f\u3063\u305f\u6642\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ internal func onClickMySegmentedControl ( sender : UISegmentedControl ){ var effect : UIBlurEffect ! switch sender . selectedSegmentIndex { case 0 : // Light\u306aBlur\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4f5c\u308b. effect = UIBlurEffect ( style : UIBlurEffectStyle . dark ) case 1 : // Dark\u306aBlur\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4f5c\u308b. effect = UIBlurEffect ( style : UIBlurEffectStyle . light ) case 2 : // ExtraLight\u306aBlur\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4f5c\u308b. effect = UIBlurEffect ( style : UIBlurEffectStyle . extraLight ) default : print ( \"Error\" ) } self . addVirtualEffectView ( effect : effect ) } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 // // ViewController.swift // UIKit035_2.3 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var effectView : UIVisualEffectView ! private var mySegcon : UISegmentedControl ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u753b\u50cf\u3092\u751f\u6210. let image = UIImage ( named : \"ci005\" ) let imageView = UIImageView ( frame : self . view . bounds ) imageView . image = image self . view . addSubview ( imageView ) // SegmentedControl\u3092\u751f\u6210. mySegcon = UISegmentedControl ( items : [ \"Dark\" , \"ExtraLight\" , \"Light\" ]) mySegcon . center = CGPointMake ( self . view . center . x , self . view . bounds . maxY - 50 ) mySegcon . backgroundColor = UIColor . grayColor () mySegcon . tintColor = UIColor . whiteColor () mySegcon . addTarget ( self , action : #selector ( ViewController . onClickMySegmentedControl ( _ :)), forControlEvents : UIControlEvents . ValueChanged ) self . view . addSubview ( mySegcon ) } /* \u30a8\u30d5\u30a7\u30af\u30c8\u3092\u9069\u7528\u3059\u308b. */ internal func addVirtualEffectView ( effect : UIBlurEffect !){ if effectView != nil { effectView . removeFromSuperview () } // Blur\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u9069\u7528\u3059\u308bEffectView\u3092\u4f5c\u6210. effectView = UIVisualEffectView ( effect : effect ) effectView . frame = CGRectMake ( 0 , 0 , 200 , 400 ) effectView . layer . position = CGPointMake ( mySegcon . bounds . midX , - ( effectView . frame . midY + 20 ) ) effectView . layer . masksToBounds = true effectView . layer . cornerRadius = 20.0 mySegcon . addSubview ( effectView ) } /* SegmentedControl\u306e\u5024\u304c\u5909\u308f\u3063\u305f\u6642\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ internal func onClickMySegmentedControl ( sender : UISegmentedControl ){ var effect : UIBlurEffect ! switch sender . selectedSegmentIndex { case 0 : // Light\u306aBlur\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4f5c\u308b. effect = UIBlurEffect ( style : UIBlurEffectStyle . Dark ) case 1 : // Dark\u306aBlur\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4f5c\u308b. effect = UIBlurEffect ( style : UIBlurEffectStyle . Light ) case 2 : // ExtraLight\u306aBlur\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4f5c\u308b. effect = UIBlurEffect ( style : UIBlurEffectStyle . ExtraLight ) default : print ( \"Error\" ) } self . addVirtualEffectView ( effect ) } }","title":"UIView\u306bBlur\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u9069\u7528\u3055\u305b\u308b"},{"location":"1.uikit/035_blureffect/#3x4x","text":"UIControlEvents \u304c UIControl.Event \u306b\u5909\u66f4 internal func addVirtualEffectView(effect : UIBlurEffect!) \u306b @objc \u3092\u8ffd\u52a0 UIBlurEffectStyle \u304c UIBlurEffect.Style \u306b\u5909\u66f4","title":"3.x\u30684.x\u306e\u5dee\u5206"},{"location":"1.uikit/035_blureffect/#2330","text":"UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u306e\u5ec3\u6b62)","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/035_blureffect/#reference","text":"UIVisualEffectView Class https://developer.apple.com/reference/uikit/uivisualeffectview UISegmentedControl Class https://developer.apple.com/reference/uikit/uisegmentedcontrol UIBlurEffect Class https://developer.apple.com/reference/uikit/uiblureffect UIVisualEffectView Class https://developer.apple.com/reference/uikit/uivisualeffectview","title":"Reference"},{"location":"1.uikit/036_uiviewtransition/","text":"UIView\u306b\u30c8\u30e9\u30f3\u30b8\u30b7\u30e7\u30f3\u3092\u3064\u3051\u308b Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 // // ViewController.swift // UIKit036_4.0 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myView : UIView ! private var myButton : UIButton ! // View\u5207\u308a\u66ff\u3048\u7528\u30d5\u30e9\u30b0. var viewFlag = true override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u9752\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . cyan // myView\u3092\u751f\u6210. myView = UIView ( frame : self . view . frame ) myView . backgroundColor = UIColor . orange myView . isHidden = true myView . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height / 2 ) // \u30dc\u30bf\u30f3\u3092\u751f\u6210. myButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 100 , height : 50 )) myButton . backgroundColor = UIColor . red myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . setTitle ( \"Transition\" , for : . normal ) myButton . setTitleColor ( UIColor . white , for : . normal ) myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height / 2 ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchUpInside ) // self.view\u306bmyView\u3092\u8ffd\u52a0. self . view . addSubview ( myView ) // self.view\u306b\u30dc\u30bf\u30f3\u3092\u8ffd\u52a0. self . view . addSubview ( myButton ) } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8 */ @objc internal func onClickMyButton ( sender : UIButton ) { // \u30d5\u30e9\u30b0\u304ctrue. if viewFlag { // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u51e6\u7406. // \u3069\u306eview\u304b\u3089transition\u3059\u308b\u304b. UIView . transition ( from : self . view , // transition\u5148\u306eview. to : myView , // \u79d2\u6570(1\u79d2). duration : 1.0 , // transition\u3092\u8a2d\u5b9a. options : UIView . AnimationOptions . transitionCurlUp , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u5b8c\u4e86\u6642\u306e\u51e6\u7406. completion : { ( Bool ) -> Void in print ( \"self.view -> myView\" ) // myView\u3092\u8868\u793a. self . myView . isHidden = false // myView\u306b\u30dc\u30bf\u30f3\u3092\u8ffd\u52a0. self . myView . addSubview ( self . myButton ) }) // \u30d5\u30e9\u30b0\u3092\u6298\u308b. viewFlag = false } else { UIView . transition ( from : myView , to : self . view , duration : 1.0 , options : UIView . AnimationOptions . transitionFlipFromLeft , completion : { ( Bool ) -> Void in print ( \"myView -> self.view\" ) // self.view\u306b\u30dc\u30bf\u30f3\u3092\u8ffd\u52a0. self . view . addSubview ( self . myButton ) }) // \u30d5\u30e9\u30b0\u3092\u7acb\u3066\u308b. viewFlag = true } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 // // ViewController.swift // UIKit036_3.0 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myView : UIView ! private var myButton : UIButton ! // View\u5207\u308a\u66ff\u3048\u7528\u30d5\u30e9\u30b0. var viewFlag = true override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u9752\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . cyan // myView\u3092\u751f\u6210. myView = UIView ( frame : self . view . frame ) myView . backgroundColor = UIColor . orange myView . isHidden = true myView . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height / 2 ) // \u30dc\u30bf\u30f3\u3092\u751f\u6210. myButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 100 , height : 50 )) myButton . backgroundColor = UIColor . red myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . setTitle ( \"Transition\" , for : . normal ) myButton . setTitleColor ( UIColor . white , for : . normal ) myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height / 2 ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchUpInside ) // self.view\u306bmyView\u3092\u8ffd\u52a0. self . view . addSubview ( myView ) // self.view\u306b\u30dc\u30bf\u30f3\u3092\u8ffd\u52a0. self . view . addSubview ( myButton ) } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8 */ internal func onClickMyButton ( sender : UIButton ) { // \u30d5\u30e9\u30b0\u304ctrue. if viewFlag { // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u51e6\u7406. // \u3069\u306eview\u304b\u3089transition\u3059\u308b\u304b. UIView . transition ( from : self . view , // transition\u5148\u306eview. to : myView , // \u79d2\u6570(1\u79d2). duration : 1.0 , // transition\u3092\u8a2d\u5b9a. options : UIViewAnimationOptions . transitionCurlUp , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u5b8c\u4e86\u6642\u306e\u51e6\u7406. completion : { ( Bool ) -> Void in print ( \"self.view -> myView\" ) // myView\u3092\u8868\u793a. self . myView . isHidden = false // myView\u306b\u30dc\u30bf\u30f3\u3092\u8ffd\u52a0. self . myView . addSubview ( self . myButton ) }) // \u30d5\u30e9\u30b0\u3092\u6298\u308b. viewFlag = false } else { UIView . transition ( from : myView , to : self . view , duration : 1.0 , options : UIViewAnimationOptions . transitionFlipFromLeft , completion : { ( Bool ) -> Void in print ( \"myView -> self.view\" ) // self.view\u306b\u30dc\u30bf\u30f3\u3092\u8ffd\u52a0. self . view . addSubview ( self . myButton ) }) // \u30d5\u30e9\u30b0\u3092\u7acb\u3066\u308b. viewFlag = true } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 // // ViewController.swift // UIKit036_2.3 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myView : UIView ! private var myButton : UIButton ! // View\u5207\u308a\u66ff\u3048\u7528\u30d5\u30e9\u30b0. var viewFlag = true override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u9752\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . cyanColor () // myView\u3092\u751f\u6210. myView = UIView ( frame : self . view . frame ) myView . backgroundColor = UIColor . orangeColor () myView . hidden = true myView . layer . position = CGPointMake ( self . view . frame . width / 2 , self . view . frame . height / 2 ) // \u30dc\u30bf\u30f3\u3092\u751f\u6210. myButton = UIButton ( frame : CGRectMake ( 0 , 0 , 100 , 50 )) myButton . backgroundColor = UIColor . redColor () myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . setTitle ( \"Transition\" , forState : . Normal ) myButton . setTitleColor ( UIColor . whiteColor (), forState : . Normal ) myButton . layer . position = CGPointMake ( self . view . frame . width / 2 , self . view . frame . height / 2 ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : . TouchUpInside ) // self.view\u306bmyView\u3092\u8ffd\u52a0. self . view . addSubview ( myView ) // self.view\u306b\u30dc\u30bf\u30f3\u3092\u8ffd\u52a0. self . view . addSubview ( myButton ) } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8 */ internal func onClickMyButton ( sender : UIButton ) { // \u30d5\u30e9\u30b0\u304ctrue. if viewFlag { // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u51e6\u7406. // \u3069\u306eview\u304b\u3089transition\u3059\u308b\u304b. UIView . transitionFromView ( self . view , // transition\u5148\u306eview. toView : myView , // \u79d2\u6570(1\u79d2). duration : 1.0 , // transition\u3092\u8a2d\u5b9a. options : UIViewAnimationOptions . TransitionCurlUp , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u5b8c\u4e86\u6642\u306e\u51e6\u7406. completion : { ( Bool ) -> Void in print ( \"self.view -> myView\" ) // myView\u3092\u8868\u793a. self . myView . hidden = false // myView\u306b\u30dc\u30bf\u30f3\u3092\u8ffd\u52a0. self . myView . addSubview ( self . myButton ) }) // \u30d5\u30e9\u30b0\u3092\u6298\u308b. viewFlag = false } else { UIView . transitionFromView ( myView , toView : self . view , duration : 1.0 , options : UIViewAnimationOptions . TransitionFlipFromLeft , completion : { ( Bool ) -> Void in print ( \"myView -> self.view\" ) // self.view\u306b\u30dc\u30bf\u30f3\u3092\u8ffd\u52a0. self . view . addSubview ( self . myButton ) }) // \u30d5\u30e9\u30b0\u3092\u7acb\u3066\u308b. viewFlag = true } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } 3.x\u30684.x\u306e\u5dee\u5206 internal func onClickMyButton(sender: UIButton) \u306b @objc \u3092\u8ffd\u52a0 UIViewAnimationOptions \u304c UIView.AnimationOptions \u306b\u5909\u66f4 2.3\u30683.0\u306e\u5dee\u5206 UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u306e\u5ec3\u6b62) UIView.transition\u306b\u30e9\u30d9\u30eb\u304c\u8ffd\u52a0. Reference UIView Class https://developer.apple.com/reference/uikit/uiview","title":"UIView\u306b\u30c8\u30e9\u30f3\u30b8\u30b7\u30e7\u30f3\u3092\u3064\u3051\u308b"},{"location":"1.uikit/036_uiviewtransition/#uiview","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 // // ViewController.swift // UIKit036_4.0 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myView : UIView ! private var myButton : UIButton ! // View\u5207\u308a\u66ff\u3048\u7528\u30d5\u30e9\u30b0. var viewFlag = true override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u9752\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . cyan // myView\u3092\u751f\u6210. myView = UIView ( frame : self . view . frame ) myView . backgroundColor = UIColor . orange myView . isHidden = true myView . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height / 2 ) // \u30dc\u30bf\u30f3\u3092\u751f\u6210. myButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 100 , height : 50 )) myButton . backgroundColor = UIColor . red myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . setTitle ( \"Transition\" , for : . normal ) myButton . setTitleColor ( UIColor . white , for : . normal ) myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height / 2 ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchUpInside ) // self.view\u306bmyView\u3092\u8ffd\u52a0. self . view . addSubview ( myView ) // self.view\u306b\u30dc\u30bf\u30f3\u3092\u8ffd\u52a0. self . view . addSubview ( myButton ) } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8 */ @objc internal func onClickMyButton ( sender : UIButton ) { // \u30d5\u30e9\u30b0\u304ctrue. if viewFlag { // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u51e6\u7406. // \u3069\u306eview\u304b\u3089transition\u3059\u308b\u304b. UIView . transition ( from : self . view , // transition\u5148\u306eview. to : myView , // \u79d2\u6570(1\u79d2). duration : 1.0 , // transition\u3092\u8a2d\u5b9a. options : UIView . AnimationOptions . transitionCurlUp , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u5b8c\u4e86\u6642\u306e\u51e6\u7406. completion : { ( Bool ) -> Void in print ( \"self.view -> myView\" ) // myView\u3092\u8868\u793a. self . myView . isHidden = false // myView\u306b\u30dc\u30bf\u30f3\u3092\u8ffd\u52a0. self . myView . addSubview ( self . myButton ) }) // \u30d5\u30e9\u30b0\u3092\u6298\u308b. viewFlag = false } else { UIView . transition ( from : myView , to : self . view , duration : 1.0 , options : UIView . AnimationOptions . transitionFlipFromLeft , completion : { ( Bool ) -> Void in print ( \"myView -> self.view\" ) // self.view\u306b\u30dc\u30bf\u30f3\u3092\u8ffd\u52a0. self . view . addSubview ( self . myButton ) }) // \u30d5\u30e9\u30b0\u3092\u7acb\u3066\u308b. viewFlag = true } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 // // ViewController.swift // UIKit036_3.0 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myView : UIView ! private var myButton : UIButton ! // View\u5207\u308a\u66ff\u3048\u7528\u30d5\u30e9\u30b0. var viewFlag = true override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u9752\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . cyan // myView\u3092\u751f\u6210. myView = UIView ( frame : self . view . frame ) myView . backgroundColor = UIColor . orange myView . isHidden = true myView . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height / 2 ) // \u30dc\u30bf\u30f3\u3092\u751f\u6210. myButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 100 , height : 50 )) myButton . backgroundColor = UIColor . red myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . setTitle ( \"Transition\" , for : . normal ) myButton . setTitleColor ( UIColor . white , for : . normal ) myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height / 2 ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchUpInside ) // self.view\u306bmyView\u3092\u8ffd\u52a0. self . view . addSubview ( myView ) // self.view\u306b\u30dc\u30bf\u30f3\u3092\u8ffd\u52a0. self . view . addSubview ( myButton ) } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8 */ internal func onClickMyButton ( sender : UIButton ) { // \u30d5\u30e9\u30b0\u304ctrue. if viewFlag { // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u51e6\u7406. // \u3069\u306eview\u304b\u3089transition\u3059\u308b\u304b. UIView . transition ( from : self . view , // transition\u5148\u306eview. to : myView , // \u79d2\u6570(1\u79d2). duration : 1.0 , // transition\u3092\u8a2d\u5b9a. options : UIViewAnimationOptions . transitionCurlUp , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u5b8c\u4e86\u6642\u306e\u51e6\u7406. completion : { ( Bool ) -> Void in print ( \"self.view -> myView\" ) // myView\u3092\u8868\u793a. self . myView . isHidden = false // myView\u306b\u30dc\u30bf\u30f3\u3092\u8ffd\u52a0. self . myView . addSubview ( self . myButton ) }) // \u30d5\u30e9\u30b0\u3092\u6298\u308b. viewFlag = false } else { UIView . transition ( from : myView , to : self . view , duration : 1.0 , options : UIViewAnimationOptions . transitionFlipFromLeft , completion : { ( Bool ) -> Void in print ( \"myView -> self.view\" ) // self.view\u306b\u30dc\u30bf\u30f3\u3092\u8ffd\u52a0. self . view . addSubview ( self . myButton ) }) // \u30d5\u30e9\u30b0\u3092\u7acb\u3066\u308b. viewFlag = true } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 // // ViewController.swift // UIKit036_2.3 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var myView : UIView ! private var myButton : UIButton ! // View\u5207\u308a\u66ff\u3048\u7528\u30d5\u30e9\u30b0. var viewFlag = true override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u9752\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . cyanColor () // myView\u3092\u751f\u6210. myView = UIView ( frame : self . view . frame ) myView . backgroundColor = UIColor . orangeColor () myView . hidden = true myView . layer . position = CGPointMake ( self . view . frame . width / 2 , self . view . frame . height / 2 ) // \u30dc\u30bf\u30f3\u3092\u751f\u6210. myButton = UIButton ( frame : CGRectMake ( 0 , 0 , 100 , 50 )) myButton . backgroundColor = UIColor . redColor () myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . setTitle ( \"Transition\" , forState : . Normal ) myButton . setTitleColor ( UIColor . whiteColor (), forState : . Normal ) myButton . layer . position = CGPointMake ( self . view . frame . width / 2 , self . view . frame . height / 2 ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : . TouchUpInside ) // self.view\u306bmyView\u3092\u8ffd\u52a0. self . view . addSubview ( myView ) // self.view\u306b\u30dc\u30bf\u30f3\u3092\u8ffd\u52a0. self . view . addSubview ( myButton ) } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8 */ internal func onClickMyButton ( sender : UIButton ) { // \u30d5\u30e9\u30b0\u304ctrue. if viewFlag { // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u51e6\u7406. // \u3069\u306eview\u304b\u3089transition\u3059\u308b\u304b. UIView . transitionFromView ( self . view , // transition\u5148\u306eview. toView : myView , // \u79d2\u6570(1\u79d2). duration : 1.0 , // transition\u3092\u8a2d\u5b9a. options : UIViewAnimationOptions . TransitionCurlUp , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u5b8c\u4e86\u6642\u306e\u51e6\u7406. completion : { ( Bool ) -> Void in print ( \"self.view -> myView\" ) // myView\u3092\u8868\u793a. self . myView . hidden = false // myView\u306b\u30dc\u30bf\u30f3\u3092\u8ffd\u52a0. self . myView . addSubview ( self . myButton ) }) // \u30d5\u30e9\u30b0\u3092\u6298\u308b. viewFlag = false } else { UIView . transitionFromView ( myView , toView : self . view , duration : 1.0 , options : UIViewAnimationOptions . TransitionFlipFromLeft , completion : { ( Bool ) -> Void in print ( \"myView -> self.view\" ) // self.view\u306b\u30dc\u30bf\u30f3\u3092\u8ffd\u52a0. self . view . addSubview ( self . myButton ) }) // \u30d5\u30e9\u30b0\u3092\u7acb\u3066\u308b. viewFlag = true } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } }","title":"UIView\u306b\u30c8\u30e9\u30f3\u30b8\u30b7\u30e7\u30f3\u3092\u3064\u3051\u308b"},{"location":"1.uikit/036_uiviewtransition/#3x4x","text":"internal func onClickMyButton(sender: UIButton) \u306b @objc \u3092\u8ffd\u52a0 UIViewAnimationOptions \u304c UIView.AnimationOptions \u306b\u5909\u66f4","title":"3.x\u30684.x\u306e\u5dee\u5206"},{"location":"1.uikit/036_uiviewtransition/#2330","text":"UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u306e\u5ec3\u6b62) UIView.transition\u306b\u30e9\u30d9\u30eb\u304c\u8ffd\u52a0.","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/036_uiviewtransition/#reference","text":"UIView Class https://developer.apple.com/reference/uikit/uiview","title":"Reference"},{"location":"1.uikit/037_touchevent/","text":"\u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u306e\u6709\u52b9/\u7121\u52b9\u3092\u5207\u308a\u66ff\u3048\u308b Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 // // ViewController.swift // UIKit037_4.0 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var cnt : Float = 0 private var myLabel : UILabel ! private var ButtonCnt : Int = 0 private var TimerMergin : Float = 0 private var ignoreBegineTime : Float = 0 override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u9752\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . cyan // UIButton\u3092\u4f5c\u308b. let myButton : UIButton = UIButton () myButton . frame = CGRect ( x : 0 , y : 0 , width : 200 , height : 50 ) myButton . layer . cornerRadius = 20.0 myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : 400 ) myButton . backgroundColor = UIColor . red myButton . setTitle ( \"\u6709\u52b9/\u7121\u52b9\" , for : . normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchUpInside ) self . view . addSubview ( myButton ) // \u30bf\u30a4\u30de\u30fc\u7528\u30e9\u30d9\u30eb\u3092\u4f5c\u308b. myLabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myLabel . backgroundColor = UIColor . orange myLabel . layer . masksToBounds = true myLabel . layer . cornerRadius = 20.0 myLabel . text = \"Time: \\( Int ( cnt )) \" myLabel . textColor = UIColor . white myLabel . shadowColor = UIColor . gray myLabel . textAlignment = NSTextAlignment . center myLabel . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 200 ) self . view . addSubview ( myLabel ) self . view . backgroundColor = UIColor . cyan } //NSTimerInterval\u3067\u6307\u5b9a\u3055\u308c\u305f\u79d2\u6570\u6bce\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u30e1\u30bd\u30c3\u30c9. @objc internal func onUpdate ( timer : Timer ){ cnt += 0.1 //\u6841\u6570\u3092\u6307\u5b9a\u3057\u3066\u6587\u5b57\u5217\u3092\u4f5c\u308b. let str = \"Time: \\( Int ( cnt )) \" myLabel . text = str // \u73fe\u5728\u306e\u30bf\u30a4\u30de\u30fc\u6642\u9593\u304b\u3089\u7121\u52b9\u304c\u59cb\u307e\u3063\u305f\u6642\u9593\u306e\u5dee. TimerMergin = cnt - ignoreBegineTime // \u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u304c\u7121\u52b9\u306e\u3068\u304d. if UIApplication . shared . isIgnoringInteractionEvents { // \u7121\u52b9\u306b\u306a\u3063\u3066\u304b\u30895\u79d2\u7d4c\u3063\u305f\u6642. if Int ( TimerMergin ) == 5 { print ( \"\u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u304c\u7121\u52b9\u3067\u3059\" ) self . view . backgroundColor = UIColor . cyan // \u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u3092\u6709\u52b9\u306b\u3059\u308b. UIApplication . shared . endIgnoringInteractionEvents () print ( \"\u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u3092\u6709\u52b9\u306b\u3057\u307e\u3057\u305f\" ) } } } @objc internal func onClickMyButton ( sender : UIButton ) { // \u30dc\u30bf\u30f3\u3092\u62bc\u3057\u305f\u56de\u6570. ButtonCnt += 1 // \u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u304c\u6709\u52b9\u306e\u3068\u304d. if UIApplication . shared . isIgnoringInteractionEvents == false { print ( \"\u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u304c\u6709\u52b9\u3067\u3059\" ) self . view . backgroundColor = UIColor . green // \u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u3092\u7121\u52b9\u306b\u3059\u308b. UIApplication . shared . beginIgnoringInteractionEvents () // \u7121\u52b9\u304c\u59cb\u307e\u3063\u305f\u6642\u9593\u3092\u53d6\u5f97. ignoreBegineTime = cnt print ( \"\u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u3092\u7121\u52b9\u306b\u3057\u307e\u3057\u305f\" ) print ( \"5\u79d2\u5f8c\u306b\u6709\u52b9\u306b\u306a\u308a\u307e\u3059\" ) // \u6700\u521d\u306b\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u305f\u3068\u304d\u3060\u3051\u30bf\u30a4\u30de\u30fc\u3092\u4f5c\u308b. if ButtonCnt == 1 { // \u30bf\u30a4\u30de\u30fc\u3092\u4f5c\u308b. // \u66f4\u65b0\u306e\u30a4\u30f3\u30bf\u30fc\u30d0\u30eb(0.1\u79d2). Timer . scheduledTimer ( timeInterval : 0.1 , // \u305d\u306e\u30af\u30e9\u30b9\u306e\u30e1\u30bd\u30c3\u30c9\u304b. target : self , // \u30e1\u30bd\u30c3\u30c9. selector : #selector ( ViewController . onUpdate ( timer :)), userInfo : nil , // \u4f55\u56de\u3082\u547c\u3073\u51fa\u3059\u304b\u3069\u3046\u304b. repeats : true ) } } } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 // // ViewController.swift // UIKit037_3.0 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var cnt : Float = 0 private var myLabel : UILabel ! private var ButtonCnt : Int = 0 private var TimerMergin : Float = 0 private var ignoreBegineTime : Float = 0 override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u9752\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . cyan // UIButton\u3092\u4f5c\u308b. let myButton : UIButton = UIButton () myButton . frame = CGRect ( x : 0 , y : 0 , width : 200 , height : 50 ) myButton . layer . cornerRadius = 20.0 myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : 400 ) myButton . backgroundColor = UIColor . red myButton . setTitle ( \"\u6709\u52b9/\u7121\u52b9\" , for : . normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchUpInside ) self . view . addSubview ( myButton ) // \u30bf\u30a4\u30de\u30fc\u7528\u30e9\u30d9\u30eb\u3092\u4f5c\u308b. myLabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myLabel . backgroundColor = UIColor . orange myLabel . layer . masksToBounds = true myLabel . layer . cornerRadius = 20.0 myLabel . text = \"Time: \\( Int ( cnt )) \" myLabel . textColor = UIColor . white myLabel . shadowColor = UIColor . gray myLabel . textAlignment = NSTextAlignment . center myLabel . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 200 ) self . view . addSubview ( myLabel ) self . view . backgroundColor = UIColor . cyan } //NSTimerInterval\u3067\u6307\u5b9a\u3055\u308c\u305f\u79d2\u6570\u6bce\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u30e1\u30bd\u30c3\u30c9. internal func onUpdate ( timer : Timer ){ cnt += 0.1 //\u6841\u6570\u3092\u6307\u5b9a\u3057\u3066\u6587\u5b57\u5217\u3092\u4f5c\u308b. let str = \"Time: \\( Int ( cnt )) \" myLabel . text = str // \u73fe\u5728\u306e\u30bf\u30a4\u30de\u30fc\u6642\u9593\u304b\u3089\u7121\u52b9\u304c\u59cb\u307e\u3063\u305f\u6642\u9593\u306e\u5dee. TimerMergin = cnt - ignoreBegineTime // \u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u304c\u7121\u52b9\u306e\u3068\u304d. if UIApplication . shared . isIgnoringInteractionEvents { // \u7121\u52b9\u306b\u306a\u3063\u3066\u304b\u30895\u79d2\u7d4c\u3063\u305f\u6642. if Int ( TimerMergin ) == 5 { print ( \"\u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u304c\u7121\u52b9\u3067\u3059\" ) self . view . backgroundColor = UIColor . cyan // \u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u3092\u6709\u52b9\u306b\u3059\u308b. UIApplication . shared . endIgnoringInteractionEvents () print ( \"\u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u3092\u6709\u52b9\u306b\u3057\u307e\u3057\u305f\" ) } } } internal func onClickMyButton ( sender : UIButton ) { // \u30dc\u30bf\u30f3\u3092\u62bc\u3057\u305f\u56de\u6570. ButtonCnt += 1 // \u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u304c\u6709\u52b9\u306e\u3068\u304d. if UIApplication . shared . isIgnoringInteractionEvents == false { print ( \"\u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u304c\u6709\u52b9\u3067\u3059\" ) self . view . backgroundColor = UIColor . green // \u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u3092\u7121\u52b9\u306b\u3059\u308b. UIApplication . shared . beginIgnoringInteractionEvents () // \u7121\u52b9\u304c\u59cb\u307e\u3063\u305f\u6642\u9593\u3092\u53d6\u5f97. ignoreBegineTime = cnt print ( \"\u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u3092\u7121\u52b9\u306b\u3057\u307e\u3057\u305f\" ) print ( \"5\u79d2\u5f8c\u306b\u6709\u52b9\u306b\u306a\u308a\u307e\u3059\" ) // \u6700\u521d\u306b\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u305f\u3068\u304d\u3060\u3051\u30bf\u30a4\u30de\u30fc\u3092\u4f5c\u308b. if ButtonCnt == 1 { // \u30bf\u30a4\u30de\u30fc\u3092\u4f5c\u308b. // \u66f4\u65b0\u306e\u30a4\u30f3\u30bf\u30fc\u30d0\u30eb(0.1\u79d2). Timer . scheduledTimer ( timeInterval : 0.1 , // \u305d\u306e\u30af\u30e9\u30b9\u306e\u30e1\u30bd\u30c3\u30c9\u304b. target : self , // \u30e1\u30bd\u30c3\u30c9. selector : #selector ( ViewController . onUpdate ( timer :)), userInfo : nil , // \u4f55\u56de\u3082\u547c\u3073\u51fa\u3059\u304b\u3069\u3046\u304b. repeats : true ) } } } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 // // ViewController.swift // UIKit037_2.3 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var cnt : Float = 0 private var myLabel : UILabel ! private var ButtonCnt : Int = 0 private var TimerMergin : Float = 0 private var ignoreBegineTime : Float = 0 override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u9752\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . cyanColor () // UIButton\u3092\u4f5c\u308b. let myButton : UIButton = UIButton () myButton . frame = CGRectMake ( 0 , 0 , 200 , 50 ) myButton . layer . cornerRadius = 20.0 myButton . layer . position = CGPointMake ( self . view . frame . width / 2 , 400 ) myButton . backgroundColor = UIColor . redColor () myButton . setTitle ( \"\u6709\u52b9/\u7121\u52b9\" , forState : . Normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : . TouchUpInside ) // \u30bf\u30a4\u30de\u30fc\u7528\u30e9\u30d9\u30eb\u3092\u4f5c\u308b. myLabel = UILabel ( frame : CGRectMake ( 0 , 0 , 200 , 50 )) myLabel . backgroundColor = UIColor . orangeColor () myLabel . layer . masksToBounds = true myLabel . layer . cornerRadius = 20.0 myLabel . text = \"Time: \\( Int ( cnt )) \" myLabel . textColor = UIColor . whiteColor () myLabel . shadowColor = UIColor . grayColor () myLabel . textAlignment = NSTextAlignment . Center myLabel . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 200 ) self . view . backgroundColor = UIColor . cyanColor () // view\u306b\u30e9\u30d9\u30eb\u3068\u30dc\u30bf\u30f3\u3092\u8ffd\u52a0. self . view . addSubview ( myLabel ) self . view . addSubview ( myButton ) } //NSTimerInterval\u3067\u6307\u5b9a\u3055\u308c\u305f\u79d2\u6570\u6bce\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u30e1\u30bd\u30c3\u30c9. internal func onUpdate ( timer : NSTimer ){ cnt += 0.1 //\u6841\u6570\u3092\u6307\u5b9a\u3057\u3066\u6587\u5b57\u5217\u3092\u4f5c\u308b. let str = \"Time: \\( Int ( cnt )) \" myLabel . text = str // \u73fe\u5728\u306e\u30bf\u30a4\u30de\u30fc\u6642\u9593\u304b\u3089\u7121\u52b9\u304c\u59cb\u307e\u3063\u305f\u6642\u9593\u306e\u5dee. TimerMergin = cnt - ignoreBegineTime // \u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u304c\u7121\u52b9\u306e\u3068\u304d. if UIApplication . sharedApplication (). isIgnoringInteractionEvents () { // \u7121\u52b9\u306b\u306a\u3063\u3066\u304b\u30895\u79d2\u7d4c\u3063\u305f\u6642. if Int ( TimerMergin ) == 5 { print ( \"\u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u304c\u7121\u52b9\u3067\u3059\" ) self . view . backgroundColor = UIColor . cyanColor () // \u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u3092\u6709\u52b9\u306b\u3059\u308b. UIApplication . sharedApplication (). endIgnoringInteractionEvents () print ( \"\u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u3092\u6709\u52b9\u306b\u3057\u307e\u3057\u305f\" ) } } } internal func onClickMyButton ( sender : UIButton ) { // \u30dc\u30bf\u30f3\u3092\u62bc\u3057\u305f\u56de\u6570. ButtonCnt += 1 // \u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u304c\u6709\u52b9\u306e\u3068\u304d. if UIApplication . sharedApplication (). isIgnoringInteractionEvents () == false { print ( \"\u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u304c\u6709\u52b9\u3067\u3059\" ) self . view . backgroundColor = UIColor . greenColor () // \u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u3092\u7121\u52b9\u306b\u3059\u308b. UIApplication . sharedApplication (). beginIgnoringInteractionEvents () // \u7121\u52b9\u304c\u59cb\u307e\u3063\u305f\u6642\u9593\u3092\u53d6\u5f97. ignoreBegineTime = cnt print ( \"\u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u3092\u7121\u52b9\u306b\u3057\u307e\u3057\u305f\" ) print ( \"5\u79d2\u5f8c\u306b\u6709\u52b9\u306b\u306a\u308a\u307e\u3059\" ) // \u6700\u521d\u306b\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u305f\u3068\u304d\u3060\u3051\u30bf\u30a4\u30de\u30fc\u3092\u4f5c\u308b. if ButtonCnt == 1 { // \u30bf\u30a4\u30de\u30fc\u3092\u4f5c\u308b. // \u66f4\u65b0\u306e\u30a4\u30f3\u30bf\u30fc\u30d0\u30eb(0.1\u79d2). NSTimer . scheduledTimerWithTimeInterval ( 0.1 , // \u305d\u306e\u30af\u30e9\u30b9\u306e\u30e1\u30bd\u30c3\u30c9\u304b. target : self , // \u30e1\u30bd\u30c3\u30c9. selector : #selector ( ViewController . onUpdate ( _ :)), userInfo : nil , // \u4f55\u56de\u3082\u547c\u3073\u51fa\u3059\u304b\u3069\u3046\u304b. repeats : true ) } } } } 3.x\u30684.x\u306e\u5dee\u5206 onUpdate \u3001 onClickMyButton \u306b @objc \u3092\u8ffd\u52a0 2.3\u30683.0\u306e\u5dee\u5206 UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u306e\u5ec3\u6b62) UIApplication.sharedApplication() \u304c UIApplication.shared \u307e\u305f\u3001UIApplication.shared\u306e\u5404\u30e1\u30bd\u30c3\u30c9\u3002\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u540d\u524d\u304c\u5909\u66f4 NSTimer\u306e\u5ec3\u6b62\u3001Timer\u3078\u5909\u66f4. Reference Timer Class https://developer.apple.com/reference/foundation/timer beginIgnoringInteractionEvents Tasks https://developer.apple.com/reference/uikit/uiapplication/1623047-beginignoringinteractionevents","title":"\u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u306e\u6709\u52b9/\u7121\u52b9\u3092\u5207\u308a\u66ff\u3048\u308b"},{"location":"1.uikit/037_touchevent/#_1","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 // // ViewController.swift // UIKit037_4.0 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var cnt : Float = 0 private var myLabel : UILabel ! private var ButtonCnt : Int = 0 private var TimerMergin : Float = 0 private var ignoreBegineTime : Float = 0 override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u9752\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . cyan // UIButton\u3092\u4f5c\u308b. let myButton : UIButton = UIButton () myButton . frame = CGRect ( x : 0 , y : 0 , width : 200 , height : 50 ) myButton . layer . cornerRadius = 20.0 myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : 400 ) myButton . backgroundColor = UIColor . red myButton . setTitle ( \"\u6709\u52b9/\u7121\u52b9\" , for : . normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchUpInside ) self . view . addSubview ( myButton ) // \u30bf\u30a4\u30de\u30fc\u7528\u30e9\u30d9\u30eb\u3092\u4f5c\u308b. myLabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myLabel . backgroundColor = UIColor . orange myLabel . layer . masksToBounds = true myLabel . layer . cornerRadius = 20.0 myLabel . text = \"Time: \\( Int ( cnt )) \" myLabel . textColor = UIColor . white myLabel . shadowColor = UIColor . gray myLabel . textAlignment = NSTextAlignment . center myLabel . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 200 ) self . view . addSubview ( myLabel ) self . view . backgroundColor = UIColor . cyan } //NSTimerInterval\u3067\u6307\u5b9a\u3055\u308c\u305f\u79d2\u6570\u6bce\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u30e1\u30bd\u30c3\u30c9. @objc internal func onUpdate ( timer : Timer ){ cnt += 0.1 //\u6841\u6570\u3092\u6307\u5b9a\u3057\u3066\u6587\u5b57\u5217\u3092\u4f5c\u308b. let str = \"Time: \\( Int ( cnt )) \" myLabel . text = str // \u73fe\u5728\u306e\u30bf\u30a4\u30de\u30fc\u6642\u9593\u304b\u3089\u7121\u52b9\u304c\u59cb\u307e\u3063\u305f\u6642\u9593\u306e\u5dee. TimerMergin = cnt - ignoreBegineTime // \u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u304c\u7121\u52b9\u306e\u3068\u304d. if UIApplication . shared . isIgnoringInteractionEvents { // \u7121\u52b9\u306b\u306a\u3063\u3066\u304b\u30895\u79d2\u7d4c\u3063\u305f\u6642. if Int ( TimerMergin ) == 5 { print ( \"\u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u304c\u7121\u52b9\u3067\u3059\" ) self . view . backgroundColor = UIColor . cyan // \u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u3092\u6709\u52b9\u306b\u3059\u308b. UIApplication . shared . endIgnoringInteractionEvents () print ( \"\u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u3092\u6709\u52b9\u306b\u3057\u307e\u3057\u305f\" ) } } } @objc internal func onClickMyButton ( sender : UIButton ) { // \u30dc\u30bf\u30f3\u3092\u62bc\u3057\u305f\u56de\u6570. ButtonCnt += 1 // \u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u304c\u6709\u52b9\u306e\u3068\u304d. if UIApplication . shared . isIgnoringInteractionEvents == false { print ( \"\u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u304c\u6709\u52b9\u3067\u3059\" ) self . view . backgroundColor = UIColor . green // \u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u3092\u7121\u52b9\u306b\u3059\u308b. UIApplication . shared . beginIgnoringInteractionEvents () // \u7121\u52b9\u304c\u59cb\u307e\u3063\u305f\u6642\u9593\u3092\u53d6\u5f97. ignoreBegineTime = cnt print ( \"\u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u3092\u7121\u52b9\u306b\u3057\u307e\u3057\u305f\" ) print ( \"5\u79d2\u5f8c\u306b\u6709\u52b9\u306b\u306a\u308a\u307e\u3059\" ) // \u6700\u521d\u306b\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u305f\u3068\u304d\u3060\u3051\u30bf\u30a4\u30de\u30fc\u3092\u4f5c\u308b. if ButtonCnt == 1 { // \u30bf\u30a4\u30de\u30fc\u3092\u4f5c\u308b. // \u66f4\u65b0\u306e\u30a4\u30f3\u30bf\u30fc\u30d0\u30eb(0.1\u79d2). Timer . scheduledTimer ( timeInterval : 0.1 , // \u305d\u306e\u30af\u30e9\u30b9\u306e\u30e1\u30bd\u30c3\u30c9\u304b. target : self , // \u30e1\u30bd\u30c3\u30c9. selector : #selector ( ViewController . onUpdate ( timer :)), userInfo : nil , // \u4f55\u56de\u3082\u547c\u3073\u51fa\u3059\u304b\u3069\u3046\u304b. repeats : true ) } } } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 // // ViewController.swift // UIKit037_3.0 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var cnt : Float = 0 private var myLabel : UILabel ! private var ButtonCnt : Int = 0 private var TimerMergin : Float = 0 private var ignoreBegineTime : Float = 0 override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u9752\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . cyan // UIButton\u3092\u4f5c\u308b. let myButton : UIButton = UIButton () myButton . frame = CGRect ( x : 0 , y : 0 , width : 200 , height : 50 ) myButton . layer . cornerRadius = 20.0 myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : 400 ) myButton . backgroundColor = UIColor . red myButton . setTitle ( \"\u6709\u52b9/\u7121\u52b9\" , for : . normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchUpInside ) self . view . addSubview ( myButton ) // \u30bf\u30a4\u30de\u30fc\u7528\u30e9\u30d9\u30eb\u3092\u4f5c\u308b. myLabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myLabel . backgroundColor = UIColor . orange myLabel . layer . masksToBounds = true myLabel . layer . cornerRadius = 20.0 myLabel . text = \"Time: \\( Int ( cnt )) \" myLabel . textColor = UIColor . white myLabel . shadowColor = UIColor . gray myLabel . textAlignment = NSTextAlignment . center myLabel . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 200 ) self . view . addSubview ( myLabel ) self . view . backgroundColor = UIColor . cyan } //NSTimerInterval\u3067\u6307\u5b9a\u3055\u308c\u305f\u79d2\u6570\u6bce\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u30e1\u30bd\u30c3\u30c9. internal func onUpdate ( timer : Timer ){ cnt += 0.1 //\u6841\u6570\u3092\u6307\u5b9a\u3057\u3066\u6587\u5b57\u5217\u3092\u4f5c\u308b. let str = \"Time: \\( Int ( cnt )) \" myLabel . text = str // \u73fe\u5728\u306e\u30bf\u30a4\u30de\u30fc\u6642\u9593\u304b\u3089\u7121\u52b9\u304c\u59cb\u307e\u3063\u305f\u6642\u9593\u306e\u5dee. TimerMergin = cnt - ignoreBegineTime // \u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u304c\u7121\u52b9\u306e\u3068\u304d. if UIApplication . shared . isIgnoringInteractionEvents { // \u7121\u52b9\u306b\u306a\u3063\u3066\u304b\u30895\u79d2\u7d4c\u3063\u305f\u6642. if Int ( TimerMergin ) == 5 { print ( \"\u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u304c\u7121\u52b9\u3067\u3059\" ) self . view . backgroundColor = UIColor . cyan // \u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u3092\u6709\u52b9\u306b\u3059\u308b. UIApplication . shared . endIgnoringInteractionEvents () print ( \"\u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u3092\u6709\u52b9\u306b\u3057\u307e\u3057\u305f\" ) } } } internal func onClickMyButton ( sender : UIButton ) { // \u30dc\u30bf\u30f3\u3092\u62bc\u3057\u305f\u56de\u6570. ButtonCnt += 1 // \u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u304c\u6709\u52b9\u306e\u3068\u304d. if UIApplication . shared . isIgnoringInteractionEvents == false { print ( \"\u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u304c\u6709\u52b9\u3067\u3059\" ) self . view . backgroundColor = UIColor . green // \u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u3092\u7121\u52b9\u306b\u3059\u308b. UIApplication . shared . beginIgnoringInteractionEvents () // \u7121\u52b9\u304c\u59cb\u307e\u3063\u305f\u6642\u9593\u3092\u53d6\u5f97. ignoreBegineTime = cnt print ( \"\u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u3092\u7121\u52b9\u306b\u3057\u307e\u3057\u305f\" ) print ( \"5\u79d2\u5f8c\u306b\u6709\u52b9\u306b\u306a\u308a\u307e\u3059\" ) // \u6700\u521d\u306b\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u305f\u3068\u304d\u3060\u3051\u30bf\u30a4\u30de\u30fc\u3092\u4f5c\u308b. if ButtonCnt == 1 { // \u30bf\u30a4\u30de\u30fc\u3092\u4f5c\u308b. // \u66f4\u65b0\u306e\u30a4\u30f3\u30bf\u30fc\u30d0\u30eb(0.1\u79d2). Timer . scheduledTimer ( timeInterval : 0.1 , // \u305d\u306e\u30af\u30e9\u30b9\u306e\u30e1\u30bd\u30c3\u30c9\u304b. target : self , // \u30e1\u30bd\u30c3\u30c9. selector : #selector ( ViewController . onUpdate ( timer :)), userInfo : nil , // \u4f55\u56de\u3082\u547c\u3073\u51fa\u3059\u304b\u3069\u3046\u304b. repeats : true ) } } } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 // // ViewController.swift // UIKit037_2.3 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var cnt : Float = 0 private var myLabel : UILabel ! private var ButtonCnt : Int = 0 private var TimerMergin : Float = 0 private var ignoreBegineTime : Float = 0 override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u9752\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . cyanColor () // UIButton\u3092\u4f5c\u308b. let myButton : UIButton = UIButton () myButton . frame = CGRectMake ( 0 , 0 , 200 , 50 ) myButton . layer . cornerRadius = 20.0 myButton . layer . position = CGPointMake ( self . view . frame . width / 2 , 400 ) myButton . backgroundColor = UIColor . redColor () myButton . setTitle ( \"\u6709\u52b9/\u7121\u52b9\" , forState : . Normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : . TouchUpInside ) // \u30bf\u30a4\u30de\u30fc\u7528\u30e9\u30d9\u30eb\u3092\u4f5c\u308b. myLabel = UILabel ( frame : CGRectMake ( 0 , 0 , 200 , 50 )) myLabel . backgroundColor = UIColor . orangeColor () myLabel . layer . masksToBounds = true myLabel . layer . cornerRadius = 20.0 myLabel . text = \"Time: \\( Int ( cnt )) \" myLabel . textColor = UIColor . whiteColor () myLabel . shadowColor = UIColor . grayColor () myLabel . textAlignment = NSTextAlignment . Center myLabel . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 200 ) self . view . backgroundColor = UIColor . cyanColor () // view\u306b\u30e9\u30d9\u30eb\u3068\u30dc\u30bf\u30f3\u3092\u8ffd\u52a0. self . view . addSubview ( myLabel ) self . view . addSubview ( myButton ) } //NSTimerInterval\u3067\u6307\u5b9a\u3055\u308c\u305f\u79d2\u6570\u6bce\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u30e1\u30bd\u30c3\u30c9. internal func onUpdate ( timer : NSTimer ){ cnt += 0.1 //\u6841\u6570\u3092\u6307\u5b9a\u3057\u3066\u6587\u5b57\u5217\u3092\u4f5c\u308b. let str = \"Time: \\( Int ( cnt )) \" myLabel . text = str // \u73fe\u5728\u306e\u30bf\u30a4\u30de\u30fc\u6642\u9593\u304b\u3089\u7121\u52b9\u304c\u59cb\u307e\u3063\u305f\u6642\u9593\u306e\u5dee. TimerMergin = cnt - ignoreBegineTime // \u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u304c\u7121\u52b9\u306e\u3068\u304d. if UIApplication . sharedApplication (). isIgnoringInteractionEvents () { // \u7121\u52b9\u306b\u306a\u3063\u3066\u304b\u30895\u79d2\u7d4c\u3063\u305f\u6642. if Int ( TimerMergin ) == 5 { print ( \"\u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u304c\u7121\u52b9\u3067\u3059\" ) self . view . backgroundColor = UIColor . cyanColor () // \u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u3092\u6709\u52b9\u306b\u3059\u308b. UIApplication . sharedApplication (). endIgnoringInteractionEvents () print ( \"\u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u3092\u6709\u52b9\u306b\u3057\u307e\u3057\u305f\" ) } } } internal func onClickMyButton ( sender : UIButton ) { // \u30dc\u30bf\u30f3\u3092\u62bc\u3057\u305f\u56de\u6570. ButtonCnt += 1 // \u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u304c\u6709\u52b9\u306e\u3068\u304d. if UIApplication . sharedApplication (). isIgnoringInteractionEvents () == false { print ( \"\u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u304c\u6709\u52b9\u3067\u3059\" ) self . view . backgroundColor = UIColor . greenColor () // \u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u3092\u7121\u52b9\u306b\u3059\u308b. UIApplication . sharedApplication (). beginIgnoringInteractionEvents () // \u7121\u52b9\u304c\u59cb\u307e\u3063\u305f\u6642\u9593\u3092\u53d6\u5f97. ignoreBegineTime = cnt print ( \"\u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u3092\u7121\u52b9\u306b\u3057\u307e\u3057\u305f\" ) print ( \"5\u79d2\u5f8c\u306b\u6709\u52b9\u306b\u306a\u308a\u307e\u3059\" ) // \u6700\u521d\u306b\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u305f\u3068\u304d\u3060\u3051\u30bf\u30a4\u30de\u30fc\u3092\u4f5c\u308b. if ButtonCnt == 1 { // \u30bf\u30a4\u30de\u30fc\u3092\u4f5c\u308b. // \u66f4\u65b0\u306e\u30a4\u30f3\u30bf\u30fc\u30d0\u30eb(0.1\u79d2). NSTimer . scheduledTimerWithTimeInterval ( 0.1 , // \u305d\u306e\u30af\u30e9\u30b9\u306e\u30e1\u30bd\u30c3\u30c9\u304b. target : self , // \u30e1\u30bd\u30c3\u30c9. selector : #selector ( ViewController . onUpdate ( _ :)), userInfo : nil , // \u4f55\u56de\u3082\u547c\u3073\u51fa\u3059\u304b\u3069\u3046\u304b. repeats : true ) } } } }","title":"\u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u306e\u6709\u52b9/\u7121\u52b9\u3092\u5207\u308a\u66ff\u3048\u308b"},{"location":"1.uikit/037_touchevent/#3x4x","text":"onUpdate \u3001 onClickMyButton \u306b @objc \u3092\u8ffd\u52a0","title":"3.x\u30684.x\u306e\u5dee\u5206"},{"location":"1.uikit/037_touchevent/#2330","text":"UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u306e\u5ec3\u6b62) UIApplication.sharedApplication() \u304c UIApplication.shared \u307e\u305f\u3001UIApplication.shared\u306e\u5404\u30e1\u30bd\u30c3\u30c9\u3002\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u540d\u524d\u304c\u5909\u66f4 NSTimer\u306e\u5ec3\u6b62\u3001Timer\u3078\u5909\u66f4.","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/037_touchevent/#reference","text":"Timer Class https://developer.apple.com/reference/foundation/timer beginIgnoringInteractionEvents Tasks https://developer.apple.com/reference/uikit/uiapplication/1623047-beginignoringinteractionevents","title":"Reference"},{"location":"1.uikit/038_uitextfield/","text":"UITextField\u306b\u6587\u5b57\u6570\u5236\u9650\u3092\u8a2d\u3051\u308b Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 // // ViewController.swift // UIKit038_4.0 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UITextFieldDelegate { override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u7dd1\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . green // UITextField\u3092\u751f\u6210. let myTextField : UITextField = UITextField ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 30 )) // \u6700\u521d\u306b\u8868\u793a\u3059\u308b\u6587\u5b57. myTextField . text = \"Hi\" // Delegate\u3092\u8a2d\u5b9a. myTextField . delegate = self // \u67a0\u306e\u7dda\u3092\u8868\u793a. myTextField . borderStyle = UITextField . BorderStyle . roundedRect // UITextField\u306e\u8868\u793a\u3059\u308b\u4f4d\u7f6e. myTextField . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 100 ) // TextView\u3092view\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myTextField ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } /* \u30c6\u30ad\u30b9\u30c8\u304c\u7de8\u96c6\u3055\u308c\u305f\u969b\u306b\u547c\u3070\u308c\u308b. */ func textField ( _ textField : UITextField , shouldChangeCharactersIn range : NSRange , replacementString string : String ) -> Bool { // \u6587\u5b57\u6570\u6700\u5927\u3092\u6c7a\u3081\u308b. let maxLength : Int = 6 // \u5165\u529b\u6e08\u307f\u306e\u6587\u5b57\u3068\u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u3092\u5408\u308f\u305b\u3066\u53d6\u5f97. let str = textField . text ! + string // \u6587\u5b57\u6570\u304cmaxLength\u4ee5\u4e0b\u306a\u3089true\u3092\u8fd4\u3059. if str . characters . count < maxLength { return true } print ( \"6\u6587\u5b57\u3092\u8d85\u3048\u3066\u3044\u307e\u3059\" ) return false } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 // // ViewController.swift // UIKit038_3.0 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UITextFieldDelegate { override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u7dd1\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . green // UITextField\u3092\u751f\u6210. let myTextField : UITextField = UITextField ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 30 )) // \u6700\u521d\u306b\u8868\u793a\u3059\u308b\u6587\u5b57. myTextField . text = \"Hi\" // Delegate\u3092\u8a2d\u5b9a. myTextField . delegate = self // \u67a0\u306e\u7dda\u3092\u8868\u793a. myTextField . borderStyle = UITextBorderStyle . roundedRect // UITextField\u306e\u8868\u793a\u3059\u308b\u4f4d\u7f6e. myTextField . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 100 ) // TextView\u3092view\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myTextField ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } /* \u30c6\u30ad\u30b9\u30c8\u304c\u7de8\u96c6\u3055\u308c\u305f\u969b\u306b\u547c\u3070\u308c\u308b. */ func textField ( _ textField : UITextField , shouldChangeCharactersIn range : NSRange , replacementString string : String ) -> Bool { // \u6587\u5b57\u6570\u6700\u5927\u3092\u6c7a\u3081\u308b. let maxLength : Int = 6 // \u5165\u529b\u6e08\u307f\u306e\u6587\u5b57\u3068\u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u3092\u5408\u308f\u305b\u3066\u53d6\u5f97. let str = textField . text ! + string // \u6587\u5b57\u6570\u304cmaxLength\u4ee5\u4e0b\u306a\u3089true\u3092\u8fd4\u3059. if str . characters . count < maxLength { return true } print ( \"6\u6587\u5b57\u3092\u8d85\u3048\u3066\u3044\u307e\u3059\" ) return false } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 // // ViewController.swift // UIKit038_2.3 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UITextFieldDelegate { override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u7dd1\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . greenColor () // UITextField\u3092\u751f\u6210. let myTextField : UITextField = UITextField ( frame : CGRectMake ( 0 , 0 , 200 , 30 )) // \u6700\u521d\u306b\u8868\u793a\u3059\u308b\u6587\u5b57. myTextField . text = \"Hi\" // Delegate\u3092\u8a2d\u5b9a. myTextField . delegate = self // \u67a0\u306e\u7dda\u3092\u8868\u793a. myTextField . borderStyle = UITextBorderStyle . RoundedRect // UITextField\u306e\u8868\u793a\u3059\u308b\u4f4d\u7f6e. myTextField . layer . position = CGPointMake ( self . view . bounds . width / 2 , 100 ) // TextView\u3092view\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myTextField ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } /* \u30c6\u30ad\u30b9\u30c8\u304c\u7de8\u96c6\u3055\u308c\u305f\u969b\u306b\u547c\u3070\u308c\u308b. */ func textField ( textField : UITextField , shouldChangeCharactersInRange range : NSRange , replacementString string : String ) -> Bool { // \u6587\u5b57\u6570\u6700\u5927\u3092\u6c7a\u3081\u308b. let maxLength : Int = 6 // \u5165\u529b\u6e08\u307f\u306e\u6587\u5b57\u3068\u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u3092\u5408\u308f\u305b\u3066\u53d6\u5f97. let str = textField . text ! + string // \u6587\u5b57\u6570\u304cmaxLength\u4ee5\u4e0b\u306a\u3089true\u3092\u8fd4\u3059. if str . characters . count < maxLength { return true } print ( \"6\u6587\u5b57\u3092\u8d85\u3048\u3066\u3044\u307e\u3059\" ) return false } } 3.x\u30684.x\u306e\u5dee\u5206 UITextBorderStyle \u304c UITextField.BorderStyle \u306b\u5909\u66f4 characters \u306f\u975e\u63a8\u5968 2.3\u30683.0\u306e\u5dee\u5206 UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u306e\u5ec3\u6b62) UITextFieldDelegate\u306e\u30c7\u30ea\u30b2\u30fc\u30c8\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u304c\u5909\u66f4 UITextBorderStyle\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u540d\u304c\u4e00\u90e8\u5909\u66f4(RoundedRect->roundedRect) Reference shouldChangeCharactersIn Tasks https://developer.apple.com/reference/uikit/uitextfielddelegate/1619599-textfield","title":"UITextField\u306b\u6587\u5b57\u6570\u5236\u9650\u3092\u8a2d\u3051\u308b"},{"location":"1.uikit/038_uitextfield/#uitextfield","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 // // ViewController.swift // UIKit038_4.0 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UITextFieldDelegate { override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u7dd1\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . green // UITextField\u3092\u751f\u6210. let myTextField : UITextField = UITextField ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 30 )) // \u6700\u521d\u306b\u8868\u793a\u3059\u308b\u6587\u5b57. myTextField . text = \"Hi\" // Delegate\u3092\u8a2d\u5b9a. myTextField . delegate = self // \u67a0\u306e\u7dda\u3092\u8868\u793a. myTextField . borderStyle = UITextField . BorderStyle . roundedRect // UITextField\u306e\u8868\u793a\u3059\u308b\u4f4d\u7f6e. myTextField . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 100 ) // TextView\u3092view\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myTextField ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } /* \u30c6\u30ad\u30b9\u30c8\u304c\u7de8\u96c6\u3055\u308c\u305f\u969b\u306b\u547c\u3070\u308c\u308b. */ func textField ( _ textField : UITextField , shouldChangeCharactersIn range : NSRange , replacementString string : String ) -> Bool { // \u6587\u5b57\u6570\u6700\u5927\u3092\u6c7a\u3081\u308b. let maxLength : Int = 6 // \u5165\u529b\u6e08\u307f\u306e\u6587\u5b57\u3068\u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u3092\u5408\u308f\u305b\u3066\u53d6\u5f97. let str = textField . text ! + string // \u6587\u5b57\u6570\u304cmaxLength\u4ee5\u4e0b\u306a\u3089true\u3092\u8fd4\u3059. if str . characters . count < maxLength { return true } print ( \"6\u6587\u5b57\u3092\u8d85\u3048\u3066\u3044\u307e\u3059\" ) return false } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 // // ViewController.swift // UIKit038_3.0 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UITextFieldDelegate { override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u7dd1\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . green // UITextField\u3092\u751f\u6210. let myTextField : UITextField = UITextField ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 30 )) // \u6700\u521d\u306b\u8868\u793a\u3059\u308b\u6587\u5b57. myTextField . text = \"Hi\" // Delegate\u3092\u8a2d\u5b9a. myTextField . delegate = self // \u67a0\u306e\u7dda\u3092\u8868\u793a. myTextField . borderStyle = UITextBorderStyle . roundedRect // UITextField\u306e\u8868\u793a\u3059\u308b\u4f4d\u7f6e. myTextField . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 100 ) // TextView\u3092view\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myTextField ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } /* \u30c6\u30ad\u30b9\u30c8\u304c\u7de8\u96c6\u3055\u308c\u305f\u969b\u306b\u547c\u3070\u308c\u308b. */ func textField ( _ textField : UITextField , shouldChangeCharactersIn range : NSRange , replacementString string : String ) -> Bool { // \u6587\u5b57\u6570\u6700\u5927\u3092\u6c7a\u3081\u308b. let maxLength : Int = 6 // \u5165\u529b\u6e08\u307f\u306e\u6587\u5b57\u3068\u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u3092\u5408\u308f\u305b\u3066\u53d6\u5f97. let str = textField . text ! + string // \u6587\u5b57\u6570\u304cmaxLength\u4ee5\u4e0b\u306a\u3089true\u3092\u8fd4\u3059. if str . characters . count < maxLength { return true } print ( \"6\u6587\u5b57\u3092\u8d85\u3048\u3066\u3044\u307e\u3059\" ) return false } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 // // ViewController.swift // UIKit038_2.3 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UITextFieldDelegate { override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u7dd1\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . greenColor () // UITextField\u3092\u751f\u6210. let myTextField : UITextField = UITextField ( frame : CGRectMake ( 0 , 0 , 200 , 30 )) // \u6700\u521d\u306b\u8868\u793a\u3059\u308b\u6587\u5b57. myTextField . text = \"Hi\" // Delegate\u3092\u8a2d\u5b9a. myTextField . delegate = self // \u67a0\u306e\u7dda\u3092\u8868\u793a. myTextField . borderStyle = UITextBorderStyle . RoundedRect // UITextField\u306e\u8868\u793a\u3059\u308b\u4f4d\u7f6e. myTextField . layer . position = CGPointMake ( self . view . bounds . width / 2 , 100 ) // TextView\u3092view\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myTextField ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } /* \u30c6\u30ad\u30b9\u30c8\u304c\u7de8\u96c6\u3055\u308c\u305f\u969b\u306b\u547c\u3070\u308c\u308b. */ func textField ( textField : UITextField , shouldChangeCharactersInRange range : NSRange , replacementString string : String ) -> Bool { // \u6587\u5b57\u6570\u6700\u5927\u3092\u6c7a\u3081\u308b. let maxLength : Int = 6 // \u5165\u529b\u6e08\u307f\u306e\u6587\u5b57\u3068\u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u3092\u5408\u308f\u305b\u3066\u53d6\u5f97. let str = textField . text ! + string // \u6587\u5b57\u6570\u304cmaxLength\u4ee5\u4e0b\u306a\u3089true\u3092\u8fd4\u3059. if str . characters . count < maxLength { return true } print ( \"6\u6587\u5b57\u3092\u8d85\u3048\u3066\u3044\u307e\u3059\" ) return false } }","title":"UITextField\u306b\u6587\u5b57\u6570\u5236\u9650\u3092\u8a2d\u3051\u308b"},{"location":"1.uikit/038_uitextfield/#3x4x","text":"UITextBorderStyle \u304c UITextField.BorderStyle \u306b\u5909\u66f4 characters \u306f\u975e\u63a8\u5968","title":"3.x\u30684.x\u306e\u5dee\u5206"},{"location":"1.uikit/038_uitextfield/#2330","text":"UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u306e\u5ec3\u6b62) UITextFieldDelegate\u306e\u30c7\u30ea\u30b2\u30fc\u30c8\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u304c\u5909\u66f4 UITextBorderStyle\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u540d\u304c\u4e00\u90e8\u5909\u66f4(RoundedRect->roundedRect)","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/038_uitextfield/#reference","text":"shouldChangeCharactersIn Tasks https://developer.apple.com/reference/uikit/uitextfielddelegate/1619599-textfield","title":"Reference"},{"location":"1.uikit/039_uitextfield/","text":"UITextField\u306e\u5165\u529b\u3092\u30d1\u30b9\u30ef\u30fc\u30c9\u5f62\u5f0f\u306b\u3059\u308b Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 // // ViewController.swift // UIKit039_4.0 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UITextFieldDelegate { override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u30aa\u30ec\u30f3\u30b8\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . orange // UITextField\u3092\u751f\u6210. let myTextField : UITextField = UITextField ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 30 )) // Delegate\u3092\u8a2d\u5b9a. myTextField . delegate = self // \u67a0\u306e\u7dda\u3092\u8868\u793a. myTextField . borderStyle = UITextField . BorderStyle . roundedRect // UITextField\u306e\u8868\u793a\u3059\u308b\u4f4d\u7f6e. myTextField . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 100 ) // \u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u3092\u975e\u8868\u793a\u30e2\u30fc\u30c9\u306b\u3059\u308b. myTextField . isSecureTextEntry = true // TextView\u3092view\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myTextField ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 // // ViewController.swift // UIKit039_3.0 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UITextFieldDelegate { override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u30aa\u30ec\u30f3\u30b8\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . orange // UITextField\u3092\u751f\u6210. let myTextField : UITextField = UITextField ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 30 )) // Delegate\u3092\u8a2d\u5b9a. myTextField . delegate = self // \u67a0\u306e\u7dda\u3092\u8868\u793a. myTextField . borderStyle = UITextBorderStyle . roundedRect // UITextField\u306e\u8868\u793a\u3059\u308b\u4f4d\u7f6e. myTextField . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 100 ) // \u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u3092\u975e\u8868\u793a\u30e2\u30fc\u30c9\u306b\u3059\u308b. myTextField . isSecureTextEntry = true // TextView\u3092view\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myTextField ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 // // ViewController.swift // UIKit039_2.3 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UITextFieldDelegate { override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u30aa\u30ec\u30f3\u30b8\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . orangeColor () // UITextField\u3092\u751f\u6210. let myTextField : UITextField = UITextField ( frame : CGRectMake ( 0 , 0 , 200 , 30 )) // Delegate\u3092\u8a2d\u5b9a. myTextField . delegate = self // \u67a0\u306e\u7dda\u3092\u8868\u793a. myTextField . borderStyle = UITextBorderStyle . RoundedRect // UITextField\u306e\u8868\u793a\u3059\u308b\u4f4d\u7f6e. myTextField . layer . position = CGPointMake ( self . view . bounds . width / 2 , 100 ) // \u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u3092\u975e\u8868\u793a\u30e2\u30fc\u30c9\u306b\u3059\u308b. myTextField . secureTextEntry = true // TextView\u3092view\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myTextField ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } 3.x\u30684.x\u306e\u5dee\u5206 UITextBorderStyle \u304c UITextField.BorderStyle \u306b\u5909\u66f4 2.3\u30683.0\u306e\u5dee\u5206 UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u306e\u5ec3\u6b62) UITextField\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u540d\u304c\u4e00\u90e8\u5909\u66f4(secureTextEntry->isSecureTextEntry) Reference UITextField Class https://developer.apple.com/reference/uikit/uitextfield","title":"UITextField\u306e\u5165\u529b\u3092\u30d1\u30b9\u30ef\u30fc\u30c9\u5f62\u5f0f\u306b\u3059\u308b"},{"location":"1.uikit/039_uitextfield/#uitextfield","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 // // ViewController.swift // UIKit039_4.0 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UITextFieldDelegate { override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u30aa\u30ec\u30f3\u30b8\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . orange // UITextField\u3092\u751f\u6210. let myTextField : UITextField = UITextField ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 30 )) // Delegate\u3092\u8a2d\u5b9a. myTextField . delegate = self // \u67a0\u306e\u7dda\u3092\u8868\u793a. myTextField . borderStyle = UITextField . BorderStyle . roundedRect // UITextField\u306e\u8868\u793a\u3059\u308b\u4f4d\u7f6e. myTextField . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 100 ) // \u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u3092\u975e\u8868\u793a\u30e2\u30fc\u30c9\u306b\u3059\u308b. myTextField . isSecureTextEntry = true // TextView\u3092view\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myTextField ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 // // ViewController.swift // UIKit039_3.0 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UITextFieldDelegate { override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u30aa\u30ec\u30f3\u30b8\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . orange // UITextField\u3092\u751f\u6210. let myTextField : UITextField = UITextField ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 30 )) // Delegate\u3092\u8a2d\u5b9a. myTextField . delegate = self // \u67a0\u306e\u7dda\u3092\u8868\u793a. myTextField . borderStyle = UITextBorderStyle . roundedRect // UITextField\u306e\u8868\u793a\u3059\u308b\u4f4d\u7f6e. myTextField . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 100 ) // \u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u3092\u975e\u8868\u793a\u30e2\u30fc\u30c9\u306b\u3059\u308b. myTextField . isSecureTextEntry = true // TextView\u3092view\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myTextField ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 // // ViewController.swift // UIKit039_2.3 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UITextFieldDelegate { override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u30aa\u30ec\u30f3\u30b8\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . orangeColor () // UITextField\u3092\u751f\u6210. let myTextField : UITextField = UITextField ( frame : CGRectMake ( 0 , 0 , 200 , 30 )) // Delegate\u3092\u8a2d\u5b9a. myTextField . delegate = self // \u67a0\u306e\u7dda\u3092\u8868\u793a. myTextField . borderStyle = UITextBorderStyle . RoundedRect // UITextField\u306e\u8868\u793a\u3059\u308b\u4f4d\u7f6e. myTextField . layer . position = CGPointMake ( self . view . bounds . width / 2 , 100 ) // \u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u3092\u975e\u8868\u793a\u30e2\u30fc\u30c9\u306b\u3059\u308b. myTextField . secureTextEntry = true // TextView\u3092view\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myTextField ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } }","title":"UITextField\u306e\u5165\u529b\u3092\u30d1\u30b9\u30ef\u30fc\u30c9\u5f62\u5f0f\u306b\u3059\u308b"},{"location":"1.uikit/039_uitextfield/#3x4x","text":"UITextBorderStyle \u304c UITextField.BorderStyle \u306b\u5909\u66f4","title":"3.x\u30684.x\u306e\u5dee\u5206"},{"location":"1.uikit/039_uitextfield/#2330","text":"UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u306e\u5ec3\u6b62) UITextField\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u540d\u304c\u4e00\u90e8\u5909\u66f4(secureTextEntry->isSecureTextEntry)","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/039_uitextfield/#reference","text":"UITextField Class https://developer.apple.com/reference/uikit/uitextfield","title":"Reference"},{"location":"1.uikit/040_gesturerecognizer/","text":"GestureRecognizer\u306e\u30a4\u30d9\u30f3\u30c8\u53d6\u5f97 Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 // // ViewController.swift // UIKit040_4.0 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var tapLabel : UILabel ! private var pinchGestureLabel : UILabel ! private var swipeLabel : UILabel ! private var longPressLabel : UILabel ! private var panLabel : UILabel ! private var rotateLabel : UILabel ! private var edgeLabel : UILabel ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u8d64\u8272\u306b. self . view . backgroundColor = UIColor . white // \u30bf\u30c3\u30d7\u3092\u8a8d\u8b58. let myTap = UITapGestureRecognizer ( target : self , action : #selector ( ViewController . tapGesture ( sender :))) // \u30d4\u30f3\u30c1\u3092\u8a8d\u8b58. let myPinchGesture = UIPinchGestureRecognizer ( target : self , action : #selector ( ViewController . pinchGesture ( sender :))) // \u30b9\u30ef\u30a4\u30d7\u8a8d\u8b58. let mySwipe = UISwipeGestureRecognizer ( target : self , action : #selector ( ViewController . swipeGesture ( sender :))) // \u30b9\u30ef\u30a4\u30d7\u8a8d\u8b58-2\u672c\u6307\u3067\u30b9\u30ef\u30a4\u30d7. mySwipe . numberOfTouchesRequired = 2 // \u9577\u62bc\u3057\u3092\u8a8d\u8b58. let myLongPressGesture = UILongPressGestureRecognizer ( target : self , action : #selector ( ViewController . longPressGesture ( sender :))) // \u9577\u62bc\u3057-\u6700\u4f4e2\u79d2\u9593\u306f\u9577\u62bc\u3057\u3059\u308b. myLongPressGesture . minimumPressDuration = 2.0 // \u9577\u62bc\u3057-\u6307\u306e\u30ba\u30ec\u306f15px\u307e\u3067. myLongPressGesture . allowableMovement = 150 // \u30d1\u30f3\u8a8d\u8b58. let myPan = UIPanGestureRecognizer ( target : self , action : #selector ( ViewController . panGesture ( sender :))) // \u30d1\u30f3\u8a8d\u8b58-3\u672c\u6307\u3067\u30d1\u30f3. myPan . minimumNumberOfTouches = 3 // \u56de\u8ee2\u3092\u8a8d\u8b58. let myRotate = UIRotationGestureRecognizer ( target : self , action : #selector ( ViewController . rotateGesture ( sender :))) // \u30a8\u30c3\u30b8\u3092\u8a8d\u8b58. let mySEdghePan = UIScreenEdgePanGestureRecognizer ( target : self , action : #selector ( ViewController . edgeGesture ( sender :))) // \u30a8\u30c3\u30b8\u3092\u8a8d\u8b58-\u6700\u4f4e\u63073\u672c\u3067\u53cd\u5fdc. mySEdghePan . minimumNumberOfTouches = 4 // \u30a8\u30c3\u30b8\u3092\u8a8d\u8b58-\u5de6\u5074. mySEdghePan . edges = UIRectEdge . left // View\u306b\u8ffd\u52a0. self . view . addGestureRecognizer ( myTap ) self . view . addGestureRecognizer ( myPinchGesture ) self . view . addGestureRecognizer ( mySwipe ) self . view . addGestureRecognizer ( myLongPressGesture ) self . view . addGestureRecognizer ( myPan ) self . view . addGestureRecognizer ( myRotate ) self . view . addGestureRecognizer ( mySEdghePan ) let centerOfX = self . view . bounds . width / 2 // Label\u3092\u4f5c\u6210. tapLabel = makeMyLabel ( title : \"Tap\" , color : UIColor . red , myX : centerOfX - 50 , myY : 100 ) pinchGestureLabel = makeMyLabel ( title : \"Pinch\" , color : UIColor . green , myX : centerOfX + 50 , myY : 100 ) swipeLabel = makeMyLabel ( title : \"Swipe\" , color : UIColor . blue , myX : centerOfX - 50 , myY : 190 ) longPressLabel = makeMyLabel ( title : \"Long\" , color : UIColor . orange , myX : centerOfX + 50 , myY : 190 ) panLabel = makeMyLabel ( title : \"Pan\" , color : UIColor . black , myX : centerOfX - 50 , myY : 280 ) rotateLabel = makeMyLabel ( title : \"Rotate\" , color : UIColor . cyan , myX : centerOfX + 50 , myY : 280 ) edgeLabel = makeMyLabel ( title : \"Edge\" , color : UIColor . purple , myX : centerOfX - 50 , myY : 370 ) // View\u306b\u8cbc\u4ed8\u3051\u308b. self . view . addSubview ( tapLabel ) self . view . addSubview ( pinchGestureLabel ) self . view . addSubview ( swipeLabel ) self . view . addSubview ( longPressLabel ) self . view . addSubview ( panLabel ) self . view . addSubview ( rotateLabel ) self . view . addSubview ( edgeLabel ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } /* \u30bf\u30c3\u30d7\u30a4\u30d9\u30f3\u30c8. */ @objc internal func tapGesture ( sender : UITapGestureRecognizer ){ tapLabel . text = \" \\( sender . numberOfTouches ) \" } /* \u30d4\u30f3\u30c1\u30a4\u30d9\u30f3\u30c8\u306e\u5b9f\u88c5. */ @objc internal func pinchGesture ( sender : UIPinchGestureRecognizer ){ let firstPoint = sender . scale let secondPoint = sender . velocity pinchGestureLabel . text = \" \\( Double ( Int ( firstPoint * 100 )) / 100 ) \\n \\( Double ( Int ( secondPoint * 100 )) / 100 ) \" } /* \u30b9\u30ef\u30a4\u30d7\u30a4\u30d9\u30f3\u30c8 */ @objc internal func swipeGesture ( sender : UISwipeGestureRecognizer ){ let touches = sender . numberOfTouches swipeLabel . text = \" \\( touches ) \" } /* \u9577\u62bc\u3057\u30a4\u30d9\u30f3\u30c8. */ @objc internal func longPressGesture ( sender : UILongPressGestureRecognizer ){ // \u6307\u304c\u96e2\u308c\u305f\u3053\u3068\u3092\u691c\u77e5 if ( sender . state == UIGestureRecognizer . State . ended ){ longPressLabel . text = \"On\" } } /* \u30d1\u30f3. */ @objc internal func panGesture ( sender : UIPanGestureRecognizer ){ panLabel . text = \" \\( sender . numberOfTouches ) \" } /* \u56de\u8ee2. */ @objc internal func rotateGesture ( sender : UIRotationGestureRecognizer ){ let firstPoint = sender . rotation let secondPoint = sender . velocity rotateLabel . text = \" \\( Double ( Int ( firstPoint * 100 )) / 100 ) \\n \\( Double ( Int ( secondPoint * 100 )) / 100 ) \" } /* \u30a8\u30c3\u30b8. */ @objc internal func edgeGesture ( sender : UIScreenEdgePanGestureRecognizer ){ let touches = sender . numberOfTouches swipeLabel . text = \" \\( touches ) \" } internal func makeMyLabel ( title : NSString , color : UIColor , myX : CGFloat , myY : CGFloat ) -> UILabel { let myLabel : UILabel = UILabel () myLabel . frame = CGRect ( x : 0 , y : 0 , width : 80 , height : 80 ) myLabel . backgroundColor = color myLabel . textColor = UIColor . white myLabel . layer . masksToBounds = true myLabel . text = title as String myLabel . textAlignment = NSTextAlignment . center myLabel . layer . cornerRadius = 40.0 myLabel . layer . position = CGPoint ( x : myX , y : myY ) myLabel . numberOfLines = 2 return myLabel } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 // // ViewController.swift // UIKit040_3.0 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var tapLabel : UILabel ! private var pinchGestureLabel : UILabel ! private var swipeLabel : UILabel ! private var longPressLabel : UILabel ! private var panLabel : UILabel ! private var rotateLabel : UILabel ! private var edgeLabel : UILabel ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u8d64\u8272\u306b. self . view . backgroundColor = UIColor . white // \u30bf\u30c3\u30d7\u3092\u8a8d\u8b58. let myTap = UITapGestureRecognizer ( target : self , action : #selector ( ViewController . tapGesture ( sender :))) // \u30d4\u30f3\u30c1\u3092\u8a8d\u8b58. let myPinchGesture = UIPinchGestureRecognizer ( target : self , action : #selector ( ViewController . pinchGesture ( sender :))) // \u30b9\u30ef\u30a4\u30d7\u8a8d\u8b58. let mySwipe = UISwipeGestureRecognizer ( target : self , action : #selector ( ViewController . swipeGesture ( sender :))) // \u30b9\u30ef\u30a4\u30d7\u8a8d\u8b58-2\u672c\u6307\u3067\u30b9\u30ef\u30a4\u30d7. mySwipe . numberOfTouchesRequired = 2 // \u9577\u62bc\u3057\u3092\u8a8d\u8b58. let myLongPressGesture = UILongPressGestureRecognizer ( target : self , action : #selector ( ViewController . longPressGesture ( sender :))) // \u9577\u62bc\u3057-\u6700\u4f4e2\u79d2\u9593\u306f\u9577\u62bc\u3057\u3059\u308b. myLongPressGesture . minimumPressDuration = 2.0 // \u9577\u62bc\u3057-\u6307\u306e\u30ba\u30ec\u306f15px\u307e\u3067. myLongPressGesture . allowableMovement = 150 // \u30d1\u30f3\u8a8d\u8b58. let myPan = UIPanGestureRecognizer ( target : self , action : #selector ( ViewController . panGesture ( sender :))) // \u30d1\u30f3\u8a8d\u8b58-3\u672c\u6307\u3067\u30d1\u30f3. myPan . minimumNumberOfTouches = 3 // \u56de\u8ee2\u3092\u8a8d\u8b58. let myRotate = UIRotationGestureRecognizer ( target : self , action : #selector ( ViewController . rotateGesture ( sender :))) // \u30a8\u30c3\u30b8\u3092\u8a8d\u8b58. let mySEdghePan = UIScreenEdgePanGestureRecognizer ( target : self , action : #selector ( ViewController . edgeGesture ( sender :))) // \u30a8\u30c3\u30b8\u3092\u8a8d\u8b58-\u6700\u4f4e\u63073\u672c\u3067\u53cd\u5fdc. mySEdghePan . minimumNumberOfTouches = 4 // \u30a8\u30c3\u30b8\u3092\u8a8d\u8b58-\u5de6\u5074. mySEdghePan . edges = UIRectEdge . left // View\u306b\u8ffd\u52a0. self . view . addGestureRecognizer ( myTap ) self . view . addGestureRecognizer ( myPinchGesture ) self . view . addGestureRecognizer ( mySwipe ) self . view . addGestureRecognizer ( myLongPressGesture ) self . view . addGestureRecognizer ( myPan ) self . view . addGestureRecognizer ( myRotate ) self . view . addGestureRecognizer ( mySEdghePan ) let centerOfX = self . view . bounds . width / 2 // Label\u3092\u4f5c\u6210. tapLabel = makeMyLabel ( title : \"Tap\" , color : UIColor . red , myX : centerOfX - 50 , myY : 100 ) pinchGestureLabel = makeMyLabel ( title : \"Pinch\" , color : UIColor . green , myX : centerOfX + 50 , myY : 100 ) swipeLabel = makeMyLabel ( title : \"Swipe\" , color : UIColor . blue , myX : centerOfX - 50 , myY : 190 ) longPressLabel = makeMyLabel ( title : \"Long\" , color : UIColor . orange , myX : centerOfX + 50 , myY : 190 ) panLabel = makeMyLabel ( title : \"Pan\" , color : UIColor . black , myX : centerOfX - 50 , myY : 280 ) rotateLabel = makeMyLabel ( title : \"Rotate\" , color : UIColor . cyan , myX : centerOfX + 50 , myY : 280 ) edgeLabel = makeMyLabel ( title : \"Edge\" , color : UIColor . purple , myX : centerOfX - 50 , myY : 370 ) // View\u306b\u8cbc\u4ed8\u3051\u308b. self . view . addSubview ( tapLabel ) self . view . addSubview ( pinchGestureLabel ) self . view . addSubview ( swipeLabel ) self . view . addSubview ( longPressLabel ) self . view . addSubview ( panLabel ) self . view . addSubview ( rotateLabel ) self . view . addSubview ( edgeLabel ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } /* \u30bf\u30c3\u30d7\u30a4\u30d9\u30f3\u30c8. */ internal func tapGesture ( sender : UITapGestureRecognizer ){ tapLabel . text = \" \\( sender . numberOfTouches ) \" } /* \u30d4\u30f3\u30c1\u30a4\u30d9\u30f3\u30c8\u306e\u5b9f\u88c5. */ internal func pinchGesture ( sender : UIPinchGestureRecognizer ){ let firstPoint = sender . scale let secondPoint = sender . velocity pinchGestureLabel . text = \" \\( Double ( Int ( firstPoint * 100 )) / 100 ) \\n \\( Double ( Int ( secondPoint * 100 )) / 100 ) \" } /* \u30b9\u30ef\u30a4\u30d7\u30a4\u30d9\u30f3\u30c8 */ internal func swipeGesture ( sender : UISwipeGestureRecognizer ){ let touches = sender . numberOfTouches swipeLabel . text = \" \\( touches ) \" } /* \u9577\u62bc\u3057\u30a4\u30d9\u30f3\u30c8. */ internal func longPressGesture ( sender : UILongPressGestureRecognizer ){ // \u6307\u304c\u96e2\u308c\u305f\u3053\u3068\u3092\u691c\u77e5 if ( sender . state == UIGestureRecognizerState . ended ){ longPressLabel . text = \"On\" } } /* \u30d1\u30f3. */ internal func panGesture ( sender : UIPanGestureRecognizer ){ panLabel . text = \" \\( sender . numberOfTouches ) \" } /* \u56de\u8ee2. */ internal func rotateGesture ( sender : UIRotationGestureRecognizer ){ let firstPoint = sender . rotation let secondPoint = sender . velocity rotateLabel . text = \" \\( Double ( Int ( firstPoint * 100 )) / 100 ) \\n \\( Double ( Int ( secondPoint * 100 )) / 100 ) \" } /* \u30a8\u30c3\u30b8. */ internal func edgeGesture ( sender : UIScreenEdgePanGestureRecognizer ){ let touches = sender . numberOfTouches swipeLabel . text = \" \\( touches ) \" } internal func makeMyLabel ( title : NSString , color : UIColor , myX : CGFloat , myY : CGFloat ) -> UILabel { let myLabel : UILabel = UILabel () myLabel . frame = CGRect ( x : 0 , y : 0 , width : 80 , height : 80 ) myLabel . backgroundColor = color myLabel . textColor = UIColor . white myLabel . layer . masksToBounds = true myLabel . text = title as String myLabel . textAlignment = NSTextAlignment . center myLabel . layer . cornerRadius = 40.0 myLabel . layer . position = CGPoint ( x : myX , y : myY ) myLabel . numberOfLines = 2 return myLabel } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 // // ViewController.swift // UIKit040_2.3 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var tapLabel : UILabel ! private var pinchGestureLabel : UILabel ! private var swipeLabel : UILabel ! private var longPressLabel : UILabel ! private var panLabel : UILabel ! private var rotateLabel : UILabel ! private var edgeLabel : UILabel ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u8d64\u8272\u306b. self . view . backgroundColor = UIColor . whiteColor () // \u30bf\u30c3\u30d7\u3092\u8a8d\u8b58. let myTap = UITapGestureRecognizer ( target : self , action : #selector ( ViewController . tapGesture ( _ :))) // \u30d4\u30f3\u30c1\u3092\u8a8d\u8b58. let myPinchGesture = UIPinchGestureRecognizer ( target : self , action : #selector ( ViewController . pinchGesture ( _ :))) // \u30b9\u30ef\u30a4\u30d7\u8a8d\u8b58. let mySwipe = UISwipeGestureRecognizer ( target : self , action : #selector ( ViewController . swipeGesture ( _ :))) // \u30b9\u30ef\u30a4\u30d7\u8a8d\u8b58-2\u672c\u6307\u3067\u30b9\u30ef\u30a4\u30d7. mySwipe . numberOfTouchesRequired = 2 // \u9577\u62bc\u3057\u3092\u8a8d\u8b58. let myLongPressGesture = UILongPressGestureRecognizer ( target : self , action : #selector ( ViewController . longPressGesture ( _ :))) // \u9577\u62bc\u3057-\u6700\u4f4e2\u79d2\u9593\u306f\u9577\u62bc\u3057\u3059\u308b. myLongPressGesture . minimumPressDuration = 2.0 // \u9577\u62bc\u3057-\u6307\u306e\u30ba\u30ec\u306f15px\u307e\u3067. myLongPressGesture . allowableMovement = 150 // \u30d1\u30f3\u8a8d\u8b58. let myPan = UIPanGestureRecognizer ( target : self , action : #selector ( ViewController . panGesture ( _ :))) // \u30d1\u30f3\u8a8d\u8b58-3\u672c\u6307\u3067\u30d1\u30f3. myPan . minimumNumberOfTouches = 3 // \u56de\u8ee2\u3092\u8a8d\u8b58. let myRotate = UIRotationGestureRecognizer ( target : self , action : #selector ( ViewController . rotateGesture ( _ :))) // \u30a8\u30c3\u30b8\u3092\u8a8d\u8b58. let mySEdghePan = UIScreenEdgePanGestureRecognizer ( target : self , action : #selector ( ViewController . edgeGesture ( _ :))) // \u30a8\u30c3\u30b8\u3092\u8a8d\u8b58-\u6700\u4f4e\u63073\u672c\u3067\u53cd\u5fdc. mySEdghePan . minimumNumberOfTouches = 4 // \u30a8\u30c3\u30b8\u3092\u8a8d\u8b58-\u5de6\u5074. mySEdghePan . edges = UIRectEdge . Left // View\u306b\u8ffd\u52a0. self . view . addGestureRecognizer ( myTap ) self . view . addGestureRecognizer ( myPinchGesture ) self . view . addGestureRecognizer ( mySwipe ) self . view . addGestureRecognizer ( myLongPressGesture ) self . view . addGestureRecognizer ( myPan ) self . view . addGestureRecognizer ( myRotate ) self . view . addGestureRecognizer ( mySEdghePan ) let centerOfX = self . view . bounds . width / 2 // Label\u3092\u4f5c\u6210. tapLabel = makeMyLabel ( \"Tap\" , color : UIColor . redColor (), myX : centerOfX - 50 , myY : 100 ) pinchGestureLabel = makeMyLabel ( \"Pinch\" , color : UIColor . greenColor (), myX : centerOfX + 50 , myY : 100 ) swipeLabel = makeMyLabel ( \"Swipe\" , color : UIColor . blueColor (), myX : centerOfX - 50 , myY : 190 ) longPressLabel = makeMyLabel ( \"Long\" , color : UIColor . orangeColor (), myX : centerOfX + 50 , myY : 190 ) panLabel = makeMyLabel ( \"Pan\" , color : UIColor . blackColor (), myX : centerOfX - 50 , myY : 280 ) rotateLabel = makeMyLabel ( \"Rotate\" , color : UIColor . cyanColor (), myX : centerOfX + 50 , myY : 280 ) edgeLabel = makeMyLabel ( \"Edge\" , color : UIColor . purpleColor (), myX : centerOfX - 50 , myY : 370 ) // View\u306b\u8cbc\u4ed8\u3051\u308b. self . view . addSubview ( tapLabel ) self . view . addSubview ( pinchGestureLabel ) self . view . addSubview ( swipeLabel ) self . view . addSubview ( longPressLabel ) self . view . addSubview ( panLabel ) self . view . addSubview ( rotateLabel ) self . view . addSubview ( edgeLabel ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } /* \u30bf\u30c3\u30d7\u30a4\u30d9\u30f3\u30c8. */ internal func tapGesture ( sender : UITapGestureRecognizer ){ tapLabel . text = \" \\( sender . numberOfTouches ()) \" } /* \u30d4\u30f3\u30c1\u30a4\u30d9\u30f3\u30c8\u306e\u5b9f\u88c5. */ internal func pinchGesture ( sender : UIPinchGestureRecognizer ){ let firstPoint = sender . scale let secondPoint = sender . velocity pinchGestureLabel . text = \" \\( Double ( Int ( firstPoint * 100 )) / 100 ) \\n \\( Double ( Int ( secondPoint * 100 )) / 100 ) \" } /* \u30b9\u30ef\u30a4\u30d7\u30a4\u30d9\u30f3\u30c8 */ internal func swipeGesture ( sender : UISwipeGestureRecognizer ){ let touches = sender . numberOfTouches () swipeLabel . text = \" \\( touches ) \" } /* \u9577\u62bc\u3057\u30a4\u30d9\u30f3\u30c8. */ internal func longPressGesture ( sender : UILongPressGestureRecognizer ){ // \u6307\u304c\u96e2\u308c\u305f\u3053\u3068\u3092\u691c\u77e5 if ( sender . state == UIGestureRecognizerState . Ended ){ longPressLabel . text = \"On\" } } /* \u30d1\u30f3. */ internal func panGesture ( sender : UIPanGestureRecognizer ){ panLabel . text = \" \\( sender . numberOfTouches ()) \" } /* \u56de\u8ee2. */ internal func rotateGesture ( sender : UIRotationGestureRecognizer ){ let firstPoint = sender . rotation let secondPoint = sender . velocity rotateLabel . text = \" \\( Double ( Int ( firstPoint * 100 )) / 100 ) \\n \\( Double ( Int ( secondPoint * 100 )) / 100 ) \" } /* \u30a8\u30c3\u30b8. */ internal func edgeGesture ( sender : UIScreenEdgePanGestureRecognizer ){ let touches = sender . numberOfTouches () swipeLabel . text = \" \\( touches ) \" } internal func makeMyLabel ( title : NSString , color : UIColor , myX : CGFloat , myY : CGFloat ) -> UILabel { let myLabel : UILabel = UILabel () myLabel . frame = CGRectMake ( 0 , 0 , 80 , 80 ) myLabel . backgroundColor = color myLabel . textColor = UIColor . whiteColor () myLabel . layer . masksToBounds = true myLabel . text = title as String myLabel . textAlignment = NSTextAlignment . Center myLabel . layer . cornerRadius = 40.0 myLabel . layer . position = CGPoint ( x : myX , y : myY ) myLabel . numberOfLines = 2 return myLabel } } 3.x\u30684.x\u306e\u5dee\u5206 UIGestureRecognizerState \u304c UIGestureRecognizer.State \u306b\u5909\u66f4 tapGesture \u3001 pinchGesture \u3001 swipeGesture \u3001 longPressGesture \u3001 panGesture \u3001 rotateGesture \u3001 edgeGesture \u306b @objc \u3092\u8ffd\u52a0 2.3\u30683.0\u306e\u5dee\u5206 UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u306e\u5ec3\u6b62) selector\u306e\u6307\u5b9a\u65b9\u6cd5\u306e\u5909\u66f4(ViewController.tapGesture(_:)->ViewController.tapGesture(sender:)) UISwipeGestureRecognizer\u306e\u4e00\u90e8\u95a2\u6570\u304c\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u5909\u66f4(numberOfTouches()->numberOfTouches) Reference UISwipeGestureRecognizer Class https://developer.apple.com/reference/uikit/uiswipegesturerecognizer","title":"GestureRecognizer\u306e\u30a4\u30d9\u30f3\u30c8\u53d6\u5f97"},{"location":"1.uikit/040_gesturerecognizer/#gesturerecognizer","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 // // ViewController.swift // UIKit040_4.0 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var tapLabel : UILabel ! private var pinchGestureLabel : UILabel ! private var swipeLabel : UILabel ! private var longPressLabel : UILabel ! private var panLabel : UILabel ! private var rotateLabel : UILabel ! private var edgeLabel : UILabel ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u8d64\u8272\u306b. self . view . backgroundColor = UIColor . white // \u30bf\u30c3\u30d7\u3092\u8a8d\u8b58. let myTap = UITapGestureRecognizer ( target : self , action : #selector ( ViewController . tapGesture ( sender :))) // \u30d4\u30f3\u30c1\u3092\u8a8d\u8b58. let myPinchGesture = UIPinchGestureRecognizer ( target : self , action : #selector ( ViewController . pinchGesture ( sender :))) // \u30b9\u30ef\u30a4\u30d7\u8a8d\u8b58. let mySwipe = UISwipeGestureRecognizer ( target : self , action : #selector ( ViewController . swipeGesture ( sender :))) // \u30b9\u30ef\u30a4\u30d7\u8a8d\u8b58-2\u672c\u6307\u3067\u30b9\u30ef\u30a4\u30d7. mySwipe . numberOfTouchesRequired = 2 // \u9577\u62bc\u3057\u3092\u8a8d\u8b58. let myLongPressGesture = UILongPressGestureRecognizer ( target : self , action : #selector ( ViewController . longPressGesture ( sender :))) // \u9577\u62bc\u3057-\u6700\u4f4e2\u79d2\u9593\u306f\u9577\u62bc\u3057\u3059\u308b. myLongPressGesture . minimumPressDuration = 2.0 // \u9577\u62bc\u3057-\u6307\u306e\u30ba\u30ec\u306f15px\u307e\u3067. myLongPressGesture . allowableMovement = 150 // \u30d1\u30f3\u8a8d\u8b58. let myPan = UIPanGestureRecognizer ( target : self , action : #selector ( ViewController . panGesture ( sender :))) // \u30d1\u30f3\u8a8d\u8b58-3\u672c\u6307\u3067\u30d1\u30f3. myPan . minimumNumberOfTouches = 3 // \u56de\u8ee2\u3092\u8a8d\u8b58. let myRotate = UIRotationGestureRecognizer ( target : self , action : #selector ( ViewController . rotateGesture ( sender :))) // \u30a8\u30c3\u30b8\u3092\u8a8d\u8b58. let mySEdghePan = UIScreenEdgePanGestureRecognizer ( target : self , action : #selector ( ViewController . edgeGesture ( sender :))) // \u30a8\u30c3\u30b8\u3092\u8a8d\u8b58-\u6700\u4f4e\u63073\u672c\u3067\u53cd\u5fdc. mySEdghePan . minimumNumberOfTouches = 4 // \u30a8\u30c3\u30b8\u3092\u8a8d\u8b58-\u5de6\u5074. mySEdghePan . edges = UIRectEdge . left // View\u306b\u8ffd\u52a0. self . view . addGestureRecognizer ( myTap ) self . view . addGestureRecognizer ( myPinchGesture ) self . view . addGestureRecognizer ( mySwipe ) self . view . addGestureRecognizer ( myLongPressGesture ) self . view . addGestureRecognizer ( myPan ) self . view . addGestureRecognizer ( myRotate ) self . view . addGestureRecognizer ( mySEdghePan ) let centerOfX = self . view . bounds . width / 2 // Label\u3092\u4f5c\u6210. tapLabel = makeMyLabel ( title : \"Tap\" , color : UIColor . red , myX : centerOfX - 50 , myY : 100 ) pinchGestureLabel = makeMyLabel ( title : \"Pinch\" , color : UIColor . green , myX : centerOfX + 50 , myY : 100 ) swipeLabel = makeMyLabel ( title : \"Swipe\" , color : UIColor . blue , myX : centerOfX - 50 , myY : 190 ) longPressLabel = makeMyLabel ( title : \"Long\" , color : UIColor . orange , myX : centerOfX + 50 , myY : 190 ) panLabel = makeMyLabel ( title : \"Pan\" , color : UIColor . black , myX : centerOfX - 50 , myY : 280 ) rotateLabel = makeMyLabel ( title : \"Rotate\" , color : UIColor . cyan , myX : centerOfX + 50 , myY : 280 ) edgeLabel = makeMyLabel ( title : \"Edge\" , color : UIColor . purple , myX : centerOfX - 50 , myY : 370 ) // View\u306b\u8cbc\u4ed8\u3051\u308b. self . view . addSubview ( tapLabel ) self . view . addSubview ( pinchGestureLabel ) self . view . addSubview ( swipeLabel ) self . view . addSubview ( longPressLabel ) self . view . addSubview ( panLabel ) self . view . addSubview ( rotateLabel ) self . view . addSubview ( edgeLabel ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } /* \u30bf\u30c3\u30d7\u30a4\u30d9\u30f3\u30c8. */ @objc internal func tapGesture ( sender : UITapGestureRecognizer ){ tapLabel . text = \" \\( sender . numberOfTouches ) \" } /* \u30d4\u30f3\u30c1\u30a4\u30d9\u30f3\u30c8\u306e\u5b9f\u88c5. */ @objc internal func pinchGesture ( sender : UIPinchGestureRecognizer ){ let firstPoint = sender . scale let secondPoint = sender . velocity pinchGestureLabel . text = \" \\( Double ( Int ( firstPoint * 100 )) / 100 ) \\n \\( Double ( Int ( secondPoint * 100 )) / 100 ) \" } /* \u30b9\u30ef\u30a4\u30d7\u30a4\u30d9\u30f3\u30c8 */ @objc internal func swipeGesture ( sender : UISwipeGestureRecognizer ){ let touches = sender . numberOfTouches swipeLabel . text = \" \\( touches ) \" } /* \u9577\u62bc\u3057\u30a4\u30d9\u30f3\u30c8. */ @objc internal func longPressGesture ( sender : UILongPressGestureRecognizer ){ // \u6307\u304c\u96e2\u308c\u305f\u3053\u3068\u3092\u691c\u77e5 if ( sender . state == UIGestureRecognizer . State . ended ){ longPressLabel . text = \"On\" } } /* \u30d1\u30f3. */ @objc internal func panGesture ( sender : UIPanGestureRecognizer ){ panLabel . text = \" \\( sender . numberOfTouches ) \" } /* \u56de\u8ee2. */ @objc internal func rotateGesture ( sender : UIRotationGestureRecognizer ){ let firstPoint = sender . rotation let secondPoint = sender . velocity rotateLabel . text = \" \\( Double ( Int ( firstPoint * 100 )) / 100 ) \\n \\( Double ( Int ( secondPoint * 100 )) / 100 ) \" } /* \u30a8\u30c3\u30b8. */ @objc internal func edgeGesture ( sender : UIScreenEdgePanGestureRecognizer ){ let touches = sender . numberOfTouches swipeLabel . text = \" \\( touches ) \" } internal func makeMyLabel ( title : NSString , color : UIColor , myX : CGFloat , myY : CGFloat ) -> UILabel { let myLabel : UILabel = UILabel () myLabel . frame = CGRect ( x : 0 , y : 0 , width : 80 , height : 80 ) myLabel . backgroundColor = color myLabel . textColor = UIColor . white myLabel . layer . masksToBounds = true myLabel . text = title as String myLabel . textAlignment = NSTextAlignment . center myLabel . layer . cornerRadius = 40.0 myLabel . layer . position = CGPoint ( x : myX , y : myY ) myLabel . numberOfLines = 2 return myLabel } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 // // ViewController.swift // UIKit040_3.0 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var tapLabel : UILabel ! private var pinchGestureLabel : UILabel ! private var swipeLabel : UILabel ! private var longPressLabel : UILabel ! private var panLabel : UILabel ! private var rotateLabel : UILabel ! private var edgeLabel : UILabel ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u8d64\u8272\u306b. self . view . backgroundColor = UIColor . white // \u30bf\u30c3\u30d7\u3092\u8a8d\u8b58. let myTap = UITapGestureRecognizer ( target : self , action : #selector ( ViewController . tapGesture ( sender :))) // \u30d4\u30f3\u30c1\u3092\u8a8d\u8b58. let myPinchGesture = UIPinchGestureRecognizer ( target : self , action : #selector ( ViewController . pinchGesture ( sender :))) // \u30b9\u30ef\u30a4\u30d7\u8a8d\u8b58. let mySwipe = UISwipeGestureRecognizer ( target : self , action : #selector ( ViewController . swipeGesture ( sender :))) // \u30b9\u30ef\u30a4\u30d7\u8a8d\u8b58-2\u672c\u6307\u3067\u30b9\u30ef\u30a4\u30d7. mySwipe . numberOfTouchesRequired = 2 // \u9577\u62bc\u3057\u3092\u8a8d\u8b58. let myLongPressGesture = UILongPressGestureRecognizer ( target : self , action : #selector ( ViewController . longPressGesture ( sender :))) // \u9577\u62bc\u3057-\u6700\u4f4e2\u79d2\u9593\u306f\u9577\u62bc\u3057\u3059\u308b. myLongPressGesture . minimumPressDuration = 2.0 // \u9577\u62bc\u3057-\u6307\u306e\u30ba\u30ec\u306f15px\u307e\u3067. myLongPressGesture . allowableMovement = 150 // \u30d1\u30f3\u8a8d\u8b58. let myPan = UIPanGestureRecognizer ( target : self , action : #selector ( ViewController . panGesture ( sender :))) // \u30d1\u30f3\u8a8d\u8b58-3\u672c\u6307\u3067\u30d1\u30f3. myPan . minimumNumberOfTouches = 3 // \u56de\u8ee2\u3092\u8a8d\u8b58. let myRotate = UIRotationGestureRecognizer ( target : self , action : #selector ( ViewController . rotateGesture ( sender :))) // \u30a8\u30c3\u30b8\u3092\u8a8d\u8b58. let mySEdghePan = UIScreenEdgePanGestureRecognizer ( target : self , action : #selector ( ViewController . edgeGesture ( sender :))) // \u30a8\u30c3\u30b8\u3092\u8a8d\u8b58-\u6700\u4f4e\u63073\u672c\u3067\u53cd\u5fdc. mySEdghePan . minimumNumberOfTouches = 4 // \u30a8\u30c3\u30b8\u3092\u8a8d\u8b58-\u5de6\u5074. mySEdghePan . edges = UIRectEdge . left // View\u306b\u8ffd\u52a0. self . view . addGestureRecognizer ( myTap ) self . view . addGestureRecognizer ( myPinchGesture ) self . view . addGestureRecognizer ( mySwipe ) self . view . addGestureRecognizer ( myLongPressGesture ) self . view . addGestureRecognizer ( myPan ) self . view . addGestureRecognizer ( myRotate ) self . view . addGestureRecognizer ( mySEdghePan ) let centerOfX = self . view . bounds . width / 2 // Label\u3092\u4f5c\u6210. tapLabel = makeMyLabel ( title : \"Tap\" , color : UIColor . red , myX : centerOfX - 50 , myY : 100 ) pinchGestureLabel = makeMyLabel ( title : \"Pinch\" , color : UIColor . green , myX : centerOfX + 50 , myY : 100 ) swipeLabel = makeMyLabel ( title : \"Swipe\" , color : UIColor . blue , myX : centerOfX - 50 , myY : 190 ) longPressLabel = makeMyLabel ( title : \"Long\" , color : UIColor . orange , myX : centerOfX + 50 , myY : 190 ) panLabel = makeMyLabel ( title : \"Pan\" , color : UIColor . black , myX : centerOfX - 50 , myY : 280 ) rotateLabel = makeMyLabel ( title : \"Rotate\" , color : UIColor . cyan , myX : centerOfX + 50 , myY : 280 ) edgeLabel = makeMyLabel ( title : \"Edge\" , color : UIColor . purple , myX : centerOfX - 50 , myY : 370 ) // View\u306b\u8cbc\u4ed8\u3051\u308b. self . view . addSubview ( tapLabel ) self . view . addSubview ( pinchGestureLabel ) self . view . addSubview ( swipeLabel ) self . view . addSubview ( longPressLabel ) self . view . addSubview ( panLabel ) self . view . addSubview ( rotateLabel ) self . view . addSubview ( edgeLabel ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } /* \u30bf\u30c3\u30d7\u30a4\u30d9\u30f3\u30c8. */ internal func tapGesture ( sender : UITapGestureRecognizer ){ tapLabel . text = \" \\( sender . numberOfTouches ) \" } /* \u30d4\u30f3\u30c1\u30a4\u30d9\u30f3\u30c8\u306e\u5b9f\u88c5. */ internal func pinchGesture ( sender : UIPinchGestureRecognizer ){ let firstPoint = sender . scale let secondPoint = sender . velocity pinchGestureLabel . text = \" \\( Double ( Int ( firstPoint * 100 )) / 100 ) \\n \\( Double ( Int ( secondPoint * 100 )) / 100 ) \" } /* \u30b9\u30ef\u30a4\u30d7\u30a4\u30d9\u30f3\u30c8 */ internal func swipeGesture ( sender : UISwipeGestureRecognizer ){ let touches = sender . numberOfTouches swipeLabel . text = \" \\( touches ) \" } /* \u9577\u62bc\u3057\u30a4\u30d9\u30f3\u30c8. */ internal func longPressGesture ( sender : UILongPressGestureRecognizer ){ // \u6307\u304c\u96e2\u308c\u305f\u3053\u3068\u3092\u691c\u77e5 if ( sender . state == UIGestureRecognizerState . ended ){ longPressLabel . text = \"On\" } } /* \u30d1\u30f3. */ internal func panGesture ( sender : UIPanGestureRecognizer ){ panLabel . text = \" \\( sender . numberOfTouches ) \" } /* \u56de\u8ee2. */ internal func rotateGesture ( sender : UIRotationGestureRecognizer ){ let firstPoint = sender . rotation let secondPoint = sender . velocity rotateLabel . text = \" \\( Double ( Int ( firstPoint * 100 )) / 100 ) \\n \\( Double ( Int ( secondPoint * 100 )) / 100 ) \" } /* \u30a8\u30c3\u30b8. */ internal func edgeGesture ( sender : UIScreenEdgePanGestureRecognizer ){ let touches = sender . numberOfTouches swipeLabel . text = \" \\( touches ) \" } internal func makeMyLabel ( title : NSString , color : UIColor , myX : CGFloat , myY : CGFloat ) -> UILabel { let myLabel : UILabel = UILabel () myLabel . frame = CGRect ( x : 0 , y : 0 , width : 80 , height : 80 ) myLabel . backgroundColor = color myLabel . textColor = UIColor . white myLabel . layer . masksToBounds = true myLabel . text = title as String myLabel . textAlignment = NSTextAlignment . center myLabel . layer . cornerRadius = 40.0 myLabel . layer . position = CGPoint ( x : myX , y : myY ) myLabel . numberOfLines = 2 return myLabel } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 // // ViewController.swift // UIKit040_2.3 // // Created by KimikoWatanabe on 2016/08/18. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { private var tapLabel : UILabel ! private var pinchGestureLabel : UILabel ! private var swipeLabel : UILabel ! private var longPressLabel : UILabel ! private var panLabel : UILabel ! private var rotateLabel : UILabel ! private var edgeLabel : UILabel ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u8d64\u8272\u306b. self . view . backgroundColor = UIColor . whiteColor () // \u30bf\u30c3\u30d7\u3092\u8a8d\u8b58. let myTap = UITapGestureRecognizer ( target : self , action : #selector ( ViewController . tapGesture ( _ :))) // \u30d4\u30f3\u30c1\u3092\u8a8d\u8b58. let myPinchGesture = UIPinchGestureRecognizer ( target : self , action : #selector ( ViewController . pinchGesture ( _ :))) // \u30b9\u30ef\u30a4\u30d7\u8a8d\u8b58. let mySwipe = UISwipeGestureRecognizer ( target : self , action : #selector ( ViewController . swipeGesture ( _ :))) // \u30b9\u30ef\u30a4\u30d7\u8a8d\u8b58-2\u672c\u6307\u3067\u30b9\u30ef\u30a4\u30d7. mySwipe . numberOfTouchesRequired = 2 // \u9577\u62bc\u3057\u3092\u8a8d\u8b58. let myLongPressGesture = UILongPressGestureRecognizer ( target : self , action : #selector ( ViewController . longPressGesture ( _ :))) // \u9577\u62bc\u3057-\u6700\u4f4e2\u79d2\u9593\u306f\u9577\u62bc\u3057\u3059\u308b. myLongPressGesture . minimumPressDuration = 2.0 // \u9577\u62bc\u3057-\u6307\u306e\u30ba\u30ec\u306f15px\u307e\u3067. myLongPressGesture . allowableMovement = 150 // \u30d1\u30f3\u8a8d\u8b58. let myPan = UIPanGestureRecognizer ( target : self , action : #selector ( ViewController . panGesture ( _ :))) // \u30d1\u30f3\u8a8d\u8b58-3\u672c\u6307\u3067\u30d1\u30f3. myPan . minimumNumberOfTouches = 3 // \u56de\u8ee2\u3092\u8a8d\u8b58. let myRotate = UIRotationGestureRecognizer ( target : self , action : #selector ( ViewController . rotateGesture ( _ :))) // \u30a8\u30c3\u30b8\u3092\u8a8d\u8b58. let mySEdghePan = UIScreenEdgePanGestureRecognizer ( target : self , action : #selector ( ViewController . edgeGesture ( _ :))) // \u30a8\u30c3\u30b8\u3092\u8a8d\u8b58-\u6700\u4f4e\u63073\u672c\u3067\u53cd\u5fdc. mySEdghePan . minimumNumberOfTouches = 4 // \u30a8\u30c3\u30b8\u3092\u8a8d\u8b58-\u5de6\u5074. mySEdghePan . edges = UIRectEdge . Left // View\u306b\u8ffd\u52a0. self . view . addGestureRecognizer ( myTap ) self . view . addGestureRecognizer ( myPinchGesture ) self . view . addGestureRecognizer ( mySwipe ) self . view . addGestureRecognizer ( myLongPressGesture ) self . view . addGestureRecognizer ( myPan ) self . view . addGestureRecognizer ( myRotate ) self . view . addGestureRecognizer ( mySEdghePan ) let centerOfX = self . view . bounds . width / 2 // Label\u3092\u4f5c\u6210. tapLabel = makeMyLabel ( \"Tap\" , color : UIColor . redColor (), myX : centerOfX - 50 , myY : 100 ) pinchGestureLabel = makeMyLabel ( \"Pinch\" , color : UIColor . greenColor (), myX : centerOfX + 50 , myY : 100 ) swipeLabel = makeMyLabel ( \"Swipe\" , color : UIColor . blueColor (), myX : centerOfX - 50 , myY : 190 ) longPressLabel = makeMyLabel ( \"Long\" , color : UIColor . orangeColor (), myX : centerOfX + 50 , myY : 190 ) panLabel = makeMyLabel ( \"Pan\" , color : UIColor . blackColor (), myX : centerOfX - 50 , myY : 280 ) rotateLabel = makeMyLabel ( \"Rotate\" , color : UIColor . cyanColor (), myX : centerOfX + 50 , myY : 280 ) edgeLabel = makeMyLabel ( \"Edge\" , color : UIColor . purpleColor (), myX : centerOfX - 50 , myY : 370 ) // View\u306b\u8cbc\u4ed8\u3051\u308b. self . view . addSubview ( tapLabel ) self . view . addSubview ( pinchGestureLabel ) self . view . addSubview ( swipeLabel ) self . view . addSubview ( longPressLabel ) self . view . addSubview ( panLabel ) self . view . addSubview ( rotateLabel ) self . view . addSubview ( edgeLabel ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } /* \u30bf\u30c3\u30d7\u30a4\u30d9\u30f3\u30c8. */ internal func tapGesture ( sender : UITapGestureRecognizer ){ tapLabel . text = \" \\( sender . numberOfTouches ()) \" } /* \u30d4\u30f3\u30c1\u30a4\u30d9\u30f3\u30c8\u306e\u5b9f\u88c5. */ internal func pinchGesture ( sender : UIPinchGestureRecognizer ){ let firstPoint = sender . scale let secondPoint = sender . velocity pinchGestureLabel . text = \" \\( Double ( Int ( firstPoint * 100 )) / 100 ) \\n \\( Double ( Int ( secondPoint * 100 )) / 100 ) \" } /* \u30b9\u30ef\u30a4\u30d7\u30a4\u30d9\u30f3\u30c8 */ internal func swipeGesture ( sender : UISwipeGestureRecognizer ){ let touches = sender . numberOfTouches () swipeLabel . text = \" \\( touches ) \" } /* \u9577\u62bc\u3057\u30a4\u30d9\u30f3\u30c8. */ internal func longPressGesture ( sender : UILongPressGestureRecognizer ){ // \u6307\u304c\u96e2\u308c\u305f\u3053\u3068\u3092\u691c\u77e5 if ( sender . state == UIGestureRecognizerState . Ended ){ longPressLabel . text = \"On\" } } /* \u30d1\u30f3. */ internal func panGesture ( sender : UIPanGestureRecognizer ){ panLabel . text = \" \\( sender . numberOfTouches ()) \" } /* \u56de\u8ee2. */ internal func rotateGesture ( sender : UIRotationGestureRecognizer ){ let firstPoint = sender . rotation let secondPoint = sender . velocity rotateLabel . text = \" \\( Double ( Int ( firstPoint * 100 )) / 100 ) \\n \\( Double ( Int ( secondPoint * 100 )) / 100 ) \" } /* \u30a8\u30c3\u30b8. */ internal func edgeGesture ( sender : UIScreenEdgePanGestureRecognizer ){ let touches = sender . numberOfTouches () swipeLabel . text = \" \\( touches ) \" } internal func makeMyLabel ( title : NSString , color : UIColor , myX : CGFloat , myY : CGFloat ) -> UILabel { let myLabel : UILabel = UILabel () myLabel . frame = CGRectMake ( 0 , 0 , 80 , 80 ) myLabel . backgroundColor = color myLabel . textColor = UIColor . whiteColor () myLabel . layer . masksToBounds = true myLabel . text = title as String myLabel . textAlignment = NSTextAlignment . Center myLabel . layer . cornerRadius = 40.0 myLabel . layer . position = CGPoint ( x : myX , y : myY ) myLabel . numberOfLines = 2 return myLabel } }","title":"GestureRecognizer\u306e\u30a4\u30d9\u30f3\u30c8\u53d6\u5f97"},{"location":"1.uikit/040_gesturerecognizer/#3x4x","text":"UIGestureRecognizerState \u304c UIGestureRecognizer.State \u306b\u5909\u66f4 tapGesture \u3001 pinchGesture \u3001 swipeGesture \u3001 longPressGesture \u3001 panGesture \u3001 rotateGesture \u3001 edgeGesture \u306b @objc \u3092\u8ffd\u52a0","title":"3.x\u30684.x\u306e\u5dee\u5206"},{"location":"1.uikit/040_gesturerecognizer/#2330","text":"UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u306e\u5ec3\u6b62) selector\u306e\u6307\u5b9a\u65b9\u6cd5\u306e\u5909\u66f4(ViewController.tapGesture(_:)->ViewController.tapGesture(sender:)) UISwipeGestureRecognizer\u306e\u4e00\u90e8\u95a2\u6570\u304c\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u5909\u66f4(numberOfTouches()->numberOfTouches)","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/040_gesturerecognizer/#reference","text":"UISwipeGestureRecognizer Class https://developer.apple.com/reference/uikit/uiswipegesturerecognizer","title":"Reference"},{"location":"1.uikit/041_uiapplicationpass/","text":"UIAlertController\u3092\u30d1\u30b9\u30ef\u30fc\u30c9\u5f62\u5f0f\u306b\u3059\u308b Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 // // ViewController.swift // UIKit041_4.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () self . view . backgroundColor = UIColor . cyan let myButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 40 )) myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : 200 ) myButton . layer . cornerRadius = 20.0 myButton . backgroundColor = UIColor . red myButton . setTitle ( \"UIAlert\u3092\u767a\u52d5\" , for : . normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchUpInside ) self . view . addSubview ( myButton ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } /* \u30dc\u30bf\u30f3\u30a2\u30af\u30b7\u30e7\u30f3\u6642\u306b\u8a2d\u5b9a\u3057\u305f\u30e1\u30bd\u30c3\u30c9. */ @objc internal func onClickMyButton ( sender : UIButton ) { // Alert\u751f\u6210. let myAlert : UIAlertController = UIAlertController ( title : \"title\" , message : \"message\" , preferredStyle : UIAlertController . Style . alert ) // OK\u30a2\u30af\u30b7\u30e7\u30f3\u751f\u6210. let OkAction = UIAlertAction ( title : \"OK\" , style : UIAlertAction . Style . default ) { ( action : UIAlertAction !) -> Void in print ( \"OK\" ) } // Cancel\u30a2\u30af\u30b7\u30e7\u30f3\u751f\u6210. let CancelAction = UIAlertAction ( title : \"Cancel\" , style : UIAlertAction . Style . destructive ) { ( action : UIAlertAction !) -> Void in print ( \"Cancel\" ) } // Alert\u306bTextField\u3092\u8ffd\u52a0. myAlert . addTextField { ( textField : UITextField !) -> Void in // \u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u3092\u975e\u8868\u793a\u306b\u3059\u308b. textField . isSecureTextEntry = true // NotificationCenter\u3092\u751f\u6210. let myNotificationCenter = NotificationCenter . default // textField\u306b\u5909\u66f4\u304c\u3042\u308c\u3070changeTextField\u30e1\u30bd\u30c3\u30c9\u306b\u901a\u77e5. myNotificationCenter . addObserver ( self , selector : #selector ( ViewController . changeTextField ( sender :)), name : UITextField . textDidChangeNotification , object : nil ) } // Alert\u306b\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0. myAlert . addAction ( OkAction ) myAlert . addAction ( CancelAction ) // Alert\u3092\u767a\u52d5. present ( myAlert , animated : true , completion : nil ) } /* textField\u306b\u5909\u66f4\u304c\u4f1a\u3063\u305f\u6642\u306b\u901a\u77e5\u3055\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ @objc internal func changeTextField ( sender : NSNotification ) { let textField = sender . object as ! UITextField // \u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u3092\u8868\u793a. print ( textField . text !) } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 // // ViewController.swift // UIKit041_3.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () self . view . backgroundColor = UIColor . cyan let myButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 40 )) myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : 200 ) myButton . layer . cornerRadius = 20.0 myButton . backgroundColor = UIColor . red myButton . setTitle ( \"UIAlert\u3092\u767a\u52d5\" , for : . normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchUpInside ) self . view . addSubview ( myButton ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } /* \u30dc\u30bf\u30f3\u30a2\u30af\u30b7\u30e7\u30f3\u6642\u306b\u8a2d\u5b9a\u3057\u305f\u30e1\u30bd\u30c3\u30c9. */ internal func onClickMyButton ( sender : UIButton ) { // Alert\u751f\u6210. let myAlert : UIAlertController = UIAlertController ( title : \"title\" , message : \"message\" , preferredStyle : UIAlertControllerStyle . alert ) // OK\u30a2\u30af\u30b7\u30e7\u30f3\u751f\u6210. let OkAction = UIAlertAction ( title : \"OK\" , style : UIAlertActionStyle . default ) { ( action : UIAlertAction !) -> Void in print ( \"OK\" ) } // Cancel\u30a2\u30af\u30b7\u30e7\u30f3\u751f\u6210. let CancelAction = UIAlertAction ( title : \"Cancel\" , style : UIAlertActionStyle . destructive ) { ( action : UIAlertAction !) -> Void in print ( \"Cancel\" ) } // Alert\u306bTextField\u3092\u8ffd\u52a0. myAlert . addTextField { ( textField : UITextField !) -> Void in // \u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u3092\u975e\u8868\u793a\u306b\u3059\u308b. textField . isSecureTextEntry = true // NotificationCenter\u3092\u751f\u6210. let myNotificationCenter = NotificationCenter . default // textField\u306b\u5909\u66f4\u304c\u3042\u308c\u3070changeTextField\u30e1\u30bd\u30c3\u30c9\u306b\u901a\u77e5. myNotificationCenter . addObserver ( self , selector : #selector ( ViewController . changeTextField ( sender :)), name : NSNotification . Name . UITextFieldTextDidChange , object : nil ) } // Alert\u306b\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0. myAlert . addAction ( OkAction ) myAlert . addAction ( CancelAction ) // Alert\u3092\u767a\u52d5. present ( myAlert , animated : true , completion : nil ) } /* textField\u306b\u5909\u66f4\u304c\u4f1a\u3063\u305f\u6642\u306b\u901a\u77e5\u3055\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ internal func changeTextField ( sender : NSNotification ) { let textField = sender . object as ! UITextField // \u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u3092\u8868\u793a. print ( textField . text !) } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 // // ViewController.swift // UIKit041_2.3 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () self . view . backgroundColor = UIColor . cyanColor () let myButton = UIButton ( frame : CGRectMake ( 0 , 0 , 200 , 40 )) myButton . layer . position = CGPointMake ( self . view . frame . width / 2 , 200 ) myButton . layer . cornerRadius = 20.0 myButton . backgroundColor = UIColor . redColor () myButton . setTitle ( \"UIAlert\u3092\u767a\u52d5\" , forState : . Normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : . TouchUpInside ) self . view . addSubview ( myButton ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } /* \u30dc\u30bf\u30f3\u30a2\u30af\u30b7\u30e7\u30f3\u6642\u306b\u8a2d\u5b9a\u3057\u305f\u30e1\u30bd\u30c3\u30c9. */ internal func onClickMyButton ( sender : UIButton ) { // Alert\u751f\u6210. let myAlert : UIAlertController = UIAlertController ( title : \"title\" , message : \"message\" , preferredStyle : UIAlertControllerStyle . Alert ) // OK\u30a2\u30af\u30b7\u30e7\u30f3\u751f\u6210. let OkAction = UIAlertAction ( title : \"OK\" , style : UIAlertActionStyle . Default ) { ( action : UIAlertAction !) -> Void in print ( \"OK\" ) } // Cancel\u30a2\u30af\u30b7\u30e7\u30f3\u751f\u6210. let CancelAction = UIAlertAction ( title : \"Cancel\" , style : UIAlertActionStyle . Destructive ) { ( action : UIAlertAction !) -> Void in print ( \"Cancel\" ) } // Alert\u306bTextField\u3092\u8ffd\u52a0. myAlert . addTextFieldWithConfigurationHandler { ( textField : UITextField !) -> Void in // \u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u3092\u975e\u8868\u793a\u306b\u3059\u308b. textField . secureTextEntry = true // NotificationCenter\u3092\u751f\u6210. let myNotificationCenter = NSNotificationCenter . defaultCenter () // textField\u306b\u5909\u66f4\u304c\u3042\u308c\u3070changeTextField\u30e1\u30bd\u30c3\u30c9\u306b\u901a\u77e5. myNotificationCenter . addObserver ( self , selector : #selector ( ViewController . changeTextField ( _ :)), name : UITextFieldTextDidChangeNotification , object : nil ) } // Alert\u306b\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0. myAlert . addAction ( OkAction ) myAlert . addAction ( CancelAction ) // Alert\u3092\u767a\u52d5. presentViewController ( myAlert , animated : true , completion : nil ) } /* textField\u306b\u5909\u66f4\u304c\u4f1a\u3063\u305f\u6642\u306b\u901a\u77e5\u3055\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ internal func changeTextField ( sender : NSNotification ) { let textField = sender . object as ! UITextField // \u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u3092\u8868\u793a. print ( textField . text !) } } 3.x\u30684.x\u306e\u5dee\u5206 onClickMyButton \u3001 changeTextField \u306b @objc \u3092\u8ffd\u52a0 UIAlertControllerStyle \u304c UIAlertController.Style \u306b\u5909\u66f4 UIAlertActionStyle \u304c UIAlertAction.Style \u306b\u5909\u66f4 NSNotification.Name.UITextFieldTextDidChange \u304c UITextField.textDidChangeNotification \u306b\u5909\u66f4 2.3\u30683.0\u306e\u5dee\u5206 UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u306e\u5ec3\u6b62) UIAlert\u306e\u4e00\u90e8\u30e1\u30bd\u30c3\u30c9\u540d\u306e\u5909\u66f4(addTextFieldWithConfigurationHandler->addTextField) Reference UIAlertController Class https://developer.apple.com/reference/uikit/uialertcontroller UIAlertAction Class https://developer.apple.com/reference/uikit/uialertaction UITextInputTraits Protocol https://developer.apple.com/reference/uikit/uitextinputtraits","title":"UIAlertController\u3092\u30d1\u30b9\u30ef\u30fc\u30c9\u5f62\u5f0f\u306b\u3059\u308b"},{"location":"1.uikit/041_uiapplicationpass/#uialertcontroller","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 // // ViewController.swift // UIKit041_4.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () self . view . backgroundColor = UIColor . cyan let myButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 40 )) myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : 200 ) myButton . layer . cornerRadius = 20.0 myButton . backgroundColor = UIColor . red myButton . setTitle ( \"UIAlert\u3092\u767a\u52d5\" , for : . normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchUpInside ) self . view . addSubview ( myButton ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } /* \u30dc\u30bf\u30f3\u30a2\u30af\u30b7\u30e7\u30f3\u6642\u306b\u8a2d\u5b9a\u3057\u305f\u30e1\u30bd\u30c3\u30c9. */ @objc internal func onClickMyButton ( sender : UIButton ) { // Alert\u751f\u6210. let myAlert : UIAlertController = UIAlertController ( title : \"title\" , message : \"message\" , preferredStyle : UIAlertController . Style . alert ) // OK\u30a2\u30af\u30b7\u30e7\u30f3\u751f\u6210. let OkAction = UIAlertAction ( title : \"OK\" , style : UIAlertAction . Style . default ) { ( action : UIAlertAction !) -> Void in print ( \"OK\" ) } // Cancel\u30a2\u30af\u30b7\u30e7\u30f3\u751f\u6210. let CancelAction = UIAlertAction ( title : \"Cancel\" , style : UIAlertAction . Style . destructive ) { ( action : UIAlertAction !) -> Void in print ( \"Cancel\" ) } // Alert\u306bTextField\u3092\u8ffd\u52a0. myAlert . addTextField { ( textField : UITextField !) -> Void in // \u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u3092\u975e\u8868\u793a\u306b\u3059\u308b. textField . isSecureTextEntry = true // NotificationCenter\u3092\u751f\u6210. let myNotificationCenter = NotificationCenter . default // textField\u306b\u5909\u66f4\u304c\u3042\u308c\u3070changeTextField\u30e1\u30bd\u30c3\u30c9\u306b\u901a\u77e5. myNotificationCenter . addObserver ( self , selector : #selector ( ViewController . changeTextField ( sender :)), name : UITextField . textDidChangeNotification , object : nil ) } // Alert\u306b\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0. myAlert . addAction ( OkAction ) myAlert . addAction ( CancelAction ) // Alert\u3092\u767a\u52d5. present ( myAlert , animated : true , completion : nil ) } /* textField\u306b\u5909\u66f4\u304c\u4f1a\u3063\u305f\u6642\u306b\u901a\u77e5\u3055\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ @objc internal func changeTextField ( sender : NSNotification ) { let textField = sender . object as ! UITextField // \u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u3092\u8868\u793a. print ( textField . text !) } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 // // ViewController.swift // UIKit041_3.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () self . view . backgroundColor = UIColor . cyan let myButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 40 )) myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : 200 ) myButton . layer . cornerRadius = 20.0 myButton . backgroundColor = UIColor . red myButton . setTitle ( \"UIAlert\u3092\u767a\u52d5\" , for : . normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchUpInside ) self . view . addSubview ( myButton ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } /* \u30dc\u30bf\u30f3\u30a2\u30af\u30b7\u30e7\u30f3\u6642\u306b\u8a2d\u5b9a\u3057\u305f\u30e1\u30bd\u30c3\u30c9. */ internal func onClickMyButton ( sender : UIButton ) { // Alert\u751f\u6210. let myAlert : UIAlertController = UIAlertController ( title : \"title\" , message : \"message\" , preferredStyle : UIAlertControllerStyle . alert ) // OK\u30a2\u30af\u30b7\u30e7\u30f3\u751f\u6210. let OkAction = UIAlertAction ( title : \"OK\" , style : UIAlertActionStyle . default ) { ( action : UIAlertAction !) -> Void in print ( \"OK\" ) } // Cancel\u30a2\u30af\u30b7\u30e7\u30f3\u751f\u6210. let CancelAction = UIAlertAction ( title : \"Cancel\" , style : UIAlertActionStyle . destructive ) { ( action : UIAlertAction !) -> Void in print ( \"Cancel\" ) } // Alert\u306bTextField\u3092\u8ffd\u52a0. myAlert . addTextField { ( textField : UITextField !) -> Void in // \u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u3092\u975e\u8868\u793a\u306b\u3059\u308b. textField . isSecureTextEntry = true // NotificationCenter\u3092\u751f\u6210. let myNotificationCenter = NotificationCenter . default // textField\u306b\u5909\u66f4\u304c\u3042\u308c\u3070changeTextField\u30e1\u30bd\u30c3\u30c9\u306b\u901a\u77e5. myNotificationCenter . addObserver ( self , selector : #selector ( ViewController . changeTextField ( sender :)), name : NSNotification . Name . UITextFieldTextDidChange , object : nil ) } // Alert\u306b\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0. myAlert . addAction ( OkAction ) myAlert . addAction ( CancelAction ) // Alert\u3092\u767a\u52d5. present ( myAlert , animated : true , completion : nil ) } /* textField\u306b\u5909\u66f4\u304c\u4f1a\u3063\u305f\u6642\u306b\u901a\u77e5\u3055\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ internal func changeTextField ( sender : NSNotification ) { let textField = sender . object as ! UITextField // \u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u3092\u8868\u793a. print ( textField . text !) } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 // // ViewController.swift // UIKit041_2.3 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () self . view . backgroundColor = UIColor . cyanColor () let myButton = UIButton ( frame : CGRectMake ( 0 , 0 , 200 , 40 )) myButton . layer . position = CGPointMake ( self . view . frame . width / 2 , 200 ) myButton . layer . cornerRadius = 20.0 myButton . backgroundColor = UIColor . redColor () myButton . setTitle ( \"UIAlert\u3092\u767a\u52d5\" , forState : . Normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : . TouchUpInside ) self . view . addSubview ( myButton ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } /* \u30dc\u30bf\u30f3\u30a2\u30af\u30b7\u30e7\u30f3\u6642\u306b\u8a2d\u5b9a\u3057\u305f\u30e1\u30bd\u30c3\u30c9. */ internal func onClickMyButton ( sender : UIButton ) { // Alert\u751f\u6210. let myAlert : UIAlertController = UIAlertController ( title : \"title\" , message : \"message\" , preferredStyle : UIAlertControllerStyle . Alert ) // OK\u30a2\u30af\u30b7\u30e7\u30f3\u751f\u6210. let OkAction = UIAlertAction ( title : \"OK\" , style : UIAlertActionStyle . Default ) { ( action : UIAlertAction !) -> Void in print ( \"OK\" ) } // Cancel\u30a2\u30af\u30b7\u30e7\u30f3\u751f\u6210. let CancelAction = UIAlertAction ( title : \"Cancel\" , style : UIAlertActionStyle . Destructive ) { ( action : UIAlertAction !) -> Void in print ( \"Cancel\" ) } // Alert\u306bTextField\u3092\u8ffd\u52a0. myAlert . addTextFieldWithConfigurationHandler { ( textField : UITextField !) -> Void in // \u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u3092\u975e\u8868\u793a\u306b\u3059\u308b. textField . secureTextEntry = true // NotificationCenter\u3092\u751f\u6210. let myNotificationCenter = NSNotificationCenter . defaultCenter () // textField\u306b\u5909\u66f4\u304c\u3042\u308c\u3070changeTextField\u30e1\u30bd\u30c3\u30c9\u306b\u901a\u77e5. myNotificationCenter . addObserver ( self , selector : #selector ( ViewController . changeTextField ( _ :)), name : UITextFieldTextDidChangeNotification , object : nil ) } // Alert\u306b\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0. myAlert . addAction ( OkAction ) myAlert . addAction ( CancelAction ) // Alert\u3092\u767a\u52d5. presentViewController ( myAlert , animated : true , completion : nil ) } /* textField\u306b\u5909\u66f4\u304c\u4f1a\u3063\u305f\u6642\u306b\u901a\u77e5\u3055\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ internal func changeTextField ( sender : NSNotification ) { let textField = sender . object as ! UITextField // \u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u3092\u8868\u793a. print ( textField . text !) } }","title":"UIAlertController\u3092\u30d1\u30b9\u30ef\u30fc\u30c9\u5f62\u5f0f\u306b\u3059\u308b"},{"location":"1.uikit/041_uiapplicationpass/#3x4x","text":"onClickMyButton \u3001 changeTextField \u306b @objc \u3092\u8ffd\u52a0 UIAlertControllerStyle \u304c UIAlertController.Style \u306b\u5909\u66f4 UIAlertActionStyle \u304c UIAlertAction.Style \u306b\u5909\u66f4 NSNotification.Name.UITextFieldTextDidChange \u304c UITextField.textDidChangeNotification \u306b\u5909\u66f4","title":"3.x\u30684.x\u306e\u5dee\u5206"},{"location":"1.uikit/041_uiapplicationpass/#2330","text":"UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u306e\u5ec3\u6b62) UIAlert\u306e\u4e00\u90e8\u30e1\u30bd\u30c3\u30c9\u540d\u306e\u5909\u66f4(addTextFieldWithConfigurationHandler->addTextField)","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/041_uiapplicationpass/#reference","text":"UIAlertController Class https://developer.apple.com/reference/uikit/uialertcontroller UIAlertAction Class https://developer.apple.com/reference/uikit/uialertaction UITextInputTraits Protocol https://developer.apple.com/reference/uikit/uitextinputtraits","title":"Reference"},{"location":"1.uikit/042_uialertcontroller/","text":"UIAlertController\u3067\u6587\u5b57\u6570\u5236\u9650\u3092\u8a2d\u3051\u308b Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 // // ViewController.swift // UIKit042_4.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { var InputStr : String ! // \u5165\u529b\u3067\u304d\u308b\u6700\u5927\u6587\u5b57\u6570. let maxLength : Int = 6 override func viewDidLoad () { super . viewDidLoad () self . view . backgroundColor = UIColor . cyan let myButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 40 )) myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : 200 ) myButton . layer . cornerRadius = 20.0 myButton . backgroundColor = UIColor . red myButton . setTitle ( \"UIAlert\u3092\u767a\u52d5\" , for : . normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchUpInside ) self . view . addSubview ( myButton ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } @objc func onClickMyButton ( sender : UIButton ) { // Alert\u751f\u6210. let myAlert : UIAlertController = UIAlertController ( title : \"title\" , message : \"6\u6587\u5b57\u4ee5\u4e0b\u3067\u5165\u529b\" , preferredStyle : UIAlertController . Style . alert ) // OK\u30a2\u30af\u30b7\u30e7\u30f3\u751f\u6210. let OkAction = UIAlertAction ( title : \"OK\" , style : UIAlertAction . Style . default ) { ( action : UIAlertAction !) -> Void in print ( \"OK\" ) } // Cancel\u30a2\u30af\u30b7\u30e7\u30f3\u751f\u6210. let CancelAction = UIAlertAction ( title : \"Cancel\" , style : UIAlertAction . Style . destructive ) { ( action : UIAlertAction !) -> Void in print ( \"Cancel\" ) } // Alert\u306bTextField\u3092\u8ffd\u52a0. myAlert . addTextField { ( textField : UITextField !) -> Void in // NotificationCenter\u3092\u751f\u6210. let myNotificationCenter = NotificationCenter . default // textField\u306b\u5909\u66f4\u304c\u3042\u308c\u3070changeTextField\u30e1\u30bd\u30c3\u30c9\u306b\u901a\u77e5. myNotificationCenter . addObserver ( self , selector : #selector ( ViewController . changeTextField ( sender :)), name : UITextField . textDidChangeNotification , object : nil ) } // Alert\u306b\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0. myAlert . addAction ( OkAction ) myAlert . addAction ( CancelAction ) // Alert\u3092\u767a\u52d5\u3059\u308b. present ( myAlert , animated : true , completion : nil ) } @objc func changeTextField ( sender : NSNotification ) { let textField = sender . object as ! UITextField // \u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u3092\u53d6\u5f97. InputStr = textField . text // \u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u304c6\u6587\u5b57\u3092\u8d85\u3048\u305f\u3089\u5165\u529b\u3092\u5236\u9650. if InputStr . characters . count < maxLength { textField . isEnabled = true // \u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u3092\u8868\u793a. print ( textField . text !) } else { textField . isEnabled = false print ( \"6\u6587\u5b57\u3092\u8d85\u3048\u3066\u3044\u307e\u3059\" ) } } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 // // ViewController.swift // UIKit042_3.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { var InputStr : String ! // \u5165\u529b\u3067\u304d\u308b\u6700\u5927\u6587\u5b57\u6570. let maxLength : Int = 6 override func viewDidLoad () { super . viewDidLoad () self . view . backgroundColor = UIColor . cyan let myButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 40 )) myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : 200 ) myButton . layer . cornerRadius = 20.0 myButton . backgroundColor = UIColor . red myButton . setTitle ( \"UIAlert\u3092\u767a\u52d5\" , for : . normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchUpInside ) self . view . addSubview ( myButton ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } func onClickMyButton ( sender : UIButton ) { // Alert\u751f\u6210. let myAlert : UIAlertController = UIAlertController ( title : \"title\" , message : \"6\u6587\u5b57\u4ee5\u4e0b\u3067\u5165\u529b\" , preferredStyle : UIAlertControllerStyle . alert ) // OK\u30a2\u30af\u30b7\u30e7\u30f3\u751f\u6210. let OkAction = UIAlertAction ( title : \"OK\" , style : UIAlertActionStyle . default ) { ( action : UIAlertAction !) -> Void in print ( \"OK\" ) } // Cancel\u30a2\u30af\u30b7\u30e7\u30f3\u751f\u6210. let CancelAction = UIAlertAction ( title : \"Cancel\" , style : UIAlertActionStyle . destructive ) { ( action : UIAlertAction !) -> Void in print ( \"Cancel\" ) } // Alert\u306bTextField\u3092\u8ffd\u52a0. myAlert . addTextField { ( textField : UITextField !) -> Void in // NotificationCenter\u3092\u751f\u6210. let myNotificationCenter = NotificationCenter . default // textField\u306b\u5909\u66f4\u304c\u3042\u308c\u3070changeTextField\u30e1\u30bd\u30c3\u30c9\u306b\u901a\u77e5. myNotificationCenter . addObserver ( self , selector : #selector ( ViewController . changeTextField ( sender :)), name : NSNotification . Name . UITextFieldTextDidChange , object : nil ) } // Alert\u306b\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0. myAlert . addAction ( OkAction ) myAlert . addAction ( CancelAction ) // Alert\u3092\u767a\u52d5\u3059\u308b. present ( myAlert , animated : true , completion : nil ) } func changeTextField ( sender : NSNotification ) { let textField = sender . object as ! UITextField // \u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u3092\u53d6\u5f97. InputStr = textField . text // \u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u304c6\u6587\u5b57\u3092\u8d85\u3048\u305f\u3089\u5165\u529b\u3092\u5236\u9650. if InputStr . characters . count < maxLength { textField . isEnabled = true // \u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u3092\u8868\u793a. print ( textField . text !) } else { textField . isEnabled = false print ( \"6\u6587\u5b57\u3092\u8d85\u3048\u3066\u3044\u307e\u3059\" ) } } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 // // ViewController.swift // UIKit042_2.3 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { var InputStr : String ! // \u5165\u529b\u3067\u304d\u308b\u6700\u5927\u6587\u5b57\u6570. let maxLength : Int = 6 override func viewDidLoad () { super . viewDidLoad () self . view . backgroundColor = UIColor . cyanColor () let myButton = UIButton ( frame : CGRectMake ( 0 , 0 , 200 , 40 )) myButton . layer . position = CGPointMake ( self . view . frame . width / 2 , 200 ) myButton . layer . cornerRadius = 20.0 myButton . backgroundColor = UIColor . redColor () myButton . setTitle ( \"UIAlert\u3092\u767a\u52d5\" , forState : . Normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : . TouchUpInside ) self . view . addSubview ( myButton ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } func onClickMyButton ( sender : UIButton ) { // Alert\u751f\u6210. let myAlert : UIAlertController = UIAlertController ( title : \"title\" , message : \"6\u6587\u5b57\u4ee5\u4e0b\u3067\u5165\u529b\" , preferredStyle : UIAlertControllerStyle . Alert ) // OK\u30a2\u30af\u30b7\u30e7\u30f3\u751f\u6210. let OkAction = UIAlertAction ( title : \"OK\" , style : UIAlertActionStyle . Default ) { ( action : UIAlertAction !) -> Void in print ( \"OK\" ) } // Cancel\u30a2\u30af\u30b7\u30e7\u30f3\u751f\u6210. let CancelAction = UIAlertAction ( title : \"Cancel\" , style : UIAlertActionStyle . Destructive ) { ( action : UIAlertAction !) -> Void in print ( \"Cancel\" ) } // Alert\u306bTextField\u3092\u8ffd\u52a0. myAlert . addTextFieldWithConfigurationHandler { ( textField : UITextField !) -> Void in // NotificationCenter\u3092\u751f\u6210. let myNotificationCenter = NSNotificationCenter . defaultCenter () // textField\u306b\u5909\u66f4\u304c\u3042\u308c\u3070changeTextField\u30e1\u30bd\u30c3\u30c9\u306b\u901a\u77e5. myNotificationCenter . addObserver ( self , selector : #selector ( ViewController . changeTextField ( _ :)), name : UITextFieldTextDidChangeNotification , object : nil ) } // Alert\u306b\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0. myAlert . addAction ( OkAction ) myAlert . addAction ( CancelAction ) // Alert\u3092\u767a\u52d5\u3059\u308b. presentViewController ( myAlert , animated : true , completion : nil ) } func changeTextField ( sender : NSNotification ) { let textField = sender . object as ! UITextField // \u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u3092\u53d6\u5f97. InputStr = textField . text // \u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u304c6\u6587\u5b57\u3092\u8d85\u3048\u305f\u3089\u5165\u529b\u3092\u5236\u9650. if InputStr . characters . count < maxLength { textField . enabled = true // \u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u3092\u8868\u793a. print ( textField . text !) } else { textField . enabled = false print ( \"6\u6587\u5b57\u3092\u8d85\u3048\u3066\u3044\u307e\u3059\" ) } } } 3.x\u30684.x\u306e\u5dee\u5206 onClickMyButton \u3001 changeTextField \u306b @objc \u3092\u8ffd\u52a0 NSNotification.Name.UITextFieldTextDidChange \u304c UITextField.textDidChangeNotification \u306b\u5909\u66f4 UIAlertControllerStyle \u304c UIAlertController.Style \u306b\u5909\u66f4 characters \u306f\u975e\u63a8\u5968 2.3\u30683.0\u306e\u5dee\u5206 UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u306e\u5ec3\u6b62) sender\u306e\u8a18\u8ff0\u306e\u5909\u66f4(onClickMyButton(_:)->onClickMyButton(sender:) Reference UIAlertController Class https://developer.apple.com/reference/uikit/uialertcontroller UIAlertAction Class https://developer.apple.com/reference/uikit/uialertaction","title":"UIAlertController\u3067\u6587\u5b57\u6570\u5236\u9650\u3092\u8a2d\u3051\u308b"},{"location":"1.uikit/042_uialertcontroller/#uialertcontroller","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 // // ViewController.swift // UIKit042_4.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { var InputStr : String ! // \u5165\u529b\u3067\u304d\u308b\u6700\u5927\u6587\u5b57\u6570. let maxLength : Int = 6 override func viewDidLoad () { super . viewDidLoad () self . view . backgroundColor = UIColor . cyan let myButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 40 )) myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : 200 ) myButton . layer . cornerRadius = 20.0 myButton . backgroundColor = UIColor . red myButton . setTitle ( \"UIAlert\u3092\u767a\u52d5\" , for : . normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchUpInside ) self . view . addSubview ( myButton ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } @objc func onClickMyButton ( sender : UIButton ) { // Alert\u751f\u6210. let myAlert : UIAlertController = UIAlertController ( title : \"title\" , message : \"6\u6587\u5b57\u4ee5\u4e0b\u3067\u5165\u529b\" , preferredStyle : UIAlertController . Style . alert ) // OK\u30a2\u30af\u30b7\u30e7\u30f3\u751f\u6210. let OkAction = UIAlertAction ( title : \"OK\" , style : UIAlertAction . Style . default ) { ( action : UIAlertAction !) -> Void in print ( \"OK\" ) } // Cancel\u30a2\u30af\u30b7\u30e7\u30f3\u751f\u6210. let CancelAction = UIAlertAction ( title : \"Cancel\" , style : UIAlertAction . Style . destructive ) { ( action : UIAlertAction !) -> Void in print ( \"Cancel\" ) } // Alert\u306bTextField\u3092\u8ffd\u52a0. myAlert . addTextField { ( textField : UITextField !) -> Void in // NotificationCenter\u3092\u751f\u6210. let myNotificationCenter = NotificationCenter . default // textField\u306b\u5909\u66f4\u304c\u3042\u308c\u3070changeTextField\u30e1\u30bd\u30c3\u30c9\u306b\u901a\u77e5. myNotificationCenter . addObserver ( self , selector : #selector ( ViewController . changeTextField ( sender :)), name : UITextField . textDidChangeNotification , object : nil ) } // Alert\u306b\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0. myAlert . addAction ( OkAction ) myAlert . addAction ( CancelAction ) // Alert\u3092\u767a\u52d5\u3059\u308b. present ( myAlert , animated : true , completion : nil ) } @objc func changeTextField ( sender : NSNotification ) { let textField = sender . object as ! UITextField // \u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u3092\u53d6\u5f97. InputStr = textField . text // \u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u304c6\u6587\u5b57\u3092\u8d85\u3048\u305f\u3089\u5165\u529b\u3092\u5236\u9650. if InputStr . characters . count < maxLength { textField . isEnabled = true // \u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u3092\u8868\u793a. print ( textField . text !) } else { textField . isEnabled = false print ( \"6\u6587\u5b57\u3092\u8d85\u3048\u3066\u3044\u307e\u3059\" ) } } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 // // ViewController.swift // UIKit042_3.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { var InputStr : String ! // \u5165\u529b\u3067\u304d\u308b\u6700\u5927\u6587\u5b57\u6570. let maxLength : Int = 6 override func viewDidLoad () { super . viewDidLoad () self . view . backgroundColor = UIColor . cyan let myButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 40 )) myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : 200 ) myButton . layer . cornerRadius = 20.0 myButton . backgroundColor = UIColor . red myButton . setTitle ( \"UIAlert\u3092\u767a\u52d5\" , for : . normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchUpInside ) self . view . addSubview ( myButton ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } func onClickMyButton ( sender : UIButton ) { // Alert\u751f\u6210. let myAlert : UIAlertController = UIAlertController ( title : \"title\" , message : \"6\u6587\u5b57\u4ee5\u4e0b\u3067\u5165\u529b\" , preferredStyle : UIAlertControllerStyle . alert ) // OK\u30a2\u30af\u30b7\u30e7\u30f3\u751f\u6210. let OkAction = UIAlertAction ( title : \"OK\" , style : UIAlertActionStyle . default ) { ( action : UIAlertAction !) -> Void in print ( \"OK\" ) } // Cancel\u30a2\u30af\u30b7\u30e7\u30f3\u751f\u6210. let CancelAction = UIAlertAction ( title : \"Cancel\" , style : UIAlertActionStyle . destructive ) { ( action : UIAlertAction !) -> Void in print ( \"Cancel\" ) } // Alert\u306bTextField\u3092\u8ffd\u52a0. myAlert . addTextField { ( textField : UITextField !) -> Void in // NotificationCenter\u3092\u751f\u6210. let myNotificationCenter = NotificationCenter . default // textField\u306b\u5909\u66f4\u304c\u3042\u308c\u3070changeTextField\u30e1\u30bd\u30c3\u30c9\u306b\u901a\u77e5. myNotificationCenter . addObserver ( self , selector : #selector ( ViewController . changeTextField ( sender :)), name : NSNotification . Name . UITextFieldTextDidChange , object : nil ) } // Alert\u306b\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0. myAlert . addAction ( OkAction ) myAlert . addAction ( CancelAction ) // Alert\u3092\u767a\u52d5\u3059\u308b. present ( myAlert , animated : true , completion : nil ) } func changeTextField ( sender : NSNotification ) { let textField = sender . object as ! UITextField // \u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u3092\u53d6\u5f97. InputStr = textField . text // \u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u304c6\u6587\u5b57\u3092\u8d85\u3048\u305f\u3089\u5165\u529b\u3092\u5236\u9650. if InputStr . characters . count < maxLength { textField . isEnabled = true // \u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u3092\u8868\u793a. print ( textField . text !) } else { textField . isEnabled = false print ( \"6\u6587\u5b57\u3092\u8d85\u3048\u3066\u3044\u307e\u3059\" ) } } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 // // ViewController.swift // UIKit042_2.3 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { var InputStr : String ! // \u5165\u529b\u3067\u304d\u308b\u6700\u5927\u6587\u5b57\u6570. let maxLength : Int = 6 override func viewDidLoad () { super . viewDidLoad () self . view . backgroundColor = UIColor . cyanColor () let myButton = UIButton ( frame : CGRectMake ( 0 , 0 , 200 , 40 )) myButton . layer . position = CGPointMake ( self . view . frame . width / 2 , 200 ) myButton . layer . cornerRadius = 20.0 myButton . backgroundColor = UIColor . redColor () myButton . setTitle ( \"UIAlert\u3092\u767a\u52d5\" , forState : . Normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : . TouchUpInside ) self . view . addSubview ( myButton ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } func onClickMyButton ( sender : UIButton ) { // Alert\u751f\u6210. let myAlert : UIAlertController = UIAlertController ( title : \"title\" , message : \"6\u6587\u5b57\u4ee5\u4e0b\u3067\u5165\u529b\" , preferredStyle : UIAlertControllerStyle . Alert ) // OK\u30a2\u30af\u30b7\u30e7\u30f3\u751f\u6210. let OkAction = UIAlertAction ( title : \"OK\" , style : UIAlertActionStyle . Default ) { ( action : UIAlertAction !) -> Void in print ( \"OK\" ) } // Cancel\u30a2\u30af\u30b7\u30e7\u30f3\u751f\u6210. let CancelAction = UIAlertAction ( title : \"Cancel\" , style : UIAlertActionStyle . Destructive ) { ( action : UIAlertAction !) -> Void in print ( \"Cancel\" ) } // Alert\u306bTextField\u3092\u8ffd\u52a0. myAlert . addTextFieldWithConfigurationHandler { ( textField : UITextField !) -> Void in // NotificationCenter\u3092\u751f\u6210. let myNotificationCenter = NSNotificationCenter . defaultCenter () // textField\u306b\u5909\u66f4\u304c\u3042\u308c\u3070changeTextField\u30e1\u30bd\u30c3\u30c9\u306b\u901a\u77e5. myNotificationCenter . addObserver ( self , selector : #selector ( ViewController . changeTextField ( _ :)), name : UITextFieldTextDidChangeNotification , object : nil ) } // Alert\u306b\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0. myAlert . addAction ( OkAction ) myAlert . addAction ( CancelAction ) // Alert\u3092\u767a\u52d5\u3059\u308b. presentViewController ( myAlert , animated : true , completion : nil ) } func changeTextField ( sender : NSNotification ) { let textField = sender . object as ! UITextField // \u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u3092\u53d6\u5f97. InputStr = textField . text // \u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u304c6\u6587\u5b57\u3092\u8d85\u3048\u305f\u3089\u5165\u529b\u3092\u5236\u9650. if InputStr . characters . count < maxLength { textField . enabled = true // \u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u3092\u8868\u793a. print ( textField . text !) } else { textField . enabled = false print ( \"6\u6587\u5b57\u3092\u8d85\u3048\u3066\u3044\u307e\u3059\" ) } } }","title":"UIAlertController\u3067\u6587\u5b57\u6570\u5236\u9650\u3092\u8a2d\u3051\u308b"},{"location":"1.uikit/042_uialertcontroller/#3x4x","text":"onClickMyButton \u3001 changeTextField \u306b @objc \u3092\u8ffd\u52a0 NSNotification.Name.UITextFieldTextDidChange \u304c UITextField.textDidChangeNotification \u306b\u5909\u66f4 UIAlertControllerStyle \u304c UIAlertController.Style \u306b\u5909\u66f4 characters \u306f\u975e\u63a8\u5968","title":"3.x\u30684.x\u306e\u5dee\u5206"},{"location":"1.uikit/042_uialertcontroller/#2330","text":"UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u306e\u5ec3\u6b62) sender\u306e\u8a18\u8ff0\u306e\u5909\u66f4(onClickMyButton(_:)->onClickMyButton(sender:)","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/042_uialertcontroller/#reference","text":"UIAlertController Class https://developer.apple.com/reference/uikit/uialertcontroller UIAlertAction Class https://developer.apple.com/reference/uikit/uialertaction","title":"Reference"},{"location":"1.uikit/043_preview/","text":"\u30d7\u30ec\u30d3\u30e5\u30fc\u753b\u9762\u306b\u30a8\u30d5\u30a7\u30af\u30c8\u51e6\u7406 AppDelegate.swift Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 // // AppDelegate.swift // UIKit043_4.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { var window : UIWindow ? var myEffectView : UIView ! /* \u30a2\u30d7\u30ea\u8d77\u52d5\u6642\u306b\u547c\u3070\u308c\u308b. */ func application ( _ application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ NSObject : AnyObject ]?) -> Bool { print ( \"didFinishLaunchingWithOptions\" ) return true } /* \u30a2\u30d7\u30ea\u304c\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u306b\u306a\u308b\u76f4\u524d\u306b\u547c\u3070\u308c\u308b. */ func applicationWillResignActive ( _ application : UIApplication ) { print ( \"applicationWillResignActive\" ) let effect : UIBlurEffect = UIBlurEffect ( style : UIBlurEffect . Style . light ) myEffectView = UIVisualEffectView ( effect : effect ) myEffectView . frame = CGRect ( x : 0 , y : 0 , width : UIScreen . main . bounds . size . width , height : UIScreen . main . bounds . size . height ) self . window ?. addSubview ( myEffectView ) } /* \u30a2\u30d7\u30ea\u304c\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u306b\u306a\u3063\u305f\u6642\u306b\u547c\u3070\u308c\u308b. */ func applicationDidEnterBackground ( _ application : UIApplication ) { print ( \"viewDidDisappear\" ) } /* \u30a2\u30d7\u30ea\u304c\u30d5\u30a9\u30a2\u30b0\u30e9\u30a6\u30f3\u30c9\u306b\u306a\u3063\u305f\u6642\u306b\u547c\u3070\u308c\u308b. */ func applicationWillEnterForeground ( _ application : UIApplication ) { print ( \"applicationWillEnterForeground\" ) } /* \u30a2\u30d7\u30ea\u304c\u30a2\u30af\u30c6\u30a3\u30d6\u306b\u306a\u3063\u305f\u6642\u306b\u547c\u3070\u308c\u308b. */ func applicationDidBecomeActive ( _ application : UIApplication ) { print ( \"applicationDidBecomeActive\" ) if myEffectView != nil { self . myEffectView . removeFromSuperview () } } /* \u30a2\u30d7\u30ea\u304c\u7d42\u4e86\u3059\u308b\u76f4\u524d\u306b\u547c\u3070\u308c\u308b. */ func applicationWillTerminate ( _ application : UIApplication ) { print ( \"applicationWillTerminate\" ) } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 // // AppDelegate.swift // UIKit043_3.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit n @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { var window : UIWindow ? var myEffectView : UIView ! /* \u30a2\u30d7\u30ea\u8d77\u52d5\u6642\u306b\u547c\u3070\u308c\u308b. */ func application ( _ application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ NSObject : AnyObject ]?) -> Bool { print ( \"didFinishLaunchingWithOptions\" ) return true } /* \u30a2\u30d7\u30ea\u304c\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u306b\u306a\u308b\u76f4\u524d\u306b\u547c\u3070\u308c\u308b. */ func applicationWillResignActive ( _ application : UIApplication ) { print ( \"applicationWillResignActive\" ) let effect : UIBlurEffect = UIBlurEffect ( style : UIBlurEffectStyle . light ) myEffectView = UIVisualEffectView ( effect : effect ) myEffectView . frame = CGRect ( x : 0 , y : 0 , width : UIScreen . main . bounds . size . width , height : UIScreen . main . bounds . size . height ) self . window ?. addSubview ( myEffectView ) } /* \u30a2\u30d7\u30ea\u304c\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u306b\u306a\u3063\u305f\u6642\u306b\u547c\u3070\u308c\u308b. */ func applicationDidEnterBackground ( _ application : UIApplication ) { print ( \"viewDidDisappear\" ) } /* \u30a2\u30d7\u30ea\u304c\u30d5\u30a9\u30a2\u30b0\u30e9\u30a6\u30f3\u30c9\u306b\u306a\u3063\u305f\u6642\u306b\u547c\u3070\u308c\u308b. */ func applicationWillEnterForeground ( _ application : UIApplication ) { print ( \"applicationWillEnterForeground\" ) } /* \u30a2\u30d7\u30ea\u304c\u30a2\u30af\u30c6\u30a3\u30d6\u306b\u306a\u3063\u305f\u6642\u306b\u547c\u3070\u308c\u308b. */ func applicationDidBecomeActive ( _ application : UIApplication ) { print ( \"applicationDidBecomeActive\" ) if myEffectView != nil { self . myEffectView . removeFromSuperview () } } /* \u30a2\u30d7\u30ea\u304c\u7d42\u4e86\u3059\u308b\u76f4\u524d\u306b\u547c\u3070\u308c\u308b. */ func applicationWillTerminate ( _ application : UIApplication ) { print ( \"applicationWillTerminate\" ) } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 // // AppDelegate.swift // UIKit043_2.3 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { var window : UIWindow ? var myEffectView : UIView ! /* \u30a2\u30d7\u30ea\u8d77\u52d5\u6642\u306b\u547c\u3070\u308c\u308b. */ func application ( application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ NSObject : AnyObject ]?) -> Bool { print ( \"didFinishLaunchingWithOptions\" ) return true } /* \u30a2\u30d7\u30ea\u304c\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u306b\u306a\u308b\u76f4\u524d\u306b\u547c\u3070\u308c\u308b. */ func applicationWillResignActive ( application : UIApplication ) { print ( \"applicationWillResignActive\" ) let effect : UIBlurEffect = UIBlurEffect ( style : UIBlurEffectStyle . Light ) myEffectView = UIVisualEffectView ( effect : effect ) myEffectView . frame = CGRectMake ( 0 , 0 , UIScreen . mainScreen (). bounds . size . width , UIScreen . mainScreen (). bounds . size . height ) self . window ?. addSubview ( myEffectView ) } /* \u30a2\u30d7\u30ea\u304c\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u306b\u306a\u3063\u305f\u6642\u306b\u547c\u3070\u308c\u308b. */ func applicationDidEnterBackground ( application : UIApplication ) { print ( \"viewDidDisappear\" ) } /* \u30a2\u30d7\u30ea\u304c\u30d5\u30a9\u30a2\u30b0\u30e9\u30a6\u30f3\u30c9\u306b\u306a\u3063\u305f\u6642\u306b\u547c\u3070\u308c\u308b. */ func applicationWillEnterForeground ( application : UIApplication ) { print ( \"applicationWillEnterForeground\" ) } /* \u30a2\u30d7\u30ea\u304c\u30a2\u30af\u30c6\u30a3\u30d6\u306b\u306a\u3063\u305f\u6642\u306b\u547c\u3070\u308c\u308b. */ func applicationDidBecomeActive ( application : UIApplication ) { print ( \"applicationDidBecomeActive\" ) if myEffectView != nil { self . myEffectView . removeFromSuperview () } } /* \u30a2\u30d7\u30ea\u304c\u7d42\u4e86\u3059\u308b\u76f4\u524d\u306b\u547c\u3070\u308c\u308b. */ func applicationWillTerminate ( application : UIApplication ) { print ( \"applicationWillTerminate\" ) } } ViewController.swift Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 // // ViewController.swift // UIKit043_4.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UIWebViewDelegate { var myWebView : UIWebView ! override func viewDidLoad () { super . viewDidLoad () // WebView\u3092\u958b\u304f. myWebView = UIWebView () myWebView . delegate = self myWebView . frame = self . view . bounds self . view . addSubview ( myWebView ) let url : URL ! = URL ( string : \"http://www.apple.com\" ) let request : NSURLRequest = NSURLRequest ( url : url ) // \u30ed\u30fc\u30c9\u958b\u59cb. myWebView . loadRequest ( request as URLRequest ) } /* Web\u304c\u3059\u3079\u3066\u8aad\u307f\u8fbc\u307f\u7d42\u308f\u3063\u305f\u6642\u547c\u3070\u308c\u308b. */ func webViewDidFinishLoad ( _ webView : UIWebView ) { print ( \"webViewDidFinishLoad\" ) } /* Web\u304cload\u3055\u308c\u59cb\u3081\u305f\u6642\u3001\u547c\u3070\u308c\u308b. */ func webViewDidStartLoad ( _ webView : UIWebView ) { print ( \"webViewDidStartLoad\" ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 // // ViewController.swift // UIKit043_3.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UIWebViewDelegate { var myWebView : UIWebView ! override func viewDidLoad () { super . viewDidLoad () // WebView\u3092\u958b\u304f. myWebView = UIWebView () myWebView . delegate = self myWebView . frame = self . view . bounds self . view . addSubview ( myWebView ) let url : URL ! = URL ( string : \"http://www.apple.com\" ) let request : NSURLRequest = NSURLRequest ( url : url ) // \u30ed\u30fc\u30c9\u958b\u59cb. myWebView . loadRequest ( request as URLRequest ) } /* Web\u304c\u3059\u3079\u3066\u8aad\u307f\u8fbc\u307f\u7d42\u308f\u3063\u305f\u6642\u547c\u3070\u308c\u308b. */ func webViewDidFinishLoad ( _ webView : UIWebView ) { print ( \"webViewDidFinishLoad\" ) } /* Web\u304cload\u3055\u308c\u59cb\u3081\u305f\u6642\u3001\u547c\u3070\u308c\u308b. */ func webViewDidStartLoad ( _ webView : UIWebView ) { print ( \"webViewDidStartLoad\" ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 // // ViewController.swift // UIKit043_2.3 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UIWebViewDelegate { var myWebView : UIWebView ! override func viewDidLoad () { super . viewDidLoad () // WebView\u3092\u958b\u304f. myWebView = UIWebView () myWebView . delegate = self myWebView . frame = self . view . bounds self . view . addSubview ( myWebView ) let url : NSURL ! = NSURL ( string : \"http://www.apple.com\" ) let request : NSURLRequest = NSURLRequest ( URL : url ) // \u30ed\u30fc\u30c9\u958b\u59cb. myWebView . loadRequest ( request ) } /* Web\u304c\u3059\u3079\u3066\u8aad\u307f\u8fbc\u307f\u7d42\u308f\u3063\u305f\u6642\u547c\u3070\u308c\u308b. */ func webViewDidFinishLoad ( webView : UIWebView ) { print ( \"webViewDidFinishLoad\" ) } /* Web\u304cload\u3055\u308c\u59cb\u3081\u305f\u6642\u3001\u547c\u3070\u308c\u308b. */ func webViewDidStartLoad ( webView : UIWebView ) { print ( \"webViewDidStartLoad\" ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } 3.x\u30684.x\u306e\u5dee\u5206 UIBlurEffectStyle \u304c UIBlurEffect.Style UIWebView \u306fiOS 12.0\u304b\u3089\u975e\u63a8\u5968 2.3\u30683.0\u306e\u5dee\u5206 UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u306e\u5ec3\u6b62) AppDelegate\u306e\u95a2\u6570\u306e\u5f15\u6570\u304c\u5909\u66f4. (UIScreen.mainScreen()->UIScreen.main) NSURL\u306e\u5ec3\u6b62\u3001URL\u306b\u5909\u66f4 Reference UIApplication Class https://developer.apple.com/reference/uikit/uiapplication","title":"\u30d7\u30ec\u30d3\u30e5\u30fc\u753b\u9762\u306b\u30a8\u30d5\u30a7\u30af\u30c8\u51e6\u7406"},{"location":"1.uikit/043_preview/#_1","text":"","title":"\u30d7\u30ec\u30d3\u30e5\u30fc\u753b\u9762\u306b\u30a8\u30d5\u30a7\u30af\u30c8\u51e6\u7406"},{"location":"1.uikit/043_preview/#appdelegateswift","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 // // AppDelegate.swift // UIKit043_4.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { var window : UIWindow ? var myEffectView : UIView ! /* \u30a2\u30d7\u30ea\u8d77\u52d5\u6642\u306b\u547c\u3070\u308c\u308b. */ func application ( _ application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ NSObject : AnyObject ]?) -> Bool { print ( \"didFinishLaunchingWithOptions\" ) return true } /* \u30a2\u30d7\u30ea\u304c\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u306b\u306a\u308b\u76f4\u524d\u306b\u547c\u3070\u308c\u308b. */ func applicationWillResignActive ( _ application : UIApplication ) { print ( \"applicationWillResignActive\" ) let effect : UIBlurEffect = UIBlurEffect ( style : UIBlurEffect . Style . light ) myEffectView = UIVisualEffectView ( effect : effect ) myEffectView . frame = CGRect ( x : 0 , y : 0 , width : UIScreen . main . bounds . size . width , height : UIScreen . main . bounds . size . height ) self . window ?. addSubview ( myEffectView ) } /* \u30a2\u30d7\u30ea\u304c\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u306b\u306a\u3063\u305f\u6642\u306b\u547c\u3070\u308c\u308b. */ func applicationDidEnterBackground ( _ application : UIApplication ) { print ( \"viewDidDisappear\" ) } /* \u30a2\u30d7\u30ea\u304c\u30d5\u30a9\u30a2\u30b0\u30e9\u30a6\u30f3\u30c9\u306b\u306a\u3063\u305f\u6642\u306b\u547c\u3070\u308c\u308b. */ func applicationWillEnterForeground ( _ application : UIApplication ) { print ( \"applicationWillEnterForeground\" ) } /* \u30a2\u30d7\u30ea\u304c\u30a2\u30af\u30c6\u30a3\u30d6\u306b\u306a\u3063\u305f\u6642\u306b\u547c\u3070\u308c\u308b. */ func applicationDidBecomeActive ( _ application : UIApplication ) { print ( \"applicationDidBecomeActive\" ) if myEffectView != nil { self . myEffectView . removeFromSuperview () } } /* \u30a2\u30d7\u30ea\u304c\u7d42\u4e86\u3059\u308b\u76f4\u524d\u306b\u547c\u3070\u308c\u308b. */ func applicationWillTerminate ( _ application : UIApplication ) { print ( \"applicationWillTerminate\" ) } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 // // AppDelegate.swift // UIKit043_3.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit n @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { var window : UIWindow ? var myEffectView : UIView ! /* \u30a2\u30d7\u30ea\u8d77\u52d5\u6642\u306b\u547c\u3070\u308c\u308b. */ func application ( _ application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ NSObject : AnyObject ]?) -> Bool { print ( \"didFinishLaunchingWithOptions\" ) return true } /* \u30a2\u30d7\u30ea\u304c\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u306b\u306a\u308b\u76f4\u524d\u306b\u547c\u3070\u308c\u308b. */ func applicationWillResignActive ( _ application : UIApplication ) { print ( \"applicationWillResignActive\" ) let effect : UIBlurEffect = UIBlurEffect ( style : UIBlurEffectStyle . light ) myEffectView = UIVisualEffectView ( effect : effect ) myEffectView . frame = CGRect ( x : 0 , y : 0 , width : UIScreen . main . bounds . size . width , height : UIScreen . main . bounds . size . height ) self . window ?. addSubview ( myEffectView ) } /* \u30a2\u30d7\u30ea\u304c\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u306b\u306a\u3063\u305f\u6642\u306b\u547c\u3070\u308c\u308b. */ func applicationDidEnterBackground ( _ application : UIApplication ) { print ( \"viewDidDisappear\" ) } /* \u30a2\u30d7\u30ea\u304c\u30d5\u30a9\u30a2\u30b0\u30e9\u30a6\u30f3\u30c9\u306b\u306a\u3063\u305f\u6642\u306b\u547c\u3070\u308c\u308b. */ func applicationWillEnterForeground ( _ application : UIApplication ) { print ( \"applicationWillEnterForeground\" ) } /* \u30a2\u30d7\u30ea\u304c\u30a2\u30af\u30c6\u30a3\u30d6\u306b\u306a\u3063\u305f\u6642\u306b\u547c\u3070\u308c\u308b. */ func applicationDidBecomeActive ( _ application : UIApplication ) { print ( \"applicationDidBecomeActive\" ) if myEffectView != nil { self . myEffectView . removeFromSuperview () } } /* \u30a2\u30d7\u30ea\u304c\u7d42\u4e86\u3059\u308b\u76f4\u524d\u306b\u547c\u3070\u308c\u308b. */ func applicationWillTerminate ( _ application : UIApplication ) { print ( \"applicationWillTerminate\" ) } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 // // AppDelegate.swift // UIKit043_2.3 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { var window : UIWindow ? var myEffectView : UIView ! /* \u30a2\u30d7\u30ea\u8d77\u52d5\u6642\u306b\u547c\u3070\u308c\u308b. */ func application ( application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ NSObject : AnyObject ]?) -> Bool { print ( \"didFinishLaunchingWithOptions\" ) return true } /* \u30a2\u30d7\u30ea\u304c\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u306b\u306a\u308b\u76f4\u524d\u306b\u547c\u3070\u308c\u308b. */ func applicationWillResignActive ( application : UIApplication ) { print ( \"applicationWillResignActive\" ) let effect : UIBlurEffect = UIBlurEffect ( style : UIBlurEffectStyle . Light ) myEffectView = UIVisualEffectView ( effect : effect ) myEffectView . frame = CGRectMake ( 0 , 0 , UIScreen . mainScreen (). bounds . size . width , UIScreen . mainScreen (). bounds . size . height ) self . window ?. addSubview ( myEffectView ) } /* \u30a2\u30d7\u30ea\u304c\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u306b\u306a\u3063\u305f\u6642\u306b\u547c\u3070\u308c\u308b. */ func applicationDidEnterBackground ( application : UIApplication ) { print ( \"viewDidDisappear\" ) } /* \u30a2\u30d7\u30ea\u304c\u30d5\u30a9\u30a2\u30b0\u30e9\u30a6\u30f3\u30c9\u306b\u306a\u3063\u305f\u6642\u306b\u547c\u3070\u308c\u308b. */ func applicationWillEnterForeground ( application : UIApplication ) { print ( \"applicationWillEnterForeground\" ) } /* \u30a2\u30d7\u30ea\u304c\u30a2\u30af\u30c6\u30a3\u30d6\u306b\u306a\u3063\u305f\u6642\u306b\u547c\u3070\u308c\u308b. */ func applicationDidBecomeActive ( application : UIApplication ) { print ( \"applicationDidBecomeActive\" ) if myEffectView != nil { self . myEffectView . removeFromSuperview () } } /* \u30a2\u30d7\u30ea\u304c\u7d42\u4e86\u3059\u308b\u76f4\u524d\u306b\u547c\u3070\u308c\u308b. */ func applicationWillTerminate ( application : UIApplication ) { print ( \"applicationWillTerminate\" ) } }","title":"AppDelegate.swift"},{"location":"1.uikit/043_preview/#viewcontrollerswift","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 // // ViewController.swift // UIKit043_4.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UIWebViewDelegate { var myWebView : UIWebView ! override func viewDidLoad () { super . viewDidLoad () // WebView\u3092\u958b\u304f. myWebView = UIWebView () myWebView . delegate = self myWebView . frame = self . view . bounds self . view . addSubview ( myWebView ) let url : URL ! = URL ( string : \"http://www.apple.com\" ) let request : NSURLRequest = NSURLRequest ( url : url ) // \u30ed\u30fc\u30c9\u958b\u59cb. myWebView . loadRequest ( request as URLRequest ) } /* Web\u304c\u3059\u3079\u3066\u8aad\u307f\u8fbc\u307f\u7d42\u308f\u3063\u305f\u6642\u547c\u3070\u308c\u308b. */ func webViewDidFinishLoad ( _ webView : UIWebView ) { print ( \"webViewDidFinishLoad\" ) } /* Web\u304cload\u3055\u308c\u59cb\u3081\u305f\u6642\u3001\u547c\u3070\u308c\u308b. */ func webViewDidStartLoad ( _ webView : UIWebView ) { print ( \"webViewDidStartLoad\" ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 // // ViewController.swift // UIKit043_3.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UIWebViewDelegate { var myWebView : UIWebView ! override func viewDidLoad () { super . viewDidLoad () // WebView\u3092\u958b\u304f. myWebView = UIWebView () myWebView . delegate = self myWebView . frame = self . view . bounds self . view . addSubview ( myWebView ) let url : URL ! = URL ( string : \"http://www.apple.com\" ) let request : NSURLRequest = NSURLRequest ( url : url ) // \u30ed\u30fc\u30c9\u958b\u59cb. myWebView . loadRequest ( request as URLRequest ) } /* Web\u304c\u3059\u3079\u3066\u8aad\u307f\u8fbc\u307f\u7d42\u308f\u3063\u305f\u6642\u547c\u3070\u308c\u308b. */ func webViewDidFinishLoad ( _ webView : UIWebView ) { print ( \"webViewDidFinishLoad\" ) } /* Web\u304cload\u3055\u308c\u59cb\u3081\u305f\u6642\u3001\u547c\u3070\u308c\u308b. */ func webViewDidStartLoad ( _ webView : UIWebView ) { print ( \"webViewDidStartLoad\" ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 // // ViewController.swift // UIKit043_2.3 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UIWebViewDelegate { var myWebView : UIWebView ! override func viewDidLoad () { super . viewDidLoad () // WebView\u3092\u958b\u304f. myWebView = UIWebView () myWebView . delegate = self myWebView . frame = self . view . bounds self . view . addSubview ( myWebView ) let url : NSURL ! = NSURL ( string : \"http://www.apple.com\" ) let request : NSURLRequest = NSURLRequest ( URL : url ) // \u30ed\u30fc\u30c9\u958b\u59cb. myWebView . loadRequest ( request ) } /* Web\u304c\u3059\u3079\u3066\u8aad\u307f\u8fbc\u307f\u7d42\u308f\u3063\u305f\u6642\u547c\u3070\u308c\u308b. */ func webViewDidFinishLoad ( webView : UIWebView ) { print ( \"webViewDidFinishLoad\" ) } /* Web\u304cload\u3055\u308c\u59cb\u3081\u305f\u6642\u3001\u547c\u3070\u308c\u308b. */ func webViewDidStartLoad ( webView : UIWebView ) { print ( \"webViewDidStartLoad\" ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } }","title":"ViewController.swift"},{"location":"1.uikit/043_preview/#3x4x","text":"UIBlurEffectStyle \u304c UIBlurEffect.Style UIWebView \u306fiOS 12.0\u304b\u3089\u975e\u63a8\u5968","title":"3.x\u30684.x\u306e\u5dee\u5206"},{"location":"1.uikit/043_preview/#2330","text":"UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u306e\u5ec3\u6b62) AppDelegate\u306e\u95a2\u6570\u306e\u5f15\u6570\u304c\u5909\u66f4. (UIScreen.mainScreen()->UIScreen.main) NSURL\u306e\u5ec3\u6b62\u3001URL\u306b\u5909\u66f4","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/043_preview/#reference","text":"UIApplication Class https://developer.apple.com/reference/uikit/uiapplication","title":"Reference"},{"location":"1.uikit/044_scoundscreendraw/","text":"\u30bb\u30ab\u30f3\u30c9Screen\u3078\u306e\u63cf\u753b Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 // // ViewController.swift // UIKit044_4.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { var mySecondWindow : UIWindow ! override func viewDidLoad () { super . viewDidLoad () let screen : NSArray = UIScreen . screens as NSArray // \u63a5\u7d9a\u4e2d\u306e\u753b\u9762\u304c2\u3064\u3042\u308b\u5834\u5408\u30012\u756a\u76ee\u3092\u8868\u793a. if screen . count > 1 { let screen : UIScreen = UIScreen . screens [ 1 ] showSecondScreenWindow ( screen : screen ) } // \u753b\u9762\u306e\u63a5\u7d9a\u304c\u304a\u3053\u306a\u308f\u308c\u305f\u6642\u306b\u767a\u751f\u3059\u308bNotification. let myDefaultCenter : NotificationCenter = NotificationCenter . default myDefaultCenter . addObserver ( self , selector : #selector ( ViewController . screenDidConnect ( notification :)), name : UIScreen . didConnectNotification , object : nil ) myDefaultCenter . addObserver ( self , selector : #selector ( ViewController . screenDidDisconnect ( notification :)), name : UIScreen . didDisconnectNotification , object : nil ) myDefaultCenter . addObserver ( self , selector : #selector ( ViewController . screenDidModeChange ( notification :)), name : UIScreen . modeDidChangeNotification , object : nil ) // Label\u3092\u4f5c\u6210. let myLabel : UILabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myLabel . backgroundColor = UIColor . orange myLabel . layer . masksToBounds = true myLabel . layer . cornerRadius = 20.0 myLabel . text = \"Hello 1st Screen\" myLabel . textColor = UIColor . white myLabel . shadowColor = UIColor . gray myLabel . textAlignment = NSTextAlignment . center myLabel . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 200 ) self . view . addSubview ( myLabel ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } /* \u753b\u9762\u306e\u63a5\u7d9a\u3055\u308c\u305f\u6642. */ @objc func screenDidConnect ( notification : NSNotification ){ print ( \"screenDidConnect\" ) let screen : NSArray = UIScreen . screens as NSArray if screen . count > 1 { let screen : UIScreen = UIScreen . screens [ 1 ] showSecondScreenWindow ( screen : screen ) } } /* \u753b\u9762\u304c\u5207\u65ad\u3055\u308c\u305f\u6642. */ @objc func screenDidDisconnect ( notification : NSNotification ){ print ( \"screenDidDisconnect\" ) } /* \u753b\u9762\u306e\u30e2\u30fc\u30c9\u304c\u5909\u308f\u3063\u305f\u6642. */ @objc func screenDidModeChange ( notification : NSNotification ){ print ( \"screenDidModeChange\" ) } /* 2\u753b\u9762\u76ee\u306e\u753b\u9762\u306e\u30ec\u30a4\u30a2\u30a6\u30c8. */ func showSecondScreenWindow ( screen : UIScreen !){ mySecondWindow = UIWindow () mySecondWindow . screen = screen mySecondWindow . frame = CGRect ( x : 0 , y : 0 , width : screen . bounds . width , height : screen . bounds . height ) mySecondWindow . backgroundColor = UIColor . red self . mySecondWindow . makeKeyAndVisible () // Label\u3092\u4f5c\u6210. let myLabel : UILabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myLabel . backgroundColor = UIColor . orange myLabel . layer . masksToBounds = true myLabel . layer . cornerRadius = 20.0 myLabel . text = \"Hello Second Screen\" myLabel . textColor = UIColor . white myLabel . shadowColor = UIColor . gray myLabel . textAlignment = NSTextAlignment . center myLabel . layer . position = CGPoint ( x : self . mySecondWindow . bounds . width / 2 , y : 200 ) self . mySecondWindow . addSubview ( myLabel ) } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 // // ViewController.swift // UIKit044_3.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { var mySecondWindow : UIWindow ! override func viewDidLoad () { super . viewDidLoad () let screen : NSArray = UIScreen . screens // \u63a5\u7d9a\u4e2d\u306e\u753b\u9762\u304c2\u3064\u3042\u308b\u5834\u5408\u30012\u756a\u76ee\u3092\u8868\u793a. if screen . count > 1 { let screen : UIScreen = UIScreen . screens [ 1 ] showSecondScreenWindow ( screen : screen ) } // \u753b\u9762\u306e\u63a5\u7d9a\u304c\u304a\u3053\u306a\u308f\u308c\u305f\u6642\u306b\u767a\u751f\u3059\u308bNotification. let myDefaultCenter : NotificationCenter = NotificationCenter . default myDefaultCenter . addObserver ( self , selector : #selector ( ViewController . screenDidConnect ( notification :)), name : NSNotification . Name . UIScreenDidConnect , object : nil ) myDefaultCenter . addObserver ( self , selector : #selector ( ViewController . screenDidDisconnect ( notification :)), name : NSNotification . Name . UIScreenDidDisconnect , object : nil ) myDefaultCenter . addObserver ( self , selector : #selector ( ViewController . screenDidModeChange ( notification :)), name : NSNotification . Name . UIScreenModeDidChange , object : nil ) // Label\u3092\u4f5c\u6210. let myLabel : UILabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myLabel . backgroundColor = UIColor . orange myLabel . layer . masksToBounds = true myLabel . layer . cornerRadius = 20.0 myLabel . text = \"Hello 1st Screen\" myLabel . textColor = UIColor . white myLabel . shadowColor = UIColor . gray myLabel . textAlignment = NSTextAlignment . center myLabel . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 200 ) self . view . addSubview ( myLabel ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } /* \u753b\u9762\u306e\u63a5\u7d9a\u3055\u308c\u305f\u6642. */ func screenDidConnect ( notification : NSNotification ){ print ( \"screenDidConnect\" ) let screen : NSArray = UIScreen . screens if screen . count > 1 { let screen : UIScreen = UIScreen . screens [ 1 ] showSecondScreenWindow ( screen : screen ) } } /* \u753b\u9762\u304c\u5207\u65ad\u3055\u308c\u305f\u6642. */ func screenDidDisconnect ( notification : NSNotification ){ print ( \"screenDidDisconnect\" ) } /* \u753b\u9762\u306e\u30e2\u30fc\u30c9\u304c\u5909\u308f\u3063\u305f\u6642. */ func screenDidModeChange ( notification : NSNotification ){ print ( \"screenDidModeChange\" ) } /* 2\u753b\u9762\u76ee\u306e\u753b\u9762\u306e\u30ec\u30a4\u30a2\u30a6\u30c8. */ func showSecondScreenWindow ( screen : UIScreen !){ mySecondWindow = UIWindow () mySecondWindow . screen = screen mySecondWindow . frame = CGRect ( x : 0 , y : 0 , width : screen . bounds . width , height : screen . bounds . height ) mySecondWindow . backgroundColor = UIColor . red self . mySecondWindow . makeKeyAndVisible () // Label\u3092\u4f5c\u6210. let myLabel : UILabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myLabel . backgroundColor = UIColor . orange myLabel . layer . masksToBounds = true myLabel . layer . cornerRadius = 20.0 myLabel . text = \"Hello Second Screen\" myLabel . textColor = UIColor . white myLabel . shadowColor = UIColor . gray myLabel . textAlignment = NSTextAlignment . center myLabel . layer . position = CGPoint ( x : self . mySecondWindow . bounds . width / 2 , y : 200 ) self . mySecondWindow . addSubview ( myLabel ) } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 // // ViewController.swift // UIKit044_2.3 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { var mySecondWindow : UIWindow ! override func viewDidLoad () { super . viewDidLoad () let screen : NSArray = UIScreen . screens () // \u63a5\u7d9a\u4e2d\u306e\u753b\u9762\u304c2\u3064\u3042\u308b\u5834\u5408\u30012\u756a\u76ee\u3092\u8868\u793a. if screen . count > 1 { let screen : UIScreen = UIScreen . screens ()[ 1 ] showSecondScreenWindow ( screen ) } // \u753b\u9762\u306e\u63a5\u7d9a\u304c\u304a\u3053\u306a\u308f\u308c\u305f\u6642\u306b\u767a\u751f\u3059\u308bNotification. let myDefaultCenter : NSNotificationCenter = NSNotificationCenter . defaultCenter () myDefaultCenter . addObserver ( self , selector : #selector ( ViewController . screenDidConnect ( _ :)), name : UIScreenDidConnectNotification , object : nil ) myDefaultCenter . addObserver ( self , selector : #selector ( ViewController . screenDidDisconnect ( _ :)), name : UIScreenDidDisconnectNotification , object : nil ) myDefaultCenter . addObserver ( self , selector : #selector ( ViewController . screenDidModeChange ( _ :)), name : UIScreenModeDidChangeNotification , object : nil ) // Label\u3092\u4f5c\u6210. let myLabel : UILabel = UILabel ( frame : CGRectMake ( 0 , 0 , 200 , 50 )) myLabel . backgroundColor = UIColor . orangeColor () myLabel . layer . masksToBounds = true myLabel . layer . cornerRadius = 20.0 myLabel . text = \"Hello 1st Screen\" myLabel . textColor = UIColor . whiteColor () myLabel . shadowColor = UIColor . grayColor () myLabel . textAlignment = NSTextAlignment . Center myLabel . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 200 ) self . view . addSubview ( myLabel ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } /* \u753b\u9762\u306e\u63a5\u7d9a\u3055\u308c\u305f\u6642. */ func screenDidConnect ( notification : NSNotification ){ print ( \"screenDidConnect\" ) let screen : NSArray = UIScreen . screens () if screen . count > 1 { let screen : UIScreen = UIScreen . screens ()[ 1 ] showSecondScreenWindow ( screen ) } } /* \u753b\u9762\u304c\u5207\u65ad\u3055\u308c\u305f\u6642. */ func screenDidDisconnect ( notification : NSNotification ){ print ( \"screenDidDisconnect\" ) } /* \u753b\u9762\u306e\u30e2\u30fc\u30c9\u304c\u5909\u308f\u3063\u305f\u6642. */ func screenDidModeChange ( notification : NSNotification ){ print ( \"screenDidModeChange\" ) } /* 2\u753b\u9762\u76ee\u306e\u753b\u9762\u306e\u30ec\u30a4\u30a2\u30a6\u30c8. */ func showSecondScreenWindow ( screen : UIScreen !){ mySecondWindow = UIWindow () mySecondWindow . screen = screen mySecondWindow . frame = CGRectMake ( 0 , 0 , screen . bounds . width , screen . bounds . height ) mySecondWindow . backgroundColor = UIColor . redColor () self . mySecondWindow . makeKeyAndVisible () // Label\u3092\u4f5c\u6210. let myLabel : UILabel = UILabel ( frame : CGRectMake ( 0 , 0 , 200 , 50 )) myLabel . backgroundColor = UIColor . orangeColor () myLabel . layer . masksToBounds = true myLabel . layer . cornerRadius = 20.0 myLabel . text = \"Hello Second Screen\" myLabel . textColor = UIColor . whiteColor () myLabel . shadowColor = UIColor . grayColor () myLabel . textAlignment = NSTextAlignment . Center myLabel . layer . position = CGPoint ( x : self . mySecondWindow . bounds . width / 2 , y : 200 ) self . mySecondWindow . addSubview ( myLabel ) } } 3.x\u30684.x\u306e\u5dee\u5206 UIScreen.screens \u304c UIScreen.screens as NSArray \u306b\u5909\u66f4 screenDidConnect \u3001 screenDidDisconnect \u3001 screenDidModeChange \u306b @objc \u3092\u8ffd\u52a0 NSNotification.Name.UIScreenDidConnect \u304c UIScreen.didConnectNotification \u306b\u5909\u66f4 NSNotification.Name.UIScreenDidDisconnect \u304c UIScreen.didDisconnectNotification \u306b\u5909\u66f4 NSNotification.Name.UIScreenModeDidChange \u304c UIScreen.modeDidChangeNotification \u306b\u5909\u66f4 2.3\u30683.0\u306e\u5dee\u5206 UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u306e\u5ec3\u6b62) (ViewController.screenDidConnect(_:)->) Reference UIScreen Class https://developer.apple.com/reference/uikit/uiscreen","title":"\u30bb\u30ab\u30f3\u30c9Screen\u3078\u306e\u63cf\u753b"},{"location":"1.uikit/044_scoundscreendraw/#screen","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 // // ViewController.swift // UIKit044_4.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { var mySecondWindow : UIWindow ! override func viewDidLoad () { super . viewDidLoad () let screen : NSArray = UIScreen . screens as NSArray // \u63a5\u7d9a\u4e2d\u306e\u753b\u9762\u304c2\u3064\u3042\u308b\u5834\u5408\u30012\u756a\u76ee\u3092\u8868\u793a. if screen . count > 1 { let screen : UIScreen = UIScreen . screens [ 1 ] showSecondScreenWindow ( screen : screen ) } // \u753b\u9762\u306e\u63a5\u7d9a\u304c\u304a\u3053\u306a\u308f\u308c\u305f\u6642\u306b\u767a\u751f\u3059\u308bNotification. let myDefaultCenter : NotificationCenter = NotificationCenter . default myDefaultCenter . addObserver ( self , selector : #selector ( ViewController . screenDidConnect ( notification :)), name : UIScreen . didConnectNotification , object : nil ) myDefaultCenter . addObserver ( self , selector : #selector ( ViewController . screenDidDisconnect ( notification :)), name : UIScreen . didDisconnectNotification , object : nil ) myDefaultCenter . addObserver ( self , selector : #selector ( ViewController . screenDidModeChange ( notification :)), name : UIScreen . modeDidChangeNotification , object : nil ) // Label\u3092\u4f5c\u6210. let myLabel : UILabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myLabel . backgroundColor = UIColor . orange myLabel . layer . masksToBounds = true myLabel . layer . cornerRadius = 20.0 myLabel . text = \"Hello 1st Screen\" myLabel . textColor = UIColor . white myLabel . shadowColor = UIColor . gray myLabel . textAlignment = NSTextAlignment . center myLabel . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 200 ) self . view . addSubview ( myLabel ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } /* \u753b\u9762\u306e\u63a5\u7d9a\u3055\u308c\u305f\u6642. */ @objc func screenDidConnect ( notification : NSNotification ){ print ( \"screenDidConnect\" ) let screen : NSArray = UIScreen . screens as NSArray if screen . count > 1 { let screen : UIScreen = UIScreen . screens [ 1 ] showSecondScreenWindow ( screen : screen ) } } /* \u753b\u9762\u304c\u5207\u65ad\u3055\u308c\u305f\u6642. */ @objc func screenDidDisconnect ( notification : NSNotification ){ print ( \"screenDidDisconnect\" ) } /* \u753b\u9762\u306e\u30e2\u30fc\u30c9\u304c\u5909\u308f\u3063\u305f\u6642. */ @objc func screenDidModeChange ( notification : NSNotification ){ print ( \"screenDidModeChange\" ) } /* 2\u753b\u9762\u76ee\u306e\u753b\u9762\u306e\u30ec\u30a4\u30a2\u30a6\u30c8. */ func showSecondScreenWindow ( screen : UIScreen !){ mySecondWindow = UIWindow () mySecondWindow . screen = screen mySecondWindow . frame = CGRect ( x : 0 , y : 0 , width : screen . bounds . width , height : screen . bounds . height ) mySecondWindow . backgroundColor = UIColor . red self . mySecondWindow . makeKeyAndVisible () // Label\u3092\u4f5c\u6210. let myLabel : UILabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myLabel . backgroundColor = UIColor . orange myLabel . layer . masksToBounds = true myLabel . layer . cornerRadius = 20.0 myLabel . text = \"Hello Second Screen\" myLabel . textColor = UIColor . white myLabel . shadowColor = UIColor . gray myLabel . textAlignment = NSTextAlignment . center myLabel . layer . position = CGPoint ( x : self . mySecondWindow . bounds . width / 2 , y : 200 ) self . mySecondWindow . addSubview ( myLabel ) } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 // // ViewController.swift // UIKit044_3.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { var mySecondWindow : UIWindow ! override func viewDidLoad () { super . viewDidLoad () let screen : NSArray = UIScreen . screens // \u63a5\u7d9a\u4e2d\u306e\u753b\u9762\u304c2\u3064\u3042\u308b\u5834\u5408\u30012\u756a\u76ee\u3092\u8868\u793a. if screen . count > 1 { let screen : UIScreen = UIScreen . screens [ 1 ] showSecondScreenWindow ( screen : screen ) } // \u753b\u9762\u306e\u63a5\u7d9a\u304c\u304a\u3053\u306a\u308f\u308c\u305f\u6642\u306b\u767a\u751f\u3059\u308bNotification. let myDefaultCenter : NotificationCenter = NotificationCenter . default myDefaultCenter . addObserver ( self , selector : #selector ( ViewController . screenDidConnect ( notification :)), name : NSNotification . Name . UIScreenDidConnect , object : nil ) myDefaultCenter . addObserver ( self , selector : #selector ( ViewController . screenDidDisconnect ( notification :)), name : NSNotification . Name . UIScreenDidDisconnect , object : nil ) myDefaultCenter . addObserver ( self , selector : #selector ( ViewController . screenDidModeChange ( notification :)), name : NSNotification . Name . UIScreenModeDidChange , object : nil ) // Label\u3092\u4f5c\u6210. let myLabel : UILabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myLabel . backgroundColor = UIColor . orange myLabel . layer . masksToBounds = true myLabel . layer . cornerRadius = 20.0 myLabel . text = \"Hello 1st Screen\" myLabel . textColor = UIColor . white myLabel . shadowColor = UIColor . gray myLabel . textAlignment = NSTextAlignment . center myLabel . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 200 ) self . view . addSubview ( myLabel ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } /* \u753b\u9762\u306e\u63a5\u7d9a\u3055\u308c\u305f\u6642. */ func screenDidConnect ( notification : NSNotification ){ print ( \"screenDidConnect\" ) let screen : NSArray = UIScreen . screens if screen . count > 1 { let screen : UIScreen = UIScreen . screens [ 1 ] showSecondScreenWindow ( screen : screen ) } } /* \u753b\u9762\u304c\u5207\u65ad\u3055\u308c\u305f\u6642. */ func screenDidDisconnect ( notification : NSNotification ){ print ( \"screenDidDisconnect\" ) } /* \u753b\u9762\u306e\u30e2\u30fc\u30c9\u304c\u5909\u308f\u3063\u305f\u6642. */ func screenDidModeChange ( notification : NSNotification ){ print ( \"screenDidModeChange\" ) } /* 2\u753b\u9762\u76ee\u306e\u753b\u9762\u306e\u30ec\u30a4\u30a2\u30a6\u30c8. */ func showSecondScreenWindow ( screen : UIScreen !){ mySecondWindow = UIWindow () mySecondWindow . screen = screen mySecondWindow . frame = CGRect ( x : 0 , y : 0 , width : screen . bounds . width , height : screen . bounds . height ) mySecondWindow . backgroundColor = UIColor . red self . mySecondWindow . makeKeyAndVisible () // Label\u3092\u4f5c\u6210. let myLabel : UILabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myLabel . backgroundColor = UIColor . orange myLabel . layer . masksToBounds = true myLabel . layer . cornerRadius = 20.0 myLabel . text = \"Hello Second Screen\" myLabel . textColor = UIColor . white myLabel . shadowColor = UIColor . gray myLabel . textAlignment = NSTextAlignment . center myLabel . layer . position = CGPoint ( x : self . mySecondWindow . bounds . width / 2 , y : 200 ) self . mySecondWindow . addSubview ( myLabel ) } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 // // ViewController.swift // UIKit044_2.3 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { var mySecondWindow : UIWindow ! override func viewDidLoad () { super . viewDidLoad () let screen : NSArray = UIScreen . screens () // \u63a5\u7d9a\u4e2d\u306e\u753b\u9762\u304c2\u3064\u3042\u308b\u5834\u5408\u30012\u756a\u76ee\u3092\u8868\u793a. if screen . count > 1 { let screen : UIScreen = UIScreen . screens ()[ 1 ] showSecondScreenWindow ( screen ) } // \u753b\u9762\u306e\u63a5\u7d9a\u304c\u304a\u3053\u306a\u308f\u308c\u305f\u6642\u306b\u767a\u751f\u3059\u308bNotification. let myDefaultCenter : NSNotificationCenter = NSNotificationCenter . defaultCenter () myDefaultCenter . addObserver ( self , selector : #selector ( ViewController . screenDidConnect ( _ :)), name : UIScreenDidConnectNotification , object : nil ) myDefaultCenter . addObserver ( self , selector : #selector ( ViewController . screenDidDisconnect ( _ :)), name : UIScreenDidDisconnectNotification , object : nil ) myDefaultCenter . addObserver ( self , selector : #selector ( ViewController . screenDidModeChange ( _ :)), name : UIScreenModeDidChangeNotification , object : nil ) // Label\u3092\u4f5c\u6210. let myLabel : UILabel = UILabel ( frame : CGRectMake ( 0 , 0 , 200 , 50 )) myLabel . backgroundColor = UIColor . orangeColor () myLabel . layer . masksToBounds = true myLabel . layer . cornerRadius = 20.0 myLabel . text = \"Hello 1st Screen\" myLabel . textColor = UIColor . whiteColor () myLabel . shadowColor = UIColor . grayColor () myLabel . textAlignment = NSTextAlignment . Center myLabel . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 200 ) self . view . addSubview ( myLabel ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } /* \u753b\u9762\u306e\u63a5\u7d9a\u3055\u308c\u305f\u6642. */ func screenDidConnect ( notification : NSNotification ){ print ( \"screenDidConnect\" ) let screen : NSArray = UIScreen . screens () if screen . count > 1 { let screen : UIScreen = UIScreen . screens ()[ 1 ] showSecondScreenWindow ( screen ) } } /* \u753b\u9762\u304c\u5207\u65ad\u3055\u308c\u305f\u6642. */ func screenDidDisconnect ( notification : NSNotification ){ print ( \"screenDidDisconnect\" ) } /* \u753b\u9762\u306e\u30e2\u30fc\u30c9\u304c\u5909\u308f\u3063\u305f\u6642. */ func screenDidModeChange ( notification : NSNotification ){ print ( \"screenDidModeChange\" ) } /* 2\u753b\u9762\u76ee\u306e\u753b\u9762\u306e\u30ec\u30a4\u30a2\u30a6\u30c8. */ func showSecondScreenWindow ( screen : UIScreen !){ mySecondWindow = UIWindow () mySecondWindow . screen = screen mySecondWindow . frame = CGRectMake ( 0 , 0 , screen . bounds . width , screen . bounds . height ) mySecondWindow . backgroundColor = UIColor . redColor () self . mySecondWindow . makeKeyAndVisible () // Label\u3092\u4f5c\u6210. let myLabel : UILabel = UILabel ( frame : CGRectMake ( 0 , 0 , 200 , 50 )) myLabel . backgroundColor = UIColor . orangeColor () myLabel . layer . masksToBounds = true myLabel . layer . cornerRadius = 20.0 myLabel . text = \"Hello Second Screen\" myLabel . textColor = UIColor . whiteColor () myLabel . shadowColor = UIColor . grayColor () myLabel . textAlignment = NSTextAlignment . Center myLabel . layer . position = CGPoint ( x : self . mySecondWindow . bounds . width / 2 , y : 200 ) self . mySecondWindow . addSubview ( myLabel ) } }","title":"\u30bb\u30ab\u30f3\u30c9Screen\u3078\u306e\u63cf\u753b"},{"location":"1.uikit/044_scoundscreendraw/#3x4x","text":"UIScreen.screens \u304c UIScreen.screens as NSArray \u306b\u5909\u66f4 screenDidConnect \u3001 screenDidDisconnect \u3001 screenDidModeChange \u306b @objc \u3092\u8ffd\u52a0 NSNotification.Name.UIScreenDidConnect \u304c UIScreen.didConnectNotification \u306b\u5909\u66f4 NSNotification.Name.UIScreenDidDisconnect \u304c UIScreen.didDisconnectNotification \u306b\u5909\u66f4 NSNotification.Name.UIScreenModeDidChange \u304c UIScreen.modeDidChangeNotification \u306b\u5909\u66f4","title":"3.x\u30684.x\u306e\u5dee\u5206"},{"location":"1.uikit/044_scoundscreendraw/#2330","text":"UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u306e\u5ec3\u6b62) (ViewController.screenDidConnect(_:)->)","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/044_scoundscreendraw/#reference","text":"UIScreen Class https://developer.apple.com/reference/uikit/uiscreen","title":"Reference"},{"location":"1.uikit/045_uitableviewbutton/","text":"TableView\u306e\u30dc\u30bf\u30f3\u306e\u62e1\u5f35 Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 // // ViewController.swift // UIKit045_4.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UITableViewDelegate , UITableViewDataSource { // Tabel\u3067\u4f7f\u7528\u3059\u308b\u914d\u5217. var myItems : [ String ] = [ \"TEST1\" , \"TEST2\" , \"TEST3\" ] var myTableView : UITableView = UITableView () override func viewDidLoad () { super . viewDidLoad () // Status Bar\u306e\u9ad8\u3055\u3092\u53d6\u5f97. let barHeight : CGFloat = UIApplication . shared . statusBarFrame . size . height // View\u306e\u9ad8\u3055\u3068\u5e45\u3092\u53d6\u5f97. let displayWidth : CGFloat = self . view . frame . width let displayHeight : CGFloat = self . view . frame . height // TableView\u306e\u751f\u6210( status bar\u306e\u9ad8\u3055\u5206\u305a\u3089\u3057\u3066\u8868\u793a ). myTableView . frame = CGRect ( x : 0 , y : barHeight , width : displayWidth , height : displayHeight - barHeight ) // Cell\u306e\u767b\u9332. myTableView . register ( UITableViewCell . self , forCellReuseIdentifier : \"MyCell\" ) // DataSource\u306e\u8a2d\u5b9a. myTableView . dataSource = self // Delegate\u3092\u8a2d\u5b9a. myTableView . delegate = self // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myTableView ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } /* Cell\u304c\u9078\u629e\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ func tableView ( _ tableView : UITableView , didSelectRowAt indexPath : IndexPath ) { print ( \"Num: \\( indexPath . row ) \" ) print ( \"Value: \\( myItems [ indexPath . row ] ) \" ) } /* Cell\u306e\u7dcf\u6570\u3092\u8fd4\u3059. */ func tableView ( _ tableView : UITableView , numberOfRowsInSection section : Int ) -> Int { print ( \"numberOfRowsInSection\" ) return myItems . count } /* Editable\u306e\u72b6\u614b\u306b\u3059\u308b. */ func tableView ( _ tableView : UITableView , canEditRowAt indexPath : IndexPath ) -> Bool { print ( \"canEditRowAtIndexPath\" ) return true } /* \u7279\u5b9a\u306e\u884c\u306e\u30dc\u30bf\u30f3\u64cd\u4f5c\u3092\u6709\u52b9\u306b\u3059\u308b. */ func tableView ( _ tableView : UITableView , commit editingStyle : UITableViewCell . EditingStyle , forRowAt indexPath : IndexPath ) { print ( \"commitEdittingStyle: \\( editingStyle ) \" ) } /* Cell\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b. */ func tableView ( _ tableView : UITableView , cellForRowAt indexPath : IndexPath ) -> UITableViewCell { print ( \"cellForRowAtIndexPath\" ) let cell : UITableViewCell = tableView . dequeueReusableCell ( withIdentifier : \"MyCell\" , for : indexPath as IndexPath ) //tableView.dequeueReusableCellWithIdentifier(\"MyCell\", forIndexPath: indexPath as IndexPath) cell . textLabel ?. text = \" \\( myItems [ indexPath . row ] ) \" return cell } /* Button\u3092\u62e1\u5f35\u3059\u308b. */ func tableView ( _ tableView : UITableView , editActionsForRowAt indexPath : IndexPath ) -> [ UITableViewRowAction ]? { // Share\u30dc\u30bf\u30f3. let myShareButton : UITableViewRowAction = UITableViewRowAction ( style : . normal , title : \"Share\" ) { ( action , index ) -> Void in tableView . isEditing = false print ( \"share\" ) } myShareButton . backgroundColor = UIColor . blue // Archive\u30dc\u30bf\u30f3. let myArchiveButton : UITableViewRowAction = UITableViewRowAction ( style : . normal , title : \"Archive\" ) { ( action , index ) -> Void in tableView . isEditing = false print ( \"archive\" ) } myArchiveButton . backgroundColor = UIColor . red return [ myShareButton , myArchiveButton ] } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 // // ViewController.swift // UIKit045_3.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UITableViewDelegate , UITableViewDataSource { // Tabel\u3067\u4f7f\u7528\u3059\u308b\u914d\u5217. var myItems : [ String ] = [ \"TEST1\" , \"TEST2\" , \"TEST3\" ] var myTableView : UITableView = UITableView () override func viewDidLoad () { super . viewDidLoad () // Status Bar\u306e\u9ad8\u3055\u3092\u53d6\u5f97. let barHeight : CGFloat = UIApplication . shared . statusBarFrame . size . height // View\u306e\u9ad8\u3055\u3068\u5e45\u3092\u53d6\u5f97. let displayWidth : CGFloat = self . view . frame . width let displayHeight : CGFloat = self . view . frame . height // TableView\u306e\u751f\u6210( status bar\u306e\u9ad8\u3055\u5206\u305a\u3089\u3057\u3066\u8868\u793a ). myTableView . frame = CGRect ( x : 0 , y : barHeight , width : displayWidth , height : displayHeight - barHeight ) // Cell\u306e\u767b\u9332. myTableView . register ( UITableViewCell . self , forCellReuseIdentifier : \"MyCell\" ) // DataSource\u306e\u8a2d\u5b9a. myTableView . dataSource = self // Delegate\u3092\u8a2d\u5b9a. myTableView . delegate = self // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myTableView ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } /* Cell\u304c\u9078\u629e\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ func tableView ( _ tableView : UITableView , didSelectRowAt indexPath : IndexPath ) { print ( \"Num: \\( indexPath . row ) \" ) print ( \"Value: \\( myItems [ indexPath . row ] ) \" ) } /* Cell\u306e\u7dcf\u6570\u3092\u8fd4\u3059. */ func tableView ( _ tableView : UITableView , numberOfRowsInSection section : Int ) -> Int { print ( \"numberOfRowsInSection\" ) return myItems . count } /* Editable\u306e\u72b6\u614b\u306b\u3059\u308b. */ func tableView ( _ tableView : UITableView , canEditRowAt indexPath : IndexPath ) -> Bool { print ( \"canEditRowAtIndexPath\" ) return true } /* \u7279\u5b9a\u306e\u884c\u306e\u30dc\u30bf\u30f3\u64cd\u4f5c\u3092\u6709\u52b9\u306b\u3059\u308b. */ func tableView ( _ tableView : UITableView , commit editingStyle : UITableViewCellEditingStyle , forRowAt indexPath : IndexPath ) { print ( \"commitEdittingStyle: \\( editingStyle ) \" ) } /* Cell\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b. */ func tableView ( _ tableView : UITableView , cellForRowAt indexPath : IndexPath ) -> UITableViewCell { print ( \"cellForRowAtIndexPath\" ) let cell : UITableViewCell = tableView . dequeueReusableCell ( withIdentifier : \"MyCell\" , for : indexPath as IndexPath ) //tableView.dequeueReusableCellWithIdentifier(\"MyCell\", forIndexPath: indexPath as IndexPath) cell . textLabel ?. text = \" \\( myItems [ indexPath . row ] ) \" return cell } /* Button\u3092\u62e1\u5f35\u3059\u308b. */ func tableView ( _ tableView : UITableView , editActionsForRowAt indexPath : IndexPath ) -> [ UITableViewRowAction ]? { // Share\u30dc\u30bf\u30f3. let myShareButton : UITableViewRowAction = UITableViewRowAction ( style : . normal , title : \"Share\" ) { ( action , index ) -> Void in tableView . isEditing = false print ( \"share\" ) } myShareButton . backgroundColor = UIColor . blue // Archive\u30dc\u30bf\u30f3. let myArchiveButton : UITableViewRowAction = UITableViewRowAction ( style : . normal , title : \"Archive\" ) { ( action , index ) -> Void in tableView . isEditing = false print ( \"archive\" ) } myArchiveButton . backgroundColor = UIColor . red return [ myShareButton , myArchiveButton ] } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 // // ViewController.swift // UIKit045_2.3 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UITableViewDelegate , UITableViewDataSource { // Tabel\u3067\u4f7f\u7528\u3059\u308b\u914d\u5217. var myItems : [ String ] = [ \"TEST1\" , \"TEST2\" , \"TEST3\" ] var myTableView : UITableView = UITableView () override func viewDidLoad () { super . viewDidLoad () // Status Bar\u306e\u9ad8\u3055\u3092\u53d6\u5f97. let barHeight : CGFloat = UIApplication . sharedApplication (). statusBarFrame . size . height // View\u306e\u9ad8\u3055\u3068\u5e45\u3092\u53d6\u5f97. let displayWidth : CGFloat = self . view . frame . width let displayHeight : CGFloat = self . view . frame . height // TableView\u306e\u751f\u6210( status bar\u306e\u9ad8\u3055\u5206\u305a\u3089\u3057\u3066\u8868\u793a ). myTableView . frame = CGRect ( x : 0 , y : barHeight , width : displayWidth , height : displayHeight - barHeight ) // Cell\u306e\u767b\u9332. myTableView . registerClass ( UITableViewCell . self , forCellReuseIdentifier : \"MyCell\" ) // DataSource\u306e\u8a2d\u5b9a. myTableView . dataSource = self // Delegate\u3092\u8a2d\u5b9a. myTableView . delegate = self // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myTableView ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } /* Cell\u304c\u9078\u629e\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ func tableView ( tableView : UITableView , didSelectRowAtIndexPath indexPath : NSIndexPath ) { print ( \"Num: \\( indexPath . row ) \" ) print ( \"Value: \\( myItems [ indexPath . row ] ) \" ) } /* Cell\u306e\u7dcf\u6570\u3092\u8fd4\u3059. */ func tableView ( tableView : UITableView , numberOfRowsInSection section : Int ) -> Int { print ( \"numberOfRowsInSection\" ) return myItems . count } /* Editable\u306e\u72b6\u614b\u306b\u3059\u308b. */ func tableView ( tableView : UITableView , canEditRowAtIndexPath indexPath : NSIndexPath ) -> Bool { print ( \"canEditRowAtIndexPath\" ) return true } /* \u7279\u5b9a\u306e\u884c\u306e\u30dc\u30bf\u30f3\u64cd\u4f5c\u3092\u6709\u52b9\u306b\u3059\u308b. */ func tableView ( tableView : UITableView , commitEditingStyle editingStyle : UITableViewCellEditingStyle , forRowAtIndexPath indexPath : NSIndexPath ) { print ( \"commitEdittingStyle: \\( editingStyle ) \" ) } /* Cell\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b. */ func tableView ( tableView : UITableView , cellForRowAtIndexPath indexPath : NSIndexPath ) -> UITableViewCell { print ( \"cellForRowAtIndexPath\" ) let cell : UITableViewCell = tableView . dequeueReusableCellWithIdentifier ( \"MyCell\" , forIndexPath : indexPath ) cell . textLabel ?. text = \" \\( myItems [ indexPath . row ] ) \" return cell } /* Button\u3092\u62e1\u5f35\u3059\u308b. */ func tableView ( tableView : UITableView , editActionsForRowAtIndexPath indexPath : NSIndexPath ) -> [ UITableViewRowAction ]? { // Share\u30dc\u30bf\u30f3. let myShareButton : UITableViewRowAction = UITableViewRowAction ( style : . Normal , title : \"Share\" ) { ( action , index ) -> Void in tableView . editing = false print ( \"share\" ) } myShareButton . backgroundColor = UIColor . blueColor () // Archive\u30dc\u30bf\u30f3. let myArchiveButton : UITableViewRowAction = UITableViewRowAction ( style : . Normal , title : \"Archive\" ) { ( action , index ) -> Void in tableView . editing = false print ( \"archive\" ) } myArchiveButton . backgroundColor = UIColor . redColor () return [ myShareButton , myArchiveButton ] } } 3.x\u30684.x\u306e\u5dee\u5206 UITableViewCellEditingStyle \u304c UITableViewCell.EditingStyle \u306b\u5909\u66f4 2.3\u30683.0\u306e\u5dee\u5206 UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u306e\u5ec3\u6b62) NSIndexPath\u306e\u5ec3\u6b62\u3001IndexPath\u306b\u5909\u66f4. Reference UITableView Class https://developer.apple.com/reference/uikit/uitableview","title":"TableView\u306e\u30dc\u30bf\u30f3\u306e\u62e1\u5f35"},{"location":"1.uikit/045_uitableviewbutton/#tableview","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 // // ViewController.swift // UIKit045_4.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UITableViewDelegate , UITableViewDataSource { // Tabel\u3067\u4f7f\u7528\u3059\u308b\u914d\u5217. var myItems : [ String ] = [ \"TEST1\" , \"TEST2\" , \"TEST3\" ] var myTableView : UITableView = UITableView () override func viewDidLoad () { super . viewDidLoad () // Status Bar\u306e\u9ad8\u3055\u3092\u53d6\u5f97. let barHeight : CGFloat = UIApplication . shared . statusBarFrame . size . height // View\u306e\u9ad8\u3055\u3068\u5e45\u3092\u53d6\u5f97. let displayWidth : CGFloat = self . view . frame . width let displayHeight : CGFloat = self . view . frame . height // TableView\u306e\u751f\u6210( status bar\u306e\u9ad8\u3055\u5206\u305a\u3089\u3057\u3066\u8868\u793a ). myTableView . frame = CGRect ( x : 0 , y : barHeight , width : displayWidth , height : displayHeight - barHeight ) // Cell\u306e\u767b\u9332. myTableView . register ( UITableViewCell . self , forCellReuseIdentifier : \"MyCell\" ) // DataSource\u306e\u8a2d\u5b9a. myTableView . dataSource = self // Delegate\u3092\u8a2d\u5b9a. myTableView . delegate = self // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myTableView ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } /* Cell\u304c\u9078\u629e\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ func tableView ( _ tableView : UITableView , didSelectRowAt indexPath : IndexPath ) { print ( \"Num: \\( indexPath . row ) \" ) print ( \"Value: \\( myItems [ indexPath . row ] ) \" ) } /* Cell\u306e\u7dcf\u6570\u3092\u8fd4\u3059. */ func tableView ( _ tableView : UITableView , numberOfRowsInSection section : Int ) -> Int { print ( \"numberOfRowsInSection\" ) return myItems . count } /* Editable\u306e\u72b6\u614b\u306b\u3059\u308b. */ func tableView ( _ tableView : UITableView , canEditRowAt indexPath : IndexPath ) -> Bool { print ( \"canEditRowAtIndexPath\" ) return true } /* \u7279\u5b9a\u306e\u884c\u306e\u30dc\u30bf\u30f3\u64cd\u4f5c\u3092\u6709\u52b9\u306b\u3059\u308b. */ func tableView ( _ tableView : UITableView , commit editingStyle : UITableViewCell . EditingStyle , forRowAt indexPath : IndexPath ) { print ( \"commitEdittingStyle: \\( editingStyle ) \" ) } /* Cell\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b. */ func tableView ( _ tableView : UITableView , cellForRowAt indexPath : IndexPath ) -> UITableViewCell { print ( \"cellForRowAtIndexPath\" ) let cell : UITableViewCell = tableView . dequeueReusableCell ( withIdentifier : \"MyCell\" , for : indexPath as IndexPath ) //tableView.dequeueReusableCellWithIdentifier(\"MyCell\", forIndexPath: indexPath as IndexPath) cell . textLabel ?. text = \" \\( myItems [ indexPath . row ] ) \" return cell } /* Button\u3092\u62e1\u5f35\u3059\u308b. */ func tableView ( _ tableView : UITableView , editActionsForRowAt indexPath : IndexPath ) -> [ UITableViewRowAction ]? { // Share\u30dc\u30bf\u30f3. let myShareButton : UITableViewRowAction = UITableViewRowAction ( style : . normal , title : \"Share\" ) { ( action , index ) -> Void in tableView . isEditing = false print ( \"share\" ) } myShareButton . backgroundColor = UIColor . blue // Archive\u30dc\u30bf\u30f3. let myArchiveButton : UITableViewRowAction = UITableViewRowAction ( style : . normal , title : \"Archive\" ) { ( action , index ) -> Void in tableView . isEditing = false print ( \"archive\" ) } myArchiveButton . backgroundColor = UIColor . red return [ myShareButton , myArchiveButton ] } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 // // ViewController.swift // UIKit045_3.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UITableViewDelegate , UITableViewDataSource { // Tabel\u3067\u4f7f\u7528\u3059\u308b\u914d\u5217. var myItems : [ String ] = [ \"TEST1\" , \"TEST2\" , \"TEST3\" ] var myTableView : UITableView = UITableView () override func viewDidLoad () { super . viewDidLoad () // Status Bar\u306e\u9ad8\u3055\u3092\u53d6\u5f97. let barHeight : CGFloat = UIApplication . shared . statusBarFrame . size . height // View\u306e\u9ad8\u3055\u3068\u5e45\u3092\u53d6\u5f97. let displayWidth : CGFloat = self . view . frame . width let displayHeight : CGFloat = self . view . frame . height // TableView\u306e\u751f\u6210( status bar\u306e\u9ad8\u3055\u5206\u305a\u3089\u3057\u3066\u8868\u793a ). myTableView . frame = CGRect ( x : 0 , y : barHeight , width : displayWidth , height : displayHeight - barHeight ) // Cell\u306e\u767b\u9332. myTableView . register ( UITableViewCell . self , forCellReuseIdentifier : \"MyCell\" ) // DataSource\u306e\u8a2d\u5b9a. myTableView . dataSource = self // Delegate\u3092\u8a2d\u5b9a. myTableView . delegate = self // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myTableView ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } /* Cell\u304c\u9078\u629e\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ func tableView ( _ tableView : UITableView , didSelectRowAt indexPath : IndexPath ) { print ( \"Num: \\( indexPath . row ) \" ) print ( \"Value: \\( myItems [ indexPath . row ] ) \" ) } /* Cell\u306e\u7dcf\u6570\u3092\u8fd4\u3059. */ func tableView ( _ tableView : UITableView , numberOfRowsInSection section : Int ) -> Int { print ( \"numberOfRowsInSection\" ) return myItems . count } /* Editable\u306e\u72b6\u614b\u306b\u3059\u308b. */ func tableView ( _ tableView : UITableView , canEditRowAt indexPath : IndexPath ) -> Bool { print ( \"canEditRowAtIndexPath\" ) return true } /* \u7279\u5b9a\u306e\u884c\u306e\u30dc\u30bf\u30f3\u64cd\u4f5c\u3092\u6709\u52b9\u306b\u3059\u308b. */ func tableView ( _ tableView : UITableView , commit editingStyle : UITableViewCellEditingStyle , forRowAt indexPath : IndexPath ) { print ( \"commitEdittingStyle: \\( editingStyle ) \" ) } /* Cell\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b. */ func tableView ( _ tableView : UITableView , cellForRowAt indexPath : IndexPath ) -> UITableViewCell { print ( \"cellForRowAtIndexPath\" ) let cell : UITableViewCell = tableView . dequeueReusableCell ( withIdentifier : \"MyCell\" , for : indexPath as IndexPath ) //tableView.dequeueReusableCellWithIdentifier(\"MyCell\", forIndexPath: indexPath as IndexPath) cell . textLabel ?. text = \" \\( myItems [ indexPath . row ] ) \" return cell } /* Button\u3092\u62e1\u5f35\u3059\u308b. */ func tableView ( _ tableView : UITableView , editActionsForRowAt indexPath : IndexPath ) -> [ UITableViewRowAction ]? { // Share\u30dc\u30bf\u30f3. let myShareButton : UITableViewRowAction = UITableViewRowAction ( style : . normal , title : \"Share\" ) { ( action , index ) -> Void in tableView . isEditing = false print ( \"share\" ) } myShareButton . backgroundColor = UIColor . blue // Archive\u30dc\u30bf\u30f3. let myArchiveButton : UITableViewRowAction = UITableViewRowAction ( style : . normal , title : \"Archive\" ) { ( action , index ) -> Void in tableView . isEditing = false print ( \"archive\" ) } myArchiveButton . backgroundColor = UIColor . red return [ myShareButton , myArchiveButton ] } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 // // ViewController.swift // UIKit045_2.3 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UITableViewDelegate , UITableViewDataSource { // Tabel\u3067\u4f7f\u7528\u3059\u308b\u914d\u5217. var myItems : [ String ] = [ \"TEST1\" , \"TEST2\" , \"TEST3\" ] var myTableView : UITableView = UITableView () override func viewDidLoad () { super . viewDidLoad () // Status Bar\u306e\u9ad8\u3055\u3092\u53d6\u5f97. let barHeight : CGFloat = UIApplication . sharedApplication (). statusBarFrame . size . height // View\u306e\u9ad8\u3055\u3068\u5e45\u3092\u53d6\u5f97. let displayWidth : CGFloat = self . view . frame . width let displayHeight : CGFloat = self . view . frame . height // TableView\u306e\u751f\u6210( status bar\u306e\u9ad8\u3055\u5206\u305a\u3089\u3057\u3066\u8868\u793a ). myTableView . frame = CGRect ( x : 0 , y : barHeight , width : displayWidth , height : displayHeight - barHeight ) // Cell\u306e\u767b\u9332. myTableView . registerClass ( UITableViewCell . self , forCellReuseIdentifier : \"MyCell\" ) // DataSource\u306e\u8a2d\u5b9a. myTableView . dataSource = self // Delegate\u3092\u8a2d\u5b9a. myTableView . delegate = self // View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myTableView ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } /* Cell\u304c\u9078\u629e\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ func tableView ( tableView : UITableView , didSelectRowAtIndexPath indexPath : NSIndexPath ) { print ( \"Num: \\( indexPath . row ) \" ) print ( \"Value: \\( myItems [ indexPath . row ] ) \" ) } /* Cell\u306e\u7dcf\u6570\u3092\u8fd4\u3059. */ func tableView ( tableView : UITableView , numberOfRowsInSection section : Int ) -> Int { print ( \"numberOfRowsInSection\" ) return myItems . count } /* Editable\u306e\u72b6\u614b\u306b\u3059\u308b. */ func tableView ( tableView : UITableView , canEditRowAtIndexPath indexPath : NSIndexPath ) -> Bool { print ( \"canEditRowAtIndexPath\" ) return true } /* \u7279\u5b9a\u306e\u884c\u306e\u30dc\u30bf\u30f3\u64cd\u4f5c\u3092\u6709\u52b9\u306b\u3059\u308b. */ func tableView ( tableView : UITableView , commitEditingStyle editingStyle : UITableViewCellEditingStyle , forRowAtIndexPath indexPath : NSIndexPath ) { print ( \"commitEdittingStyle: \\( editingStyle ) \" ) } /* Cell\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b. */ func tableView ( tableView : UITableView , cellForRowAtIndexPath indexPath : NSIndexPath ) -> UITableViewCell { print ( \"cellForRowAtIndexPath\" ) let cell : UITableViewCell = tableView . dequeueReusableCellWithIdentifier ( \"MyCell\" , forIndexPath : indexPath ) cell . textLabel ?. text = \" \\( myItems [ indexPath . row ] ) \" return cell } /* Button\u3092\u62e1\u5f35\u3059\u308b. */ func tableView ( tableView : UITableView , editActionsForRowAtIndexPath indexPath : NSIndexPath ) -> [ UITableViewRowAction ]? { // Share\u30dc\u30bf\u30f3. let myShareButton : UITableViewRowAction = UITableViewRowAction ( style : . Normal , title : \"Share\" ) { ( action , index ) -> Void in tableView . editing = false print ( \"share\" ) } myShareButton . backgroundColor = UIColor . blueColor () // Archive\u30dc\u30bf\u30f3. let myArchiveButton : UITableViewRowAction = UITableViewRowAction ( style : . Normal , title : \"Archive\" ) { ( action , index ) -> Void in tableView . editing = false print ( \"archive\" ) } myArchiveButton . backgroundColor = UIColor . redColor () return [ myShareButton , myArchiveButton ] } }","title":"TableView\u306e\u30dc\u30bf\u30f3\u306e\u62e1\u5f35"},{"location":"1.uikit/045_uitableviewbutton/#3x4x","text":"UITableViewCellEditingStyle \u304c UITableViewCell.EditingStyle \u306b\u5909\u66f4","title":"3.x\u30684.x\u306e\u5dee\u5206"},{"location":"1.uikit/045_uitableviewbutton/#2330","text":"UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u306e\u5ec3\u6b62) NSIndexPath\u306e\u5ec3\u6b62\u3001IndexPath\u306b\u5909\u66f4.","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/045_uitableviewbutton/#reference","text":"UITableView Class https://developer.apple.com/reference/uikit/uitableview","title":"Reference"},{"location":"1.uikit/046_uitableviewslide/","text":"UITableView\u3092Slide\u3055\u305b\u308b Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 // // ViewController.swift // UIKit046_4.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UIScrollViewDelegate , UITableViewDelegate , UITableViewDataSource { // UIPageControl. var pageControl : UIPageControl ! // UIScrollView. var scrollView : UIScrollView ! // TableView\u306e\u30a2\u30a4\u30c6\u30e0. let myItems : [[ String ]] = [[ \"TEST1\" , \"TEST2\" , \"TEST3\" ],[ \"App1\" , \"App2\" , \"App3\" , \"App4\" , \"App5\" ]] // TableView\u306b\u8868\u793a\u3059\u308b\u30bf\u30a4\u30c8\u30eb. let myTitles : [ String ] = [ \"title0\" , \"title1\" ] // TableView. var myTableView : [ UITableView ] = [] // \u30da\u30fc\u30b8\u756a\u53f7. let pageSize = 2 override func viewDidLoad () { // ScrollView\u306e\u8a2d\u5b9a. let width = self . view . frame . maxX , height = self . view . frame . maxY scrollView = UIScrollView ( frame : self . view . frame ) scrollView . showsHorizontalScrollIndicator = false ; scrollView . showsVerticalScrollIndicator = false scrollView . isPagingEnabled = true scrollView . delegate = self scrollView . contentSize = CGSize ( width : CGFloat ( pageSize ) * width , height : 0 ) self . view . addSubview ( scrollView ) // Status Bar\u306e\u9ad8\u3055\u3092\u53d6\u5f97. let barHeight : CGFloat = UIApplication . shared . statusBarFrame . size . height // View\u306e\u9ad8\u3055\u3068\u5e45\u3092\u53d6\u5f97. let displayWidth : CGFloat = self . view . frame . width let displayHeight : CGFloat = self . view . frame . height // TableView\u306e\u751f\u6210( status bar\u306e\u9ad8\u3055\u5206\u305a\u3089\u3057\u3066\u8868\u793a ). for i in 0 .. < pageSize { let tableView : UITableView = UITableView ( frame : CGRect ( x : CGFloat ( i ) * width , y : barHeight , width : displayWidth , height : displayHeight - barHeight )) myTableView . append ( tableView ) myTableView [ i ]. register ( UITableViewCell . self , forCellReuseIdentifier : \"MyCell\" ) myTableView [ i ]. dataSource = self myTableView [ i ]. delegate = self scrollView . addSubview ( myTableView [ i ]) //\u30da\u30fc\u30b8\u3054\u3068\u306b\u7570\u306a\u308b\u30e9\u30d9\u30eb\u3092\u8868\u793a. let myLabel : UILabel = UILabel ( frame : CGRect ( x : CGFloat ( i ) * width + width / 2 - 40 , y : height / 2 - 40 , width : 80 , height : 80 )) myLabel . backgroundColor = UIColor . black myLabel . textColor = UIColor . white myLabel . textAlignment = NSTextAlignment . center myLabel . layer . masksToBounds = true myLabel . text = \"Page \\( i ) \" myLabel . font = UIFont . systemFont ( ofSize : UIFont . smallSystemFontSize ) myLabel . layer . cornerRadius = 40.0 scrollView . addSubview ( myLabel ) } // PageControl\u3092\u4f5c\u6210. pageControl = UIPageControl ( frame : CGRect ( x : 0 , y : self . view . frame . maxY - 50 , width : width , height : 50 )) pageControl . backgroundColor = UIColor . lightGray // PageControl\u3059\u308b\u30da\u30fc\u30b8\u6570\u3092\u8a2d\u5b9a. pageControl . numberOfPages = pageSize // \u73fe\u5728\u30da\u30fc\u30b8\u3092\u8a2d\u5b9a. pageControl . currentPage = 0 pageControl . isUserInteractionEnabled = false self . view . addSubview ( pageControl ) } func scrollViewDidEndDecelerating ( _ scrollView : UIScrollView ) { // \u30b9\u30af\u30ed\u30fc\u30eb\u6570\u304c1\u30da\u30fc\u30b8\u5206\u306b\u306a\u3063\u305f\u3089. if fmod ( scrollView . contentOffset . x , scrollView . frame . maxX ) == 0 { // \u30da\u30fc\u30b8\u306e\u5834\u6240\u3092\u5207\u308a\u66ff\u3048\u308b. pageControl . currentPage = Int ( scrollView . contentOffset . x / scrollView . frame . maxX ) } } /* Cell\u304c\u9078\u629e\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ func tableView ( _ tableView : UITableView , didSelectRowAt indexPath : IndexPath ) { if tableView == myTableView [ 0 ] { print ( \"Num: \\( indexPath . row ) \" ) print ( \"Value: \\( myItems [ 0 ][ indexPath . row ] ) \" ) } else if tableView == myTableView [ 1 ] { print ( \"Num: \\( indexPath . row ) \" ) print ( \"Value: \\( myItems [ 1 ][ indexPath . row ] ) \" ) } } /* Cell\u306e\u7dcf\u6570\u3092\u8fd4\u3059. */ func tableView ( _ tableView : UITableView , numberOfRowsInSection section : Int ) -> Int { if tableView == myTableView [ 0 ] { return myItems [ 0 ]. count } else if tableView == myTableView [ 1 ] { return myItems [ 1 ]. count } else { return 0 } } /* Header\u3092\u8ffd\u52a0. */ func tableView ( _ tableView : UITableView , viewForHeaderInSection section : Int ) -> UIView ? { let myLabel : UILabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : self . view . bounds . width , height : 100 )) myLabel . textAlignment = . center if tableView == myTableView [ 0 ] { myLabel . backgroundColor = UIColor . black myLabel . textColor = UIColor . white myLabel . text = myTitles [ 0 ] } else if tableView == myTableView [ 1 ] { myLabel . backgroundColor = UIColor . blue myLabel . textColor = UIColor . white myLabel . text = myTitles [ 1 ] } return myLabel } /* Header\u306e\u9ad8\u3055. */ func tableView ( _ tableView : UITableView , heightForHeaderInSection section : Int ) -> CGFloat { return 50.0 } /* Cell\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b. */ func tableView ( _ tableView : UITableView , cellForRowAt indexPath : IndexPath ) -> UITableViewCell { let cell : UITableViewCell = tableView . dequeueReusableCell ( withIdentifier : \"MyCell\" , for : indexPath as IndexPath ) if tableView == myTableView [ 0 ] { cell . textLabel ?. text = \" \\( myItems [ 0 ][ indexPath . row ] ) \" } else if tableView == myTableView [ 1 ] { cell . textLabel ?. text = \" \\( myItems [ 1 ][ indexPath . row ] ) \" } return cell } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 // // ViewController.swift // UIKit046_2.3 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UIScrollViewDelegate , UITableViewDelegate , UITableViewDataSource { // UIPageControl. var pageControl : UIPageControl ! // UIScrillView. var scrollView : UIScrollView ! // TableView\u306e\u30a2\u30a4\u30c6\u30e0. let myItems : [[ String ]] = [[ \"TEST1\" , \"TEST2\" , \"TEST3\" ],[ \"App1\" , \"App2\" , \"App3\" , \"App4\" , \"App5\" ]] // TableView\u306b\u8868\u793a\u3059\u308b\u30bf\u30a4\u30c8\u30eb. let myTitles : [ String ] = [ \"title0\" , \"title1\" ] // TableView. var myTableView : [ UITableView ] = [] // \u30da\u30fc\u30b8\u756a\u53f7. let pageSize = 2 override func viewDidLoad () { // ScrollView\u306e\u8a2d\u5b9a. let width = self . view . frame . maxX , height = self . view . frame . maxY scrollView = UIScrollView ( frame : self . view . frame ) scrollView . showsHorizontalScrollIndicator = false ; scrollView . showsVerticalScrollIndicator = false scrollView . pagingEnabled = true scrollView . delegate = self scrollView . contentSize = CGSizeMake ( CGFloat ( pageSize ) * width , 0 ) self . view . addSubview ( scrollView ) // Status Bar\u306e\u9ad8\u3055\u3092\u53d6\u5f97. let barHeight : CGFloat = UIApplication . sharedApplication (). statusBarFrame . size . height // View\u306e\u9ad8\u3055\u3068\u5e45\u3092\u53d6\u5f97. let displayWidth : CGFloat = self . view . frame . width let displayHeight : CGFloat = self . view . frame . height // TableView\u306e\u751f\u6210( status bar\u306e\u9ad8\u3055\u5206\u305a\u3089\u3057\u3066\u8868\u793a ). for i in 0 .. < pageSize { let tableView : UITableView = UITableView ( frame : CGRect ( x : CGFloat ( i ) * width , y : barHeight , width : displayWidth , height : displayHeight - barHeight )) myTableView . append ( tableView ) myTableView [ i ]. registerClass ( UITableViewCell . self , forCellReuseIdentifier : \"MyCell\" ) myTableView [ i ]. dataSource = self myTableView [ i ]. delegate = self scrollView . addSubview ( myTableView [ i ]) //\u30da\u30fc\u30b8\u3054\u3068\u306b\u7570\u306a\u308b\u30e9\u30d9\u30eb\u3092\u8868\u793a. let myLabel : UILabel = UILabel ( frame : CGRectMake ( CGFloat ( i ) * width + width / 2 - 40 , height / 2 - 40 , 80 , 80 )) myLabel . backgroundColor = UIColor . blackColor () myLabel . textColor = UIColor . whiteColor () myLabel . textAlignment = NSTextAlignment . Center myLabel . layer . masksToBounds = true myLabel . text = \"Page \\( i ) \" myLabel . font = UIFont . systemFontOfSize ( UIFont . smallSystemFontSize ()) myLabel . layer . cornerRadius = 40.0 scrollView . addSubview ( myLabel ) } // PageControl\u3092\u4f5c\u6210. pageControl = UIPageControl ( frame : CGRectMake ( 0 , self . view . frame . maxY - 50 , width , 50 )) pageControl . backgroundColor = UIColor . lightGrayColor () // PageControl\u3059\u308b\u30da\u30fc\u30b8\u6570\u3092\u8a2d\u5b9a. pageControl . numberOfPages = pageSize // \u73fe\u5728\u30da\u30fc\u30b8\u3092\u8a2d\u5b9a. pageControl . currentPage = 0 pageControl . userInteractionEnabled = false self . view . addSubview ( pageControl ) } func scrollViewDidEndDecelerating ( scrollView : UIScrollView ) { // \u30b9\u30af\u30ed\u30fc\u30eb\u6570\u304c1\u30da\u30fc\u30b8\u5206\u306b\u306a\u3063\u305f\u3089. if fmod ( scrollView . contentOffset . x , scrollView . frame . maxX ) == 0 { // \u30da\u30fc\u30b8\u306e\u5834\u6240\u3092\u5207\u308a\u66ff\u3048\u308b. pageControl . currentPage = Int ( scrollView . contentOffset . x / scrollView . frame . maxX ) } } /* Cell\u304c\u9078\u629e\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ func tableView ( tableView : UITableView , didSelectRowAtIndexPath indexPath : NSIndexPath ) { if tableView == myTableView [ 0 ] { print ( \"Num: \\( indexPath . row ) \" ) print ( \"Value: \\( myItems [ 0 ][ indexPath . row ] ) \" ) } else if tableView == myTableView [ 1 ] { print ( \"Num: \\( indexPath . row ) \" ) print ( \"Value: \\( myItems [ 1 ][ indexPath . row ] ) \" ) } } /* Cell\u306e\u7dcf\u6570\u3092\u8fd4\u3059. */ func tableView ( tableView : UITableView , numberOfRowsInSection section : Int ) -> Int { if tableView == myTableView [ 0 ] { return myItems [ 0 ]. count } else if tableView == myTableView [ 1 ] { return myItems [ 1 ]. count } else { return 0 } } /* Header\u3092\u8ffd\u52a0. */ func tableView ( tableView : UITableView , viewForHeaderInSection section : Int ) -> UIView ? { let myLabel : UILabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : self . view . bounds . width , height : 100 )) myLabel . textAlignment = . Center if tableView == myTableView [ 0 ] { myLabel . backgroundColor = UIColor . blackColor () myLabel . textColor = UIColor . whiteColor () myLabel . text = myTitles [ 0 ] } else if tableView == myTableView [ 1 ] { myLabel . backgroundColor = UIColor . blueColor () myLabel . textColor = UIColor . whiteColor () myLabel . text = myTitles [ 1 ] } return myLabel } /* Header\u306e\u9ad8\u3055. */ func tableView ( tableView : UITableView , heightForHeaderInSection section : Int ) -> CGFloat { return 50.0 } /* Cell\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b. */ func tableView ( tableView : UITableView , cellForRowAtIndexPath indexPath : NSIndexPath ) -> UITableViewCell { let cell : UITableViewCell = tableView . dequeueReusableCellWithIdentifier ( \"MyCell\" , forIndexPath : indexPath ) if tableView == myTableView [ 0 ] { cell . textLabel ?. text = \" \\( myItems [ 0 ][ indexPath . row ] ) \" } else if tableView == myTableView [ 1 ] { cell . textLabel ?. text = \" \\( myItems [ 1 ][ indexPath . row ] ) \" } return cell } } 2.3\u30683.0\u306e\u5dee\u5206 UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGSize\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGSizetMake\u306e\u5ec3\u6b62) UITableViewDelegate\u306e\u30c7\u30ea\u30b2\u30fc\u30c8\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u304c\u5909\u66f4 UIScrollView\u306e\u4e00\u90e8\u30d7\u30ed\u30d1\u30c6\u30a3\u540d\u306e\u5909\u66f4 UITableView\u306e\u4e00\u90e8\u30d7\u30ed\u30d1\u30c6\u30a3\u540d\u306e\u5909\u66f4 NSIndexPath\u306e\u5ec3\u6b62\u3001IndexPath\u306b\u5909\u66f4 Reference UITableView Class https://developer.apple.com/reference/uikit/uitableview","title":"UITableView\u3092Slide\u3055\u305b\u308b"},{"location":"1.uikit/046_uitableviewslide/#uitableviewslide","text":"Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 // // ViewController.swift // UIKit046_4.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UIScrollViewDelegate , UITableViewDelegate , UITableViewDataSource { // UIPageControl. var pageControl : UIPageControl ! // UIScrollView. var scrollView : UIScrollView ! // TableView\u306e\u30a2\u30a4\u30c6\u30e0. let myItems : [[ String ]] = [[ \"TEST1\" , \"TEST2\" , \"TEST3\" ],[ \"App1\" , \"App2\" , \"App3\" , \"App4\" , \"App5\" ]] // TableView\u306b\u8868\u793a\u3059\u308b\u30bf\u30a4\u30c8\u30eb. let myTitles : [ String ] = [ \"title0\" , \"title1\" ] // TableView. var myTableView : [ UITableView ] = [] // \u30da\u30fc\u30b8\u756a\u53f7. let pageSize = 2 override func viewDidLoad () { // ScrollView\u306e\u8a2d\u5b9a. let width = self . view . frame . maxX , height = self . view . frame . maxY scrollView = UIScrollView ( frame : self . view . frame ) scrollView . showsHorizontalScrollIndicator = false ; scrollView . showsVerticalScrollIndicator = false scrollView . isPagingEnabled = true scrollView . delegate = self scrollView . contentSize = CGSize ( width : CGFloat ( pageSize ) * width , height : 0 ) self . view . addSubview ( scrollView ) // Status Bar\u306e\u9ad8\u3055\u3092\u53d6\u5f97. let barHeight : CGFloat = UIApplication . shared . statusBarFrame . size . height // View\u306e\u9ad8\u3055\u3068\u5e45\u3092\u53d6\u5f97. let displayWidth : CGFloat = self . view . frame . width let displayHeight : CGFloat = self . view . frame . height // TableView\u306e\u751f\u6210( status bar\u306e\u9ad8\u3055\u5206\u305a\u3089\u3057\u3066\u8868\u793a ). for i in 0 .. < pageSize { let tableView : UITableView = UITableView ( frame : CGRect ( x : CGFloat ( i ) * width , y : barHeight , width : displayWidth , height : displayHeight - barHeight )) myTableView . append ( tableView ) myTableView [ i ]. register ( UITableViewCell . self , forCellReuseIdentifier : \"MyCell\" ) myTableView [ i ]. dataSource = self myTableView [ i ]. delegate = self scrollView . addSubview ( myTableView [ i ]) //\u30da\u30fc\u30b8\u3054\u3068\u306b\u7570\u306a\u308b\u30e9\u30d9\u30eb\u3092\u8868\u793a. let myLabel : UILabel = UILabel ( frame : CGRect ( x : CGFloat ( i ) * width + width / 2 - 40 , y : height / 2 - 40 , width : 80 , height : 80 )) myLabel . backgroundColor = UIColor . black myLabel . textColor = UIColor . white myLabel . textAlignment = NSTextAlignment . center myLabel . layer . masksToBounds = true myLabel . text = \"Page \\( i ) \" myLabel . font = UIFont . systemFont ( ofSize : UIFont . smallSystemFontSize ) myLabel . layer . cornerRadius = 40.0 scrollView . addSubview ( myLabel ) } // PageControl\u3092\u4f5c\u6210. pageControl = UIPageControl ( frame : CGRect ( x : 0 , y : self . view . frame . maxY - 50 , width : width , height : 50 )) pageControl . backgroundColor = UIColor . lightGray // PageControl\u3059\u308b\u30da\u30fc\u30b8\u6570\u3092\u8a2d\u5b9a. pageControl . numberOfPages = pageSize // \u73fe\u5728\u30da\u30fc\u30b8\u3092\u8a2d\u5b9a. pageControl . currentPage = 0 pageControl . isUserInteractionEnabled = false self . view . addSubview ( pageControl ) } func scrollViewDidEndDecelerating ( _ scrollView : UIScrollView ) { // \u30b9\u30af\u30ed\u30fc\u30eb\u6570\u304c1\u30da\u30fc\u30b8\u5206\u306b\u306a\u3063\u305f\u3089. if fmod ( scrollView . contentOffset . x , scrollView . frame . maxX ) == 0 { // \u30da\u30fc\u30b8\u306e\u5834\u6240\u3092\u5207\u308a\u66ff\u3048\u308b. pageControl . currentPage = Int ( scrollView . contentOffset . x / scrollView . frame . maxX ) } } /* Cell\u304c\u9078\u629e\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ func tableView ( _ tableView : UITableView , didSelectRowAt indexPath : IndexPath ) { if tableView == myTableView [ 0 ] { print ( \"Num: \\( indexPath . row ) \" ) print ( \"Value: \\( myItems [ 0 ][ indexPath . row ] ) \" ) } else if tableView == myTableView [ 1 ] { print ( \"Num: \\( indexPath . row ) \" ) print ( \"Value: \\( myItems [ 1 ][ indexPath . row ] ) \" ) } } /* Cell\u306e\u7dcf\u6570\u3092\u8fd4\u3059. */ func tableView ( _ tableView : UITableView , numberOfRowsInSection section : Int ) -> Int { if tableView == myTableView [ 0 ] { return myItems [ 0 ]. count } else if tableView == myTableView [ 1 ] { return myItems [ 1 ]. count } else { return 0 } } /* Header\u3092\u8ffd\u52a0. */ func tableView ( _ tableView : UITableView , viewForHeaderInSection section : Int ) -> UIView ? { let myLabel : UILabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : self . view . bounds . width , height : 100 )) myLabel . textAlignment = . center if tableView == myTableView [ 0 ] { myLabel . backgroundColor = UIColor . black myLabel . textColor = UIColor . white myLabel . text = myTitles [ 0 ] } else if tableView == myTableView [ 1 ] { myLabel . backgroundColor = UIColor . blue myLabel . textColor = UIColor . white myLabel . text = myTitles [ 1 ] } return myLabel } /* Header\u306e\u9ad8\u3055. */ func tableView ( _ tableView : UITableView , heightForHeaderInSection section : Int ) -> CGFloat { return 50.0 } /* Cell\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b. */ func tableView ( _ tableView : UITableView , cellForRowAt indexPath : IndexPath ) -> UITableViewCell { let cell : UITableViewCell = tableView . dequeueReusableCell ( withIdentifier : \"MyCell\" , for : indexPath as IndexPath ) if tableView == myTableView [ 0 ] { cell . textLabel ?. text = \" \\( myItems [ 0 ][ indexPath . row ] ) \" } else if tableView == myTableView [ 1 ] { cell . textLabel ?. text = \" \\( myItems [ 1 ][ indexPath . row ] ) \" } return cell } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 // // ViewController.swift // UIKit046_2.3 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UIScrollViewDelegate , UITableViewDelegate , UITableViewDataSource { // UIPageControl. var pageControl : UIPageControl ! // UIScrillView. var scrollView : UIScrollView ! // TableView\u306e\u30a2\u30a4\u30c6\u30e0. let myItems : [[ String ]] = [[ \"TEST1\" , \"TEST2\" , \"TEST3\" ],[ \"App1\" , \"App2\" , \"App3\" , \"App4\" , \"App5\" ]] // TableView\u306b\u8868\u793a\u3059\u308b\u30bf\u30a4\u30c8\u30eb. let myTitles : [ String ] = [ \"title0\" , \"title1\" ] // TableView. var myTableView : [ UITableView ] = [] // \u30da\u30fc\u30b8\u756a\u53f7. let pageSize = 2 override func viewDidLoad () { // ScrollView\u306e\u8a2d\u5b9a. let width = self . view . frame . maxX , height = self . view . frame . maxY scrollView = UIScrollView ( frame : self . view . frame ) scrollView . showsHorizontalScrollIndicator = false ; scrollView . showsVerticalScrollIndicator = false scrollView . pagingEnabled = true scrollView . delegate = self scrollView . contentSize = CGSizeMake ( CGFloat ( pageSize ) * width , 0 ) self . view . addSubview ( scrollView ) // Status Bar\u306e\u9ad8\u3055\u3092\u53d6\u5f97. let barHeight : CGFloat = UIApplication . sharedApplication (). statusBarFrame . size . height // View\u306e\u9ad8\u3055\u3068\u5e45\u3092\u53d6\u5f97. let displayWidth : CGFloat = self . view . frame . width let displayHeight : CGFloat = self . view . frame . height // TableView\u306e\u751f\u6210( status bar\u306e\u9ad8\u3055\u5206\u305a\u3089\u3057\u3066\u8868\u793a ). for i in 0 .. < pageSize { let tableView : UITableView = UITableView ( frame : CGRect ( x : CGFloat ( i ) * width , y : barHeight , width : displayWidth , height : displayHeight - barHeight )) myTableView . append ( tableView ) myTableView [ i ]. registerClass ( UITableViewCell . self , forCellReuseIdentifier : \"MyCell\" ) myTableView [ i ]. dataSource = self myTableView [ i ]. delegate = self scrollView . addSubview ( myTableView [ i ]) //\u30da\u30fc\u30b8\u3054\u3068\u306b\u7570\u306a\u308b\u30e9\u30d9\u30eb\u3092\u8868\u793a. let myLabel : UILabel = UILabel ( frame : CGRectMake ( CGFloat ( i ) * width + width / 2 - 40 , height / 2 - 40 , 80 , 80 )) myLabel . backgroundColor = UIColor . blackColor () myLabel . textColor = UIColor . whiteColor () myLabel . textAlignment = NSTextAlignment . Center myLabel . layer . masksToBounds = true myLabel . text = \"Page \\( i ) \" myLabel . font = UIFont . systemFontOfSize ( UIFont . smallSystemFontSize ()) myLabel . layer . cornerRadius = 40.0 scrollView . addSubview ( myLabel ) } // PageControl\u3092\u4f5c\u6210. pageControl = UIPageControl ( frame : CGRectMake ( 0 , self . view . frame . maxY - 50 , width , 50 )) pageControl . backgroundColor = UIColor . lightGrayColor () // PageControl\u3059\u308b\u30da\u30fc\u30b8\u6570\u3092\u8a2d\u5b9a. pageControl . numberOfPages = pageSize // \u73fe\u5728\u30da\u30fc\u30b8\u3092\u8a2d\u5b9a. pageControl . currentPage = 0 pageControl . userInteractionEnabled = false self . view . addSubview ( pageControl ) } func scrollViewDidEndDecelerating ( scrollView : UIScrollView ) { // \u30b9\u30af\u30ed\u30fc\u30eb\u6570\u304c1\u30da\u30fc\u30b8\u5206\u306b\u306a\u3063\u305f\u3089. if fmod ( scrollView . contentOffset . x , scrollView . frame . maxX ) == 0 { // \u30da\u30fc\u30b8\u306e\u5834\u6240\u3092\u5207\u308a\u66ff\u3048\u308b. pageControl . currentPage = Int ( scrollView . contentOffset . x / scrollView . frame . maxX ) } } /* Cell\u304c\u9078\u629e\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ func tableView ( tableView : UITableView , didSelectRowAtIndexPath indexPath : NSIndexPath ) { if tableView == myTableView [ 0 ] { print ( \"Num: \\( indexPath . row ) \" ) print ( \"Value: \\( myItems [ 0 ][ indexPath . row ] ) \" ) } else if tableView == myTableView [ 1 ] { print ( \"Num: \\( indexPath . row ) \" ) print ( \"Value: \\( myItems [ 1 ][ indexPath . row ] ) \" ) } } /* Cell\u306e\u7dcf\u6570\u3092\u8fd4\u3059. */ func tableView ( tableView : UITableView , numberOfRowsInSection section : Int ) -> Int { if tableView == myTableView [ 0 ] { return myItems [ 0 ]. count } else if tableView == myTableView [ 1 ] { return myItems [ 1 ]. count } else { return 0 } } /* Header\u3092\u8ffd\u52a0. */ func tableView ( tableView : UITableView , viewForHeaderInSection section : Int ) -> UIView ? { let myLabel : UILabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : self . view . bounds . width , height : 100 )) myLabel . textAlignment = . Center if tableView == myTableView [ 0 ] { myLabel . backgroundColor = UIColor . blackColor () myLabel . textColor = UIColor . whiteColor () myLabel . text = myTitles [ 0 ] } else if tableView == myTableView [ 1 ] { myLabel . backgroundColor = UIColor . blueColor () myLabel . textColor = UIColor . whiteColor () myLabel . text = myTitles [ 1 ] } return myLabel } /* Header\u306e\u9ad8\u3055. */ func tableView ( tableView : UITableView , heightForHeaderInSection section : Int ) -> CGFloat { return 50.0 } /* Cell\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b. */ func tableView ( tableView : UITableView , cellForRowAtIndexPath indexPath : NSIndexPath ) -> UITableViewCell { let cell : UITableViewCell = tableView . dequeueReusableCellWithIdentifier ( \"MyCell\" , forIndexPath : indexPath ) if tableView == myTableView [ 0 ] { cell . textLabel ?. text = \" \\( myItems [ 0 ][ indexPath . row ] ) \" } else if tableView == myTableView [ 1 ] { cell . textLabel ?. text = \" \\( myItems [ 1 ][ indexPath . row ] ) \" } return cell } }","title":"UITableView\u3092Slide\u3055\u305b\u308b"},{"location":"1.uikit/046_uitableviewslide/#2330","text":"UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGSize\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGSizetMake\u306e\u5ec3\u6b62) UITableViewDelegate\u306e\u30c7\u30ea\u30b2\u30fc\u30c8\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u304c\u5909\u66f4 UIScrollView\u306e\u4e00\u90e8\u30d7\u30ed\u30d1\u30c6\u30a3\u540d\u306e\u5909\u66f4 UITableView\u306e\u4e00\u90e8\u30d7\u30ed\u30d1\u30c6\u30a3\u540d\u306e\u5909\u66f4 NSIndexPath\u306e\u5ec3\u6b62\u3001IndexPath\u306b\u5909\u66f4","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/046_uitableviewslide/#reference","text":"UITableView Class https://developer.apple.com/reference/uikit/uitableview","title":"Reference"},{"location":"1.uikit/047_uiscrollview/","text":"\u5468\u671f\u306e\u9055\u3046UIScrollView\u3092\u540c\u671f\u3055\u305b\u308b Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 // // ViewController.swift // UIKit047_4.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UIScrollViewDelegate { // UIPageControl. var pageControl : UIPageControl ! // UIScrillView. var scrollViewHeader : UIScrollView ! var scrollViewMain : UIScrollView ! // \u30da\u30fc\u30b8\u756a\u53f7. let pageSize = 10 override func viewDidLoad () { // \u753b\u9762\u30b5\u30a4\u30ba\u306e\u53d6\u5f97. let width = self . view . frame . maxX , height = self . view . frame . maxY // ScrollViewHeader\u306e\u8a2d\u5b9a. scrollViewHeader = UIScrollView ( frame : self . view . frame ) scrollViewHeader . showsHorizontalScrollIndicator = false scrollViewHeader . showsVerticalScrollIndicator = false scrollViewHeader . isPagingEnabled = true scrollViewHeader . delegate = self scrollViewHeader . contentSize = CGSize ( width : CGFloat ( pageSize ) * width , height : 0 ) self . view . addSubview ( scrollViewHeader ) // ScrollViewMain\u306e\u8a2d\u5b9a. scrollViewMain = UIScrollView ( frame : self . view . frame ) scrollViewMain . showsHorizontalScrollIndicator = false scrollViewMain . showsVerticalScrollIndicator = false scrollViewMain . isPagingEnabled = true scrollViewMain . delegate = self scrollViewMain . contentSize = CGSize ( width : CGFloat ( pageSize ) * width , height : 0 ) self . view . addSubview ( scrollViewMain ) // ScrollView1\u306b\u8cbc\u4ed8\u3051\u308bLabel\u306e\u751f\u6210. for i in 0 .. < pageSize { //\u30da\u30fc\u30b8\u3054\u3068\u306b\u7570\u306a\u308b\u30e9\u30d9\u30eb\u3092\u8868\u793a. let myLabel : UILabel = UILabel ( frame : CGRect ( x : CGFloat ( i ) * width + width / 2 - 40 , y : height / 2 - 40 , width : 80 , height : 80 )) myLabel . backgroundColor = UIColor . black myLabel . textColor = UIColor . white myLabel . textAlignment = NSTextAlignment . center myLabel . layer . masksToBounds = true myLabel . text = \"Page \\( i ) \" myLabel . font = UIFont . systemFont ( ofSize : UIFont . smallSystemFontSize ) myLabel . layer . cornerRadius = 40.0 scrollViewMain . addSubview ( myLabel ) } // ScrollView2\u306b\u8cbc\u4ed8\u3051\u308b Label\u306e\u751f\u6210. for i in 0 .. < pageSize { //\u30da\u30fc\u30b8\u3054\u3068\u306b\u7570\u306a\u308b\u30e9\u30d9\u30eb\u3092\u8868\u793a. let myLabel : UILabel = UILabel ( frame : CGRect ( x : CGFloat ( i ) * width / 4 , y : 50 , width : 80 , height : 60 )) myLabel . backgroundColor = UIColor . red myLabel . textColor = UIColor . white myLabel . textAlignment = NSTextAlignment . center myLabel . layer . masksToBounds = true myLabel . text = \"Page \\( i ) \" myLabel . font = UIFont . systemFont ( ofSize : UIFont . smallSystemFontSize ) myLabel . layer . cornerRadius = 30.0 scrollViewHeader . addSubview ( myLabel ) } // PageControl\u3092\u4f5c\u6210. pageControl = UIPageControl ( frame : CGRect ( x : 0 , y : self . view . frame . maxY - 50 , width : width , height : 50 )) pageControl . backgroundColor = UIColor . lightGray // PageControl\u3059\u308b\u30da\u30fc\u30b8\u6570\u3092\u8a2d\u5b9a. pageControl . numberOfPages = pageSize // \u73fe\u5728\u30da\u30fc\u30b8\u3092\u8a2d\u5b9a. pageControl . currentPage = 0 pageControl . isUserInteractionEnabled = false self . view . addSubview ( pageControl ) } /* ScrollView\u304c\u79fb\u52d5\u3057\u305f\u969b\u306b\u547c\u3070\u308c\u308b. */ func scrollViewDidScroll ( _ scrollView : UIScrollView ) { if scrollView == scrollViewMain { scrollViewHeader . contentOffset . x = scrollViewMain . contentOffset . x / 4 } } /* \u79fb\u52d5\u304c\u5b8c\u4e86\u3057\u305f\u3089\u547c\u3070\u308c\u308b. */ func scrollViewDidEndDecelerating ( _ scrollView : UIScrollView ) { // \u30b9\u30af\u30ed\u30fc\u30eb\u6570\u304c1\u30da\u30fc\u30b8\u5206\u306b\u306a\u3063\u305f\u3089. if fmod ( scrollViewMain . contentOffset . x , scrollViewMain . frame . maxX ) == 0 { // \u30da\u30fc\u30b8\u306e\u5834\u6240\u3092\u5207\u308a\u66ff\u3048\u308b. pageControl . currentPage = Int ( scrollViewMain . contentOffset . x / scrollViewMain . frame . maxX ) } } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 // // ViewController.swift // UIKit047_2.3 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UIScrollViewDelegate { // UIPageControl. var pageControl : UIPageControl ! // UIScrillView. var scrollViewHeader : UIScrollView ! var scrollViewMain : UIScrollView ! // \u30da\u30fc\u30b8\u756a\u53f7. let pageSize = 10 override func viewDidLoad () { // \u753b\u9762\u30b5\u30a4\u30ba\u306e\u53d6\u5f97. let width = self . view . frame . maxX , height = self . view . frame . maxY // ScrollViewHeader\u306e\u8a2d\u5b9a. scrollViewHeader = UIScrollView ( frame : self . view . frame ) scrollViewHeader . showsHorizontalScrollIndicator = false scrollViewHeader . showsVerticalScrollIndicator = false scrollViewHeader . pagingEnabled = true scrollViewHeader . delegate = self scrollViewHeader . contentSize = CGSizeMake ( CGFloat ( pageSize ) * width , 0 ) self . view . addSubview ( scrollViewHeader ) // ScrollViewMain\u306e\u8a2d\u5b9a. scrollViewMain = UIScrollView ( frame : self . view . frame ) scrollViewMain . showsHorizontalScrollIndicator = false scrollViewMain . showsVerticalScrollIndicator = false scrollViewMain . pagingEnabled = true scrollViewMain . delegate = self scrollViewMain . contentSize = CGSizeMake ( CGFloat ( pageSize ) * width , 0 ) self . view . addSubview ( scrollViewMain ) // ScrollView1\u306b\u8cbc\u4ed8\u3051\u308bLabel\u306e\u751f\u6210. for i in 0 .. < pageSize { //\u30da\u30fc\u30b8\u3054\u3068\u306b\u7570\u306a\u308b\u30e9\u30d9\u30eb\u3092\u8868\u793a. let myLabel : UILabel = UILabel ( frame : CGRectMake ( CGFloat ( i ) * width + width / 2 - 40 , height / 2 - 40 , 80 , 80 )) myLabel . backgroundColor = UIColor . blackColor () myLabel . textColor = UIColor . whiteColor () myLabel . textAlignment = NSTextAlignment . Center myLabel . layer . masksToBounds = true myLabel . text = \"Page \\( i ) \" myLabel . font = UIFont . systemFontOfSize ( UIFont . smallSystemFontSize ()) myLabel . layer . cornerRadius = 40.0 scrollViewMain . addSubview ( myLabel ) } // ScrollView2\u306b\u8cbc\u4ed8\u3051\u308b Label\u306e\u751f\u6210. for i in 0 .. < pageSize { //\u30da\u30fc\u30b8\u3054\u3068\u306b\u7570\u306a\u308b\u30e9\u30d9\u30eb\u3092\u8868\u793a. let myLabel : UILabel = UILabel ( frame : CGRectMake ( CGFloat ( i ) * width / 4 , 50 , 80 , 60 )) myLabel . backgroundColor = UIColor . redColor () myLabel . textColor = UIColor . whiteColor () myLabel . textAlignment = NSTextAlignment . Center myLabel . layer . masksToBounds = true myLabel . text = \"Page \\( i ) \" myLabel . font = UIFont . systemFontOfSize ( UIFont . smallSystemFontSize ()) myLabel . layer . cornerRadius = 30.0 scrollViewHeader . addSubview ( myLabel ) } // PageControl\u3092\u4f5c\u6210. pageControl = UIPageControl ( frame : CGRectMake ( 0 , self . view . frame . maxY - 50 , width , 50 )) pageControl . backgroundColor = UIColor . lightGrayColor () // PageControl\u3059\u308b\u30da\u30fc\u30b8\u6570\u3092\u8a2d\u5b9a. pageControl . numberOfPages = pageSize // \u73fe\u5728\u30da\u30fc\u30b8\u3092\u8a2d\u5b9a. pageControl . currentPage = 0 pageControl . userInteractionEnabled = false self . view . addSubview ( pageControl ) } /* ScrollView\u304c\u79fb\u52d5\u3057\u305f\u969b\u306b\u547c\u3070\u308c\u308b. */ func scrollViewDidScroll ( scrollView : UIScrollView ) { if scrollView == scrollViewMain { scrollViewHeader . contentOffset . x = scrollViewMain . contentOffset . x / 4 } } /* \u79fb\u52d5\u304c\u5b8c\u4e86\u3057\u305f\u3089\u547c\u3070\u308c\u308b. */ func scrollViewDidEndDecelerating ( scrollView : UIScrollView ) { // \u30b9\u30af\u30ed\u30fc\u30eb\u6570\u304c1\u30da\u30fc\u30b8\u5206\u306b\u306a\u3063\u305f\u3089. if fmod ( scrollViewMain . contentOffset . x , scrollViewMain . frame . maxX ) == 0 { // \u30da\u30fc\u30b8\u306e\u5834\u6240\u3092\u5207\u308a\u66ff\u3048\u308b. pageControl . currentPage = Int ( scrollViewMain . contentOffset . x / scrollViewMain . frame . maxX ) } } } 2.3\u30683.0\u306e\u5dee\u5206 UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGSize\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGSizetMake\u306e\u5ec3\u6b62) UIScrollView\u306e\u4e00\u90e8\u30d7\u30ed\u30d1\u30c6\u30a3\u540d\u306e\u5909\u66f4 Reference UIScrollView Class https://developer.apple.com/reference/uikit/uiscrollview","title":"\u5468\u671f\u306e\u9055\u3046UIScrollView\u3092\u540c\u671f\u3055\u305b\u308b"},{"location":"1.uikit/047_uiscrollview/#uiscrollview","text":"Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 // // ViewController.swift // UIKit047_4.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UIScrollViewDelegate { // UIPageControl. var pageControl : UIPageControl ! // UIScrillView. var scrollViewHeader : UIScrollView ! var scrollViewMain : UIScrollView ! // \u30da\u30fc\u30b8\u756a\u53f7. let pageSize = 10 override func viewDidLoad () { // \u753b\u9762\u30b5\u30a4\u30ba\u306e\u53d6\u5f97. let width = self . view . frame . maxX , height = self . view . frame . maxY // ScrollViewHeader\u306e\u8a2d\u5b9a. scrollViewHeader = UIScrollView ( frame : self . view . frame ) scrollViewHeader . showsHorizontalScrollIndicator = false scrollViewHeader . showsVerticalScrollIndicator = false scrollViewHeader . isPagingEnabled = true scrollViewHeader . delegate = self scrollViewHeader . contentSize = CGSize ( width : CGFloat ( pageSize ) * width , height : 0 ) self . view . addSubview ( scrollViewHeader ) // ScrollViewMain\u306e\u8a2d\u5b9a. scrollViewMain = UIScrollView ( frame : self . view . frame ) scrollViewMain . showsHorizontalScrollIndicator = false scrollViewMain . showsVerticalScrollIndicator = false scrollViewMain . isPagingEnabled = true scrollViewMain . delegate = self scrollViewMain . contentSize = CGSize ( width : CGFloat ( pageSize ) * width , height : 0 ) self . view . addSubview ( scrollViewMain ) // ScrollView1\u306b\u8cbc\u4ed8\u3051\u308bLabel\u306e\u751f\u6210. for i in 0 .. < pageSize { //\u30da\u30fc\u30b8\u3054\u3068\u306b\u7570\u306a\u308b\u30e9\u30d9\u30eb\u3092\u8868\u793a. let myLabel : UILabel = UILabel ( frame : CGRect ( x : CGFloat ( i ) * width + width / 2 - 40 , y : height / 2 - 40 , width : 80 , height : 80 )) myLabel . backgroundColor = UIColor . black myLabel . textColor = UIColor . white myLabel . textAlignment = NSTextAlignment . center myLabel . layer . masksToBounds = true myLabel . text = \"Page \\( i ) \" myLabel . font = UIFont . systemFont ( ofSize : UIFont . smallSystemFontSize ) myLabel . layer . cornerRadius = 40.0 scrollViewMain . addSubview ( myLabel ) } // ScrollView2\u306b\u8cbc\u4ed8\u3051\u308b Label\u306e\u751f\u6210. for i in 0 .. < pageSize { //\u30da\u30fc\u30b8\u3054\u3068\u306b\u7570\u306a\u308b\u30e9\u30d9\u30eb\u3092\u8868\u793a. let myLabel : UILabel = UILabel ( frame : CGRect ( x : CGFloat ( i ) * width / 4 , y : 50 , width : 80 , height : 60 )) myLabel . backgroundColor = UIColor . red myLabel . textColor = UIColor . white myLabel . textAlignment = NSTextAlignment . center myLabel . layer . masksToBounds = true myLabel . text = \"Page \\( i ) \" myLabel . font = UIFont . systemFont ( ofSize : UIFont . smallSystemFontSize ) myLabel . layer . cornerRadius = 30.0 scrollViewHeader . addSubview ( myLabel ) } // PageControl\u3092\u4f5c\u6210. pageControl = UIPageControl ( frame : CGRect ( x : 0 , y : self . view . frame . maxY - 50 , width : width , height : 50 )) pageControl . backgroundColor = UIColor . lightGray // PageControl\u3059\u308b\u30da\u30fc\u30b8\u6570\u3092\u8a2d\u5b9a. pageControl . numberOfPages = pageSize // \u73fe\u5728\u30da\u30fc\u30b8\u3092\u8a2d\u5b9a. pageControl . currentPage = 0 pageControl . isUserInteractionEnabled = false self . view . addSubview ( pageControl ) } /* ScrollView\u304c\u79fb\u52d5\u3057\u305f\u969b\u306b\u547c\u3070\u308c\u308b. */ func scrollViewDidScroll ( _ scrollView : UIScrollView ) { if scrollView == scrollViewMain { scrollViewHeader . contentOffset . x = scrollViewMain . contentOffset . x / 4 } } /* \u79fb\u52d5\u304c\u5b8c\u4e86\u3057\u305f\u3089\u547c\u3070\u308c\u308b. */ func scrollViewDidEndDecelerating ( _ scrollView : UIScrollView ) { // \u30b9\u30af\u30ed\u30fc\u30eb\u6570\u304c1\u30da\u30fc\u30b8\u5206\u306b\u306a\u3063\u305f\u3089. if fmod ( scrollViewMain . contentOffset . x , scrollViewMain . frame . maxX ) == 0 { // \u30da\u30fc\u30b8\u306e\u5834\u6240\u3092\u5207\u308a\u66ff\u3048\u308b. pageControl . currentPage = Int ( scrollViewMain . contentOffset . x / scrollViewMain . frame . maxX ) } } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 // // ViewController.swift // UIKit047_2.3 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UIScrollViewDelegate { // UIPageControl. var pageControl : UIPageControl ! // UIScrillView. var scrollViewHeader : UIScrollView ! var scrollViewMain : UIScrollView ! // \u30da\u30fc\u30b8\u756a\u53f7. let pageSize = 10 override func viewDidLoad () { // \u753b\u9762\u30b5\u30a4\u30ba\u306e\u53d6\u5f97. let width = self . view . frame . maxX , height = self . view . frame . maxY // ScrollViewHeader\u306e\u8a2d\u5b9a. scrollViewHeader = UIScrollView ( frame : self . view . frame ) scrollViewHeader . showsHorizontalScrollIndicator = false scrollViewHeader . showsVerticalScrollIndicator = false scrollViewHeader . pagingEnabled = true scrollViewHeader . delegate = self scrollViewHeader . contentSize = CGSizeMake ( CGFloat ( pageSize ) * width , 0 ) self . view . addSubview ( scrollViewHeader ) // ScrollViewMain\u306e\u8a2d\u5b9a. scrollViewMain = UIScrollView ( frame : self . view . frame ) scrollViewMain . showsHorizontalScrollIndicator = false scrollViewMain . showsVerticalScrollIndicator = false scrollViewMain . pagingEnabled = true scrollViewMain . delegate = self scrollViewMain . contentSize = CGSizeMake ( CGFloat ( pageSize ) * width , 0 ) self . view . addSubview ( scrollViewMain ) // ScrollView1\u306b\u8cbc\u4ed8\u3051\u308bLabel\u306e\u751f\u6210. for i in 0 .. < pageSize { //\u30da\u30fc\u30b8\u3054\u3068\u306b\u7570\u306a\u308b\u30e9\u30d9\u30eb\u3092\u8868\u793a. let myLabel : UILabel = UILabel ( frame : CGRectMake ( CGFloat ( i ) * width + width / 2 - 40 , height / 2 - 40 , 80 , 80 )) myLabel . backgroundColor = UIColor . blackColor () myLabel . textColor = UIColor . whiteColor () myLabel . textAlignment = NSTextAlignment . Center myLabel . layer . masksToBounds = true myLabel . text = \"Page \\( i ) \" myLabel . font = UIFont . systemFontOfSize ( UIFont . smallSystemFontSize ()) myLabel . layer . cornerRadius = 40.0 scrollViewMain . addSubview ( myLabel ) } // ScrollView2\u306b\u8cbc\u4ed8\u3051\u308b Label\u306e\u751f\u6210. for i in 0 .. < pageSize { //\u30da\u30fc\u30b8\u3054\u3068\u306b\u7570\u306a\u308b\u30e9\u30d9\u30eb\u3092\u8868\u793a. let myLabel : UILabel = UILabel ( frame : CGRectMake ( CGFloat ( i ) * width / 4 , 50 , 80 , 60 )) myLabel . backgroundColor = UIColor . redColor () myLabel . textColor = UIColor . whiteColor () myLabel . textAlignment = NSTextAlignment . Center myLabel . layer . masksToBounds = true myLabel . text = \"Page \\( i ) \" myLabel . font = UIFont . systemFontOfSize ( UIFont . smallSystemFontSize ()) myLabel . layer . cornerRadius = 30.0 scrollViewHeader . addSubview ( myLabel ) } // PageControl\u3092\u4f5c\u6210. pageControl = UIPageControl ( frame : CGRectMake ( 0 , self . view . frame . maxY - 50 , width , 50 )) pageControl . backgroundColor = UIColor . lightGrayColor () // PageControl\u3059\u308b\u30da\u30fc\u30b8\u6570\u3092\u8a2d\u5b9a. pageControl . numberOfPages = pageSize // \u73fe\u5728\u30da\u30fc\u30b8\u3092\u8a2d\u5b9a. pageControl . currentPage = 0 pageControl . userInteractionEnabled = false self . view . addSubview ( pageControl ) } /* ScrollView\u304c\u79fb\u52d5\u3057\u305f\u969b\u306b\u547c\u3070\u308c\u308b. */ func scrollViewDidScroll ( scrollView : UIScrollView ) { if scrollView == scrollViewMain { scrollViewHeader . contentOffset . x = scrollViewMain . contentOffset . x / 4 } } /* \u79fb\u52d5\u304c\u5b8c\u4e86\u3057\u305f\u3089\u547c\u3070\u308c\u308b. */ func scrollViewDidEndDecelerating ( scrollView : UIScrollView ) { // \u30b9\u30af\u30ed\u30fc\u30eb\u6570\u304c1\u30da\u30fc\u30b8\u5206\u306b\u306a\u3063\u305f\u3089. if fmod ( scrollViewMain . contentOffset . x , scrollViewMain . frame . maxX ) == 0 { // \u30da\u30fc\u30b8\u306e\u5834\u6240\u3092\u5207\u308a\u66ff\u3048\u308b. pageControl . currentPage = Int ( scrollViewMain . contentOffset . x / scrollViewMain . frame . maxX ) } } }","title":"\u5468\u671f\u306e\u9055\u3046UIScrollView\u3092\u540c\u671f\u3055\u305b\u308b"},{"location":"1.uikit/047_uiscrollview/#2330","text":"UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGSize\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGSizetMake\u306e\u5ec3\u6b62) UIScrollView\u306e\u4e00\u90e8\u30d7\u30ed\u30d1\u30c6\u30a3\u540d\u306e\u5909\u66f4","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/047_uiscrollview/#reference","text":"UIScrollView Class https://developer.apple.com/reference/uikit/uiscrollview","title":"Reference"},{"location":"1.uikit/048_effectbutton/","text":"\u30d7\u30eb\u30f3\u30d7\u30eb\u30f3\u3059\u308bButton\u306e\u4f5c\u6210 Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 // // ViewController.swift // UIKit048_4.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { // \u30dc\u30bf\u30f3. var myButton : UIButton ! override func viewDidLoad () { super . viewDidLoad () // \u30dc\u30bf\u30f3\u3092\u4f5c\u6210\u3059\u308b. myButton = UIButton () myButton . frame = CGRect ( x : 0 , y : 0 , width : 100 , height : 100 ) myButton . backgroundColor = UIColor . green myButton . layer . masksToBounds = true myButton . setTitle ( \"\u30dc\u30bf\u30f3\" , for : UIControlState . normal ) myButton . setTitleColor ( UIColor . white , for : UIControlState . normal ) myButton . layer . cornerRadius = 50.0 myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height / 2 ) // TouchDown\u306e\u6642\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u8ffd\u52a0\u3059\u308b. myButton . addTarget ( self , action : #selector ( ViewController . onDownButton ( sender :)), for : . touchDown ) // TouchUp\u306e\u6642\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u8ffd\u52a0\u3059\u308b. myButton . addTarget ( self , action : #selector ( ViewController . onUpButton ( sender :)), for : [. touchUpInside ,. touchUpOutside ]) // \u80cc\u666f\u8272\u3092\u9ed2\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . black // \u30dc\u30bf\u30f3\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myButton ); } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8(Down) */ func onDownButton ( sender : UIButton ){ //UIView.animateWithDuration UIView . animate ( withDuration : 0.06 , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406. animations : { () -> Void in // \u7e2e\u5c0f\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u4f5c\u6210\u3059\u308b. self . myButton . transform = CGAffineTransform ( scaleX : 0.9 , y : 0.9 ) }) { ( Bool ) -> Void in } } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8(Up) */ func onUpButton ( sender : UIButton ){ UIView . animate ( withDuration : 0.1 , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406. animations : { () -> Void in // \u62e1\u5927\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u4f5c\u6210\u3059\u308b. self . myButton . transform = CGAffineTransform ( scaleX : 0.4 , y : 0.4 ) // \u7e2e\u5c0f\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u4f5c\u6210\u3059\u308b. self . myButton . transform = CGAffineTransform ( scaleX : 1.0 , y : 1.0 ) }) { ( Bool ) -> Void in } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 // // ViewController.swift // UIKit048_2.3 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { // \u30dc\u30bf\u30f3. var myButton : UIButton ! override func viewDidLoad () { super . viewDidLoad () // \u30dc\u30bf\u30f3\u3092\u4f5c\u6210\u3059\u308b. myButton = UIButton () myButton . frame = CGRectMake ( 0 , 0 , 100 , 100 ) myButton . backgroundColor = UIColor . greenColor (); myButton . layer . masksToBounds = true myButton . setTitle ( \"\u30dc\u30bf\u30f3\" , forState : UIControlState . Normal ) myButton . setTitleColor ( UIColor . whiteColor (), forState : UIControlState . Normal ) myButton . layer . cornerRadius = 50.0 myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height / 2 ) // TouchDown\u306e\u6642\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u8ffd\u52a0\u3059\u308b. myButton . addTarget ( self , action : #selector ( ViewController . onDownButton ( _ :)), forControlEvents : . TouchDown ) // TouchUp\u306e\u6642\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u8ffd\u52a0\u3059\u308b. myButton . addTarget ( self , action : #selector ( ViewController . onUpButton ( _ :)), forControlEvents : [. TouchUpInside ,. TouchUpOutside ]) // \u80cc\u666f\u8272\u3092\u9ed2\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . blackColor () // \u30dc\u30bf\u30f3\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myButton ); } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8(Down) */ func onDownButton ( sender : UIButton ){ UIView . animateWithDuration ( 0.06 , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406. animations : { () -> Void in // \u7e2e\u5c0f\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u4f5c\u6210\u3059\u308b. self . myButton . transform = CGAffineTransformMakeScale ( 0.9 , 0.9 ) }) { ( Bool ) -> Void in } } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8(Up) */ func onUpButton ( sender : UIButton ){ UIView . animateWithDuration ( 0.1 , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406. animations : { () -> Void in // \u62e1\u5927\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u4f5c\u6210\u3059\u308b. self . myButton . transform = CGAffineTransformMakeScale ( 0.4 , 0.4 ) // \u7e2e\u5c0f\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u4f5c\u6210\u3059\u308b. self . myButton . transform = CGAffineTransformMakeScale ( 1.0 , 1.0 ) }) { ( Bool ) -> Void in } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } } 2.3\u30683.0\u306e\u5dee\u5206 UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u306e\u5ec3\u6b62) UIView.animateWithDuration\u30e1\u30bd\u30c3\u30c9\u304cUIView.animate\u306b\u5909\u66f4 CGAffineTransformMakeScale\u306e\u5ec3\u6b62\u3001CGAffineTransform\u306b\u7d71\u5408 Reference UIButton Class https://developer.apple.com/reference/uikit/uibutton CGAffinTransform Class https://developer.apple.com/reference/coregraphics/cgaffinetransform","title":"\u30d7\u30eb\u30f3\u30d7\u30eb\u30f3\u3059\u308bButton\u306e\u4f5c\u6210"},{"location":"1.uikit/048_effectbutton/#button","text":"Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 // // ViewController.swift // UIKit048_4.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { // \u30dc\u30bf\u30f3. var myButton : UIButton ! override func viewDidLoad () { super . viewDidLoad () // \u30dc\u30bf\u30f3\u3092\u4f5c\u6210\u3059\u308b. myButton = UIButton () myButton . frame = CGRect ( x : 0 , y : 0 , width : 100 , height : 100 ) myButton . backgroundColor = UIColor . green myButton . layer . masksToBounds = true myButton . setTitle ( \"\u30dc\u30bf\u30f3\" , for : UIControlState . normal ) myButton . setTitleColor ( UIColor . white , for : UIControlState . normal ) myButton . layer . cornerRadius = 50.0 myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height / 2 ) // TouchDown\u306e\u6642\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u8ffd\u52a0\u3059\u308b. myButton . addTarget ( self , action : #selector ( ViewController . onDownButton ( sender :)), for : . touchDown ) // TouchUp\u306e\u6642\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u8ffd\u52a0\u3059\u308b. myButton . addTarget ( self , action : #selector ( ViewController . onUpButton ( sender :)), for : [. touchUpInside ,. touchUpOutside ]) // \u80cc\u666f\u8272\u3092\u9ed2\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . black // \u30dc\u30bf\u30f3\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myButton ); } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8(Down) */ func onDownButton ( sender : UIButton ){ //UIView.animateWithDuration UIView . animate ( withDuration : 0.06 , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406. animations : { () -> Void in // \u7e2e\u5c0f\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u4f5c\u6210\u3059\u308b. self . myButton . transform = CGAffineTransform ( scaleX : 0.9 , y : 0.9 ) }) { ( Bool ) -> Void in } } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8(Up) */ func onUpButton ( sender : UIButton ){ UIView . animate ( withDuration : 0.1 , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406. animations : { () -> Void in // \u62e1\u5927\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u4f5c\u6210\u3059\u308b. self . myButton . transform = CGAffineTransform ( scaleX : 0.4 , y : 0.4 ) // \u7e2e\u5c0f\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u4f5c\u6210\u3059\u308b. self . myButton . transform = CGAffineTransform ( scaleX : 1.0 , y : 1.0 ) }) { ( Bool ) -> Void in } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 // // ViewController.swift // UIKit048_2.3 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { // \u30dc\u30bf\u30f3. var myButton : UIButton ! override func viewDidLoad () { super . viewDidLoad () // \u30dc\u30bf\u30f3\u3092\u4f5c\u6210\u3059\u308b. myButton = UIButton () myButton . frame = CGRectMake ( 0 , 0 , 100 , 100 ) myButton . backgroundColor = UIColor . greenColor (); myButton . layer . masksToBounds = true myButton . setTitle ( \"\u30dc\u30bf\u30f3\" , forState : UIControlState . Normal ) myButton . setTitleColor ( UIColor . whiteColor (), forState : UIControlState . Normal ) myButton . layer . cornerRadius = 50.0 myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height / 2 ) // TouchDown\u306e\u6642\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u8ffd\u52a0\u3059\u308b. myButton . addTarget ( self , action : #selector ( ViewController . onDownButton ( _ :)), forControlEvents : . TouchDown ) // TouchUp\u306e\u6642\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u8ffd\u52a0\u3059\u308b. myButton . addTarget ( self , action : #selector ( ViewController . onUpButton ( _ :)), forControlEvents : [. TouchUpInside ,. TouchUpOutside ]) // \u80cc\u666f\u8272\u3092\u9ed2\u306b\u8a2d\u5b9a\u3059\u308b. self . view . backgroundColor = UIColor . blackColor () // \u30dc\u30bf\u30f3\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myButton ); } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8(Down) */ func onDownButton ( sender : UIButton ){ UIView . animateWithDuration ( 0.06 , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406. animations : { () -> Void in // \u7e2e\u5c0f\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u4f5c\u6210\u3059\u308b. self . myButton . transform = CGAffineTransformMakeScale ( 0.9 , 0.9 ) }) { ( Bool ) -> Void in } } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8(Up) */ func onUpButton ( sender : UIButton ){ UIView . animateWithDuration ( 0.1 , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406. animations : { () -> Void in // \u62e1\u5927\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u4f5c\u6210\u3059\u308b. self . myButton . transform = CGAffineTransformMakeScale ( 0.4 , 0.4 ) // \u7e2e\u5c0f\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u4f5c\u6210\u3059\u308b. self . myButton . transform = CGAffineTransformMakeScale ( 1.0 , 1.0 ) }) { ( Bool ) -> Void in } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } }","title":"\u30d7\u30eb\u30f3\u30d7\u30eb\u30f3\u3059\u308bButton\u306e\u4f5c\u6210"},{"location":"1.uikit/048_effectbutton/#2330","text":"UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u306e\u5ec3\u6b62) UIView.animateWithDuration\u30e1\u30bd\u30c3\u30c9\u304cUIView.animate\u306b\u5909\u66f4 CGAffineTransformMakeScale\u306e\u5ec3\u6b62\u3001CGAffineTransform\u306b\u7d71\u5408","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/048_effectbutton/#reference","text":"UIButton Class https://developer.apple.com/reference/uikit/uibutton CGAffinTransform Class https://developer.apple.com/reference/coregraphics/cgaffinetransform","title":"Reference"},{"location":"1.uikit/049_custombutton/","text":"\u30ab\u30b9\u30bf\u30de\u30a4\u30baButton Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 // // ViewController.swift // UIKit049_4.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () let myButton = MyButton ( frame : CGRect ( x : 50 , y : 50 , width : 100 , height : 100 )) myButton . setTitle ( \"\u30dc\u30bf\u30f3\" , for : UIControl . State . normal ) myButton . setTitleColor ( UIColor . black , for : UIControl . State . normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchUpInside ) self . view . addSubview ( myButton ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8. */ @objc func onClickMyButton ( sender : UIButton ){ print ( \"onClickMyButton:\" ) print ( \"sender.currentTitile: \\( sender . currentTitle ! ) \" ) } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 // // ViewController.swift // UIKit049_3.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () let myButton = MyButton ( frame : CGRect ( x : 50 , y : 50 , width : 100 , height : 100 )) myButton . setTitle ( \"\u30dc\u30bf\u30f3\" , for : UIControlState . normal ) myButton . setTitleColor ( UIColor . black , for : UIControlState . normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchUpInside ) self . view . addSubview ( myButton ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8. */ func onClickMyButton ( sender : UIButton ){ print ( \"onClickMyButton:\" ) print ( \"sender.currentTitile: \\( sender . currentTitle ! ) \" ) } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 // // ViewController.swift // UIKit049_2.3 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () let myButton = MyButton ( frame : CGRectMake ( 50 , 50 , 100 , 100 )) myButton . setTitle ( \"\u30dc\u30bf\u30f3\" , forState : UIControlState . Normal ) myButton . setTitleColor ( UIColor . blackColor (), forState : UIControlState . Normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : . TouchUpInside ) self . view . addSubview ( myButton ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8. */ func onClickMyButton ( sender : UIButton ){ print ( \"onClickMyButton:\" ) print ( \"sender.currentTitile: \\( sender . currentTitle ! ) \" ) } } MyButton.swift Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 // // MyButton.swift // UIKit049_4.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import Foundation import UIKit class MyButton : UIButton { var myStatus : ButtonStatus ! enum ButtonStatus { case Normal case TouchBegan case TouchEnded } required init ( coder aDecoder : NSCoder ) { super . init ( coder : aDecoder ) ! } override init ( frame : CGRect ) { super . init ( frame : frame ) myStatus = . Normal } override func touchesBegan ( _ touches : Set < UITouch >, with event : UIEvent ?) { super . touchesBegan ( touches , with : event ) myStatus = . TouchBegan self . setNeedsDisplay () } override func touchesEnded ( _ touches : Set < UITouch >, with event : UIEvent ?) { super . touchesEnded ( touches , with : event ) myStatus = . TouchEnded self . setNeedsDisplay () } override func draw ( _ rect : CGRect ) { let width = rect . width , height = rect . height if myStatus == . Normal || myStatus == . TouchEnded { // \u8272\u306e\u5b9a\u7fa9. let color = UIColor ( red : 0.081 , green : 1.000 , blue : 0.421 , alpha : 1.000 ) // \u30dc\u30bf\u30f3\u306e\u5f62\u72b6\u3092\u5b9a\u7fa9. let path = makeNormalPath ( width : width , height : height ) color . setFill () path . fill () path . lineWidth = 0 path . stroke () } else if myStatus == . TouchBegan { // \u8272\u306e\u5b9a\u7fa9. let color = UIColor ( red : 1.000 , green : 1.000 , blue : 0.421 , alpha : 1.000 ) // \u30dc\u30bf\u30f3\u306e\u5f62\u72b6\u3092\u5b9a\u7fa9. let path = makeNormalPath ( width : width , height : height ) color . setFill () path . fill () path . lineWidth = 0 path . stroke () } super . draw ( rect ) } /* \u30dc\u30bf\u30f3\u306e\u5f62\u72b6\u3092\u4f5c\u6210. */ private func makeNormalPath ( width : CGFloat , height : CGFloat ) -> UIBezierPath { let bezierPath = UIBezierPath () bezierPath . move ( to : CGPoint ( x : 46.33 / 120 * width , y : 0.5 / 120 * height )) bezierPath . addCurve ( to : CGPoint ( x : 37.47 / 120 * width , y : 30.41 / 120 * height ), controlPoint1 : CGPoint ( x : 38.21 / 120 * width , y : 0.5 / 120 * height ), controlPoint2 : CGPoint ( x : 45.96 / 120 * width , y : 18.21 / 120 * height )) // bezierPath . addCurve ( to : CGPoint ( x : 0.54 / 120 * width , y : 30.41 / 120 * height ), controlPoint1 : CGPoint ( x : 28.97 / 120 * width , y : 42.61 / 120 * height ), controlPoint2 : CGPoint ( x : 2.75 / 120 * width , y : 21.75 / 120 * height )) bezierPath . addCurve ( to : CGPoint ( x : 28.61 / 120 * width , y : 65.04 / 120 * height ), controlPoint1 : CGPoint ( x : - 1.68 / 120 * width , y : 39.06 / 120 * height ), controlPoint2 : CGPoint ( x : 28.61 / 120 * width , y : 53.23 / 120 * height )) bezierPath . addCurve ( to : CGPoint ( x : 12.36 / 120 * width , y : 96.52 / 120 * height ), controlPoint1 : CGPoint ( x : 28.61 / 120 * width , y : 76.84 / 120 * height ), controlPoint2 : CGPoint ( x : 4.23 / 120 * width , y : 91.79 / 120 * height )) bezierPath . addCurve ( to : CGPoint ( x : 61.1 / 120 * width , y : 83.92 / 120 * height ), controlPoint1 : CGPoint ( x : 20.48 / 120 * width , y : 101.24 / 120 * height ), controlPoint2 : CGPoint ( x : 38.21 / 120 * width , y : 83.92 / 120 * height )) bezierPath . addCurve ( to : CGPoint ( x : 100.99 / 120 * width , y : 105.96 / 120 * height ), controlPoint1 : CGPoint ( x : 84 / 120 * width , y : 83.92 / 120 * height ), controlPoint2 : CGPoint ( x : 95.82 / 120 * width , y : 114.62 / 120 * height )) bezierPath . addCurve ( to : CGPoint ( x : 86.22 / 120 * width , y : 65.04 / 120 * height ), controlPoint1 : CGPoint ( x : 106.16 / 120 * width , y : 97.3 / 120 * height ), controlPoint2 : CGPoint ( x : 83.63 / 120 * width , y : 81.56 / 120 * height )) bezierPath . addCurve ( to : CGPoint ( x : 114.29 / 120 * width , y : 13.09 / 120 * height ), controlPoint1 : CGPoint ( x : 88.8 / 120 * width , y : 48.51 / 120 * height ), controlPoint2 : CGPoint ( x : 117.24 / 120 * width , y : 17.81 / 120 * height )) bezierPath . addCurve ( to : CGPoint ( x : 69.97 / 120 * width , y : 30.41 / 120 * height ), controlPoint1 : CGPoint ( x : 111.33 / 120 * width , y : 8.37 / 120 * height ), controlPoint2 : CGPoint ( x : 86.96 / 120 * width , y : 37.88 / 120 * height )) bezierPath . addCurve ( to : CGPoint ( x : 46.33 / 120 * width , y : 0.5 / 120 * height ), controlPoint1 : CGPoint ( x : 52.98 / 120 * width , y : 22.93 / 120 * height ), controlPoint2 : CGPoint ( x : 54.46 / 120 * width , y : 0.5 / 120 * height )) bezierPath . close () return bezierPath } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 // // MyButton.swift // UIKit049_2.3 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import Foundation import UIKit class MyButton : UIButton { var myStatus : ButtonStatus ! enum ButtonStatus { case Normal case TouchBegan case TouchEnded } required init ( coder aDecoder : NSCoder ) { super . init ( coder : aDecoder ) ! } override init ( frame : CGRect ) { super . init ( frame : frame ) myStatus = . Normal } override func touchesBegan ( touches : Set < UITouch >, withEvent event : UIEvent ?) { super . touchesBegan ( touches , withEvent : event ) myStatus = . TouchBegan self . setNeedsDisplay () } override func touchesEnded ( touches : Set < UITouch >, withEvent event : UIEvent ?) { super . touchesEnded ( touches , withEvent : event ) myStatus = . TouchEnded self . setNeedsDisplay () } override func drawRect ( rect : CGRect ) { let width = rect . width , height = rect . height if myStatus == . Normal || myStatus == . TouchEnded { // \u8272\u306e\u5b9a\u7fa9. let color = UIColor ( red : 0.081 , green : 1.000 , blue : 0.421 , alpha : 1.000 ) // \u30dc\u30bf\u30f3\u306e\u5f62\u72b6\u3092\u5b9a\u7fa9. let path = makeNormalPath ( width , height : height ) color . setFill () path . fill () path . lineWidth = 0 path . stroke () } else if myStatus == . TouchBegan { // \u8272\u306e\u5b9a\u7fa9. let color = UIColor ( red : 1.000 , green : 1.000 , blue : 0.421 , alpha : 1.000 ) // \u30dc\u30bf\u30f3\u306e\u5f62\u72b6\u3092\u5b9a\u7fa9. let path = makeNormalPath ( width , height : height ) color . setFill () path . fill () path . lineWidth = 0 path . stroke () } super . drawRect ( rect ) } /* \u30dc\u30bf\u30f3\u306e\u5f62\u72b6\u3092\u4f5c\u6210. */ private func makeNormalPath ( width : CGFloat , height : CGFloat ) -> UIBezierPath { let bezierPath = UIBezierPath () bezierPath . moveToPoint ( CGPointMake ( 46.33 / 120 * width , 0.5 / 120 * height )) bezierPath . addCurveToPoint ( CGPointMake ( 37.47 / 120 * width , 30.41 / 120 * height ), controlPoint1 : CGPointMake ( 38.21 / 120 * width , 0.5 / 120 * height ), controlPoint2 : CGPointMake ( 45.96 / 120 * width , 18.21 / 120 * height )) bezierPath . addCurveToPoint ( CGPointMake ( 0.54 / 120 * width , 30.41 / 120 * height ), controlPoint1 : CGPointMake ( 28.97 / 120 * width , 42.61 / 120 * height ), controlPoint2 : CGPointMake ( 2.75 / 120 * width , 21.75 / 120 * height )) bezierPath . addCurveToPoint ( CGPointMake ( 28.61 / 120 * width , 65.04 / 120 * height ), controlPoint1 : CGPointMake ( - 1.68 / 120 * width , 39.06 / 120 * height ), controlPoint2 : CGPointMake ( 28.61 / 120 * width , 53.23 / 120 * height )) bezierPath . addCurveToPoint ( CGPointMake ( 12.36 / 120 * width , 96.52 / 120 * height ), controlPoint1 : CGPointMake ( 28.61 / 120 * width , 76.84 / 120 * height ), controlPoint2 : CGPointMake ( 4.23 / 120 * width , 91.79 / 120 * height )) bezierPath . addCurveToPoint ( CGPointMake ( 61.1 / 120 * width , 83.92 / 120 * height ), controlPoint1 : CGPointMake ( 20.48 / 120 * width , 101.24 / 120 * height ), controlPoint2 : CGPointMake ( 38.21 / 120 * width , 83.92 / 120 * height )) bezierPath . addCurveToPoint ( CGPointMake ( 100.99 / 120 * width , 105.96 / 120 * height ), controlPoint1 : CGPointMake ( 84 / 120 * width , 83.92 / 120 * height ), controlPoint2 : CGPointMake ( 95.82 / 120 * width , 114.62 / 120 * height )) bezierPath . addCurveToPoint ( CGPointMake ( 86.22 / 120 * width , 65.04 / 120 * height ), controlPoint1 : CGPointMake ( 106.16 / 120 * width , 97.3 / 120 * height ), controlPoint2 : CGPointMake ( 83.63 / 120 * width , 81.56 / 120 * height )) bezierPath . addCurveToPoint ( CGPointMake ( 114.29 / 120 * width , 13.09 / 120 * height ), controlPoint1 : CGPointMake ( 88.8 / 120 * width , 48.51 / 120 * height ), controlPoint2 : CGPointMake ( 117.24 / 120 * width , 17.81 / 120 * height )) bezierPath . addCurveToPoint ( CGPointMake ( 69.97 / 120 * width , 30.41 / 120 * height ), controlPoint1 : CGPointMake ( 111.33 / 120 * width , 8.37 / 120 * height ), controlPoint2 : CGPointMake ( 86.96 / 120 * width , 37.88 / 120 * height )) bezierPath . addCurveToPoint ( CGPointMake ( 46.33 / 120 * width , 0.5 / 120 * height ), controlPoint1 : CGPointMake ( 52.98 / 120 * width , 22.93 / 120 * height ), controlPoint2 : CGPointMake ( 54.46 / 120 * width , 0.5 / 120 * height )) bezierPath . closePath () return bezierPath } } 3.x\u30684.x\u306e\u5dee\u5206 UIControlState \u304c UIControl.State \u306b\u5909\u66f4 func onClickMyButton \u306b @objc \u3092\u8ffd\u52a0 2.3\u30683.0\u306e\u5dee\u5206 UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u306e\u5ec3\u6b62) drawRect \u304c draw \u30e1\u30bd\u30c3\u30c9\u306b\u5909\u66f4 bezierPath.addCurveToPoint \u304c bezierPath.addCurve \u306b\u5909\u66f4 Reference UIButton Class https://developer.apple.com/reference/uikit/uibutton","title":"\u30ab\u30b9\u30bf\u30de\u30a4\u30baButton"},{"location":"1.uikit/049_custombutton/#button","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 // // ViewController.swift // UIKit049_4.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () let myButton = MyButton ( frame : CGRect ( x : 50 , y : 50 , width : 100 , height : 100 )) myButton . setTitle ( \"\u30dc\u30bf\u30f3\" , for : UIControl . State . normal ) myButton . setTitleColor ( UIColor . black , for : UIControl . State . normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchUpInside ) self . view . addSubview ( myButton ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8. */ @objc func onClickMyButton ( sender : UIButton ){ print ( \"onClickMyButton:\" ) print ( \"sender.currentTitile: \\( sender . currentTitle ! ) \" ) } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 // // ViewController.swift // UIKit049_3.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () let myButton = MyButton ( frame : CGRect ( x : 50 , y : 50 , width : 100 , height : 100 )) myButton . setTitle ( \"\u30dc\u30bf\u30f3\" , for : UIControlState . normal ) myButton . setTitleColor ( UIColor . black , for : UIControlState . normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchUpInside ) self . view . addSubview ( myButton ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8. */ func onClickMyButton ( sender : UIButton ){ print ( \"onClickMyButton:\" ) print ( \"sender.currentTitile: \\( sender . currentTitle ! ) \" ) } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 // // ViewController.swift // UIKit049_2.3 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () let myButton = MyButton ( frame : CGRectMake ( 50 , 50 , 100 , 100 )) myButton . setTitle ( \"\u30dc\u30bf\u30f3\" , forState : UIControlState . Normal ) myButton . setTitleColor ( UIColor . blackColor (), forState : UIControlState . Normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : . TouchUpInside ) self . view . addSubview ( myButton ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () // Dispose of any resources that can be recreated. } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8. */ func onClickMyButton ( sender : UIButton ){ print ( \"onClickMyButton:\" ) print ( \"sender.currentTitile: \\( sender . currentTitle ! ) \" ) } }","title":"\u30ab\u30b9\u30bf\u30de\u30a4\u30baButton"},{"location":"1.uikit/049_custombutton/#mybuttonswift","text":"Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 // // MyButton.swift // UIKit049_4.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import Foundation import UIKit class MyButton : UIButton { var myStatus : ButtonStatus ! enum ButtonStatus { case Normal case TouchBegan case TouchEnded } required init ( coder aDecoder : NSCoder ) { super . init ( coder : aDecoder ) ! } override init ( frame : CGRect ) { super . init ( frame : frame ) myStatus = . Normal } override func touchesBegan ( _ touches : Set < UITouch >, with event : UIEvent ?) { super . touchesBegan ( touches , with : event ) myStatus = . TouchBegan self . setNeedsDisplay () } override func touchesEnded ( _ touches : Set < UITouch >, with event : UIEvent ?) { super . touchesEnded ( touches , with : event ) myStatus = . TouchEnded self . setNeedsDisplay () } override func draw ( _ rect : CGRect ) { let width = rect . width , height = rect . height if myStatus == . Normal || myStatus == . TouchEnded { // \u8272\u306e\u5b9a\u7fa9. let color = UIColor ( red : 0.081 , green : 1.000 , blue : 0.421 , alpha : 1.000 ) // \u30dc\u30bf\u30f3\u306e\u5f62\u72b6\u3092\u5b9a\u7fa9. let path = makeNormalPath ( width : width , height : height ) color . setFill () path . fill () path . lineWidth = 0 path . stroke () } else if myStatus == . TouchBegan { // \u8272\u306e\u5b9a\u7fa9. let color = UIColor ( red : 1.000 , green : 1.000 , blue : 0.421 , alpha : 1.000 ) // \u30dc\u30bf\u30f3\u306e\u5f62\u72b6\u3092\u5b9a\u7fa9. let path = makeNormalPath ( width : width , height : height ) color . setFill () path . fill () path . lineWidth = 0 path . stroke () } super . draw ( rect ) } /* \u30dc\u30bf\u30f3\u306e\u5f62\u72b6\u3092\u4f5c\u6210. */ private func makeNormalPath ( width : CGFloat , height : CGFloat ) -> UIBezierPath { let bezierPath = UIBezierPath () bezierPath . move ( to : CGPoint ( x : 46.33 / 120 * width , y : 0.5 / 120 * height )) bezierPath . addCurve ( to : CGPoint ( x : 37.47 / 120 * width , y : 30.41 / 120 * height ), controlPoint1 : CGPoint ( x : 38.21 / 120 * width , y : 0.5 / 120 * height ), controlPoint2 : CGPoint ( x : 45.96 / 120 * width , y : 18.21 / 120 * height )) // bezierPath . addCurve ( to : CGPoint ( x : 0.54 / 120 * width , y : 30.41 / 120 * height ), controlPoint1 : CGPoint ( x : 28.97 / 120 * width , y : 42.61 / 120 * height ), controlPoint2 : CGPoint ( x : 2.75 / 120 * width , y : 21.75 / 120 * height )) bezierPath . addCurve ( to : CGPoint ( x : 28.61 / 120 * width , y : 65.04 / 120 * height ), controlPoint1 : CGPoint ( x : - 1.68 / 120 * width , y : 39.06 / 120 * height ), controlPoint2 : CGPoint ( x : 28.61 / 120 * width , y : 53.23 / 120 * height )) bezierPath . addCurve ( to : CGPoint ( x : 12.36 / 120 * width , y : 96.52 / 120 * height ), controlPoint1 : CGPoint ( x : 28.61 / 120 * width , y : 76.84 / 120 * height ), controlPoint2 : CGPoint ( x : 4.23 / 120 * width , y : 91.79 / 120 * height )) bezierPath . addCurve ( to : CGPoint ( x : 61.1 / 120 * width , y : 83.92 / 120 * height ), controlPoint1 : CGPoint ( x : 20.48 / 120 * width , y : 101.24 / 120 * height ), controlPoint2 : CGPoint ( x : 38.21 / 120 * width , y : 83.92 / 120 * height )) bezierPath . addCurve ( to : CGPoint ( x : 100.99 / 120 * width , y : 105.96 / 120 * height ), controlPoint1 : CGPoint ( x : 84 / 120 * width , y : 83.92 / 120 * height ), controlPoint2 : CGPoint ( x : 95.82 / 120 * width , y : 114.62 / 120 * height )) bezierPath . addCurve ( to : CGPoint ( x : 86.22 / 120 * width , y : 65.04 / 120 * height ), controlPoint1 : CGPoint ( x : 106.16 / 120 * width , y : 97.3 / 120 * height ), controlPoint2 : CGPoint ( x : 83.63 / 120 * width , y : 81.56 / 120 * height )) bezierPath . addCurve ( to : CGPoint ( x : 114.29 / 120 * width , y : 13.09 / 120 * height ), controlPoint1 : CGPoint ( x : 88.8 / 120 * width , y : 48.51 / 120 * height ), controlPoint2 : CGPoint ( x : 117.24 / 120 * width , y : 17.81 / 120 * height )) bezierPath . addCurve ( to : CGPoint ( x : 69.97 / 120 * width , y : 30.41 / 120 * height ), controlPoint1 : CGPoint ( x : 111.33 / 120 * width , y : 8.37 / 120 * height ), controlPoint2 : CGPoint ( x : 86.96 / 120 * width , y : 37.88 / 120 * height )) bezierPath . addCurve ( to : CGPoint ( x : 46.33 / 120 * width , y : 0.5 / 120 * height ), controlPoint1 : CGPoint ( x : 52.98 / 120 * width , y : 22.93 / 120 * height ), controlPoint2 : CGPoint ( x : 54.46 / 120 * width , y : 0.5 / 120 * height )) bezierPath . close () return bezierPath } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 // // MyButton.swift // UIKit049_2.3 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import Foundation import UIKit class MyButton : UIButton { var myStatus : ButtonStatus ! enum ButtonStatus { case Normal case TouchBegan case TouchEnded } required init ( coder aDecoder : NSCoder ) { super . init ( coder : aDecoder ) ! } override init ( frame : CGRect ) { super . init ( frame : frame ) myStatus = . Normal } override func touchesBegan ( touches : Set < UITouch >, withEvent event : UIEvent ?) { super . touchesBegan ( touches , withEvent : event ) myStatus = . TouchBegan self . setNeedsDisplay () } override func touchesEnded ( touches : Set < UITouch >, withEvent event : UIEvent ?) { super . touchesEnded ( touches , withEvent : event ) myStatus = . TouchEnded self . setNeedsDisplay () } override func drawRect ( rect : CGRect ) { let width = rect . width , height = rect . height if myStatus == . Normal || myStatus == . TouchEnded { // \u8272\u306e\u5b9a\u7fa9. let color = UIColor ( red : 0.081 , green : 1.000 , blue : 0.421 , alpha : 1.000 ) // \u30dc\u30bf\u30f3\u306e\u5f62\u72b6\u3092\u5b9a\u7fa9. let path = makeNormalPath ( width , height : height ) color . setFill () path . fill () path . lineWidth = 0 path . stroke () } else if myStatus == . TouchBegan { // \u8272\u306e\u5b9a\u7fa9. let color = UIColor ( red : 1.000 , green : 1.000 , blue : 0.421 , alpha : 1.000 ) // \u30dc\u30bf\u30f3\u306e\u5f62\u72b6\u3092\u5b9a\u7fa9. let path = makeNormalPath ( width , height : height ) color . setFill () path . fill () path . lineWidth = 0 path . stroke () } super . drawRect ( rect ) } /* \u30dc\u30bf\u30f3\u306e\u5f62\u72b6\u3092\u4f5c\u6210. */ private func makeNormalPath ( width : CGFloat , height : CGFloat ) -> UIBezierPath { let bezierPath = UIBezierPath () bezierPath . moveToPoint ( CGPointMake ( 46.33 / 120 * width , 0.5 / 120 * height )) bezierPath . addCurveToPoint ( CGPointMake ( 37.47 / 120 * width , 30.41 / 120 * height ), controlPoint1 : CGPointMake ( 38.21 / 120 * width , 0.5 / 120 * height ), controlPoint2 : CGPointMake ( 45.96 / 120 * width , 18.21 / 120 * height )) bezierPath . addCurveToPoint ( CGPointMake ( 0.54 / 120 * width , 30.41 / 120 * height ), controlPoint1 : CGPointMake ( 28.97 / 120 * width , 42.61 / 120 * height ), controlPoint2 : CGPointMake ( 2.75 / 120 * width , 21.75 / 120 * height )) bezierPath . addCurveToPoint ( CGPointMake ( 28.61 / 120 * width , 65.04 / 120 * height ), controlPoint1 : CGPointMake ( - 1.68 / 120 * width , 39.06 / 120 * height ), controlPoint2 : CGPointMake ( 28.61 / 120 * width , 53.23 / 120 * height )) bezierPath . addCurveToPoint ( CGPointMake ( 12.36 / 120 * width , 96.52 / 120 * height ), controlPoint1 : CGPointMake ( 28.61 / 120 * width , 76.84 / 120 * height ), controlPoint2 : CGPointMake ( 4.23 / 120 * width , 91.79 / 120 * height )) bezierPath . addCurveToPoint ( CGPointMake ( 61.1 / 120 * width , 83.92 / 120 * height ), controlPoint1 : CGPointMake ( 20.48 / 120 * width , 101.24 / 120 * height ), controlPoint2 : CGPointMake ( 38.21 / 120 * width , 83.92 / 120 * height )) bezierPath . addCurveToPoint ( CGPointMake ( 100.99 / 120 * width , 105.96 / 120 * height ), controlPoint1 : CGPointMake ( 84 / 120 * width , 83.92 / 120 * height ), controlPoint2 : CGPointMake ( 95.82 / 120 * width , 114.62 / 120 * height )) bezierPath . addCurveToPoint ( CGPointMake ( 86.22 / 120 * width , 65.04 / 120 * height ), controlPoint1 : CGPointMake ( 106.16 / 120 * width , 97.3 / 120 * height ), controlPoint2 : CGPointMake ( 83.63 / 120 * width , 81.56 / 120 * height )) bezierPath . addCurveToPoint ( CGPointMake ( 114.29 / 120 * width , 13.09 / 120 * height ), controlPoint1 : CGPointMake ( 88.8 / 120 * width , 48.51 / 120 * height ), controlPoint2 : CGPointMake ( 117.24 / 120 * width , 17.81 / 120 * height )) bezierPath . addCurveToPoint ( CGPointMake ( 69.97 / 120 * width , 30.41 / 120 * height ), controlPoint1 : CGPointMake ( 111.33 / 120 * width , 8.37 / 120 * height ), controlPoint2 : CGPointMake ( 86.96 / 120 * width , 37.88 / 120 * height )) bezierPath . addCurveToPoint ( CGPointMake ( 46.33 / 120 * width , 0.5 / 120 * height ), controlPoint1 : CGPointMake ( 52.98 / 120 * width , 22.93 / 120 * height ), controlPoint2 : CGPointMake ( 54.46 / 120 * width , 0.5 / 120 * height )) bezierPath . closePath () return bezierPath } }","title":"MyButton.swift"},{"location":"1.uikit/049_custombutton/#3x4x","text":"UIControlState \u304c UIControl.State \u306b\u5909\u66f4 func onClickMyButton \u306b @objc \u3092\u8ffd\u52a0","title":"3.x\u30684.x\u306e\u5dee\u5206"},{"location":"1.uikit/049_custombutton/#2330","text":"UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u306e\u5ec3\u6b62) drawRect \u304c draw \u30e1\u30bd\u30c3\u30c9\u306b\u5909\u66f4 bezierPath.addCurveToPoint \u304c bezierPath.addCurve \u306b\u5909\u66f4","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/049_custombutton/#reference","text":"UIButton Class https://developer.apple.com/reference/uikit/uibutton","title":"Reference"},{"location":"1.uikit/050_deleteuiparts/","text":"UI\u30d1\u30fc\u30c4\u306e\u524a\u9664 Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 // // ViewController.swift // UIKit050_4.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () let myButton = UIButton ( frame : CGRect ( x : 50 , y : 50 , width : 100 , height : 100 )) myButton . setTitle ( \"UI\u30dc\u30bf\u30f3\" , for : UIControl . State . normal ) myButton . setTitleColor ( UIColor . black , for : UIControl . State . normal ) myButton . backgroundColor = UIColor . green let myLabel = UILabel ( frame : CGRect ( x : 50 , y : 200 , width : 100 , height : 100 )) myLabel . text = \"UI\u30e9\u30d9\u30eb\" myLabel . textColor = UIColor . green myLabel . backgroundColor = UIColor . red self . view . addSubview ( myButton ) print ( \"View: \\( view . description ) \" ) let views = self . view . subviews for myView in views { print ( \"View: \\( myView . description ) \" ) if myView . isKind ( of : UIButton . self ) { myView . removeFromSuperview () self . view . addSubview ( myLabel ) } } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 // // ViewController.swift // UIKit050_3.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () let myButton = UIButton ( frame : CGRect ( x : 50 , y : 50 , width : 100 , height : 100 )) myButton . setTitle ( \"UI\u30dc\u30bf\u30f3\" , for : UIControlState . normal ) myButton . setTitleColor ( UIColor . black , for : UIControlState . normal ) myButton . backgroundColor = UIColor . green let myLabel = UILabel ( frame : CGRect ( x : 50 , y : 200 , width : 100 , height : 100 )) myLabel . text = \"UI\u30e9\u30d9\u30eb\" myLabel . textColor = UIColor . green myLabel . backgroundColor = UIColor . red self . view . addSubview ( myButton ) print ( \"View: \\( view . description ) \" ) let views = self . view . subviews for myView in views { print ( \"View: \\( myView . description ) \" ) if myView . isKind ( of : UIButton . self ) { myView . removeFromSuperview () self . view . addSubview ( myLabel ) } } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 // // ViewController.swift // UIKit050_2.3 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () let myButton = UIButton ( frame : CGRectMake ( 50 , 50 , 100 , 100 )) myButton . setTitle ( \"UI\u30dc\u30bf\u30f3\" , forState : UIControlState . Normal ) myButton . setTitleColor ( UIColor . blackColor (), forState : UIControlState . Normal ) myButton . backgroundColor = UIColor . greenColor () let myLabel = UILabel ( frame : CGRectMake ( 50 , 200 , 100 , 100 )) myLabel . text = \"UI\u30e9\u30d9\u30eb\" myLabel . textColor = UIColor . greenColor () myLabel . backgroundColor = UIColor . redColor () self . view . addSubview ( myButton ) print ( \"View: \\( view . description ) \" ) let views = self . view . subviews for myView in views { print ( \"View: \\( myView . description ) \" ) if myView . isKindOfClass ( UIButton ) { myView . removeFromSuperview () self . view . addSubview ( myLabel ) } } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } 3.x\u30684.x\u306e\u5dee\u5206 UIControlState \u304c UIControl.State \u306b\u5909\u66f4 2.3\u30683.0\u306e\u5dee\u5206 UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u306e\u5ec3\u6b62) isKindOfClass(class) \u304c isKind(of:class) \u306b\u5909\u66f4 Reference UIView Class https://developer.apple.com/reference/uikit/uiview","title":"UI\u30d1\u30fc\u30c4\u306e\u524a\u9664"},{"location":"1.uikit/050_deleteuiparts/#ui","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 // // ViewController.swift // UIKit050_4.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () let myButton = UIButton ( frame : CGRect ( x : 50 , y : 50 , width : 100 , height : 100 )) myButton . setTitle ( \"UI\u30dc\u30bf\u30f3\" , for : UIControl . State . normal ) myButton . setTitleColor ( UIColor . black , for : UIControl . State . normal ) myButton . backgroundColor = UIColor . green let myLabel = UILabel ( frame : CGRect ( x : 50 , y : 200 , width : 100 , height : 100 )) myLabel . text = \"UI\u30e9\u30d9\u30eb\" myLabel . textColor = UIColor . green myLabel . backgroundColor = UIColor . red self . view . addSubview ( myButton ) print ( \"View: \\( view . description ) \" ) let views = self . view . subviews for myView in views { print ( \"View: \\( myView . description ) \" ) if myView . isKind ( of : UIButton . self ) { myView . removeFromSuperview () self . view . addSubview ( myLabel ) } } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 // // ViewController.swift // UIKit050_3.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () let myButton = UIButton ( frame : CGRect ( x : 50 , y : 50 , width : 100 , height : 100 )) myButton . setTitle ( \"UI\u30dc\u30bf\u30f3\" , for : UIControlState . normal ) myButton . setTitleColor ( UIColor . black , for : UIControlState . normal ) myButton . backgroundColor = UIColor . green let myLabel = UILabel ( frame : CGRect ( x : 50 , y : 200 , width : 100 , height : 100 )) myLabel . text = \"UI\u30e9\u30d9\u30eb\" myLabel . textColor = UIColor . green myLabel . backgroundColor = UIColor . red self . view . addSubview ( myButton ) print ( \"View: \\( view . description ) \" ) let views = self . view . subviews for myView in views { print ( \"View: \\( myView . description ) \" ) if myView . isKind ( of : UIButton . self ) { myView . removeFromSuperview () self . view . addSubview ( myLabel ) } } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 // // ViewController.swift // UIKit050_2.3 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () let myButton = UIButton ( frame : CGRectMake ( 50 , 50 , 100 , 100 )) myButton . setTitle ( \"UI\u30dc\u30bf\u30f3\" , forState : UIControlState . Normal ) myButton . setTitleColor ( UIColor . blackColor (), forState : UIControlState . Normal ) myButton . backgroundColor = UIColor . greenColor () let myLabel = UILabel ( frame : CGRectMake ( 50 , 200 , 100 , 100 )) myLabel . text = \"UI\u30e9\u30d9\u30eb\" myLabel . textColor = UIColor . greenColor () myLabel . backgroundColor = UIColor . redColor () self . view . addSubview ( myButton ) print ( \"View: \\( view . description ) \" ) let views = self . view . subviews for myView in views { print ( \"View: \\( myView . description ) \" ) if myView . isKindOfClass ( UIButton ) { myView . removeFromSuperview () self . view . addSubview ( myLabel ) } } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } }","title":"UI\u30d1\u30fc\u30c4\u306e\u524a\u9664"},{"location":"1.uikit/050_deleteuiparts/#3x4x","text":"UIControlState \u304c UIControl.State \u306b\u5909\u66f4","title":"3.x\u30684.x\u306e\u5dee\u5206"},{"location":"1.uikit/050_deleteuiparts/#2330","text":"UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u306e\u5ec3\u6b62) isKindOfClass(class) \u304c isKind(of:class) \u306b\u5909\u66f4","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/050_deleteuiparts/#reference","text":"UIView Class https://developer.apple.com/reference/uikit/uiview","title":"Reference"},{"location":"1.uikit/051_uitableview/","text":"UITableView\u306b\u8ffd\u52a0\u30fb\u524a\u9664\u6a5f\u80fd\u3092\u8ffd\u52a0 AppDelegate.swift Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 // // AppDelegate.swift // UIKit051_4.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { var window : UIWindow ? var myNavigationController : UINavigationController ? func application ( _ application : UIApplication , willFinishLaunchingWithOptions launchOptions : [ UIApplication . LaunchOptionsKey : Any ]? = nil ) -> Bool { // ViewController\u3092\u751f\u6210. let myViewController : ViewController = ViewController () // Navication Controller\u3092\u751f\u6210. myNavigationController = UINavigationController ( rootViewController : myViewController ) // UIWindow\u3092\u751f\u6210. self . window = UIWindow ( frame : UIScreen . main . bounds ) // rootViewController\u306bNatigationController\u3092\u8a2d\u5b9a. self . window ?. rootViewController = myNavigationController self . window ?. makeKeyAndVisible () return true } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 // // AppDelegate.swift // UIKit051_3.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { var window : UIWindow ? var myNavigationController : UINavigationController ? func application ( _ application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ NSObject : AnyObject ]?) -> Bool { // ViewController\u3092\u751f\u6210. let myViewController : ViewController = ViewController () // Navication Controller\u3092\u751f\u6210. myNavigationController = UINavigationController ( rootViewController : myViewController ) // UIWindow\u3092\u751f\u6210. self . window = UIWindow ( frame : UIScreen . main . bounds ) // rootViewController\u306bNatigationController\u3092\u8a2d\u5b9a. self . window ?. rootViewController = myNavigationController self . window ?. makeKeyAndVisible () return true } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 // // AppDelegate.swift // UIKit051_2.3 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { var window : UIWindow ? var myNavigationController : UINavigationController ? func application ( application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ NSObject : AnyObject ]?) -> Bool { // ViewController\u3092\u751f\u6210. let myViewController : ViewController = ViewController () // Navication Controller\u3092\u751f\u6210. myNavigationController = UINavigationController ( rootViewController : myViewController ) // UIWindow\u3092\u751f\u6210. self . window = UIWindow ( frame : UIScreen . mainScreen (). bounds ) // rootViewController\u306bNatigationController\u3092\u8a2d\u5b9a. self . window ?. rootViewController = myNavigationController self . window ?. makeKeyAndVisible () return true } } UIViewController.swift Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 // // ViewController.swift // UIKit051_3.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UITableViewDelegate , UITableViewDataSource { let myItems : NSMutableArray = [ \"TEST1\" , \"TEST2\" , \"TEST3\" ] var myTableView : UITableView ! override func viewDidLoad () { super . viewDidLoad () // \u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30d0\u30fc\u306b\u8868\u793a\u3059\u308b\u30bf\u30a4\u30c8\u30eb. self . title = \"TableView Test\" // \u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30d0\u30fc\u3092\u53d6\u5f97. self . navigationController ?. navigationBar // \u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30d0\u30fc\u3092\u8868\u793a. self . navigationController ?. isNavigationBarHidden = false // \u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30d0\u30fc\u306e\u53f3\u5074\u306b\u7de8\u96c6\u30dc\u30bf\u30f3\u3092\u8ffd\u52a0. self . navigationItem . rightBarButtonItem = self . editButtonItem // Status Bar\u306e\u9ad8\u3055\u3092\u53d6\u5f97. let barHeight : CGFloat = UIApplication . shared . statusBarFrame . size . height // View\u306e\u9ad8\u3055\u3068\u5e45\u3092\u53d6\u5f97. let displayWidth : CGFloat = self . view . frame . width let displayHeight : CGFloat = self . view . frame . height // TableView\u306e\u751f\u6210( status bar\u306e\u9ad8\u3055\u5206\u305a\u3089\u3057\u3066\u8868\u793a ). myTableView = UITableView ( frame : CGRect ( x : 0 , y : barHeight , width : displayWidth , height : displayHeight - barHeight )) // Cell\u306e\u767b\u9332. myTableView . register ( UITableViewCell . self , forCellReuseIdentifier : \"MyCell\" ) // DataSource\u306e\u8a2d\u5b9a. myTableView . dataSource = self // Delegate\u3092\u8a2d\u5b9a. myTableView . delegate = self // \u7f6b\u7dda\u3092\u9752\u8272\u306b\u8a2d\u5b9a. myTableView . separatorColor = UIColor . blue // \u7de8\u96c6\u4e2d\u306e\u30bb\u30eb\u9078\u629e\u3092\u8a31\u53ef. myTableView . allowsSelectionDuringEditing = true // TableView\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myTableView ) } /* Cell\u304c\u9078\u629e\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ func tableView ( _ tableView : UITableView , didSelectRowAt indexPath : IndexPath ) { // \u9078\u629e\u4e2d\u306e\u30bb\u30eb\u304c\u4f55\u756a\u76ee\u304b. print ( \"Num: \\( indexPath . row ) \" ) // \u9078\u629e\u4e2d\u306e\u30bb\u30eb\u306evalue. print ( \"Value: \\( myItems [ indexPath . row ] ) \" ) // \u9078\u629e\u4e2d\u306e\u30bb\u30eb\u3092\u7de8\u96c6\u3067\u304d\u308b\u304b. print ( \"Edeintg: \\( tableView . isEditing ) \" ) } /* Cell\u306e\u7dcf\u6570\u3092\u8fd4\u3059 (\u5b9f\u88c5\u5fc5\u9808) */ func tableView ( _ tableView : UITableView , numberOfRowsInSection section : Int ) -> Int { return myItems . count } /* Cell\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b (\u5b9f\u88c5\u5fc5\u9808) */ func tableView ( _ tableView : UITableView , cellForRowAt indexPath : IndexPath ) -> UITableViewCell { let cell = tableView . dequeueReusableCell ( withIdentifier : \"MyCell\" , for : indexPath as IndexPath ) // Cell\u306b\u5024\u3092\u8a2d\u5b9a. cell . textLabel ?. text = \" \\( myItems [ indexPath . row ] ) \" return cell } /* \u7de8\u96c6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b */ override func setEditing ( _ editing : Bool , animated : Bool ) { super . setEditing ( editing , animated : animated ) // TableView\u3092\u7de8\u96c6\u53ef\u80fd\u306b\u3059\u308b myTableView . setEditing ( editing , animated : true ) // \u7de8\u96c6\u4e2d\u306e\u3068\u304d\u306e\u307faddButton\u3092\u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30d0\u30fc\u306e\u5de6\u306b\u8868\u793a\u3059\u308b if editing { print ( \"\u7de8\u96c6\u4e2d\" ) let addButton = UIBarButtonItem ( barButtonSystemItem : UIBarButtonItem . SystemItem . add , target : self , action : #selector ( ViewController . addCell ( sender :))) self . navigationItem . setLeftBarButton ( addButton , animated : true ) } else { print ( \"\u901a\u5e38\u30e2\u30fc\u30c9\" ) self . navigationItem . setLeftBarButton ( nil , animated : true ) } } /* addButton\u304c\u62bc\u3055\u308c\u305f\u969b\u547c\u3073\u51fa\u3055\u308c\u308b */ @objc func addCell ( sender : AnyObject ) { print ( \"\u8ffd\u52a0\" ) // myItems\u306b\u8ffd\u52a0. myItems . add ( \"add Cell\" ) // TableView\u3092\u518d\u8aad\u307f\u8fbc\u307f. myTableView . reloadData () } /* Cell\u3092\u633f\u5165\u307e\u305f\u306f\u524a\u9664\u3057\u3088\u3046\u3068\u3057\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b */ func tableView ( _ tableView : UITableView , commit editingStyle : UITableViewCell . EditingStyle , forRowAt indexPath : IndexPath ) { // \u524a\u9664\u306e\u3068\u304d. if editingStyle == UITableViewCell . EditingStyle . delete { print ( \"\u524a\u9664\" ) // \u6307\u5b9a\u3055\u308c\u305f\u30bb\u30eb\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092myItems\u304b\u3089\u524a\u9664\u3059\u308b. myItems . removeObject ( at : indexPath . row ) // TableView\u3092\u518d\u8aad\u307f\u8fbc\u307f. myTableView . reloadData () } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 // // ViewController.swift // UIKit051_3.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UITableViewDelegate , UITableViewDataSource { let myItems : NSMutableArray = [ \"TEST1\" , \"TEST2\" , \"TEST3\" ] var myTableView : UITableView ! override func viewDidLoad () { super . viewDidLoad () // \u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30d0\u30fc\u306b\u8868\u793a\u3059\u308b\u30bf\u30a4\u30c8\u30eb. self . title = \"TableView Test\" // \u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30d0\u30fc\u3092\u53d6\u5f97. self . navigationController ?. navigationBar // \u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30d0\u30fc\u3092\u8868\u793a. self . navigationController ?. isNavigationBarHidden = false // \u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30d0\u30fc\u306e\u53f3\u5074\u306b\u7de8\u96c6\u30dc\u30bf\u30f3\u3092\u8ffd\u52a0. self . navigationItem . rightBarButtonItem = self . editButtonItem // Status Bar\u306e\u9ad8\u3055\u3092\u53d6\u5f97. let barHeight : CGFloat = UIApplication . shared . statusBarFrame . size . height // View\u306e\u9ad8\u3055\u3068\u5e45\u3092\u53d6\u5f97. let displayWidth : CGFloat = self . view . frame . width let displayHeight : CGFloat = self . view . frame . height // TableView\u306e\u751f\u6210( status bar\u306e\u9ad8\u3055\u5206\u305a\u3089\u3057\u3066\u8868\u793a ). myTableView = UITableView ( frame : CGRect ( x : 0 , y : barHeight , width : displayWidth , height : displayHeight - barHeight )) // Cell\u306e\u767b\u9332. myTableView . register ( UITableViewCell . self , forCellReuseIdentifier : \"MyCell\" ) // DataSource\u306e\u8a2d\u5b9a. myTableView . dataSource = self // Delegate\u3092\u8a2d\u5b9a. myTableView . delegate = self // \u7f6b\u7dda\u3092\u9752\u8272\u306b\u8a2d\u5b9a. myTableView . separatorColor = UIColor . blue // \u7de8\u96c6\u4e2d\u306e\u30bb\u30eb\u9078\u629e\u3092\u8a31\u53ef. myTableView . allowsSelectionDuringEditing = true // TableView\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myTableView ) } /* Cell\u304c\u9078\u629e\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ func tableView ( _ tableView : UITableView , didSelectRowAt indexPath : IndexPath ) { // \u9078\u629e\u4e2d\u306e\u30bb\u30eb\u304c\u4f55\u756a\u76ee\u304b. print ( \"Num: \\( indexPath . row ) \" ) // \u9078\u629e\u4e2d\u306e\u30bb\u30eb\u306evalue. print ( \"Value: \\( myItems [ indexPath . row ] ) \" ) // \u9078\u629e\u4e2d\u306e\u30bb\u30eb\u3092\u7de8\u96c6\u3067\u304d\u308b\u304b. print ( \"Edeintg: \\( tableView . isEditing ) \" ) } /* Cell\u306e\u7dcf\u6570\u3092\u8fd4\u3059 (\u5b9f\u88c5\u5fc5\u9808) */ func tableView ( _ tableView : UITableView , numberOfRowsInSection section : Int ) -> Int { return myItems . count } /* Cell\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b (\u5b9f\u88c5\u5fc5\u9808) */ func tableView ( _ tableView : UITableView , cellForRowAt indexPath : IndexPath ) -> UITableViewCell { let cell = tableView . dequeueReusableCell ( withIdentifier : \"MyCell\" , for : indexPath as IndexPath ) // Cell\u306b\u5024\u3092\u8a2d\u5b9a. cell . textLabel ?. text = \" \\( myItems [ indexPath . row ] ) \" return cell } /* \u7de8\u96c6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b */ override func setEditing ( _ editing : Bool , animated : Bool ) { super . setEditing ( editing , animated : animated ) // TableView\u3092\u7de8\u96c6\u53ef\u80fd\u306b\u3059\u308b myTableView . setEditing ( editing , animated : true ) // \u7de8\u96c6\u4e2d\u306e\u3068\u304d\u306e\u307faddButton\u3092\u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30d0\u30fc\u306e\u5de6\u306b\u8868\u793a\u3059\u308b if editing { print ( \"\u7de8\u96c6\u4e2d\" ) let addButton = UIBarButtonItem ( barButtonSystemItem : UIBarButtonSystemItem . add , target : self , action : #selector ( ViewController . addCell ( sender :))) self . navigationItem . setLeftBarButton ( addButton , animated : true ) } else { print ( \"\u901a\u5e38\u30e2\u30fc\u30c9\" ) self . navigationItem . setLeftBarButton ( nil , animated : true ) } } /* addButton\u304c\u62bc\u3055\u308c\u305f\u969b\u547c\u3073\u51fa\u3055\u308c\u308b */ func addCell ( sender : AnyObject ) { print ( \"\u8ffd\u52a0\" ) // myItems\u306b\u8ffd\u52a0. myItems . add ( \"add Cell\" ) // TableView\u3092\u518d\u8aad\u307f\u8fbc\u307f. myTableView . reloadData () } /* Cell\u3092\u633f\u5165\u307e\u305f\u306f\u524a\u9664\u3057\u3088\u3046\u3068\u3057\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b */ func tableView ( _ tableView : UITableView , commit editingStyle : UITableViewCellEditingStyle , forRowAt indexPath : IndexPath ) { // \u524a\u9664\u306e\u3068\u304d. if editingStyle == UITableViewCellEditingStyle . delete { print ( \"\u524a\u9664\" ) // \u6307\u5b9a\u3055\u308c\u305f\u30bb\u30eb\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092myItems\u304b\u3089\u524a\u9664\u3059\u308b. myItems . removeObject ( at : indexPath . row ) // TableView\u3092\u518d\u8aad\u307f\u8fbc\u307f. myTableView . reloadData () } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 // // ViewController.swift // UIKit051_2.3 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UITableViewDelegate , UITableViewDataSource { let myItems : NSMutableArray = [ \"TEST1\" , \"TEST2\" , \"TEST3\" ] var myTableView : UITableView ! override func viewDidLoad () { super . viewDidLoad () // \u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30d0\u30fc\u306b\u8868\u793a\u3059\u308b\u30bf\u30a4\u30c8\u30eb. self . title = \"TableView Test\" // \u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30d0\u30fc\u3092\u53d6\u5f97. self . navigationController ?. navigationBar // \u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30d0\u30fc\u3092\u8868\u793a. self . navigationController ?. navigationBarHidden = false // \u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30d0\u30fc\u306e\u53f3\u5074\u306b\u7de8\u96c6\u30dc\u30bf\u30f3\u3092\u8ffd\u52a0. self . navigationItem . rightBarButtonItem = self . editButtonItem () // Status Bar\u306e\u9ad8\u3055\u3092\u53d6\u5f97. let barHeight : CGFloat = UIApplication . sharedApplication (). statusBarFrame . size . height // View\u306e\u9ad8\u3055\u3068\u5e45\u3092\u53d6\u5f97. let displayWidth : CGFloat = self . view . frame . width let displayHeight : CGFloat = self . view . frame . height // TableView\u306e\u751f\u6210( status bar\u306e\u9ad8\u3055\u5206\u305a\u3089\u3057\u3066\u8868\u793a ). myTableView = UITableView ( frame : CGRect ( x : 0 , y : barHeight , width : displayWidth , height : displayHeight - barHeight )) // Cell\u306e\u767b\u9332. myTableView . registerClass ( UITableViewCell . self , forCellReuseIdentifier : \"MyCell\" ) // DataSource\u306e\u8a2d\u5b9a. myTableView . dataSource = self // Delegate\u3092\u8a2d\u5b9a. myTableView . delegate = self // \u7f6b\u7dda\u3092\u9752\u8272\u306b\u8a2d\u5b9a. myTableView . separatorColor = UIColor . blueColor () // \u7de8\u96c6\u4e2d\u306e\u30bb\u30eb\u9078\u629e\u3092\u8a31\u53ef. myTableView . allowsSelectionDuringEditing = true // TableView\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myTableView ) } /* Cell\u304c\u9078\u629e\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ func tableView ( tableView : UITableView , didSelectRowAtIndexPath indexPath : NSIndexPath ) { // \u9078\u629e\u4e2d\u306e\u30bb\u30eb\u304c\u4f55\u756a\u76ee\u304b. print ( \"Num: \\( indexPath . row ) \" ) // \u9078\u629e\u4e2d\u306e\u30bb\u30eb\u306evalue. print ( \"Value: \\( myItems [ indexPath . row ] ) \" ) // \u9078\u629e\u4e2d\u306e\u30bb\u30eb\u3092\u7de8\u96c6\u3067\u304d\u308b\u304b. print ( \"Edeintg: \\( tableView . editing ) \" ) } /* Cell\u306e\u7dcf\u6570\u3092\u8fd4\u3059 (\u5b9f\u88c5\u5fc5\u9808) */ func tableView ( tableView : UITableView , numberOfRowsInSection section : Int ) -> Int { return myItems . count } /* Cell\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b (\u5b9f\u88c5\u5fc5\u9808) */ func tableView ( tableView : UITableView , cellForRowAtIndexPath indexPath : NSIndexPath ) -> UITableViewCell { let cell = tableView . dequeueReusableCellWithIdentifier ( \"MyCell\" , forIndexPath : indexPath ) // Cell\u306b\u5024\u3092\u8a2d\u5b9a. cell . textLabel ?. text = \" \\( myItems [ indexPath . row ] ) \" return cell } /* \u7de8\u96c6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b */ override func setEditing ( editing : Bool , animated : Bool ) { super . setEditing ( editing , animated : animated ) // TableView\u3092\u7de8\u96c6\u53ef\u80fd\u306b\u3059\u308b myTableView . setEditing ( editing , animated : true ) // \u7de8\u96c6\u4e2d\u306e\u3068\u304d\u306e\u307faddButton\u3092\u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30d0\u30fc\u306e\u5de6\u306b\u8868\u793a\u3059\u308b if editing { print ( \"\u7de8\u96c6\u4e2d\" ) let addButton = UIBarButtonItem ( barButtonSystemItem : UIBarButtonSystemItem . Add , target : self , action : #selector ( ViewController . addCell ( _ :))) self . navigationItem . setLeftBarButtonItem ( addButton , animated : true ) } else { print ( \"\u901a\u5e38\u30e2\u30fc\u30c9\" ) self . navigationItem . setLeftBarButtonItem ( nil , animated : true ) } } /* addButton\u304c\u62bc\u3055\u308c\u305f\u969b\u547c\u3073\u51fa\u3055\u308c\u308b */ func addCell ( sender : AnyObject ) { print ( \"\u8ffd\u52a0\" ) // myItems\u306b\u8ffd\u52a0. myItems . addObject ( \"add Cell\" ) // TableView\u3092\u518d\u8aad\u307f\u8fbc\u307f. myTableView . reloadData () } /* Cell\u3092\u633f\u5165\u307e\u305f\u306f\u524a\u9664\u3057\u3088\u3046\u3068\u3057\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b */ func tableView ( tableView : UITableView , commitEditingStyle editingStyle : UITableViewCellEditingStyle , forRowAtIndexPath indexPath : NSIndexPath ) { // \u524a\u9664\u306e\u3068\u304d. if editingStyle == UITableViewCellEditingStyle . Delete { print ( \"\u524a\u9664\" ) // \u6307\u5b9a\u3055\u308c\u305f\u30bb\u30eb\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092myItems\u304b\u3089\u524a\u9664\u3059\u308b. myItems . removeObjectAtIndex ( indexPath . row ) // TableView\u3092\u518d\u8aad\u307f\u8fbc\u307f. myTableView . reloadData () } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } 3.x\u30684.x\u306e\u5dee\u5206 func application( application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject : AnyObject]? ) -> Bool\u304c\u3001 func application( application: UIApplication, willFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]? = nil ) -> Bool\u306b\u5909\u66f4 UIBarButtonSystemItem \u304c UIBarButtonItem.SystemItem \u306b\u5909\u66f4 func addCell \u306b @objc \u3092\u8ffd\u52a0 UITableViewCellEditingStyle \u304c UITableViewCell.EditingStyle \u306b\u5909\u66f4 2.3\u30683.0\u306e\u5dee\u5206 UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u306e\u5ec3\u6b62) UINavigationController\u306e\u4e00\u90e8\u30d7\u30ed\u30d1\u30c6\u30a3\u540d\u306e\u5909\u66f4(navigationBarHidden->isNavigationBarHidden) Reference UITableView Class https://developer.apple.com/reference/uikit/uitableview UITableViewDelegate https://developer.apple.com/reference/uikit/uitableviewdelegate UITableViewDataSource https://developer.apple.com/reference/uikit/uitableviewdatasource","title":"UITableView\u306b\u8ffd\u52a0\u30fb\u524a\u9664\u6a5f\u80fd\u3092\u8ffd\u52a0"},{"location":"1.uikit/051_uitableview/#uitableview","text":"","title":"UITableView\u306b\u8ffd\u52a0\u30fb\u524a\u9664\u6a5f\u80fd\u3092\u8ffd\u52a0"},{"location":"1.uikit/051_uitableview/#appdelegateswift","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 // // AppDelegate.swift // UIKit051_4.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { var window : UIWindow ? var myNavigationController : UINavigationController ? func application ( _ application : UIApplication , willFinishLaunchingWithOptions launchOptions : [ UIApplication . LaunchOptionsKey : Any ]? = nil ) -> Bool { // ViewController\u3092\u751f\u6210. let myViewController : ViewController = ViewController () // Navication Controller\u3092\u751f\u6210. myNavigationController = UINavigationController ( rootViewController : myViewController ) // UIWindow\u3092\u751f\u6210. self . window = UIWindow ( frame : UIScreen . main . bounds ) // rootViewController\u306bNatigationController\u3092\u8a2d\u5b9a. self . window ?. rootViewController = myNavigationController self . window ?. makeKeyAndVisible () return true } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 // // AppDelegate.swift // UIKit051_3.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { var window : UIWindow ? var myNavigationController : UINavigationController ? func application ( _ application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ NSObject : AnyObject ]?) -> Bool { // ViewController\u3092\u751f\u6210. let myViewController : ViewController = ViewController () // Navication Controller\u3092\u751f\u6210. myNavigationController = UINavigationController ( rootViewController : myViewController ) // UIWindow\u3092\u751f\u6210. self . window = UIWindow ( frame : UIScreen . main . bounds ) // rootViewController\u306bNatigationController\u3092\u8a2d\u5b9a. self . window ?. rootViewController = myNavigationController self . window ?. makeKeyAndVisible () return true } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 // // AppDelegate.swift // UIKit051_2.3 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { var window : UIWindow ? var myNavigationController : UINavigationController ? func application ( application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ NSObject : AnyObject ]?) -> Bool { // ViewController\u3092\u751f\u6210. let myViewController : ViewController = ViewController () // Navication Controller\u3092\u751f\u6210. myNavigationController = UINavigationController ( rootViewController : myViewController ) // UIWindow\u3092\u751f\u6210. self . window = UIWindow ( frame : UIScreen . mainScreen (). bounds ) // rootViewController\u306bNatigationController\u3092\u8a2d\u5b9a. self . window ?. rootViewController = myNavigationController self . window ?. makeKeyAndVisible () return true } }","title":"AppDelegate.swift"},{"location":"1.uikit/051_uitableview/#uiviewcontrollerswift","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 // // ViewController.swift // UIKit051_3.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UITableViewDelegate , UITableViewDataSource { let myItems : NSMutableArray = [ \"TEST1\" , \"TEST2\" , \"TEST3\" ] var myTableView : UITableView ! override func viewDidLoad () { super . viewDidLoad () // \u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30d0\u30fc\u306b\u8868\u793a\u3059\u308b\u30bf\u30a4\u30c8\u30eb. self . title = \"TableView Test\" // \u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30d0\u30fc\u3092\u53d6\u5f97. self . navigationController ?. navigationBar // \u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30d0\u30fc\u3092\u8868\u793a. self . navigationController ?. isNavigationBarHidden = false // \u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30d0\u30fc\u306e\u53f3\u5074\u306b\u7de8\u96c6\u30dc\u30bf\u30f3\u3092\u8ffd\u52a0. self . navigationItem . rightBarButtonItem = self . editButtonItem // Status Bar\u306e\u9ad8\u3055\u3092\u53d6\u5f97. let barHeight : CGFloat = UIApplication . shared . statusBarFrame . size . height // View\u306e\u9ad8\u3055\u3068\u5e45\u3092\u53d6\u5f97. let displayWidth : CGFloat = self . view . frame . width let displayHeight : CGFloat = self . view . frame . height // TableView\u306e\u751f\u6210( status bar\u306e\u9ad8\u3055\u5206\u305a\u3089\u3057\u3066\u8868\u793a ). myTableView = UITableView ( frame : CGRect ( x : 0 , y : barHeight , width : displayWidth , height : displayHeight - barHeight )) // Cell\u306e\u767b\u9332. myTableView . register ( UITableViewCell . self , forCellReuseIdentifier : \"MyCell\" ) // DataSource\u306e\u8a2d\u5b9a. myTableView . dataSource = self // Delegate\u3092\u8a2d\u5b9a. myTableView . delegate = self // \u7f6b\u7dda\u3092\u9752\u8272\u306b\u8a2d\u5b9a. myTableView . separatorColor = UIColor . blue // \u7de8\u96c6\u4e2d\u306e\u30bb\u30eb\u9078\u629e\u3092\u8a31\u53ef. myTableView . allowsSelectionDuringEditing = true // TableView\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myTableView ) } /* Cell\u304c\u9078\u629e\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ func tableView ( _ tableView : UITableView , didSelectRowAt indexPath : IndexPath ) { // \u9078\u629e\u4e2d\u306e\u30bb\u30eb\u304c\u4f55\u756a\u76ee\u304b. print ( \"Num: \\( indexPath . row ) \" ) // \u9078\u629e\u4e2d\u306e\u30bb\u30eb\u306evalue. print ( \"Value: \\( myItems [ indexPath . row ] ) \" ) // \u9078\u629e\u4e2d\u306e\u30bb\u30eb\u3092\u7de8\u96c6\u3067\u304d\u308b\u304b. print ( \"Edeintg: \\( tableView . isEditing ) \" ) } /* Cell\u306e\u7dcf\u6570\u3092\u8fd4\u3059 (\u5b9f\u88c5\u5fc5\u9808) */ func tableView ( _ tableView : UITableView , numberOfRowsInSection section : Int ) -> Int { return myItems . count } /* Cell\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b (\u5b9f\u88c5\u5fc5\u9808) */ func tableView ( _ tableView : UITableView , cellForRowAt indexPath : IndexPath ) -> UITableViewCell { let cell = tableView . dequeueReusableCell ( withIdentifier : \"MyCell\" , for : indexPath as IndexPath ) // Cell\u306b\u5024\u3092\u8a2d\u5b9a. cell . textLabel ?. text = \" \\( myItems [ indexPath . row ] ) \" return cell } /* \u7de8\u96c6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b */ override func setEditing ( _ editing : Bool , animated : Bool ) { super . setEditing ( editing , animated : animated ) // TableView\u3092\u7de8\u96c6\u53ef\u80fd\u306b\u3059\u308b myTableView . setEditing ( editing , animated : true ) // \u7de8\u96c6\u4e2d\u306e\u3068\u304d\u306e\u307faddButton\u3092\u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30d0\u30fc\u306e\u5de6\u306b\u8868\u793a\u3059\u308b if editing { print ( \"\u7de8\u96c6\u4e2d\" ) let addButton = UIBarButtonItem ( barButtonSystemItem : UIBarButtonItem . SystemItem . add , target : self , action : #selector ( ViewController . addCell ( sender :))) self . navigationItem . setLeftBarButton ( addButton , animated : true ) } else { print ( \"\u901a\u5e38\u30e2\u30fc\u30c9\" ) self . navigationItem . setLeftBarButton ( nil , animated : true ) } } /* addButton\u304c\u62bc\u3055\u308c\u305f\u969b\u547c\u3073\u51fa\u3055\u308c\u308b */ @objc func addCell ( sender : AnyObject ) { print ( \"\u8ffd\u52a0\" ) // myItems\u306b\u8ffd\u52a0. myItems . add ( \"add Cell\" ) // TableView\u3092\u518d\u8aad\u307f\u8fbc\u307f. myTableView . reloadData () } /* Cell\u3092\u633f\u5165\u307e\u305f\u306f\u524a\u9664\u3057\u3088\u3046\u3068\u3057\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b */ func tableView ( _ tableView : UITableView , commit editingStyle : UITableViewCell . EditingStyle , forRowAt indexPath : IndexPath ) { // \u524a\u9664\u306e\u3068\u304d. if editingStyle == UITableViewCell . EditingStyle . delete { print ( \"\u524a\u9664\" ) // \u6307\u5b9a\u3055\u308c\u305f\u30bb\u30eb\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092myItems\u304b\u3089\u524a\u9664\u3059\u308b. myItems . removeObject ( at : indexPath . row ) // TableView\u3092\u518d\u8aad\u307f\u8fbc\u307f. myTableView . reloadData () } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 // // ViewController.swift // UIKit051_3.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UITableViewDelegate , UITableViewDataSource { let myItems : NSMutableArray = [ \"TEST1\" , \"TEST2\" , \"TEST3\" ] var myTableView : UITableView ! override func viewDidLoad () { super . viewDidLoad () // \u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30d0\u30fc\u306b\u8868\u793a\u3059\u308b\u30bf\u30a4\u30c8\u30eb. self . title = \"TableView Test\" // \u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30d0\u30fc\u3092\u53d6\u5f97. self . navigationController ?. navigationBar // \u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30d0\u30fc\u3092\u8868\u793a. self . navigationController ?. isNavigationBarHidden = false // \u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30d0\u30fc\u306e\u53f3\u5074\u306b\u7de8\u96c6\u30dc\u30bf\u30f3\u3092\u8ffd\u52a0. self . navigationItem . rightBarButtonItem = self . editButtonItem // Status Bar\u306e\u9ad8\u3055\u3092\u53d6\u5f97. let barHeight : CGFloat = UIApplication . shared . statusBarFrame . size . height // View\u306e\u9ad8\u3055\u3068\u5e45\u3092\u53d6\u5f97. let displayWidth : CGFloat = self . view . frame . width let displayHeight : CGFloat = self . view . frame . height // TableView\u306e\u751f\u6210( status bar\u306e\u9ad8\u3055\u5206\u305a\u3089\u3057\u3066\u8868\u793a ). myTableView = UITableView ( frame : CGRect ( x : 0 , y : barHeight , width : displayWidth , height : displayHeight - barHeight )) // Cell\u306e\u767b\u9332. myTableView . register ( UITableViewCell . self , forCellReuseIdentifier : \"MyCell\" ) // DataSource\u306e\u8a2d\u5b9a. myTableView . dataSource = self // Delegate\u3092\u8a2d\u5b9a. myTableView . delegate = self // \u7f6b\u7dda\u3092\u9752\u8272\u306b\u8a2d\u5b9a. myTableView . separatorColor = UIColor . blue // \u7de8\u96c6\u4e2d\u306e\u30bb\u30eb\u9078\u629e\u3092\u8a31\u53ef. myTableView . allowsSelectionDuringEditing = true // TableView\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myTableView ) } /* Cell\u304c\u9078\u629e\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ func tableView ( _ tableView : UITableView , didSelectRowAt indexPath : IndexPath ) { // \u9078\u629e\u4e2d\u306e\u30bb\u30eb\u304c\u4f55\u756a\u76ee\u304b. print ( \"Num: \\( indexPath . row ) \" ) // \u9078\u629e\u4e2d\u306e\u30bb\u30eb\u306evalue. print ( \"Value: \\( myItems [ indexPath . row ] ) \" ) // \u9078\u629e\u4e2d\u306e\u30bb\u30eb\u3092\u7de8\u96c6\u3067\u304d\u308b\u304b. print ( \"Edeintg: \\( tableView . isEditing ) \" ) } /* Cell\u306e\u7dcf\u6570\u3092\u8fd4\u3059 (\u5b9f\u88c5\u5fc5\u9808) */ func tableView ( _ tableView : UITableView , numberOfRowsInSection section : Int ) -> Int { return myItems . count } /* Cell\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b (\u5b9f\u88c5\u5fc5\u9808) */ func tableView ( _ tableView : UITableView , cellForRowAt indexPath : IndexPath ) -> UITableViewCell { let cell = tableView . dequeueReusableCell ( withIdentifier : \"MyCell\" , for : indexPath as IndexPath ) // Cell\u306b\u5024\u3092\u8a2d\u5b9a. cell . textLabel ?. text = \" \\( myItems [ indexPath . row ] ) \" return cell } /* \u7de8\u96c6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b */ override func setEditing ( _ editing : Bool , animated : Bool ) { super . setEditing ( editing , animated : animated ) // TableView\u3092\u7de8\u96c6\u53ef\u80fd\u306b\u3059\u308b myTableView . setEditing ( editing , animated : true ) // \u7de8\u96c6\u4e2d\u306e\u3068\u304d\u306e\u307faddButton\u3092\u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30d0\u30fc\u306e\u5de6\u306b\u8868\u793a\u3059\u308b if editing { print ( \"\u7de8\u96c6\u4e2d\" ) let addButton = UIBarButtonItem ( barButtonSystemItem : UIBarButtonSystemItem . add , target : self , action : #selector ( ViewController . addCell ( sender :))) self . navigationItem . setLeftBarButton ( addButton , animated : true ) } else { print ( \"\u901a\u5e38\u30e2\u30fc\u30c9\" ) self . navigationItem . setLeftBarButton ( nil , animated : true ) } } /* addButton\u304c\u62bc\u3055\u308c\u305f\u969b\u547c\u3073\u51fa\u3055\u308c\u308b */ func addCell ( sender : AnyObject ) { print ( \"\u8ffd\u52a0\" ) // myItems\u306b\u8ffd\u52a0. myItems . add ( \"add Cell\" ) // TableView\u3092\u518d\u8aad\u307f\u8fbc\u307f. myTableView . reloadData () } /* Cell\u3092\u633f\u5165\u307e\u305f\u306f\u524a\u9664\u3057\u3088\u3046\u3068\u3057\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b */ func tableView ( _ tableView : UITableView , commit editingStyle : UITableViewCellEditingStyle , forRowAt indexPath : IndexPath ) { // \u524a\u9664\u306e\u3068\u304d. if editingStyle == UITableViewCellEditingStyle . delete { print ( \"\u524a\u9664\" ) // \u6307\u5b9a\u3055\u308c\u305f\u30bb\u30eb\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092myItems\u304b\u3089\u524a\u9664\u3059\u308b. myItems . removeObject ( at : indexPath . row ) // TableView\u3092\u518d\u8aad\u307f\u8fbc\u307f. myTableView . reloadData () } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 // // ViewController.swift // UIKit051_2.3 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UITableViewDelegate , UITableViewDataSource { let myItems : NSMutableArray = [ \"TEST1\" , \"TEST2\" , \"TEST3\" ] var myTableView : UITableView ! override func viewDidLoad () { super . viewDidLoad () // \u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30d0\u30fc\u306b\u8868\u793a\u3059\u308b\u30bf\u30a4\u30c8\u30eb. self . title = \"TableView Test\" // \u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30d0\u30fc\u3092\u53d6\u5f97. self . navigationController ?. navigationBar // \u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30d0\u30fc\u3092\u8868\u793a. self . navigationController ?. navigationBarHidden = false // \u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30d0\u30fc\u306e\u53f3\u5074\u306b\u7de8\u96c6\u30dc\u30bf\u30f3\u3092\u8ffd\u52a0. self . navigationItem . rightBarButtonItem = self . editButtonItem () // Status Bar\u306e\u9ad8\u3055\u3092\u53d6\u5f97. let barHeight : CGFloat = UIApplication . sharedApplication (). statusBarFrame . size . height // View\u306e\u9ad8\u3055\u3068\u5e45\u3092\u53d6\u5f97. let displayWidth : CGFloat = self . view . frame . width let displayHeight : CGFloat = self . view . frame . height // TableView\u306e\u751f\u6210( status bar\u306e\u9ad8\u3055\u5206\u305a\u3089\u3057\u3066\u8868\u793a ). myTableView = UITableView ( frame : CGRect ( x : 0 , y : barHeight , width : displayWidth , height : displayHeight - barHeight )) // Cell\u306e\u767b\u9332. myTableView . registerClass ( UITableViewCell . self , forCellReuseIdentifier : \"MyCell\" ) // DataSource\u306e\u8a2d\u5b9a. myTableView . dataSource = self // Delegate\u3092\u8a2d\u5b9a. myTableView . delegate = self // \u7f6b\u7dda\u3092\u9752\u8272\u306b\u8a2d\u5b9a. myTableView . separatorColor = UIColor . blueColor () // \u7de8\u96c6\u4e2d\u306e\u30bb\u30eb\u9078\u629e\u3092\u8a31\u53ef. myTableView . allowsSelectionDuringEditing = true // TableView\u3092View\u306b\u8ffd\u52a0\u3059\u308b. self . view . addSubview ( myTableView ) } /* Cell\u304c\u9078\u629e\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ func tableView ( tableView : UITableView , didSelectRowAtIndexPath indexPath : NSIndexPath ) { // \u9078\u629e\u4e2d\u306e\u30bb\u30eb\u304c\u4f55\u756a\u76ee\u304b. print ( \"Num: \\( indexPath . row ) \" ) // \u9078\u629e\u4e2d\u306e\u30bb\u30eb\u306evalue. print ( \"Value: \\( myItems [ indexPath . row ] ) \" ) // \u9078\u629e\u4e2d\u306e\u30bb\u30eb\u3092\u7de8\u96c6\u3067\u304d\u308b\u304b. print ( \"Edeintg: \\( tableView . editing ) \" ) } /* Cell\u306e\u7dcf\u6570\u3092\u8fd4\u3059 (\u5b9f\u88c5\u5fc5\u9808) */ func tableView ( tableView : UITableView , numberOfRowsInSection section : Int ) -> Int { return myItems . count } /* Cell\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b (\u5b9f\u88c5\u5fc5\u9808) */ func tableView ( tableView : UITableView , cellForRowAtIndexPath indexPath : NSIndexPath ) -> UITableViewCell { let cell = tableView . dequeueReusableCellWithIdentifier ( \"MyCell\" , forIndexPath : indexPath ) // Cell\u306b\u5024\u3092\u8a2d\u5b9a. cell . textLabel ?. text = \" \\( myItems [ indexPath . row ] ) \" return cell } /* \u7de8\u96c6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b */ override func setEditing ( editing : Bool , animated : Bool ) { super . setEditing ( editing , animated : animated ) // TableView\u3092\u7de8\u96c6\u53ef\u80fd\u306b\u3059\u308b myTableView . setEditing ( editing , animated : true ) // \u7de8\u96c6\u4e2d\u306e\u3068\u304d\u306e\u307faddButton\u3092\u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30d0\u30fc\u306e\u5de6\u306b\u8868\u793a\u3059\u308b if editing { print ( \"\u7de8\u96c6\u4e2d\" ) let addButton = UIBarButtonItem ( barButtonSystemItem : UIBarButtonSystemItem . Add , target : self , action : #selector ( ViewController . addCell ( _ :))) self . navigationItem . setLeftBarButtonItem ( addButton , animated : true ) } else { print ( \"\u901a\u5e38\u30e2\u30fc\u30c9\" ) self . navigationItem . setLeftBarButtonItem ( nil , animated : true ) } } /* addButton\u304c\u62bc\u3055\u308c\u305f\u969b\u547c\u3073\u51fa\u3055\u308c\u308b */ func addCell ( sender : AnyObject ) { print ( \"\u8ffd\u52a0\" ) // myItems\u306b\u8ffd\u52a0. myItems . addObject ( \"add Cell\" ) // TableView\u3092\u518d\u8aad\u307f\u8fbc\u307f. myTableView . reloadData () } /* Cell\u3092\u633f\u5165\u307e\u305f\u306f\u524a\u9664\u3057\u3088\u3046\u3068\u3057\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b */ func tableView ( tableView : UITableView , commitEditingStyle editingStyle : UITableViewCellEditingStyle , forRowAtIndexPath indexPath : NSIndexPath ) { // \u524a\u9664\u306e\u3068\u304d. if editingStyle == UITableViewCellEditingStyle . Delete { print ( \"\u524a\u9664\" ) // \u6307\u5b9a\u3055\u308c\u305f\u30bb\u30eb\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092myItems\u304b\u3089\u524a\u9664\u3059\u308b. myItems . removeObjectAtIndex ( indexPath . row ) // TableView\u3092\u518d\u8aad\u307f\u8fbc\u307f. myTableView . reloadData () } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } }","title":"UIViewController.swift"},{"location":"1.uikit/051_uitableview/#3x4x","text":"func application( application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject : AnyObject]? ) -> Bool\u304c\u3001 func application( application: UIApplication, willFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]? = nil ) -> Bool\u306b\u5909\u66f4 UIBarButtonSystemItem \u304c UIBarButtonItem.SystemItem \u306b\u5909\u66f4 func addCell \u306b @objc \u3092\u8ffd\u52a0 UITableViewCellEditingStyle \u304c UITableViewCell.EditingStyle \u306b\u5909\u66f4","title":"3.x\u30684.x\u306e\u5dee\u5206"},{"location":"1.uikit/051_uitableview/#2330","text":"UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u306e\u5ec3\u6b62) UINavigationController\u306e\u4e00\u90e8\u30d7\u30ed\u30d1\u30c6\u30a3\u540d\u306e\u5909\u66f4(navigationBarHidden->isNavigationBarHidden)","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/051_uitableview/#reference","text":"UITableView Class https://developer.apple.com/reference/uikit/uitableview UITableViewDelegate https://developer.apple.com/reference/uikit/uitableviewdelegate UITableViewDataSource https://developer.apple.com/reference/uikit/uitableviewdatasource","title":"Reference"},{"location":"1.uikit/052_uibezierpath/","text":"UIBezierPath\u3067\u56f3\u5f62\u3092\u63cf\u753b UIViewController.swift Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 // // ViewController.swift // UIKit052_4.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // view\u306e\u80cc\u666f\u8272\u3092\u8a2d\u5b9a. self . view . backgroundColor = UIColor ( red : 0.902 , green : 0.803 , blue : 0.890 , alpha : 1.0 ) // SegmentedController\u3092\u751f\u6210. let mySegcon = UISegmentedControl ( items : [ \"Circle\" , \"Rectangle\" , \"Line\" ]) mySegcon . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height - 50 ) mySegcon . tintColor = UIColor . blue mySegcon . addTarget ( self , action : #selector ( ViewController . changedValue ( sender :)), for : UIControl . Event . valueChanged ) // view\u306bSegmentedController\u3092\u8ffd\u52a0. self . view . addSubview ( mySegcon ) } /* SegmentedController\u306e\u5024\u304c\u5909\u308f\u3063\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ @objc func changedValue ( sender : UISegmentedControl ) { var myDrawView : UIView ! // SegmentedController\u306e\u5024\u306b\u3088\u3063\u3066\u305d\u308c\u305e\u308c\u306e\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210. switch ( sender . selectedSegmentIndex ) { case 0 : myDrawView = drawCircleView ( frame : CGRect ( x : 0 , y : 0 , width : 300 , height : 300 )) case 1 : myDrawView = drawRectangleView ( frame : CGRect ( x : 0 , y : 0 , width : 300 , height : 300 )) case 2 : myDrawView = drawLineView ( frame : CGRect ( x : 0 , y : 0 , width : 300 , height : 300 )) default : print ( \"error\" ) return } // \u63cf\u753b\u7528view\u306e\u4e2d\u5fc3\u3092\u8a2d\u5b9a. myDrawView . center = CGPoint ( x : self . view . frame . width / 2 , y : 170 ) myDrawView . backgroundColor = UIColor . white // \u63cf\u753b\u7528view\u3092view\u306b\u8ffd\u52a0. self . view . addSubview ( myDrawView ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 // // ViewController.swift // UIKit052_3.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // view\u306e\u80cc\u666f\u8272\u3092\u8a2d\u5b9a. self . view . backgroundColor = UIColor ( red : 0.902 , green : 0.803 , blue : 0.890 , alpha : 1.0 ) // SegmentedController\u3092\u751f\u6210. let mySegcon = UISegmentedControl ( items : [ \"Circle\" , \"Rectangle\" , \"Line\" ]) mySegcon . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height - 50 ) mySegcon . tintColor = UIColor . blue mySegcon . addTarget ( self , action : #selector ( ViewController . changedValue ( sender :)), for : UIControlEvents . valueChanged ) // view\u306bSegmentedController\u3092\u8ffd\u52a0. self . view . addSubview ( mySegcon ) } /* SegmentedController\u306e\u5024\u304c\u5909\u308f\u3063\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func changedValue ( sender : UISegmentedControl ) { var myDrawView : UIView ! // SegmentedController\u306e\u5024\u306b\u3088\u3063\u3066\u305d\u308c\u305e\u308c\u306e\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210. switch ( sender . selectedSegmentIndex ) { case 0 : myDrawView = drawCircleView ( frame : CGRect ( x : 0 , y : 0 , width : 300 , height : 300 )) case 1 : myDrawView = drawRectangleView ( frame : CGRect ( x : 0 , y : 0 , width : 300 , height : 300 )) case 2 : myDrawView = drawLineView ( frame : CGRect ( x : 0 , y : 0 , width : 300 , height : 300 )) default : print ( \"error\" ) return } // \u63cf\u753b\u7528view\u306e\u4e2d\u5fc3\u3092\u8a2d\u5b9a. myDrawView . center = CGPoint ( x : self . view . frame . width / 2 , y : 170 ) myDrawView . backgroundColor = UIColor . white // \u63cf\u753b\u7528view\u3092view\u306b\u8ffd\u52a0. self . view . addSubview ( myDrawView ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 // // ViewController.swift // UIKit052_2.3 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // view\u306e\u80cc\u666f\u8272\u3092\u8a2d\u5b9a. self . view . backgroundColor = UIColor ( red : 0.902 , green : 0.803 , blue : 0.890 , alpha : 1.0 ) // SegmentedController\u3092\u751f\u6210. let mySegcon = UISegmentedControl ( items : [ \"Circle\" , \"Rectangle\" , \"Line\" ]) mySegcon . layer . position = CGPointMake ( self . view . frame . width / 2 , self . view . frame . height - 50 ) mySegcon . tintColor = UIColor . blueColor () mySegcon . addTarget ( self , action : #selector ( ViewController . changedValue ( _ :)), forControlEvents : UIControlEvents . ValueChanged ) // view\u306bSegmentedController\u3092\u8ffd\u52a0. self . view . addSubview ( mySegcon ) } /* SegmentedController\u306e\u5024\u304c\u5909\u308f\u3063\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func changedValue ( sender : UISegmentedControl ) { var myDrawView : UIView ! // SegmentedController\u306e\u5024\u306b\u3088\u3063\u3066\u305d\u308c\u305e\u308c\u306e\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210. switch ( sender . selectedSegmentIndex ) { case 0 : myDrawView = drawCircleView ( frame : CGRectMake ( 0 , 0 , 300 , 300 )) case 1 : myDrawView = drawRectangleView ( frame : CGRectMake ( 0 , 0 , 300 , 300 )) case 2 : myDrawView = drawLineView ( frame : CGRectMake ( 0 , 0 , 300 , 300 )) default : print ( \"error\" ) return } // \u63cf\u753b\u7528view\u306e\u4e2d\u5fc3\u3092\u8a2d\u5b9a. myDrawView . center = CGPointMake ( self . view . frame . width / 2 , 170 ) myDrawView . backgroundColor = UIColor . whiteColor () // \u63cf\u753b\u7528view\u3092view\u306b\u8ffd\u52a0. self . view . addSubview ( myDrawView ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } drawCircleView.swift Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 // // drawCircleView.swift // UIKit052_4.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit /* \u76f4\u7dda\u3092\u63cf\u5199\u3059\u308bclass. */ class drawCircleView : UIView { override init ( frame : CGRect ) { super . init ( frame : frame ) } required init ( coder aDecoder : NSCoder ) { fatalError ( \"init(coder:) has not been implemented\" ) } /* \u8868\u793a\u3092\u66f4\u65b0\u3059\u308b\u5fc5\u8981\u304c\u751f\u305a\u308b\u3068\u81ea\u52d5\u7684\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ override func draw ( _ rect : CGRect ) { // view\u306e\u8a2d\u5b9a. self . layer . borderColor = UIColor . brown . cgColor self . layer . borderWidth = 0.5 self . layer . cornerRadius = 10.0 self . layer . masksToBounds = true let circlePoint = CGPoint ( x : 100 , y : 100 ) // \u5186\u306eBezierPath\u3092\u751f\u6210 let myCircle : UIBezierPath = UIBezierPath ( arcCenter : circlePoint , // \u534a\u5f84. radius : 70.0 , // \u521d\u89d2\u5ea6. startAngle : 0.0 , // \u6700\u7d42\u89d2\u5ea6. endAngle : CGFloat ( M_PI * 2 / 4 ), // \u53cd\u6642\u8a08\u56de\u308a. clockwise : false ) // \u7dda\u306e\u8272\u3092\u8d64\u8272\u306b\u8a2d\u5b9a. UIColor . red . setStroke () // \u5857\u308a\u3064\u3076\u3057\u306e\u8272\u3092\u9ec4\u8272\u306b\u8a2d\u5b9a. UIColor . yellow . setFill () // \u7dda\u3067\u9589\u3058\u305f\u5185\u5074\u3092\u5857\u308a\u3064\u3076\u3059. myCircle . fill () // \u7dda\u306e\u592a\u3055\u3092\u8a2d\u5b9a. myCircle . lineWidth = 3.0 // \u63cf\u753b. myCircle . stroke () // \u6955\u5186\u306eBezierPath\u3092\u751f\u6210. let myOval : UIBezierPath = UIBezierPath ( ovalIn : CGRect ( x : 130 , y : 150 , width : 150 , height : 100 )) UIColor . blue . setStroke () UIColor . gray . setFill () myOval . fill () myOval . lineWidth = 2.0 // \u63cf\u753b. myOval . stroke () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 // // drawCircleView.swift // UIKit052_2.3 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit /* \u76f4\u7dda\u3092\u63cf\u5199\u3059\u308bclass. */ class drawCircleView : UIView { override init ( frame : CGRect ) { super . init ( frame : frame ) } required init ( coder aDecoder : NSCoder ) { fatalError ( \"init(coder:) has not been implemented\" ) } /* \u8868\u793a\u3092\u66f4\u65b0\u3059\u308b\u5fc5\u8981\u304c\u751f\u305a\u308b\u3068\u81ea\u52d5\u7684\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ override func drawRect ( rect : CGRect ) { // view\u306e\u8a2d\u5b9a. self . layer . borderColor = UIColor . brownColor (). CGColor self . layer . borderWidth = 0.5 self . layer . cornerRadius = 10.0 self . layer . masksToBounds = true let circlePoint = CGPointMake ( 100 , 100 ) let ovalPoint = CGPointMake ( 200 , 200 ) // \u5186\u306eBezierPath\u3092\u751f\u6210 let myCircle : UIBezierPath = UIBezierPath ( arcCenter : circlePoint , // \u534a\u5f84. radius : 70.0 , // \u521d\u89d2\u5ea6. startAngle : 0.0 , // \u6700\u7d42\u89d2\u5ea6. endAngle : CGFloat ( M_PI * 2 / 4 ), // \u53cd\u6642\u8a08\u56de\u308a. clockwise : false ) // \u7dda\u306e\u8272\u3092\u8d64\u8272\u306b\u8a2d\u5b9a. UIColor . redColor (). setStroke () // \u5857\u308a\u3064\u3076\u3057\u306e\u8272\u3092\u9ec4\u8272\u306b\u8a2d\u5b9a. UIColor . yellowColor (). setFill () // \u7dda\u3067\u9589\u3058\u305f\u5185\u5074\u3092\u5857\u308a\u3064\u3076\u3059. myCircle . fill () // \u7dda\u306e\u592a\u3055\u3092\u8a2d\u5b9a. myCircle . lineWidth = 3.0 // \u63cf\u753b. myCircle . stroke () // \u6955\u5186\u306eBezierPath\u3092\u751f\u6210. let myOval : UIBezierPath = UIBezierPath ( ovalInRect : CGRectMake ( 130 , 150 , 150 , 100 )) UIColor . blueColor (). setStroke () UIColor . grayColor (). setFill () myOval . fill () myOval . lineWidth = 2.0 // \u63cf\u753b. myOval . stroke () } } drawRectangleView.swift Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 // // drawRectangleView.swift // UIKit052_4.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit /* \u76f4\u7dda\u3092\u63cf\u5199\u3059\u308bclass. */ class drawRectangleView : UIView { override init ( frame : CGRect ) { super . init ( frame : frame ) } required init ( coder aDecoder : NSCoder ) { fatalError ( \"init(coder:) has not been implemented\" ) } /* \u8868\u793a\u3092\u66f4\u65b0\u3059\u308b\u5fc5\u8981\u304c\u751f\u305a\u308b\u3068\u81ea\u52d5\u7684\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ override func draw ( _ rect : CGRect ) { // view\u306e\u8a2d\u5b9a. self . layer . borderColor = UIColor . brown . cgColor self . layer . borderWidth = 0.5 self . layer . cornerRadius = 10.0 self . layer . masksToBounds = true // \u9577\u65b9\u5f62\u306eUIBezierPath\u3092\u751f\u6210. let myRect1 : UIBezierPath = UIBezierPath ( rect : CGRect ( x : 5 , y : 5 , width : 290 , height : 290 )) // \u7dda\u306e\u8272\u3092\u9752\u8272\u306b\u8a2d\u5b9a. UIColor . blue . setStroke () // \u7dda\u306e\u592a\u3055\u3092\u8a2d\u5b9a. myRect1 . lineWidth = 1.0 // \u63cf\u753b. myRect1 . stroke () // \u89d2\u4e38\u306e\u9577\u65b9\u5f62\u306eUIBezierPath\u3092\u751f\u6210. let myRect2 : UIBezierPath = UIBezierPath ( roundedRect : CGRect ( x : 50 , y : 50 , width : 200 , height : 100 ), // \u5168\u3066\u306e\u89d2\u3092\u4e38\u304f\u3059\u308b. byRoundingCorners : UIRectCorner . allCorners , // \u4e38\u304f\u3059\u308b\u5ea6\u3092\u8a2d\u5b9a. cornerRadii : CGSize ( width : 5.0 , height : 5.0 )) // \u7dda\u306e\u8272\u3092\u30aa\u30ec\u30f3\u30b8\u8272\u306b\u8a2d\u5b9a. UIColor . orange . setStroke () // \u5857\u308a\u3064\u3076\u3057\u306e\u8272\u3092\u9ec4\u8272\u306b\u8a2d\u5b9a. UIColor . yellow . setFill () // \u5857\u308a\u3064\u3076\u3057. myRect2 . fill () // \u7dda\u306e\u592a\u3055\u3092\u8a2d\u5b9a. myRect2 . lineWidth = 3.0 // \u63cf\u753b. myRect2 . stroke () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 // // drawRectangleView.swift // UIKit052_2.3 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit /* \u76f4\u7dda\u3092\u63cf\u5199\u3059\u308bclass. */ class drawRectangleView : UIView { override init ( frame : CGRect ) { super . init ( frame : frame ) } required init ( coder aDecoder : NSCoder ) { fatalError ( \"init(coder:) has not been implemented\" ) } /* \u8868\u793a\u3092\u66f4\u65b0\u3059\u308b\u5fc5\u8981\u304c\u751f\u305a\u308b\u3068\u81ea\u52d5\u7684\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ override func drawRect ( rect : CGRect ) { // view\u306e\u8a2d\u5b9a. self . layer . borderColor = UIColor . brownColor (). CGColor self . layer . borderWidth = 0.5 self . layer . cornerRadius = 10.0 self . layer . masksToBounds = true // \u9577\u65b9\u5f62\u306eUIBezierPath\u3092\u751f\u6210. let myRect1 : UIBezierPath = UIBezierPath ( rect : CGRectMake ( 5 , 5 , 290 , 290 )) // \u7dda\u306e\u8272\u3092\u9752\u8272\u306b\u8a2d\u5b9a. UIColor . blueColor (). setStroke () // \u7dda\u306e\u592a\u3055\u3092\u8a2d\u5b9a. myRect1 . lineWidth = 1.0 // \u63cf\u753b. myRect1 . stroke () // \u89d2\u4e38\u306e\u9577\u65b9\u5f62\u306eUIBezierPath\u3092\u751f\u6210. let myRect2 : UIBezierPath = UIBezierPath ( roundedRect : CGRectMake ( 50 , 50 , 200 , 100 ), // \u5168\u3066\u306e\u89d2\u3092\u4e38\u304f\u3059\u308b. byRoundingCorners : UIRectCorner . AllCorners , // \u4e38\u304f\u3059\u308b\u5ea6\u3092\u8a2d\u5b9a. cornerRadii : CGSizeMake ( 5.0 , 5.0 )) // \u7dda\u306e\u8272\u3092\u30aa\u30ec\u30f3\u30b8\u8272\u306b\u8a2d\u5b9a. UIColor . orangeColor (). setStroke () // \u5857\u308a\u3064\u3076\u3057\u306e\u8272\u3092\u9ec4\u8272\u306b\u8a2d\u5b9a. UIColor . yellowColor (). setFill () // \u5857\u308a\u3064\u3076\u3057. myRect2 . fill () // \u7dda\u306e\u592a\u3055\u3092\u8a2d\u5b9a. myRect2 . lineWidth = 3.0 // \u63cf\u753b. myRect2 . stroke () } } drawLineView.swift Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 // // drawLineView.swift // UIKit052_4.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit /* \u76f4\u7dda\u3092\u63cf\u5199\u3059\u308bclass. */ class drawLineView : UIView { override init ( frame : CGRect ) { super . init ( frame : frame ) } required init ( coder aDecoder : NSCoder ) { fatalError ( \"init(coder:) has not been implemented\" ) } /* \u8868\u793a\u3092\u66f4\u65b0\u3059\u308b\u5fc5\u8981\u304c\u751f\u305a\u308b\u3068\u81ea\u52d5\u7684\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ override func draw ( _ rect : CGRect ) { // view\u306e\u8a2d\u5b9a. self . layer . borderColor = UIColor . brown . cgColor self . layer . borderWidth = 0.5 self . layer . cornerRadius = 10.0 self . layer . masksToBounds = true // BezierPath\u3092\u751f\u6210. let myLine : UIBezierPath = UIBezierPath () // \u7dda\u306e\u8272\u3092\u9752\u8272\u306b\u8a2d\u5b9a. UIColor . red . setStroke () // \u59cb\u70b9\u3092\u8a2d\u5b9a. myLine . move ( to : CGPoint . zero ) // \u6b21\u70b9\u3092\u8a2d\u5b9a. myLine . addLine ( to : CGPoint ( x : 50 , y : 150 )) myLine . addLine ( to : CGPoint ( x : 200 , y : 100 )) // \u7d42\u70b9\u3092\u8a2d\u5b9a. myLine . addLine ( to : CGPoint ( x : self . bounds . width , y : self . bounds . height )) // \u59cb\u70b9\u3068\u7d42\u7740\u70b9\u3092\u7e4b\u3044\u3067\u9589\u3058\u308b. myLine . close () // \u5857\u308a\u3064\u3076\u3057\u306e\u8272\u3092\u8a2d\u5b9a. UIColor . yellow . setFill () // \u7dda\u3067\u9589\u3058\u305f\u5185\u5074\u3092\u5857\u308a\u3064\u3076\u3059. myLine . fill () // \u7dda\u306e\u592a\u3055\u3092\u8a2d\u5b9a. myLine . lineWidth = 3.0 // \u63cf\u753b. myLine . stroke () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 // // drawLineView.swift // UIKit052_2.3 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit /* \u76f4\u7dda\u3092\u63cf\u5199\u3059\u308bclass. */ class drawLineView : UIView { override init ( frame : CGRect ) { super . init ( frame : frame ) } required init ( coder aDecoder : NSCoder ) { fatalError ( \"init(coder:) has not been implemented\" ) } /* \u8868\u793a\u3092\u66f4\u65b0\u3059\u308b\u5fc5\u8981\u304c\u751f\u305a\u308b\u3068\u81ea\u52d5\u7684\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ override func drawRect ( rect : CGRect ) { // view\u306e\u8a2d\u5b9a. self . layer . borderColor = UIColor . brownColor (). CGColor self . layer . borderWidth = 0.5 self . layer . cornerRadius = 10.0 self . layer . masksToBounds = true // BezierPath\u3092\u751f\u6210. let myLine : UIBezierPath = UIBezierPath () // \u7dda\u306e\u8272\u3092\u9752\u8272\u306b\u8a2d\u5b9a. UIColor . redColor (). setStroke () // \u59cb\u70b9\u3092\u8a2d\u5b9a. myLine . moveToPoint ( CGPointZero ) // \u6b21\u70b9\u3092\u8a2d\u5b9a. myLine . addLineToPoint ( CGPointMake ( 50 , 150 )) myLine . addLineToPoint ( CGPointMake ( 200 , 100 )) // \u7d42\u70b9\u3092\u8a2d\u5b9a. myLine . addLineToPoint ( CGPointMake ( self . bounds . width , self . bounds . height )) // \u59cb\u70b9\u3068\u7d42\u7740\u70b9\u3092\u7e4b\u3044\u3067\u9589\u3058\u308b. myLine . closePath () // \u5857\u308a\u3064\u3076\u3057\u306e\u8272\u3092\u8a2d\u5b9a. UIColor . yellowColor (). setFill () // \u7dda\u3067\u9589\u3058\u305f\u5185\u5074\u3092\u5857\u308a\u3064\u3076\u3059. myLine . fill () // \u7dda\u306e\u592a\u3055\u3092\u8a2d\u5b9a. myLine . lineWidth = 3.0 // \u63cf\u753b. myLine . stroke () } } 3.x\u30684.x\u306e\u5dee\u5206 UIControlEvents \u304c UIControl.Event \u306b\u5909\u66f4 func changedValue \u306b @objc \u3092\u8ffd\u52a0 2.3\u30683.0\u306e\u5dee\u5206 UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u306e\u5ec3\u6b62) drawRect(rect: CGRect) \u304c draw(_ rect: CGRect) \u306b\u5909\u66f4 UIBezierPath(ovalInRect:) \u304c UIBezierPath(ovalIn:) \u306b\u5909\u66f4 Reference UIBezierPath Class https://developer.apple.com/reference/uikit/uibezierpath","title":"UIBezierPath\u3067\u56f3\u5f62\u3092\u63cf\u753b"},{"location":"1.uikit/052_uibezierpath/#uibezierpath","text":"","title":"UIBezierPath\u3067\u56f3\u5f62\u3092\u63cf\u753b"},{"location":"1.uikit/052_uibezierpath/#uiviewcontrollerswift","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 // // ViewController.swift // UIKit052_4.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // view\u306e\u80cc\u666f\u8272\u3092\u8a2d\u5b9a. self . view . backgroundColor = UIColor ( red : 0.902 , green : 0.803 , blue : 0.890 , alpha : 1.0 ) // SegmentedController\u3092\u751f\u6210. let mySegcon = UISegmentedControl ( items : [ \"Circle\" , \"Rectangle\" , \"Line\" ]) mySegcon . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height - 50 ) mySegcon . tintColor = UIColor . blue mySegcon . addTarget ( self , action : #selector ( ViewController . changedValue ( sender :)), for : UIControl . Event . valueChanged ) // view\u306bSegmentedController\u3092\u8ffd\u52a0. self . view . addSubview ( mySegcon ) } /* SegmentedController\u306e\u5024\u304c\u5909\u308f\u3063\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ @objc func changedValue ( sender : UISegmentedControl ) { var myDrawView : UIView ! // SegmentedController\u306e\u5024\u306b\u3088\u3063\u3066\u305d\u308c\u305e\u308c\u306e\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210. switch ( sender . selectedSegmentIndex ) { case 0 : myDrawView = drawCircleView ( frame : CGRect ( x : 0 , y : 0 , width : 300 , height : 300 )) case 1 : myDrawView = drawRectangleView ( frame : CGRect ( x : 0 , y : 0 , width : 300 , height : 300 )) case 2 : myDrawView = drawLineView ( frame : CGRect ( x : 0 , y : 0 , width : 300 , height : 300 )) default : print ( \"error\" ) return } // \u63cf\u753b\u7528view\u306e\u4e2d\u5fc3\u3092\u8a2d\u5b9a. myDrawView . center = CGPoint ( x : self . view . frame . width / 2 , y : 170 ) myDrawView . backgroundColor = UIColor . white // \u63cf\u753b\u7528view\u3092view\u306b\u8ffd\u52a0. self . view . addSubview ( myDrawView ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 // // ViewController.swift // UIKit052_3.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // view\u306e\u80cc\u666f\u8272\u3092\u8a2d\u5b9a. self . view . backgroundColor = UIColor ( red : 0.902 , green : 0.803 , blue : 0.890 , alpha : 1.0 ) // SegmentedController\u3092\u751f\u6210. let mySegcon = UISegmentedControl ( items : [ \"Circle\" , \"Rectangle\" , \"Line\" ]) mySegcon . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height - 50 ) mySegcon . tintColor = UIColor . blue mySegcon . addTarget ( self , action : #selector ( ViewController . changedValue ( sender :)), for : UIControlEvents . valueChanged ) // view\u306bSegmentedController\u3092\u8ffd\u52a0. self . view . addSubview ( mySegcon ) } /* SegmentedController\u306e\u5024\u304c\u5909\u308f\u3063\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func changedValue ( sender : UISegmentedControl ) { var myDrawView : UIView ! // SegmentedController\u306e\u5024\u306b\u3088\u3063\u3066\u305d\u308c\u305e\u308c\u306e\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210. switch ( sender . selectedSegmentIndex ) { case 0 : myDrawView = drawCircleView ( frame : CGRect ( x : 0 , y : 0 , width : 300 , height : 300 )) case 1 : myDrawView = drawRectangleView ( frame : CGRect ( x : 0 , y : 0 , width : 300 , height : 300 )) case 2 : myDrawView = drawLineView ( frame : CGRect ( x : 0 , y : 0 , width : 300 , height : 300 )) default : print ( \"error\" ) return } // \u63cf\u753b\u7528view\u306e\u4e2d\u5fc3\u3092\u8a2d\u5b9a. myDrawView . center = CGPoint ( x : self . view . frame . width / 2 , y : 170 ) myDrawView . backgroundColor = UIColor . white // \u63cf\u753b\u7528view\u3092view\u306b\u8ffd\u52a0. self . view . addSubview ( myDrawView ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 // // ViewController.swift // UIKit052_2.3 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // view\u306e\u80cc\u666f\u8272\u3092\u8a2d\u5b9a. self . view . backgroundColor = UIColor ( red : 0.902 , green : 0.803 , blue : 0.890 , alpha : 1.0 ) // SegmentedController\u3092\u751f\u6210. let mySegcon = UISegmentedControl ( items : [ \"Circle\" , \"Rectangle\" , \"Line\" ]) mySegcon . layer . position = CGPointMake ( self . view . frame . width / 2 , self . view . frame . height - 50 ) mySegcon . tintColor = UIColor . blueColor () mySegcon . addTarget ( self , action : #selector ( ViewController . changedValue ( _ :)), forControlEvents : UIControlEvents . ValueChanged ) // view\u306bSegmentedController\u3092\u8ffd\u52a0. self . view . addSubview ( mySegcon ) } /* SegmentedController\u306e\u5024\u304c\u5909\u308f\u3063\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func changedValue ( sender : UISegmentedControl ) { var myDrawView : UIView ! // SegmentedController\u306e\u5024\u306b\u3088\u3063\u3066\u305d\u308c\u305e\u308c\u306e\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210. switch ( sender . selectedSegmentIndex ) { case 0 : myDrawView = drawCircleView ( frame : CGRectMake ( 0 , 0 , 300 , 300 )) case 1 : myDrawView = drawRectangleView ( frame : CGRectMake ( 0 , 0 , 300 , 300 )) case 2 : myDrawView = drawLineView ( frame : CGRectMake ( 0 , 0 , 300 , 300 )) default : print ( \"error\" ) return } // \u63cf\u753b\u7528view\u306e\u4e2d\u5fc3\u3092\u8a2d\u5b9a. myDrawView . center = CGPointMake ( self . view . frame . width / 2 , 170 ) myDrawView . backgroundColor = UIColor . whiteColor () // \u63cf\u753b\u7528view\u3092view\u306b\u8ffd\u52a0. self . view . addSubview ( myDrawView ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } }","title":"UIViewController.swift"},{"location":"1.uikit/052_uibezierpath/#drawcircleviewswift","text":"Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 // // drawCircleView.swift // UIKit052_4.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit /* \u76f4\u7dda\u3092\u63cf\u5199\u3059\u308bclass. */ class drawCircleView : UIView { override init ( frame : CGRect ) { super . init ( frame : frame ) } required init ( coder aDecoder : NSCoder ) { fatalError ( \"init(coder:) has not been implemented\" ) } /* \u8868\u793a\u3092\u66f4\u65b0\u3059\u308b\u5fc5\u8981\u304c\u751f\u305a\u308b\u3068\u81ea\u52d5\u7684\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ override func draw ( _ rect : CGRect ) { // view\u306e\u8a2d\u5b9a. self . layer . borderColor = UIColor . brown . cgColor self . layer . borderWidth = 0.5 self . layer . cornerRadius = 10.0 self . layer . masksToBounds = true let circlePoint = CGPoint ( x : 100 , y : 100 ) // \u5186\u306eBezierPath\u3092\u751f\u6210 let myCircle : UIBezierPath = UIBezierPath ( arcCenter : circlePoint , // \u534a\u5f84. radius : 70.0 , // \u521d\u89d2\u5ea6. startAngle : 0.0 , // \u6700\u7d42\u89d2\u5ea6. endAngle : CGFloat ( M_PI * 2 / 4 ), // \u53cd\u6642\u8a08\u56de\u308a. clockwise : false ) // \u7dda\u306e\u8272\u3092\u8d64\u8272\u306b\u8a2d\u5b9a. UIColor . red . setStroke () // \u5857\u308a\u3064\u3076\u3057\u306e\u8272\u3092\u9ec4\u8272\u306b\u8a2d\u5b9a. UIColor . yellow . setFill () // \u7dda\u3067\u9589\u3058\u305f\u5185\u5074\u3092\u5857\u308a\u3064\u3076\u3059. myCircle . fill () // \u7dda\u306e\u592a\u3055\u3092\u8a2d\u5b9a. myCircle . lineWidth = 3.0 // \u63cf\u753b. myCircle . stroke () // \u6955\u5186\u306eBezierPath\u3092\u751f\u6210. let myOval : UIBezierPath = UIBezierPath ( ovalIn : CGRect ( x : 130 , y : 150 , width : 150 , height : 100 )) UIColor . blue . setStroke () UIColor . gray . setFill () myOval . fill () myOval . lineWidth = 2.0 // \u63cf\u753b. myOval . stroke () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 // // drawCircleView.swift // UIKit052_2.3 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit /* \u76f4\u7dda\u3092\u63cf\u5199\u3059\u308bclass. */ class drawCircleView : UIView { override init ( frame : CGRect ) { super . init ( frame : frame ) } required init ( coder aDecoder : NSCoder ) { fatalError ( \"init(coder:) has not been implemented\" ) } /* \u8868\u793a\u3092\u66f4\u65b0\u3059\u308b\u5fc5\u8981\u304c\u751f\u305a\u308b\u3068\u81ea\u52d5\u7684\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ override func drawRect ( rect : CGRect ) { // view\u306e\u8a2d\u5b9a. self . layer . borderColor = UIColor . brownColor (). CGColor self . layer . borderWidth = 0.5 self . layer . cornerRadius = 10.0 self . layer . masksToBounds = true let circlePoint = CGPointMake ( 100 , 100 ) let ovalPoint = CGPointMake ( 200 , 200 ) // \u5186\u306eBezierPath\u3092\u751f\u6210 let myCircle : UIBezierPath = UIBezierPath ( arcCenter : circlePoint , // \u534a\u5f84. radius : 70.0 , // \u521d\u89d2\u5ea6. startAngle : 0.0 , // \u6700\u7d42\u89d2\u5ea6. endAngle : CGFloat ( M_PI * 2 / 4 ), // \u53cd\u6642\u8a08\u56de\u308a. clockwise : false ) // \u7dda\u306e\u8272\u3092\u8d64\u8272\u306b\u8a2d\u5b9a. UIColor . redColor (). setStroke () // \u5857\u308a\u3064\u3076\u3057\u306e\u8272\u3092\u9ec4\u8272\u306b\u8a2d\u5b9a. UIColor . yellowColor (). setFill () // \u7dda\u3067\u9589\u3058\u305f\u5185\u5074\u3092\u5857\u308a\u3064\u3076\u3059. myCircle . fill () // \u7dda\u306e\u592a\u3055\u3092\u8a2d\u5b9a. myCircle . lineWidth = 3.0 // \u63cf\u753b. myCircle . stroke () // \u6955\u5186\u306eBezierPath\u3092\u751f\u6210. let myOval : UIBezierPath = UIBezierPath ( ovalInRect : CGRectMake ( 130 , 150 , 150 , 100 )) UIColor . blueColor (). setStroke () UIColor . grayColor (). setFill () myOval . fill () myOval . lineWidth = 2.0 // \u63cf\u753b. myOval . stroke () } }","title":"drawCircleView.swift"},{"location":"1.uikit/052_uibezierpath/#drawrectangleviewswift","text":"Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 // // drawRectangleView.swift // UIKit052_4.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit /* \u76f4\u7dda\u3092\u63cf\u5199\u3059\u308bclass. */ class drawRectangleView : UIView { override init ( frame : CGRect ) { super . init ( frame : frame ) } required init ( coder aDecoder : NSCoder ) { fatalError ( \"init(coder:) has not been implemented\" ) } /* \u8868\u793a\u3092\u66f4\u65b0\u3059\u308b\u5fc5\u8981\u304c\u751f\u305a\u308b\u3068\u81ea\u52d5\u7684\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ override func draw ( _ rect : CGRect ) { // view\u306e\u8a2d\u5b9a. self . layer . borderColor = UIColor . brown . cgColor self . layer . borderWidth = 0.5 self . layer . cornerRadius = 10.0 self . layer . masksToBounds = true // \u9577\u65b9\u5f62\u306eUIBezierPath\u3092\u751f\u6210. let myRect1 : UIBezierPath = UIBezierPath ( rect : CGRect ( x : 5 , y : 5 , width : 290 , height : 290 )) // \u7dda\u306e\u8272\u3092\u9752\u8272\u306b\u8a2d\u5b9a. UIColor . blue . setStroke () // \u7dda\u306e\u592a\u3055\u3092\u8a2d\u5b9a. myRect1 . lineWidth = 1.0 // \u63cf\u753b. myRect1 . stroke () // \u89d2\u4e38\u306e\u9577\u65b9\u5f62\u306eUIBezierPath\u3092\u751f\u6210. let myRect2 : UIBezierPath = UIBezierPath ( roundedRect : CGRect ( x : 50 , y : 50 , width : 200 , height : 100 ), // \u5168\u3066\u306e\u89d2\u3092\u4e38\u304f\u3059\u308b. byRoundingCorners : UIRectCorner . allCorners , // \u4e38\u304f\u3059\u308b\u5ea6\u3092\u8a2d\u5b9a. cornerRadii : CGSize ( width : 5.0 , height : 5.0 )) // \u7dda\u306e\u8272\u3092\u30aa\u30ec\u30f3\u30b8\u8272\u306b\u8a2d\u5b9a. UIColor . orange . setStroke () // \u5857\u308a\u3064\u3076\u3057\u306e\u8272\u3092\u9ec4\u8272\u306b\u8a2d\u5b9a. UIColor . yellow . setFill () // \u5857\u308a\u3064\u3076\u3057. myRect2 . fill () // \u7dda\u306e\u592a\u3055\u3092\u8a2d\u5b9a. myRect2 . lineWidth = 3.0 // \u63cf\u753b. myRect2 . stroke () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 // // drawRectangleView.swift // UIKit052_2.3 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit /* \u76f4\u7dda\u3092\u63cf\u5199\u3059\u308bclass. */ class drawRectangleView : UIView { override init ( frame : CGRect ) { super . init ( frame : frame ) } required init ( coder aDecoder : NSCoder ) { fatalError ( \"init(coder:) has not been implemented\" ) } /* \u8868\u793a\u3092\u66f4\u65b0\u3059\u308b\u5fc5\u8981\u304c\u751f\u305a\u308b\u3068\u81ea\u52d5\u7684\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ override func drawRect ( rect : CGRect ) { // view\u306e\u8a2d\u5b9a. self . layer . borderColor = UIColor . brownColor (). CGColor self . layer . borderWidth = 0.5 self . layer . cornerRadius = 10.0 self . layer . masksToBounds = true // \u9577\u65b9\u5f62\u306eUIBezierPath\u3092\u751f\u6210. let myRect1 : UIBezierPath = UIBezierPath ( rect : CGRectMake ( 5 , 5 , 290 , 290 )) // \u7dda\u306e\u8272\u3092\u9752\u8272\u306b\u8a2d\u5b9a. UIColor . blueColor (). setStroke () // \u7dda\u306e\u592a\u3055\u3092\u8a2d\u5b9a. myRect1 . lineWidth = 1.0 // \u63cf\u753b. myRect1 . stroke () // \u89d2\u4e38\u306e\u9577\u65b9\u5f62\u306eUIBezierPath\u3092\u751f\u6210. let myRect2 : UIBezierPath = UIBezierPath ( roundedRect : CGRectMake ( 50 , 50 , 200 , 100 ), // \u5168\u3066\u306e\u89d2\u3092\u4e38\u304f\u3059\u308b. byRoundingCorners : UIRectCorner . AllCorners , // \u4e38\u304f\u3059\u308b\u5ea6\u3092\u8a2d\u5b9a. cornerRadii : CGSizeMake ( 5.0 , 5.0 )) // \u7dda\u306e\u8272\u3092\u30aa\u30ec\u30f3\u30b8\u8272\u306b\u8a2d\u5b9a. UIColor . orangeColor (). setStroke () // \u5857\u308a\u3064\u3076\u3057\u306e\u8272\u3092\u9ec4\u8272\u306b\u8a2d\u5b9a. UIColor . yellowColor (). setFill () // \u5857\u308a\u3064\u3076\u3057. myRect2 . fill () // \u7dda\u306e\u592a\u3055\u3092\u8a2d\u5b9a. myRect2 . lineWidth = 3.0 // \u63cf\u753b. myRect2 . stroke () } }","title":"drawRectangleView.swift"},{"location":"1.uikit/052_uibezierpath/#drawlineviewswift","text":"Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 // // drawLineView.swift // UIKit052_4.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit /* \u76f4\u7dda\u3092\u63cf\u5199\u3059\u308bclass. */ class drawLineView : UIView { override init ( frame : CGRect ) { super . init ( frame : frame ) } required init ( coder aDecoder : NSCoder ) { fatalError ( \"init(coder:) has not been implemented\" ) } /* \u8868\u793a\u3092\u66f4\u65b0\u3059\u308b\u5fc5\u8981\u304c\u751f\u305a\u308b\u3068\u81ea\u52d5\u7684\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ override func draw ( _ rect : CGRect ) { // view\u306e\u8a2d\u5b9a. self . layer . borderColor = UIColor . brown . cgColor self . layer . borderWidth = 0.5 self . layer . cornerRadius = 10.0 self . layer . masksToBounds = true // BezierPath\u3092\u751f\u6210. let myLine : UIBezierPath = UIBezierPath () // \u7dda\u306e\u8272\u3092\u9752\u8272\u306b\u8a2d\u5b9a. UIColor . red . setStroke () // \u59cb\u70b9\u3092\u8a2d\u5b9a. myLine . move ( to : CGPoint . zero ) // \u6b21\u70b9\u3092\u8a2d\u5b9a. myLine . addLine ( to : CGPoint ( x : 50 , y : 150 )) myLine . addLine ( to : CGPoint ( x : 200 , y : 100 )) // \u7d42\u70b9\u3092\u8a2d\u5b9a. myLine . addLine ( to : CGPoint ( x : self . bounds . width , y : self . bounds . height )) // \u59cb\u70b9\u3068\u7d42\u7740\u70b9\u3092\u7e4b\u3044\u3067\u9589\u3058\u308b. myLine . close () // \u5857\u308a\u3064\u3076\u3057\u306e\u8272\u3092\u8a2d\u5b9a. UIColor . yellow . setFill () // \u7dda\u3067\u9589\u3058\u305f\u5185\u5074\u3092\u5857\u308a\u3064\u3076\u3059. myLine . fill () // \u7dda\u306e\u592a\u3055\u3092\u8a2d\u5b9a. myLine . lineWidth = 3.0 // \u63cf\u753b. myLine . stroke () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 // // drawLineView.swift // UIKit052_2.3 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit /* \u76f4\u7dda\u3092\u63cf\u5199\u3059\u308bclass. */ class drawLineView : UIView { override init ( frame : CGRect ) { super . init ( frame : frame ) } required init ( coder aDecoder : NSCoder ) { fatalError ( \"init(coder:) has not been implemented\" ) } /* \u8868\u793a\u3092\u66f4\u65b0\u3059\u308b\u5fc5\u8981\u304c\u751f\u305a\u308b\u3068\u81ea\u52d5\u7684\u306b\u547c\u3073\u51fa\u3055\u308c\u308b. */ override func drawRect ( rect : CGRect ) { // view\u306e\u8a2d\u5b9a. self . layer . borderColor = UIColor . brownColor (). CGColor self . layer . borderWidth = 0.5 self . layer . cornerRadius = 10.0 self . layer . masksToBounds = true // BezierPath\u3092\u751f\u6210. let myLine : UIBezierPath = UIBezierPath () // \u7dda\u306e\u8272\u3092\u9752\u8272\u306b\u8a2d\u5b9a. UIColor . redColor (). setStroke () // \u59cb\u70b9\u3092\u8a2d\u5b9a. myLine . moveToPoint ( CGPointZero ) // \u6b21\u70b9\u3092\u8a2d\u5b9a. myLine . addLineToPoint ( CGPointMake ( 50 , 150 )) myLine . addLineToPoint ( CGPointMake ( 200 , 100 )) // \u7d42\u70b9\u3092\u8a2d\u5b9a. myLine . addLineToPoint ( CGPointMake ( self . bounds . width , self . bounds . height )) // \u59cb\u70b9\u3068\u7d42\u7740\u70b9\u3092\u7e4b\u3044\u3067\u9589\u3058\u308b. myLine . closePath () // \u5857\u308a\u3064\u3076\u3057\u306e\u8272\u3092\u8a2d\u5b9a. UIColor . yellowColor (). setFill () // \u7dda\u3067\u9589\u3058\u305f\u5185\u5074\u3092\u5857\u308a\u3064\u3076\u3059. myLine . fill () // \u7dda\u306e\u592a\u3055\u3092\u8a2d\u5b9a. myLine . lineWidth = 3.0 // \u63cf\u753b. myLine . stroke () } }","title":"drawLineView.swift"},{"location":"1.uikit/052_uibezierpath/#3x4x","text":"UIControlEvents \u304c UIControl.Event \u306b\u5909\u66f4 func changedValue \u306b @objc \u3092\u8ffd\u52a0","title":"3.x\u30684.x\u306e\u5dee\u5206"},{"location":"1.uikit/052_uibezierpath/#2330","text":"UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u306e\u5ec3\u6b62) drawRect(rect: CGRect) \u304c draw(_ rect: CGRect) \u306b\u5909\u66f4 UIBezierPath(ovalInRect:) \u304c UIBezierPath(ovalIn:) \u306b\u5909\u66f4","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/052_uibezierpath/#reference","text":"UIBezierPath Class https://developer.apple.com/reference/uikit/uibezierpath","title":"Reference"},{"location":"1.uikit/053_uicollectionview/","text":"UICollectionView\u3092\u4f7f\u3046 Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 // // ViewController.swift // UIKit053_4.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UICollectionViewDelegate , UICollectionViewDataSource { var myCollectionView : UICollectionView ! override func viewDidLoad () { super . viewDidLoad () // CollectionView\u306e\u30ec\u30a4\u30a2\u30a6\u30c8\u3092\u751f\u6210. let layout = UICollectionViewFlowLayout () // Cell\u4e00\u3064\u4e00\u3064\u306e\u5927\u304d\u3055. layout . itemSize = CGSize ( width : 50 , height : 50 ) // Cell\u306e\u30de\u30fc\u30b8\u30f3. layout . sectionInset = UIEdgeInsets ( top : 16 , left : 16 , bottom : 32 , right : 16 ) // \u30bb\u30af\u30b7\u30e7\u30f3\u6bce\u306e\u30d8\u30c3\u30c0\u30fc\u30b5\u30a4\u30ba. layout . headerReferenceSize = CGSize ( width : 100 , height : 30 ) // CollectionView\u3092\u751f\u6210. myCollectionView = UICollectionView ( frame : self . view . frame , collectionViewLayout : layout ) // Cell\u306b\u4f7f\u308f\u308c\u308b\u30af\u30e9\u30b9\u3092\u767b\u9332. myCollectionView . register ( UICollectionViewCell . self , forCellWithReuseIdentifier : \"MyCell\" ) myCollectionView . delegate = self myCollectionView . dataSource = self self . view . addSubview ( myCollectionView ) } /* Cell\u304c\u9078\u629e\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b */ func collectionView ( _ collectionView : UICollectionView , didSelectItemAt indexPath : IndexPath ) { print ( \"Num: \\( indexPath . row ) \" ) print ( \"Value: \\( collectionView ) \" ) } /* Cell\u306e\u7dcf\u6570\u3092\u8fd4\u3059 */ func collectionView ( _ collectionView : UICollectionView , numberOfItemsInSection section : Int ) -> Int { return 100 } /* Cell\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b */ func collectionView ( _ collectionView : UICollectionView , cellForItemAt indexPath : IndexPath ) -> UICollectionViewCell { let cell : UICollectionViewCell = collectionView . dequeueReusableCell ( withReuseIdentifier : \"MyCell\" , for : indexPath as IndexPath ) cell . backgroundColor = UIColor . orange return cell } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 // // ViewController.swift // UIKit053_3.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UICollectionViewDelegate , UICollectionViewDataSource { var myCollectionView : UICollectionView ! override func viewDidLoad () { super . viewDidLoad () // CollectionView\u306e\u30ec\u30a4\u30a2\u30a6\u30c8\u3092\u751f\u6210. let layout = UICollectionViewFlowLayout () // Cell\u4e00\u3064\u4e00\u3064\u306e\u5927\u304d\u3055. layout . itemSize = CGSize ( width : 50 , height : 50 ) // Cell\u306e\u30de\u30fc\u30b8\u30f3. layout . sectionInset = UIEdgeInsetsMake ( 16 , 16 , 32 , 16 ) // \u30bb\u30af\u30b7\u30e7\u30f3\u6bce\u306e\u30d8\u30c3\u30c0\u30fc\u30b5\u30a4\u30ba. layout . headerReferenceSize = CGSize ( width : 100 , height : 30 ) // CollectionView\u3092\u751f\u6210. myCollectionView = UICollectionView ( frame : self . view . frame , collectionViewLayout : layout ) // Cell\u306b\u4f7f\u308f\u308c\u308b\u30af\u30e9\u30b9\u3092\u767b\u9332. myCollectionView . register ( UICollectionViewCell . self , forCellWithReuseIdentifier : \"MyCell\" ) myCollectionView . delegate = self myCollectionView . dataSource = self self . view . addSubview ( myCollectionView ) } /* Cell\u304c\u9078\u629e\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b */ func collectionView ( _ collectionView : UICollectionView , didSelectItemAt indexPath : IndexPath ) { print ( \"Num: \\( indexPath . row ) \" ) print ( \"Value: \\( collectionView ) \" ) } /* Cell\u306e\u7dcf\u6570\u3092\u8fd4\u3059 */ func collectionView ( _ collectionView : UICollectionView , numberOfItemsInSection section : Int ) -> Int { return 100 } /* Cell\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b */ func collectionView ( _ collectionView : UICollectionView , cellForItemAt indexPath : IndexPath ) -> UICollectionViewCell { let cell : UICollectionViewCell = collectionView . dequeueReusableCell ( withReuseIdentifier : \"MyCell\" , for : indexPath as IndexPath ) cell . backgroundColor = UIColor . orange return cell } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 // // ViewController.swift // UIKit053_2.3 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UICollectionViewDelegate , UICollectionViewDataSource { var myCollectionView : UICollectionView ! override func viewDidLoad () { super . viewDidLoad () // CollectionView\u306e\u30ec\u30a4\u30a2\u30a6\u30c8\u3092\u751f\u6210. let layout = UICollectionViewFlowLayout () // Cell\u4e00\u3064\u4e00\u3064\u306e\u5927\u304d\u3055. layout . itemSize = CGSizeMake ( 50 , 50 ) // Cell\u306e\u30de\u30fc\u30b8\u30f3. layout . sectionInset = UIEdgeInsetsMake ( 16 , 16 , 32 , 16 ) // \u30bb\u30af\u30b7\u30e7\u30f3\u6bce\u306e\u30d8\u30c3\u30c0\u30fc\u30b5\u30a4\u30ba. layout . headerReferenceSize = CGSizeMake ( 100 , 30 ) // CollectionView\u3092\u751f\u6210. myCollectionView = UICollectionView ( frame : self . view . frame , collectionViewLayout : layout ) // Cell\u306b\u4f7f\u308f\u308c\u308b\u30af\u30e9\u30b9\u3092\u767b\u9332. myCollectionView . registerClass ( UICollectionViewCell . self , forCellWithReuseIdentifier : \"MyCell\" ) myCollectionView . delegate = self myCollectionView . dataSource = self self . view . addSubview ( myCollectionView ) } /* Cell\u304c\u9078\u629e\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b */ func collectionView ( collectionView : UICollectionView , didSelectItemAtIndexPath indexPath : NSIndexPath ) { print ( \"Num: \\( indexPath . row ) \" ) print ( \"Value: \\( collectionView ) \" ) } /* Cell\u306e\u7dcf\u6570\u3092\u8fd4\u3059 */ func collectionView ( collectionView : UICollectionView , numberOfItemsInSection section : Int ) -> Int { return 100 } /* Cell\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b */ func collectionView ( collectionView : UICollectionView , cellForItemAtIndexPath indexPath : NSIndexPath ) -> UICollectionViewCell { let cell : UICollectionViewCell = collectionView . dequeueReusableCellWithReuseIdentifier ( \"MyCell\" , forIndexPath : indexPath ) cell . backgroundColor = UIColor . orangeColor () return cell } } 3.x\u30682.x\u306e\u5dee\u5206 UIEdgeInsetsMake(16, 16, 32, 16) \u304c UIEdgeInsets(top: 16, left: 16, bottom: 32, right: 16) \u306b\u5909\u66f4 2.3\u30683.0\u306e\u5dee\u5206 UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u306e\u5ec3\u6b62) UICollectionViewDelegate\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u304c\u5909\u66f4 NSIndexPath\u306e\u5ec3\u6b62\u3001IndexPath\u306b\u5909\u66f4. Reference UICollectionViewFlowLayout Class https://developer.apple.com/reference/uikit/uicollectionviewflowlayout UICollectionView Class https://developer.apple.com/reference/uikit/uicollectionview UIEdgeInsetsMake https://developer.apple.com/reference/uikit/1624475-uiedgeinsetsmake?language=objc UICollectionDelegate https://developer.apple.com/reference/uikit/uicollectionviewdelegate UICollectionDataSource https://developer.apple.com/reference/uikit/uicollectionviewdatasource","title":"UICollectionView\u3092\u4f7f\u3046"},{"location":"1.uikit/053_uicollectionview/#uicollectionview","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 // // ViewController.swift // UIKit053_4.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UICollectionViewDelegate , UICollectionViewDataSource { var myCollectionView : UICollectionView ! override func viewDidLoad () { super . viewDidLoad () // CollectionView\u306e\u30ec\u30a4\u30a2\u30a6\u30c8\u3092\u751f\u6210. let layout = UICollectionViewFlowLayout () // Cell\u4e00\u3064\u4e00\u3064\u306e\u5927\u304d\u3055. layout . itemSize = CGSize ( width : 50 , height : 50 ) // Cell\u306e\u30de\u30fc\u30b8\u30f3. layout . sectionInset = UIEdgeInsets ( top : 16 , left : 16 , bottom : 32 , right : 16 ) // \u30bb\u30af\u30b7\u30e7\u30f3\u6bce\u306e\u30d8\u30c3\u30c0\u30fc\u30b5\u30a4\u30ba. layout . headerReferenceSize = CGSize ( width : 100 , height : 30 ) // CollectionView\u3092\u751f\u6210. myCollectionView = UICollectionView ( frame : self . view . frame , collectionViewLayout : layout ) // Cell\u306b\u4f7f\u308f\u308c\u308b\u30af\u30e9\u30b9\u3092\u767b\u9332. myCollectionView . register ( UICollectionViewCell . self , forCellWithReuseIdentifier : \"MyCell\" ) myCollectionView . delegate = self myCollectionView . dataSource = self self . view . addSubview ( myCollectionView ) } /* Cell\u304c\u9078\u629e\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b */ func collectionView ( _ collectionView : UICollectionView , didSelectItemAt indexPath : IndexPath ) { print ( \"Num: \\( indexPath . row ) \" ) print ( \"Value: \\( collectionView ) \" ) } /* Cell\u306e\u7dcf\u6570\u3092\u8fd4\u3059 */ func collectionView ( _ collectionView : UICollectionView , numberOfItemsInSection section : Int ) -> Int { return 100 } /* Cell\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b */ func collectionView ( _ collectionView : UICollectionView , cellForItemAt indexPath : IndexPath ) -> UICollectionViewCell { let cell : UICollectionViewCell = collectionView . dequeueReusableCell ( withReuseIdentifier : \"MyCell\" , for : indexPath as IndexPath ) cell . backgroundColor = UIColor . orange return cell } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 // // ViewController.swift // UIKit053_3.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UICollectionViewDelegate , UICollectionViewDataSource { var myCollectionView : UICollectionView ! override func viewDidLoad () { super . viewDidLoad () // CollectionView\u306e\u30ec\u30a4\u30a2\u30a6\u30c8\u3092\u751f\u6210. let layout = UICollectionViewFlowLayout () // Cell\u4e00\u3064\u4e00\u3064\u306e\u5927\u304d\u3055. layout . itemSize = CGSize ( width : 50 , height : 50 ) // Cell\u306e\u30de\u30fc\u30b8\u30f3. layout . sectionInset = UIEdgeInsetsMake ( 16 , 16 , 32 , 16 ) // \u30bb\u30af\u30b7\u30e7\u30f3\u6bce\u306e\u30d8\u30c3\u30c0\u30fc\u30b5\u30a4\u30ba. layout . headerReferenceSize = CGSize ( width : 100 , height : 30 ) // CollectionView\u3092\u751f\u6210. myCollectionView = UICollectionView ( frame : self . view . frame , collectionViewLayout : layout ) // Cell\u306b\u4f7f\u308f\u308c\u308b\u30af\u30e9\u30b9\u3092\u767b\u9332. myCollectionView . register ( UICollectionViewCell . self , forCellWithReuseIdentifier : \"MyCell\" ) myCollectionView . delegate = self myCollectionView . dataSource = self self . view . addSubview ( myCollectionView ) } /* Cell\u304c\u9078\u629e\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b */ func collectionView ( _ collectionView : UICollectionView , didSelectItemAt indexPath : IndexPath ) { print ( \"Num: \\( indexPath . row ) \" ) print ( \"Value: \\( collectionView ) \" ) } /* Cell\u306e\u7dcf\u6570\u3092\u8fd4\u3059 */ func collectionView ( _ collectionView : UICollectionView , numberOfItemsInSection section : Int ) -> Int { return 100 } /* Cell\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b */ func collectionView ( _ collectionView : UICollectionView , cellForItemAt indexPath : IndexPath ) -> UICollectionViewCell { let cell : UICollectionViewCell = collectionView . dequeueReusableCell ( withReuseIdentifier : \"MyCell\" , for : indexPath as IndexPath ) cell . backgroundColor = UIColor . orange return cell } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 // // ViewController.swift // UIKit053_2.3 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UICollectionViewDelegate , UICollectionViewDataSource { var myCollectionView : UICollectionView ! override func viewDidLoad () { super . viewDidLoad () // CollectionView\u306e\u30ec\u30a4\u30a2\u30a6\u30c8\u3092\u751f\u6210. let layout = UICollectionViewFlowLayout () // Cell\u4e00\u3064\u4e00\u3064\u306e\u5927\u304d\u3055. layout . itemSize = CGSizeMake ( 50 , 50 ) // Cell\u306e\u30de\u30fc\u30b8\u30f3. layout . sectionInset = UIEdgeInsetsMake ( 16 , 16 , 32 , 16 ) // \u30bb\u30af\u30b7\u30e7\u30f3\u6bce\u306e\u30d8\u30c3\u30c0\u30fc\u30b5\u30a4\u30ba. layout . headerReferenceSize = CGSizeMake ( 100 , 30 ) // CollectionView\u3092\u751f\u6210. myCollectionView = UICollectionView ( frame : self . view . frame , collectionViewLayout : layout ) // Cell\u306b\u4f7f\u308f\u308c\u308b\u30af\u30e9\u30b9\u3092\u767b\u9332. myCollectionView . registerClass ( UICollectionViewCell . self , forCellWithReuseIdentifier : \"MyCell\" ) myCollectionView . delegate = self myCollectionView . dataSource = self self . view . addSubview ( myCollectionView ) } /* Cell\u304c\u9078\u629e\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b */ func collectionView ( collectionView : UICollectionView , didSelectItemAtIndexPath indexPath : NSIndexPath ) { print ( \"Num: \\( indexPath . row ) \" ) print ( \"Value: \\( collectionView ) \" ) } /* Cell\u306e\u7dcf\u6570\u3092\u8fd4\u3059 */ func collectionView ( collectionView : UICollectionView , numberOfItemsInSection section : Int ) -> Int { return 100 } /* Cell\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b */ func collectionView ( collectionView : UICollectionView , cellForItemAtIndexPath indexPath : NSIndexPath ) -> UICollectionViewCell { let cell : UICollectionViewCell = collectionView . dequeueReusableCellWithReuseIdentifier ( \"MyCell\" , forIndexPath : indexPath ) cell . backgroundColor = UIColor . orangeColor () return cell } }","title":"UICollectionView\u3092\u4f7f\u3046"},{"location":"1.uikit/053_uicollectionview/#3x2x","text":"UIEdgeInsetsMake(16, 16, 32, 16) \u304c UIEdgeInsets(top: 16, left: 16, bottom: 32, right: 16) \u306b\u5909\u66f4","title":"3.x\u30682.x\u306e\u5dee\u5206"},{"location":"1.uikit/053_uicollectionview/#2330","text":"UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u306e\u5ec3\u6b62) UICollectionViewDelegate\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u304c\u5909\u66f4 NSIndexPath\u306e\u5ec3\u6b62\u3001IndexPath\u306b\u5909\u66f4.","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/053_uicollectionview/#reference","text":"UICollectionViewFlowLayout Class https://developer.apple.com/reference/uikit/uicollectionviewflowlayout UICollectionView Class https://developer.apple.com/reference/uikit/uicollectionview UIEdgeInsetsMake https://developer.apple.com/reference/uikit/1624475-uiedgeinsetsmake?language=objc UICollectionDelegate https://developer.apple.com/reference/uikit/uicollectionviewdelegate UICollectionDataSource https://developer.apple.com/reference/uikit/uicollectionviewdatasource","title":"Reference"},{"location":"1.uikit/054_customuicollectionview/","text":"UICollectionView\u306eCell\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 // // ViewController.swift // UIKit054_4.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UICollectionViewDelegate , UICollectionViewDataSource { var myCollectionView : UICollectionView ! override func viewDidLoad () { super . viewDidLoad () // CollectionView\u306e\u30ec\u30a4\u30a2\u30a6\u30c8\u3092\u751f\u6210. let layout = UICollectionViewFlowLayout () // Cell\u4e00\u3064\u4e00\u3064\u306e\u5927\u304d\u3055. layout . itemSize = CGSize ( width : 50 , height : 50 ) // Cell\u306e\u30de\u30fc\u30b8\u30f3. layout . sectionInset = UIEdgeInsets ( top : 16 , left : 16 , bottom : 32 , right : 16 ) // \u30bb\u30af\u30b7\u30e7\u30f3\u6bce\u306e\u30d8\u30c3\u30c0\u30fc\u30b5\u30a4\u30ba. layout . headerReferenceSize = CGSize ( width : 100 , height : 30 ) // CollectionView\u3092\u751f\u6210. myCollectionView = UICollectionView ( frame : self . view . frame , collectionViewLayout : layout ) // Cell\u306b\u4f7f\u308f\u308c\u308b\u30af\u30e9\u30b9\u3092\u767b\u9332. myCollectionView . register ( CustomUICollectionViewCell . self , forCellWithReuseIdentifier : \"MyCell\" ) myCollectionView . delegate = self myCollectionView . dataSource = self self . view . addSubview ( myCollectionView ) } /* Cell\u304c\u9078\u629e\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b */ func collectionView ( _ collectionView : UICollectionView , didSelectItemAt indexPath : IndexPath ) { print ( \"Num: \\( indexPath . row ) \" ) } /* Cell\u306e\u7dcf\u6570\u3092\u8fd4\u3059 */ func collectionView ( _ collectionView : UICollectionView , numberOfItemsInSection section : Int ) -> Int { return 100 } /* Cell\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b */ func collectionView ( _ collectionView : UICollectionView , cellForItemAt indexPath : IndexPath ) -> UICollectionViewCell { let cell : CustomUICollectionViewCell = collectionView . dequeueReusableCell ( withReuseIdentifier : \"MyCell\" , for : indexPath ) as ! CustomUICollectionViewCell cell . textLabel ?. text = indexPath . row . description return cell } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 // // ViewController.swift // UIKit054_3.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UICollectionViewDelegate , UICollectionViewDataSource { var myCollectionView : UICollectionView ! override func viewDidLoad () { super . viewDidLoad () // CollectionView\u306e\u30ec\u30a4\u30a2\u30a6\u30c8\u3092\u751f\u6210. let layout = UICollectionViewFlowLayout () // Cell\u4e00\u3064\u4e00\u3064\u306e\u5927\u304d\u3055. layout . itemSize = CGSize ( width : 50 , height : 50 ) // Cell\u306e\u30de\u30fc\u30b8\u30f3. layout . sectionInset = UIEdgeInsetsMake ( 16 , 16 , 32 , 16 ) // \u30bb\u30af\u30b7\u30e7\u30f3\u6bce\u306e\u30d8\u30c3\u30c0\u30fc\u30b5\u30a4\u30ba. layout . headerReferenceSize = CGSize ( width : 100 , height : 30 ) // CollectionView\u3092\u751f\u6210. myCollectionView = UICollectionView ( frame : self . view . frame , collectionViewLayout : layout ) // Cell\u306b\u4f7f\u308f\u308c\u308b\u30af\u30e9\u30b9\u3092\u767b\u9332. myCollectionView . register ( CustomUICollectionViewCell . self , forCellWithReuseIdentifier : \"MyCell\" ) myCollectionView . delegate = self myCollectionView . dataSource = self self . view . addSubview ( myCollectionView ) } /* Cell\u304c\u9078\u629e\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b */ func collectionView ( _ collectionView : UICollectionView , didSelectItemAt indexPath : IndexPath ) { print ( \"Num: \\( indexPath . row ) \" ) } /* Cell\u306e\u7dcf\u6570\u3092\u8fd4\u3059 */ func collectionView ( _ collectionView : UICollectionView , numberOfItemsInSection section : Int ) -> Int { return 100 } /* Cell\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b */ func collectionView ( _ collectionView : UICollectionView , cellForItemAt indexPath : IndexPath ) -> UICollectionViewCell { let cell : CustomUICollectionViewCell = collectionView . dequeueReusableCell ( withReuseIdentifier : \"MyCell\" , for : indexPath ) as ! CustomUICollectionViewCell cell . textLabel ?. text = indexPath . row . description return cell } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 // // ViewController.swift // UIKit054_2.3 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UICollectionViewDelegate , UICollectionViewDataSource { var myCollectionView : UICollectionView ! override func viewDidLoad () { super . viewDidLoad () // CollectionView\u306e\u30ec\u30a4\u30a2\u30a6\u30c8\u3092\u751f\u6210. let layout = UICollectionViewFlowLayout () // Cell\u4e00\u3064\u4e00\u3064\u306e\u5927\u304d\u3055. layout . itemSize = CGSizeMake ( 50 , 50 ) // Cell\u306e\u30de\u30fc\u30b8\u30f3. layout . sectionInset = UIEdgeInsetsMake ( 16 , 16 , 32 , 16 ) // \u30bb\u30af\u30b7\u30e7\u30f3\u6bce\u306e\u30d8\u30c3\u30c0\u30fc\u30b5\u30a4\u30ba. layout . headerReferenceSize = CGSizeMake ( 100 , 30 ) // CollectionView\u3092\u751f\u6210. myCollectionView = UICollectionView ( frame : self . view . frame , collectionViewLayout : layout ) // Cell\u306b\u4f7f\u308f\u308c\u308b\u30af\u30e9\u30b9\u3092\u767b\u9332. myCollectionView . registerClass ( CustomUICollectionViewCell . self , forCellWithReuseIdentifier : \"MyCell\" ) myCollectionView . delegate = self myCollectionView . dataSource = self self . view . addSubview ( myCollectionView ) } /* Cell\u304c\u9078\u629e\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b */ func collectionView ( collectionView : UICollectionView , didSelectItemAtIndexPath indexPath : NSIndexPath ) { print ( \"Num: \\( indexPath . row ) \" ) } /* Cell\u306e\u7dcf\u6570\u3092\u8fd4\u3059 */ func collectionView ( collectionView : UICollectionView , numberOfItemsInSection section : Int ) -> Int { return 100 } /* Cell\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b */ func collectionView ( collectionView : UICollectionView , cellForItemAtIndexPath indexPath : NSIndexPath ) -> UICollectionViewCell { let cell : CustomUICollectionViewCell = collectionView . dequeueReusableCellWithReuseIdentifier ( \"MyCell\" , forIndexPath : indexPath ) as ! CustomUICollectionViewCell cell . textLabel ?. text = indexPath . row . description return cell } } CustomUICollectionViewCell.swift Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 // // CustomUICollectionViewCell.swift // UIKit054_4.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class CustomUICollectionViewCell : UICollectionViewCell { var textLabel : UILabel ? required init ( coder aDecoder : NSCoder ) { super . init ( coder : aDecoder ) ! } override init ( frame : CGRect ) { super . init ( frame : frame ) // UILabel\u3092\u751f\u6210. textLabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : frame . width , height : frame . height )) textLabel ?. text = \"nil\" textLabel ?. backgroundColor = UIColor . white textLabel ?. textAlignment = NSTextAlignment . center // Cell\u306b\u8ffd\u52a0. self . contentView . addSubview ( textLabel !) } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 // // CustomUICollectionViewCell.swift // UIKit054_2.3 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class CustomUICollectionViewCell : UICollectionViewCell { var textLabel : UILabel ? required init ( coder aDecoder : NSCoder ) { super . init ( coder : aDecoder ) ! } override init ( frame : CGRect ) { super . init ( frame : frame ) // UILabel\u3092\u751f\u6210. textLabel = UILabel ( frame : CGRectMake ( 0 , 0 , frame . width , frame . height )) textLabel ?. text = \"nil\" textLabel ?. backgroundColor = UIColor . whiteColor () textLabel ?. textAlignment = NSTextAlignment . Center // Cell\u306b\u8ffd\u52a0. self . contentView . addSubview ( textLabel !) } } 3.x\u30684.x\u306e\u5dee\u5206 UIEdgeInsetsMake(16, 16, 32, 16) \u304c UIEdgeInsets(top: 16, left: 16, bottom: 32, right: 16) \u306b\u5909\u66f4 2.3\u30683.0\u306e\u5dee\u5206 UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u306e\u5ec3\u6b62) NSIndexPath\u306e\u5ec3\u6b62\u3001IndexPath\u306b\u5909\u66f4 UICollectionViewDelegate\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u304c\u5909\u66f4 Reference UICollectionViewFlowLayout Class https://developer.apple.com/reference/uikit/uicollectionviewflowlayout UICollectionView Class https://developer.apple.com/reference/uikit/uicollectionview UIEdgeInsetsMake https://developer.apple.com/reference/uikit/1624475-uiedgeinsetsmake?language=objc UICollectionDelegate https://developer.apple.com/reference/uikit/uicollectionviewdelegate UICollectionDataSource https://developer.apple.com/reference/uikit/uicollectionviewdatasource UILabel Class https://developer.apple.com/reference/uikit/uilabel","title":"UICollectionView\u306eCell\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba"},{"location":"1.uikit/054_customuicollectionview/#uicollectionviewcell","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 // // ViewController.swift // UIKit054_4.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UICollectionViewDelegate , UICollectionViewDataSource { var myCollectionView : UICollectionView ! override func viewDidLoad () { super . viewDidLoad () // CollectionView\u306e\u30ec\u30a4\u30a2\u30a6\u30c8\u3092\u751f\u6210. let layout = UICollectionViewFlowLayout () // Cell\u4e00\u3064\u4e00\u3064\u306e\u5927\u304d\u3055. layout . itemSize = CGSize ( width : 50 , height : 50 ) // Cell\u306e\u30de\u30fc\u30b8\u30f3. layout . sectionInset = UIEdgeInsets ( top : 16 , left : 16 , bottom : 32 , right : 16 ) // \u30bb\u30af\u30b7\u30e7\u30f3\u6bce\u306e\u30d8\u30c3\u30c0\u30fc\u30b5\u30a4\u30ba. layout . headerReferenceSize = CGSize ( width : 100 , height : 30 ) // CollectionView\u3092\u751f\u6210. myCollectionView = UICollectionView ( frame : self . view . frame , collectionViewLayout : layout ) // Cell\u306b\u4f7f\u308f\u308c\u308b\u30af\u30e9\u30b9\u3092\u767b\u9332. myCollectionView . register ( CustomUICollectionViewCell . self , forCellWithReuseIdentifier : \"MyCell\" ) myCollectionView . delegate = self myCollectionView . dataSource = self self . view . addSubview ( myCollectionView ) } /* Cell\u304c\u9078\u629e\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b */ func collectionView ( _ collectionView : UICollectionView , didSelectItemAt indexPath : IndexPath ) { print ( \"Num: \\( indexPath . row ) \" ) } /* Cell\u306e\u7dcf\u6570\u3092\u8fd4\u3059 */ func collectionView ( _ collectionView : UICollectionView , numberOfItemsInSection section : Int ) -> Int { return 100 } /* Cell\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b */ func collectionView ( _ collectionView : UICollectionView , cellForItemAt indexPath : IndexPath ) -> UICollectionViewCell { let cell : CustomUICollectionViewCell = collectionView . dequeueReusableCell ( withReuseIdentifier : \"MyCell\" , for : indexPath ) as ! CustomUICollectionViewCell cell . textLabel ?. text = indexPath . row . description return cell } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 // // ViewController.swift // UIKit054_3.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UICollectionViewDelegate , UICollectionViewDataSource { var myCollectionView : UICollectionView ! override func viewDidLoad () { super . viewDidLoad () // CollectionView\u306e\u30ec\u30a4\u30a2\u30a6\u30c8\u3092\u751f\u6210. let layout = UICollectionViewFlowLayout () // Cell\u4e00\u3064\u4e00\u3064\u306e\u5927\u304d\u3055. layout . itemSize = CGSize ( width : 50 , height : 50 ) // Cell\u306e\u30de\u30fc\u30b8\u30f3. layout . sectionInset = UIEdgeInsetsMake ( 16 , 16 , 32 , 16 ) // \u30bb\u30af\u30b7\u30e7\u30f3\u6bce\u306e\u30d8\u30c3\u30c0\u30fc\u30b5\u30a4\u30ba. layout . headerReferenceSize = CGSize ( width : 100 , height : 30 ) // CollectionView\u3092\u751f\u6210. myCollectionView = UICollectionView ( frame : self . view . frame , collectionViewLayout : layout ) // Cell\u306b\u4f7f\u308f\u308c\u308b\u30af\u30e9\u30b9\u3092\u767b\u9332. myCollectionView . register ( CustomUICollectionViewCell . self , forCellWithReuseIdentifier : \"MyCell\" ) myCollectionView . delegate = self myCollectionView . dataSource = self self . view . addSubview ( myCollectionView ) } /* Cell\u304c\u9078\u629e\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b */ func collectionView ( _ collectionView : UICollectionView , didSelectItemAt indexPath : IndexPath ) { print ( \"Num: \\( indexPath . row ) \" ) } /* Cell\u306e\u7dcf\u6570\u3092\u8fd4\u3059 */ func collectionView ( _ collectionView : UICollectionView , numberOfItemsInSection section : Int ) -> Int { return 100 } /* Cell\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b */ func collectionView ( _ collectionView : UICollectionView , cellForItemAt indexPath : IndexPath ) -> UICollectionViewCell { let cell : CustomUICollectionViewCell = collectionView . dequeueReusableCell ( withReuseIdentifier : \"MyCell\" , for : indexPath ) as ! CustomUICollectionViewCell cell . textLabel ?. text = indexPath . row . description return cell } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 // // ViewController.swift // UIKit054_2.3 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UICollectionViewDelegate , UICollectionViewDataSource { var myCollectionView : UICollectionView ! override func viewDidLoad () { super . viewDidLoad () // CollectionView\u306e\u30ec\u30a4\u30a2\u30a6\u30c8\u3092\u751f\u6210. let layout = UICollectionViewFlowLayout () // Cell\u4e00\u3064\u4e00\u3064\u306e\u5927\u304d\u3055. layout . itemSize = CGSizeMake ( 50 , 50 ) // Cell\u306e\u30de\u30fc\u30b8\u30f3. layout . sectionInset = UIEdgeInsetsMake ( 16 , 16 , 32 , 16 ) // \u30bb\u30af\u30b7\u30e7\u30f3\u6bce\u306e\u30d8\u30c3\u30c0\u30fc\u30b5\u30a4\u30ba. layout . headerReferenceSize = CGSizeMake ( 100 , 30 ) // CollectionView\u3092\u751f\u6210. myCollectionView = UICollectionView ( frame : self . view . frame , collectionViewLayout : layout ) // Cell\u306b\u4f7f\u308f\u308c\u308b\u30af\u30e9\u30b9\u3092\u767b\u9332. myCollectionView . registerClass ( CustomUICollectionViewCell . self , forCellWithReuseIdentifier : \"MyCell\" ) myCollectionView . delegate = self myCollectionView . dataSource = self self . view . addSubview ( myCollectionView ) } /* Cell\u304c\u9078\u629e\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b */ func collectionView ( collectionView : UICollectionView , didSelectItemAtIndexPath indexPath : NSIndexPath ) { print ( \"Num: \\( indexPath . row ) \" ) } /* Cell\u306e\u7dcf\u6570\u3092\u8fd4\u3059 */ func collectionView ( collectionView : UICollectionView , numberOfItemsInSection section : Int ) -> Int { return 100 } /* Cell\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b */ func collectionView ( collectionView : UICollectionView , cellForItemAtIndexPath indexPath : NSIndexPath ) -> UICollectionViewCell { let cell : CustomUICollectionViewCell = collectionView . dequeueReusableCellWithReuseIdentifier ( \"MyCell\" , forIndexPath : indexPath ) as ! CustomUICollectionViewCell cell . textLabel ?. text = indexPath . row . description return cell } }","title":"UICollectionView\u306eCell\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba"},{"location":"1.uikit/054_customuicollectionview/#customuicollectionviewcellswift","text":"Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 // // CustomUICollectionViewCell.swift // UIKit054_4.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class CustomUICollectionViewCell : UICollectionViewCell { var textLabel : UILabel ? required init ( coder aDecoder : NSCoder ) { super . init ( coder : aDecoder ) ! } override init ( frame : CGRect ) { super . init ( frame : frame ) // UILabel\u3092\u751f\u6210. textLabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : frame . width , height : frame . height )) textLabel ?. text = \"nil\" textLabel ?. backgroundColor = UIColor . white textLabel ?. textAlignment = NSTextAlignment . center // Cell\u306b\u8ffd\u52a0. self . contentView . addSubview ( textLabel !) } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 // // CustomUICollectionViewCell.swift // UIKit054_2.3 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class CustomUICollectionViewCell : UICollectionViewCell { var textLabel : UILabel ? required init ( coder aDecoder : NSCoder ) { super . init ( coder : aDecoder ) ! } override init ( frame : CGRect ) { super . init ( frame : frame ) // UILabel\u3092\u751f\u6210. textLabel = UILabel ( frame : CGRectMake ( 0 , 0 , frame . width , frame . height )) textLabel ?. text = \"nil\" textLabel ?. backgroundColor = UIColor . whiteColor () textLabel ?. textAlignment = NSTextAlignment . Center // Cell\u306b\u8ffd\u52a0. self . contentView . addSubview ( textLabel !) } }","title":"CustomUICollectionViewCell.swift"},{"location":"1.uikit/054_customuicollectionview/#3x4x","text":"UIEdgeInsetsMake(16, 16, 32, 16) \u304c UIEdgeInsets(top: 16, left: 16, bottom: 32, right: 16) \u306b\u5909\u66f4","title":"3.x\u30684.x\u306e\u5dee\u5206"},{"location":"1.uikit/054_customuicollectionview/#2330","text":"UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u306e\u5ec3\u6b62) NSIndexPath\u306e\u5ec3\u6b62\u3001IndexPath\u306b\u5909\u66f4 UICollectionViewDelegate\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u304c\u5909\u66f4","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/054_customuicollectionview/#reference","text":"UICollectionViewFlowLayout Class https://developer.apple.com/reference/uikit/uicollectionviewflowlayout UICollectionView Class https://developer.apple.com/reference/uikit/uicollectionview UIEdgeInsetsMake https://developer.apple.com/reference/uikit/1624475-uiedgeinsetsmake?language=objc UICollectionDelegate https://developer.apple.com/reference/uikit/uicollectionviewdelegate UICollectionDataSource https://developer.apple.com/reference/uikit/uicollectionviewdatasource UILabel Class https://developer.apple.com/reference/uikit/uilabel","title":"Reference"},{"location":"1.uikit/055_sectionuicollectionview/","text":"UICollectionView\u3092\u30bb\u30af\u30b7\u30e7\u30f3\u6bce\u306b\u5206\u3051\u308b UIViewController.swift Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 // // ViewController.swift // UIKit055_4.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UICollectionViewDelegate , UICollectionViewDataSource { var myCollectionView : UICollectionView ! override func viewDidLoad () { super . viewDidLoad () // CollectionView\u306e\u30ec\u30a4\u30a2\u30a6\u30c8\u3092\u751f\u6210. let layout = UICollectionViewFlowLayout () // Cell\u4e00\u3064\u4e00\u3064\u306e\u5927\u304d\u3055. layout . itemSize = CGSize ( width : 50 , height : 50 ) // Cell\u306e\u30de\u30fc\u30b8\u30f3. layout . sectionInset = UIEdgeInsets ( top : 16 , left : 16 , bottom : 32 , right : 16 ) // \u30bb\u30af\u30b7\u30e7\u30f3\u6bce\u306e\u30d8\u30c3\u30c0\u30fc\u30b5\u30a4\u30ba. layout . headerReferenceSize = CGSize ( width : 100 , height : 50 ) // CollectionView\u3092\u751f\u6210. myCollectionView = UICollectionView ( frame : self . view . frame , collectionViewLayout : layout ) // Cell\u306b\u4f7f\u308f\u308c\u308b\u30af\u30e9\u30b9\u3092\u767b\u9332. myCollectionView . register ( CustomUICollectionViewCell . self , forCellWithReuseIdentifier : \"MyCell\" ) myCollectionView . register ( UICollectionReusableView . self , forSupplementaryViewOfKind : UICollectionView . elementKindSectionHeader , withReuseIdentifier : \"Section\" ) myCollectionView . delegate = self myCollectionView . dataSource = self self . view . addSubview ( myCollectionView ) } /* Section\u306e\u6570 */ internal func numberOfSections ( in collectionView : UICollectionView ) -> Int { return 3 } /* Cell\u304c\u9078\u629e\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b */ func collectionView ( _ collectionView : UICollectionView , didSelectItemAt indexPath : IndexPath ) { print ( \"Num: \\( indexPath . row ) \" ) print ( \"SectionNum: \\( indexPath . section ) \" ) } /* Cell\u306e\u7dcf\u6570\u3092\u8fd4\u3059 */ func collectionView ( _ collectionView : UICollectionView , numberOfItemsInSection section : Int ) -> Int { // Section\u6bce\u306bCell\u306e\u7dcf\u6570\u3092\u5909\u3048\u308b. switch ( section ){ case 0 : return 5 case 1 : return 8 case 2 : return 20 default : print ( \"error\" ) return 0 } } /* Section\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b */ func collectionView ( _ collectionView : UICollectionView , viewForSupplementaryElementOfKind kind : String , at indexPath : IndexPath ) -> UICollectionReusableView { let headerView = collectionView . dequeueReusableSupplementaryView ( ofKind : UICollectionView . elementKindSectionHeader , withReuseIdentifier : \"Section\" , for : indexPath ) headerView . backgroundColor = UIColor . white return headerView } /* Cell\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b */ func collectionView ( _ collectionView : UICollectionView , cellForItemAt indexPath : IndexPath ) -> UICollectionViewCell { let cell : CustomUICollectionViewCell = collectionView . dequeueReusableCell ( withReuseIdentifier : \"MyCell\" , for : indexPath as IndexPath ) as ! CustomUICollectionViewCell // Section\u6bce\u306bCell\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u5909\u3048\u308b. switch ( indexPath . section ){ case 0 : cell . backgroundColor = UIColor . red cell . textLabel ?. text = \"0\" case 1 : cell . backgroundColor = UIColor . green cell . textLabel ?. text = \"1\" case 2 : cell . backgroundColor = UIColor . blue cell . textLabel ?. text = \"2\" default : print ( \"section error\" ) cell . backgroundColor = UIColor . white } return cell } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 // // ViewController.swift // UIKit055_3.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UICollectionViewDelegate , UICollectionViewDataSource { var myCollectionView : UICollectionView ! override func viewDidLoad () { super . viewDidLoad () // CollectionView\u306e\u30ec\u30a4\u30a2\u30a6\u30c8\u3092\u751f\u6210. let layout = UICollectionViewFlowLayout () // Cell\u4e00\u3064\u4e00\u3064\u306e\u5927\u304d\u3055. layout . itemSize = CGSize ( width : 50 , height : 50 ) // Cell\u306e\u30de\u30fc\u30b8\u30f3. layout . sectionInset = UIEdgeInsetsMake ( 16 , 16 , 32 , 16 ) // \u30bb\u30af\u30b7\u30e7\u30f3\u6bce\u306e\u30d8\u30c3\u30c0\u30fc\u30b5\u30a4\u30ba. layout . headerReferenceSize = CGSize ( width : 100 , height : 50 ) // CollectionView\u3092\u751f\u6210. myCollectionView = UICollectionView ( frame : self . view . frame , collectionViewLayout : layout ) // Cell\u306b\u4f7f\u308f\u308c\u308b\u30af\u30e9\u30b9\u3092\u767b\u9332. myCollectionView . register ( CustomUICollectionViewCell . self , forCellWithReuseIdentifier : \"MyCell\" ) myCollectionView . register ( UICollectionReusableView . self , forSupplementaryViewOfKind : UICollectionElementKindSectionHeader , withReuseIdentifier : \"Section\" ) myCollectionView . delegate = self myCollectionView . dataSource = self self . view . addSubview ( myCollectionView ) } /* Section\u306e\u6570 */ internal func numberOfSections ( in collectionView : UICollectionView ) -> Int { return 3 } /* Cell\u304c\u9078\u629e\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b */ func collectionView ( _ collectionView : UICollectionView , didSelectItemAt indexPath : IndexPath ) { print ( \"Num: \\( indexPath . row ) \" ) print ( \"SectionNum: \\( indexPath . section ) \" ) } /* Cell\u306e\u7dcf\u6570\u3092\u8fd4\u3059 */ func collectionView ( _ collectionView : UICollectionView , numberOfItemsInSection section : Int ) -> Int { // Section\u6bce\u306bCell\u306e\u7dcf\u6570\u3092\u5909\u3048\u308b. switch ( section ){ case 0 : return 5 case 1 : return 8 case 2 : return 20 default : print ( \"error\" ) return 0 } } /* Section\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b */ func collectionView ( _ collectionView : UICollectionView , viewForSupplementaryElementOfKind kind : String , at indexPath : IndexPath ) -> UICollectionReusableView { let headerView = collectionView . dequeueReusableSupplementaryView ( ofKind : UICollectionElementKindSectionHeader , withReuseIdentifier : \"Section\" , for : indexPath ) headerView . backgroundColor = UIColor . white return headerView } /* Cell\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b */ func collectionView ( _ collectionView : UICollectionView , cellForItemAt indexPath : IndexPath ) -> UICollectionViewCell { let cell : CustomUICollectionViewCell = collectionView . dequeueReusableCell ( withReuseIdentifier : \"MyCell\" , for : indexPath as IndexPath ) as ! CustomUICollectionViewCell // Section\u6bce\u306bCell\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u5909\u3048\u308b. switch ( indexPath . section ){ case 0 : cell . backgroundColor = UIColor . red cell . textLabel ?. text = \"0\" case 1 : cell . backgroundColor = UIColor . green cell . textLabel ?. text = \"1\" case 2 : cell . backgroundColor = UIColor . blue cell . textLabel ?. text = \"2\" default : print ( \"section error\" ) cell . backgroundColor = UIColor . white } return cell } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 // // ViewController.swift // UIKit055_2.3 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UICollectionViewDelegate , UICollectionViewDataSource { var myCollectionView : UICollectionView ! override func viewDidLoad () { super . viewDidLoad () // CollectionView\u306e\u30ec\u30a4\u30a2\u30a6\u30c8\u3092\u751f\u6210. let layout = UICollectionViewFlowLayout () // Cell\u4e00\u3064\u4e00\u3064\u306e\u5927\u304d\u3055. layout . itemSize = CGSizeMake ( 50 , 50 ) // Cell\u306e\u30de\u30fc\u30b8\u30f3. layout . sectionInset = UIEdgeInsetsMake ( 16 , 16 , 32 , 16 ) // \u30bb\u30af\u30b7\u30e7\u30f3\u6bce\u306e\u30d8\u30c3\u30c0\u30fc\u30b5\u30a4\u30ba. layout . headerReferenceSize = CGSizeMake ( 100 , 50 ) // CollectionView\u3092\u751f\u6210. myCollectionView = UICollectionView ( frame : self . view . frame , collectionViewLayout : layout ) // Cell\u306b\u4f7f\u308f\u308c\u308b\u30af\u30e9\u30b9\u3092\u767b\u9332. myCollectionView . registerClass ( CustomUICollectionViewCell . self , forCellWithReuseIdentifier : \"MyCell\" ) myCollectionView . registerClass ( UICollectionReusableView . self , forSupplementaryViewOfKind : UICollectionElementKindSectionHeader , withReuseIdentifier : \"Section\" ) myCollectionView . delegate = self myCollectionView . dataSource = self self . view . addSubview ( myCollectionView ) } /* Section\u306e\u6570 */ func numberOfSectionsInCollectionView ( collectionView : UICollectionView ) -> Int { return 3 } /* Cell\u304c\u9078\u629e\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b */ func collectionView ( collectionView : UICollectionView , didSelectItemAtIndexPath indexPath : NSIndexPath ) { print ( \"Num: \\( indexPath . row ) \" ) print ( \"SectionNum: \\( indexPath . section ) \" ) } /* Cell\u306e\u7dcf\u6570\u3092\u8fd4\u3059 */ func collectionView ( collectionView : UICollectionView , numberOfItemsInSection section : Int ) -> Int { // Section\u6bce\u306bCell\u306e\u7dcf\u6570\u3092\u5909\u3048\u308b. switch ( section ){ case 0 : return 5 case 1 : return 8 case 2 : return 20 default : print ( \"error\" ) return 0 } } /* Section\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b */ func collectionView ( collectionView : UICollectionView , viewForSupplementaryElementOfKind kind : String , atIndexPath indexPath : NSIndexPath ) -> UICollectionReusableView { let headerView = collectionView . dequeueReusableSupplementaryViewOfKind ( UICollectionElementKindSectionHeader , withReuseIdentifier : \"Section\" , forIndexPath : indexPath ) headerView . backgroundColor = UIColor . whiteColor () return headerView } /* Cell\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b */ func collectionView ( collectionView : UICollectionView , cellForItemAtIndexPath indexPath : NSIndexPath ) -> UICollectionViewCell { let cell : CustomUICollectionViewCell = collectionView . dequeueReusableCellWithReuseIdentifier ( \"MyCell\" , forIndexPath : indexPath ) as ! CustomUICollectionViewCell // Section\u6bce\u306bCell\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u5909\u3048\u308b. switch ( indexPath . section ){ case 0 : cell . backgroundColor = UIColor . redColor () cell . textLabel ?. text = \"0\" case 1 : cell . backgroundColor = UIColor . greenColor () cell . textLabel ?. text = \"1\" case 2 : cell . backgroundColor = UIColor . blueColor () cell . textLabel ?. text = \"2\" default : print ( \"section error\" ) cell . backgroundColor = UIColor . whiteColor () } return cell } } CustomUICollectionViewCell.swift Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 // // CustomUICollectionViewCell.swift // UIKit055_4.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class CustomUICollectionViewCell : UICollectionViewCell { var textLabel : UILabel ? required init ( coder aDecoder : NSCoder ) { super . init ( coder : aDecoder ) ! } override init ( frame : CGRect ) { super . init ( frame : frame ) // UILabel\u3092\u751f\u6210. textLabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : frame . width , height : frame . height )) textLabel ?. text = \"nil\" textLabel ?. textAlignment = NSTextAlignment . center // Cell\u306b\u8ffd\u52a0. self . contentView . addSubview ( textLabel !) } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 // // CustomUICollectionViewCell.swift // UIKit055_2.3 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class CustomUICollectionViewCell : UICollectionViewCell { var textLabel : UILabel ? required init ( coder aDecoder : NSCoder ) { super . init ( coder : aDecoder ) ! } override init ( frame : CGRect ) { super . init ( frame : frame ) // UILabel\u3092\u751f\u6210. textLabel = UILabel ( frame : CGRectMake ( 0 , 0 , frame . width , frame . height )) textLabel ?. text = \"nil\" textLabel ?. textAlignment = NSTextAlignment . Center // Cell\u306b\u8ffd\u52a0. self . contentView . addSubview ( textLabel !) } } 3.x\u30684.x\u306e\u5dee\u5206 UIEdgeInsetsMake(16, 16, 32, 16) \u304c UIEdgeInsets(top: 16, left: 16, bottom: 32, right: 16) \u306b\u5909\u66f4 UICollectionElementKindSectionHeader \u304c UICollectionView.elementKindSectionHeader \u306b\u5909\u66f4 2.3\u30683.0\u306e\u5dee\u5206 UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u306e\u5ec3\u6b62) dequeueReusableSupplementaryViewOfKind \u304c dequeueReusableSupplementaryView \u306b\u5909\u66f4 NSIndexPath\u306e\u5ec3\u6b62\u3001IndexPath\u306b\u5909\u66f4 UICollectionViewDelegate\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u306e\u5909\u66f4 Reference UICollectionViewFlowLayout Class https://developer.apple.com/reference/uikit/uicollectionviewflowlayout UICollectionView Class https://developer.apple.com/reference/uikit/uicollectionview UIEdgeInsetsMake https://developer.apple.com/reference/uikit/1624475-uiedgeinsetsmake?language=objc UICollectionDelegate https://developer.apple.com/reference/uikit/uicollectionviewdelegate UICollectionDataSource https://developer.apple.com/reference/uikit/uicollectionviewdatasource","title":"UICollectionView\u3092\u30bb\u30af\u30b7\u30e7\u30f3\u6bce\u306b\u5206\u3051\u308b"},{"location":"1.uikit/055_sectionuicollectionview/#uicollectionview","text":"","title":"UICollectionView\u3092\u30bb\u30af\u30b7\u30e7\u30f3\u6bce\u306b\u5206\u3051\u308b"},{"location":"1.uikit/055_sectionuicollectionview/#uiviewcontrollerswift","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 // // ViewController.swift // UIKit055_4.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UICollectionViewDelegate , UICollectionViewDataSource { var myCollectionView : UICollectionView ! override func viewDidLoad () { super . viewDidLoad () // CollectionView\u306e\u30ec\u30a4\u30a2\u30a6\u30c8\u3092\u751f\u6210. let layout = UICollectionViewFlowLayout () // Cell\u4e00\u3064\u4e00\u3064\u306e\u5927\u304d\u3055. layout . itemSize = CGSize ( width : 50 , height : 50 ) // Cell\u306e\u30de\u30fc\u30b8\u30f3. layout . sectionInset = UIEdgeInsets ( top : 16 , left : 16 , bottom : 32 , right : 16 ) // \u30bb\u30af\u30b7\u30e7\u30f3\u6bce\u306e\u30d8\u30c3\u30c0\u30fc\u30b5\u30a4\u30ba. layout . headerReferenceSize = CGSize ( width : 100 , height : 50 ) // CollectionView\u3092\u751f\u6210. myCollectionView = UICollectionView ( frame : self . view . frame , collectionViewLayout : layout ) // Cell\u306b\u4f7f\u308f\u308c\u308b\u30af\u30e9\u30b9\u3092\u767b\u9332. myCollectionView . register ( CustomUICollectionViewCell . self , forCellWithReuseIdentifier : \"MyCell\" ) myCollectionView . register ( UICollectionReusableView . self , forSupplementaryViewOfKind : UICollectionView . elementKindSectionHeader , withReuseIdentifier : \"Section\" ) myCollectionView . delegate = self myCollectionView . dataSource = self self . view . addSubview ( myCollectionView ) } /* Section\u306e\u6570 */ internal func numberOfSections ( in collectionView : UICollectionView ) -> Int { return 3 } /* Cell\u304c\u9078\u629e\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b */ func collectionView ( _ collectionView : UICollectionView , didSelectItemAt indexPath : IndexPath ) { print ( \"Num: \\( indexPath . row ) \" ) print ( \"SectionNum: \\( indexPath . section ) \" ) } /* Cell\u306e\u7dcf\u6570\u3092\u8fd4\u3059 */ func collectionView ( _ collectionView : UICollectionView , numberOfItemsInSection section : Int ) -> Int { // Section\u6bce\u306bCell\u306e\u7dcf\u6570\u3092\u5909\u3048\u308b. switch ( section ){ case 0 : return 5 case 1 : return 8 case 2 : return 20 default : print ( \"error\" ) return 0 } } /* Section\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b */ func collectionView ( _ collectionView : UICollectionView , viewForSupplementaryElementOfKind kind : String , at indexPath : IndexPath ) -> UICollectionReusableView { let headerView = collectionView . dequeueReusableSupplementaryView ( ofKind : UICollectionView . elementKindSectionHeader , withReuseIdentifier : \"Section\" , for : indexPath ) headerView . backgroundColor = UIColor . white return headerView } /* Cell\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b */ func collectionView ( _ collectionView : UICollectionView , cellForItemAt indexPath : IndexPath ) -> UICollectionViewCell { let cell : CustomUICollectionViewCell = collectionView . dequeueReusableCell ( withReuseIdentifier : \"MyCell\" , for : indexPath as IndexPath ) as ! CustomUICollectionViewCell // Section\u6bce\u306bCell\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u5909\u3048\u308b. switch ( indexPath . section ){ case 0 : cell . backgroundColor = UIColor . red cell . textLabel ?. text = \"0\" case 1 : cell . backgroundColor = UIColor . green cell . textLabel ?. text = \"1\" case 2 : cell . backgroundColor = UIColor . blue cell . textLabel ?. text = \"2\" default : print ( \"section error\" ) cell . backgroundColor = UIColor . white } return cell } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 // // ViewController.swift // UIKit055_3.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UICollectionViewDelegate , UICollectionViewDataSource { var myCollectionView : UICollectionView ! override func viewDidLoad () { super . viewDidLoad () // CollectionView\u306e\u30ec\u30a4\u30a2\u30a6\u30c8\u3092\u751f\u6210. let layout = UICollectionViewFlowLayout () // Cell\u4e00\u3064\u4e00\u3064\u306e\u5927\u304d\u3055. layout . itemSize = CGSize ( width : 50 , height : 50 ) // Cell\u306e\u30de\u30fc\u30b8\u30f3. layout . sectionInset = UIEdgeInsetsMake ( 16 , 16 , 32 , 16 ) // \u30bb\u30af\u30b7\u30e7\u30f3\u6bce\u306e\u30d8\u30c3\u30c0\u30fc\u30b5\u30a4\u30ba. layout . headerReferenceSize = CGSize ( width : 100 , height : 50 ) // CollectionView\u3092\u751f\u6210. myCollectionView = UICollectionView ( frame : self . view . frame , collectionViewLayout : layout ) // Cell\u306b\u4f7f\u308f\u308c\u308b\u30af\u30e9\u30b9\u3092\u767b\u9332. myCollectionView . register ( CustomUICollectionViewCell . self , forCellWithReuseIdentifier : \"MyCell\" ) myCollectionView . register ( UICollectionReusableView . self , forSupplementaryViewOfKind : UICollectionElementKindSectionHeader , withReuseIdentifier : \"Section\" ) myCollectionView . delegate = self myCollectionView . dataSource = self self . view . addSubview ( myCollectionView ) } /* Section\u306e\u6570 */ internal func numberOfSections ( in collectionView : UICollectionView ) -> Int { return 3 } /* Cell\u304c\u9078\u629e\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b */ func collectionView ( _ collectionView : UICollectionView , didSelectItemAt indexPath : IndexPath ) { print ( \"Num: \\( indexPath . row ) \" ) print ( \"SectionNum: \\( indexPath . section ) \" ) } /* Cell\u306e\u7dcf\u6570\u3092\u8fd4\u3059 */ func collectionView ( _ collectionView : UICollectionView , numberOfItemsInSection section : Int ) -> Int { // Section\u6bce\u306bCell\u306e\u7dcf\u6570\u3092\u5909\u3048\u308b. switch ( section ){ case 0 : return 5 case 1 : return 8 case 2 : return 20 default : print ( \"error\" ) return 0 } } /* Section\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b */ func collectionView ( _ collectionView : UICollectionView , viewForSupplementaryElementOfKind kind : String , at indexPath : IndexPath ) -> UICollectionReusableView { let headerView = collectionView . dequeueReusableSupplementaryView ( ofKind : UICollectionElementKindSectionHeader , withReuseIdentifier : \"Section\" , for : indexPath ) headerView . backgroundColor = UIColor . white return headerView } /* Cell\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b */ func collectionView ( _ collectionView : UICollectionView , cellForItemAt indexPath : IndexPath ) -> UICollectionViewCell { let cell : CustomUICollectionViewCell = collectionView . dequeueReusableCell ( withReuseIdentifier : \"MyCell\" , for : indexPath as IndexPath ) as ! CustomUICollectionViewCell // Section\u6bce\u306bCell\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u5909\u3048\u308b. switch ( indexPath . section ){ case 0 : cell . backgroundColor = UIColor . red cell . textLabel ?. text = \"0\" case 1 : cell . backgroundColor = UIColor . green cell . textLabel ?. text = \"1\" case 2 : cell . backgroundColor = UIColor . blue cell . textLabel ?. text = \"2\" default : print ( \"section error\" ) cell . backgroundColor = UIColor . white } return cell } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 // // ViewController.swift // UIKit055_2.3 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class ViewController : UIViewController , UICollectionViewDelegate , UICollectionViewDataSource { var myCollectionView : UICollectionView ! override func viewDidLoad () { super . viewDidLoad () // CollectionView\u306e\u30ec\u30a4\u30a2\u30a6\u30c8\u3092\u751f\u6210. let layout = UICollectionViewFlowLayout () // Cell\u4e00\u3064\u4e00\u3064\u306e\u5927\u304d\u3055. layout . itemSize = CGSizeMake ( 50 , 50 ) // Cell\u306e\u30de\u30fc\u30b8\u30f3. layout . sectionInset = UIEdgeInsetsMake ( 16 , 16 , 32 , 16 ) // \u30bb\u30af\u30b7\u30e7\u30f3\u6bce\u306e\u30d8\u30c3\u30c0\u30fc\u30b5\u30a4\u30ba. layout . headerReferenceSize = CGSizeMake ( 100 , 50 ) // CollectionView\u3092\u751f\u6210. myCollectionView = UICollectionView ( frame : self . view . frame , collectionViewLayout : layout ) // Cell\u306b\u4f7f\u308f\u308c\u308b\u30af\u30e9\u30b9\u3092\u767b\u9332. myCollectionView . registerClass ( CustomUICollectionViewCell . self , forCellWithReuseIdentifier : \"MyCell\" ) myCollectionView . registerClass ( UICollectionReusableView . self , forSupplementaryViewOfKind : UICollectionElementKindSectionHeader , withReuseIdentifier : \"Section\" ) myCollectionView . delegate = self myCollectionView . dataSource = self self . view . addSubview ( myCollectionView ) } /* Section\u306e\u6570 */ func numberOfSectionsInCollectionView ( collectionView : UICollectionView ) -> Int { return 3 } /* Cell\u304c\u9078\u629e\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b */ func collectionView ( collectionView : UICollectionView , didSelectItemAtIndexPath indexPath : NSIndexPath ) { print ( \"Num: \\( indexPath . row ) \" ) print ( \"SectionNum: \\( indexPath . section ) \" ) } /* Cell\u306e\u7dcf\u6570\u3092\u8fd4\u3059 */ func collectionView ( collectionView : UICollectionView , numberOfItemsInSection section : Int ) -> Int { // Section\u6bce\u306bCell\u306e\u7dcf\u6570\u3092\u5909\u3048\u308b. switch ( section ){ case 0 : return 5 case 1 : return 8 case 2 : return 20 default : print ( \"error\" ) return 0 } } /* Section\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b */ func collectionView ( collectionView : UICollectionView , viewForSupplementaryElementOfKind kind : String , atIndexPath indexPath : NSIndexPath ) -> UICollectionReusableView { let headerView = collectionView . dequeueReusableSupplementaryViewOfKind ( UICollectionElementKindSectionHeader , withReuseIdentifier : \"Section\" , forIndexPath : indexPath ) headerView . backgroundColor = UIColor . whiteColor () return headerView } /* Cell\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b */ func collectionView ( collectionView : UICollectionView , cellForItemAtIndexPath indexPath : NSIndexPath ) -> UICollectionViewCell { let cell : CustomUICollectionViewCell = collectionView . dequeueReusableCellWithReuseIdentifier ( \"MyCell\" , forIndexPath : indexPath ) as ! CustomUICollectionViewCell // Section\u6bce\u306bCell\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u5909\u3048\u308b. switch ( indexPath . section ){ case 0 : cell . backgroundColor = UIColor . redColor () cell . textLabel ?. text = \"0\" case 1 : cell . backgroundColor = UIColor . greenColor () cell . textLabel ?. text = \"1\" case 2 : cell . backgroundColor = UIColor . blueColor () cell . textLabel ?. text = \"2\" default : print ( \"section error\" ) cell . backgroundColor = UIColor . whiteColor () } return cell } }","title":"UIViewController.swift"},{"location":"1.uikit/055_sectionuicollectionview/#customuicollectionviewcellswift","text":"Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 // // CustomUICollectionViewCell.swift // UIKit055_4.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class CustomUICollectionViewCell : UICollectionViewCell { var textLabel : UILabel ? required init ( coder aDecoder : NSCoder ) { super . init ( coder : aDecoder ) ! } override init ( frame : CGRect ) { super . init ( frame : frame ) // UILabel\u3092\u751f\u6210. textLabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : frame . width , height : frame . height )) textLabel ?. text = \"nil\" textLabel ?. textAlignment = NSTextAlignment . center // Cell\u306b\u8ffd\u52a0. self . contentView . addSubview ( textLabel !) } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 // // CustomUICollectionViewCell.swift // UIKit055_2.3 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit class CustomUICollectionViewCell : UICollectionViewCell { var textLabel : UILabel ? required init ( coder aDecoder : NSCoder ) { super . init ( coder : aDecoder ) ! } override init ( frame : CGRect ) { super . init ( frame : frame ) // UILabel\u3092\u751f\u6210. textLabel = UILabel ( frame : CGRectMake ( 0 , 0 , frame . width , frame . height )) textLabel ?. text = \"nil\" textLabel ?. textAlignment = NSTextAlignment . Center // Cell\u306b\u8ffd\u52a0. self . contentView . addSubview ( textLabel !) } }","title":"CustomUICollectionViewCell.swift"},{"location":"1.uikit/055_sectionuicollectionview/#3x4x","text":"UIEdgeInsetsMake(16, 16, 32, 16) \u304c UIEdgeInsets(top: 16, left: 16, bottom: 32, right: 16) \u306b\u5909\u66f4 UICollectionElementKindSectionHeader \u304c UICollectionView.elementKindSectionHeader \u306b\u5909\u66f4","title":"3.x\u30684.x\u306e\u5dee\u5206"},{"location":"1.uikit/055_sectionuicollectionview/#2330","text":"UIColor\u306e\u53c2\u7167\u65b9\u6cd5\u304c\u5909\u66f4(UIColor.grayColor()->UIColor.gray) CGRect,CGPoint\u306e\u521d\u671f\u5316\u65b9\u6cd5\u306e\u5909\u66f4(CGRectMake,CGPointMake\u306e\u5ec3\u6b62) dequeueReusableSupplementaryViewOfKind \u304c dequeueReusableSupplementaryView \u306b\u5909\u66f4 NSIndexPath\u306e\u5ec3\u6b62\u3001IndexPath\u306b\u5909\u66f4 UICollectionViewDelegate\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u306e\u5909\u66f4","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/055_sectionuicollectionview/#reference","text":"UICollectionViewFlowLayout Class https://developer.apple.com/reference/uikit/uicollectionviewflowlayout UICollectionView Class https://developer.apple.com/reference/uikit/uicollectionview UIEdgeInsetsMake https://developer.apple.com/reference/uikit/1624475-uiedgeinsetsmake?language=objc UICollectionDelegate https://developer.apple.com/reference/uikit/uicollectionviewdelegate UICollectionDataSource https://developer.apple.com/reference/uikit/uicollectionviewdatasource","title":"Reference"},{"location":"1.uikit/056_uiimagepickercontroller/","text":"UIImagePickerController\u3067\u30e9\u30a4\u30d6\u30e9\u30ea\u304b\u3089\u753b\u50cf\u3092\u9078\u629e AppDelegate.swift Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 // // AppDelegate.swift // UIKit051_4.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { var window : UIWindow ? var myViewController : UIViewController ? func application ( _ application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ UIApplication . LaunchOptionsKey : Any ]? = nil ) -> Bool { //ViewController\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316 myViewController = ViewController () //UINavigationController\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3068rootViewController\u306e\u6307\u5b9a let myNavigationController = UINavigationController ( rootViewController : myViewController !) //UIWindow\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316 self . window = UIWindow ( frame : UIScreen . main . bounds ) //UIWindow\u306erootViewController\u306bnavigationController\u3092\u6307\u5b9a self . window ?. rootViewController = myNavigationController //UIWindow\u306e\u8868\u793a self . window ?. makeKeyAndVisible () return true } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 // // AppDelegate.swift // UIKit056 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { var window : UIWindow ? var myViewController : UIViewController ? func application ( _ application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ NSObject : AnyObject ]?) -> Bool { //ViewController\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316 myViewController = ViewController () //UINavigationController\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3068rootViewController\u306e\u6307\u5b9a let myNavigationController = UINavigationController ( rootViewController : myViewController !) //UIWindow\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316 self . window = UIWindow ( frame : UIScreen . main . bounds ) //UIWindow\u306erootViewController\u306bnavigationController\u3092\u6307\u5b9a self . window ?. rootViewController = myNavigationController //UIWindow\u306e\u8868\u793a self . window ?. makeKeyAndVisible () return true } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 // // AppDelegate.swift // UIKit056 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { var window : UIWindow ? var myViewController : UIViewController ? func application ( application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ NSObject : AnyObject ]?) -> Bool { //ViewController\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316 myViewController = ViewController () //UINavigationController\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3068rootViewController\u306e\u6307\u5b9a let myNavigationController = UINavigationController ( rootViewController : myViewController !) //UIWindow\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316 self . window = UIWindow ( frame : UIScreen . mainScreen (). bounds ) //UIWindow\u306erootViewController\u306bnavigationController\u3092\u6307\u5b9a self . window ?. rootViewController = myNavigationController //UIWindow\u306e\u8868\u793a self . window ?. makeKeyAndVisible () return true } } ViewController.swift Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 // // ViewController.swift // UIKit056 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController , UINavigationControllerDelegate , UIImagePickerControllerDelegate { var myImagePicker : UIImagePickerController ! var myImageView : UIImageView ! override func viewDidLoad () { super . viewDidLoad () self . title = \"Select a Image\" myImageView = UIImageView ( frame : self . view . bounds ) // \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210 myImagePicker = UIImagePickerController () // \u30c7\u30ea\u30b2\u30fc\u30c8\u8a2d\u5b9a myImagePicker . delegate = self // \u753b\u50cf\u306e\u53d6\u5f97\u5148\u306f\u30d5\u30a9\u30c8\u30e9\u30a4\u30d6\u30e9\u30ea myImagePicker . sourceType = UIImagePickerController . SourceType . photoLibrary // \u753b\u50cf\u53d6\u5f97\u5f8c\u306e\u7de8\u96c6\u3092\u4e0d\u53ef\u306b myImagePicker . allowsEditing = false } override func viewDidAppear ( _ animated : Bool ) { self . present ( myImagePicker , animated : true , completion : nil ) } /** \u753b\u50cf\u304c\u9078\u629e\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b. */ func imagePickerController ( _ picker : UIImagePickerController , didFinishPickingMediaWithInfo info : [ UIImagePickerController . InfoKey : Any ]) { //\u9078\u629e\u3055\u308c\u305f\u753b\u50cf\u3092\u53d6\u5f97. let myImage : AnyObject ? = info [ UIImagePickerController . InfoKey . originalImage ] as AnyObject //\u9078\u629e\u3055\u308c\u305f\u753b\u50cf\u3092\u8868\u793a\u3059\u308bViewController\u3092\u751f\u6210. let secondViewController = SecondViewController () //\u9078\u629e\u3055\u308c\u305f\u753b\u50cf\u3092\u8868\u793a\u3059\u308bViewContorller\u306b\u30bb\u30c3\u30c8\u3059\u308b. secondViewController . mySelectedImage = myImage as ? UIImage myImagePicker . pushViewController ( secondViewController , animated : true ) } /** \u753b\u50cf\u9078\u629e\u304c\u30ad\u30e3\u30f3\u30bb\u30eb\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b. */ func imagePickerControllerDidCancel ( _ picker : UIImagePickerController ) { // \u30e2\u30fc\u30c0\u30eb\u30d3\u30e5\u30fc\u3092\u9589\u3058\u308b self . dismiss ( animated : true , completion : nil ) } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 // // ViewController.swift // UIKit056 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController , UINavigationControllerDelegate , UIImagePickerControllerDelegate { var myImagePicker : UIImagePickerController ! var myImageView : UIImageView ! override func viewDidLoad () { super . viewDidLoad () self . title = \"Select a Image\" myImageView = UIImageView ( frame : self . view . bounds ) // \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210 myImagePicker = UIImagePickerController () // \u30c7\u30ea\u30b2\u30fc\u30c8\u8a2d\u5b9a myImagePicker . delegate = self // \u753b\u50cf\u306e\u53d6\u5f97\u5148\u306f\u30d5\u30a9\u30c8\u30e9\u30a4\u30d6\u30e9\u30ea myImagePicker . sourceType = UIImagePickerControllerSourceType . photoLibrary // \u753b\u50cf\u53d6\u5f97\u5f8c\u306e\u7de8\u96c6\u3092\u4e0d\u53ef\u306b myImagePicker . allowsEditing = false } override func viewDidAppear ( _ animated : Bool ) { self . present ( myImagePicker , animated : true , completion : nil ) } /** \u753b\u50cf\u304c\u9078\u629e\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b. */ func imagePickerController ( _ picker : UIImagePickerController , didFinishPickingMediaWithInfo info : [ String : AnyObject ]) { //\u9078\u629e\u3055\u308c\u305f\u753b\u50cf\u3092\u53d6\u5f97. let myImage : AnyObject ? = info [ UIImagePickerControllerOriginalImage ] //\u9078\u629e\u3055\u308c\u305f\u753b\u50cf\u3092\u8868\u793a\u3059\u308bViewController\u3092\u751f\u6210. let secondViewController = SecondViewController () //\u9078\u629e\u3055\u308c\u305f\u753b\u50cf\u3092\u8868\u793a\u3059\u308bViewContorller\u306b\u30bb\u30c3\u30c8\u3059\u308b. secondViewController . mySelectedImage = myImage as ! UIImage myImagePicker . pushViewController ( secondViewController , animated : true ) } /** \u753b\u50cf\u9078\u629e\u304c\u30ad\u30e3\u30f3\u30bb\u30eb\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b. */ func imagePickerControllerDidCancel ( _ picker : UIImagePickerController ) { // \u30e2\u30fc\u30c0\u30eb\u30d3\u30e5\u30fc\u3092\u9589\u3058\u308b self . dismiss ( animated : true , completion : nil ) } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 // // ViewController.swift // UIKit056 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController , UINavigationControllerDelegate , UIImagePickerControllerDelegate { var myImagePicker : UIImagePickerController ! var myImageView : UIImageView ! override func viewDidLoad () { super . viewDidLoad () self . title = \"Select a Image\" myImageView = UIImageView ( frame : self . view . bounds ) // \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210 myImagePicker = UIImagePickerController () // \u30c7\u30ea\u30b2\u30fc\u30c8\u8a2d\u5b9a myImagePicker . delegate = self // \u753b\u50cf\u306e\u53d6\u5f97\u5148\u306f\u30d5\u30a9\u30c8\u30e9\u30a4\u30d6\u30e9\u30ea myImagePicker . sourceType = UIImagePickerControllerSourceType . PhotoLibrary // \u753b\u50cf\u53d6\u5f97\u5f8c\u306e\u7de8\u96c6\u3092\u4e0d\u53ef\u306b myImagePicker . allowsEditing = false } override func viewDidAppear ( animated : Bool ) { self . presentViewController ( myImagePicker , animated : true , completion : nil ) } /** \u753b\u50cf\u304c\u9078\u629e\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b. */ func imagePickerController ( picker : UIImagePickerController , didFinishPickingMediaWithInfo info : [ String : AnyObject ]) { //\u9078\u629e\u3055\u308c\u305f\u753b\u50cf\u3092\u53d6\u5f97. let myImage : AnyObject ? = info [ UIImagePickerControllerOriginalImage ] //\u9078\u629e\u3055\u308c\u305f\u753b\u50cf\u3092\u8868\u793a\u3059\u308bViewController\u3092\u751f\u6210. let secondViewController = SecondViewController () //\u9078\u629e\u3055\u308c\u305f\u753b\u50cf\u3092\u8868\u793a\u3059\u308bViewContorller\u306b\u30bb\u30c3\u30c8\u3059\u308b. secondViewController . mySelectedImage = myImage as ! UIImage myImagePicker . pushViewController ( secondViewController , animated : true ) } /** \u753b\u50cf\u9078\u629e\u304c\u30ad\u30e3\u30f3\u30bb\u30eb\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b. */ func imagePickerControllerDidCancel ( picker : UIImagePickerController ) { // \u30e2\u30fc\u30c0\u30eb\u30d3\u30e5\u30fc\u3092\u9589\u3058\u308b self . dismissViewControllerAnimated ( true , completion : nil ) } } SecondViewController Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 // // SecondViewController.swift // UIKit056 // // Created by Misato Morino on 2016/08/22. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import Foundation import UIKit class SecondViewController : UIViewController { var mySelectedImage : UIImage ! var mySelectedImageView : UIImageView ! override func viewDidLoad () { self . edgesForExtendedLayout = [] self . view . backgroundColor = UIColor . white setImage () } /** \u9078\u629e\u3055\u308c\u305f\u753b\u50cf\u3092UIImageView\u306b\u30bb\u30c3\u30c8\u3059\u308b. */ func setImage (){ self . title = \"Selected Image\" mySelectedImageView = UIImageView ( frame : self . view . bounds ) mySelectedImageView . contentMode = UIView . ContentMode . scaleAspectFit mySelectedImageView . image = mySelectedImage self . view . addSubview ( mySelectedImageView ) } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 // // SecondViewController.swift // UIKit056 // // Created by Misato Morino on 2016/08/22. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import Foundation import UIKit class SecondViewController : UIViewController { var mySelectedImage : UIImage ! var mySelectedImageView : UIImageView ! override func viewDidLoad () { self . edgesForExtendedLayout = [] self . view . backgroundColor = UIColor . white setImage () } /** \u9078\u629e\u3055\u308c\u305f\u753b\u50cf\u3092UIImageView\u306b\u30bb\u30c3\u30c8\u3059\u308b. */ func setImage (){ self . title = \"Selected Image\" mySelectedImageView = UIImageView ( frame : self . view . bounds ) mySelectedImageView . contentMode = UIViewContentMode . scaleAspectFit mySelectedImageView . image = mySelectedImage self . view . addSubview ( mySelectedImageView ) } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 // // SecondViewController.swift // UIKit056 // // Created by Misato Morino on 2016/08/22. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import Foundation import UIKit class SecondViewController : UIViewController { var mySelectedImage : UIImage ! var mySelectedImageView : UIImageView ! override func viewDidLoad () { self . edgesForExtendedLayout = UIRectEdge . None self . view . backgroundColor = UIColor . whiteColor () setImage () } /** \u9078\u629e\u3055\u308c\u305f\u753b\u50cf\u3092UIImageView\u306b\u30bb\u30c3\u30c8\u3059\u308b. */ func setImage (){ self . title = \"Selected Image\" mySelectedImageView = UIImageView ( frame : self . view . bounds ) mySelectedImageView . contentMode = UIViewContentMode . ScaleAspectFit mySelectedImageView . image = mySelectedImage self . view . addSubview ( mySelectedImageView ) } } Info,plist 1 2 3 4 < key > NSPhotoLibraryUsageDescription </ key > < string > YES </ string > < key > NSAppleMusicUsageDescription </ key > < string > YES </ string > Info.plist\u306b\u4e0a\u8a18\u3092\u8ffd\u52a0\uff082.3\u306b\u306f\u5fc5\u8981\u306a\u3044\uff09 3.x\u30684.x\u306e\u5dee\u5206 func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -> Bool \u304c\u3001 func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]? = nil) -> Bool \u306b\u5909\u66f4 UIImagePickerControllerSourceType \u304c UIImagePickerController.SourceType \u306b\u5909\u66f4 func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : AnyObject]) \u304c func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) \u306b\u5909\u66f4 info[UIImagePickerControllerOriginalImage] \u304c info[UIImagePickerController.InfoKey.originalImage] as AnyObject \u306b\u5909\u66f4 myImage as! UIImage \u304c myImage as? UIImage \u306b\u5909\u66f4 UIViewContentMode \u304c` ``UIView.ContentMode``` \u306b\u5909\u66f4 2.3\u30683.0\u306e\u5dee\u5206 func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : AnyObject]) \u304b\u3089 func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : AnyObject]) \u306b\u5909\u66f4 func imagePickerControllerDidCancel(picker: UIImagePickerController) \u304b\u3089 func imagePickerControllerDidCancel(_ picker: UIImagePickerController) \u306b\u5909\u66f4 presentViewController \u304b\u3089 present \u306b\u5909\u66f4 dismissViewControllerAnimated \u304b\u3089 dismiss \u306b\u5909\u66f4 Reference UIImagePickerController https://developer.apple.com/reference/uikit/uiimagepickercontroller","title":"UIImagePickerController\u3067\u30e9\u30a4\u30d6\u30e9\u30ea\u304b\u3089\u753b\u50cf\u3092\u9078\u629e"},{"location":"1.uikit/056_uiimagepickercontroller/#uiimagepickercontroller","text":"","title":"UIImagePickerController\u3067\u30e9\u30a4\u30d6\u30e9\u30ea\u304b\u3089\u753b\u50cf\u3092\u9078\u629e"},{"location":"1.uikit/056_uiimagepickercontroller/#appdelegateswift","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 // // AppDelegate.swift // UIKit051_4.0 // // Created by KimikoWatanabe on 2016/08/21. // Copyright \u00a9 2016\u5e74 FaBo, Inc. All rights reserved. // import UIKit @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { var window : UIWindow ? var myViewController : UIViewController ? func application ( _ application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ UIApplication . LaunchOptionsKey : Any ]? = nil ) -> Bool { //ViewController\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316 myViewController = ViewController () //UINavigationController\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3068rootViewController\u306e\u6307\u5b9a let myNavigationController = UINavigationController ( rootViewController : myViewController !) //UIWindow\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316 self . window = UIWindow ( frame : UIScreen . main . bounds ) //UIWindow\u306erootViewController\u306bnavigationController\u3092\u6307\u5b9a self . window ?. rootViewController = myNavigationController //UIWindow\u306e\u8868\u793a self . window ?. makeKeyAndVisible () return true } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 // // AppDelegate.swift // UIKit056 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { var window : UIWindow ? var myViewController : UIViewController ? func application ( _ application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ NSObject : AnyObject ]?) -> Bool { //ViewController\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316 myViewController = ViewController () //UINavigationController\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3068rootViewController\u306e\u6307\u5b9a let myNavigationController = UINavigationController ( rootViewController : myViewController !) //UIWindow\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316 self . window = UIWindow ( frame : UIScreen . main . bounds ) //UIWindow\u306erootViewController\u306bnavigationController\u3092\u6307\u5b9a self . window ?. rootViewController = myNavigationController //UIWindow\u306e\u8868\u793a self . window ?. makeKeyAndVisible () return true } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 // // AppDelegate.swift // UIKit056 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { var window : UIWindow ? var myViewController : UIViewController ? func application ( application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ NSObject : AnyObject ]?) -> Bool { //ViewController\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316 myViewController = ViewController () //UINavigationController\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3068rootViewController\u306e\u6307\u5b9a let myNavigationController = UINavigationController ( rootViewController : myViewController !) //UIWindow\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316 self . window = UIWindow ( frame : UIScreen . mainScreen (). bounds ) //UIWindow\u306erootViewController\u306bnavigationController\u3092\u6307\u5b9a self . window ?. rootViewController = myNavigationController //UIWindow\u306e\u8868\u793a self . window ?. makeKeyAndVisible () return true } }","title":"AppDelegate.swift"},{"location":"1.uikit/056_uiimagepickercontroller/#viewcontrollerswift","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 // // ViewController.swift // UIKit056 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController , UINavigationControllerDelegate , UIImagePickerControllerDelegate { var myImagePicker : UIImagePickerController ! var myImageView : UIImageView ! override func viewDidLoad () { super . viewDidLoad () self . title = \"Select a Image\" myImageView = UIImageView ( frame : self . view . bounds ) // \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210 myImagePicker = UIImagePickerController () // \u30c7\u30ea\u30b2\u30fc\u30c8\u8a2d\u5b9a myImagePicker . delegate = self // \u753b\u50cf\u306e\u53d6\u5f97\u5148\u306f\u30d5\u30a9\u30c8\u30e9\u30a4\u30d6\u30e9\u30ea myImagePicker . sourceType = UIImagePickerController . SourceType . photoLibrary // \u753b\u50cf\u53d6\u5f97\u5f8c\u306e\u7de8\u96c6\u3092\u4e0d\u53ef\u306b myImagePicker . allowsEditing = false } override func viewDidAppear ( _ animated : Bool ) { self . present ( myImagePicker , animated : true , completion : nil ) } /** \u753b\u50cf\u304c\u9078\u629e\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b. */ func imagePickerController ( _ picker : UIImagePickerController , didFinishPickingMediaWithInfo info : [ UIImagePickerController . InfoKey : Any ]) { //\u9078\u629e\u3055\u308c\u305f\u753b\u50cf\u3092\u53d6\u5f97. let myImage : AnyObject ? = info [ UIImagePickerController . InfoKey . originalImage ] as AnyObject //\u9078\u629e\u3055\u308c\u305f\u753b\u50cf\u3092\u8868\u793a\u3059\u308bViewController\u3092\u751f\u6210. let secondViewController = SecondViewController () //\u9078\u629e\u3055\u308c\u305f\u753b\u50cf\u3092\u8868\u793a\u3059\u308bViewContorller\u306b\u30bb\u30c3\u30c8\u3059\u308b. secondViewController . mySelectedImage = myImage as ? UIImage myImagePicker . pushViewController ( secondViewController , animated : true ) } /** \u753b\u50cf\u9078\u629e\u304c\u30ad\u30e3\u30f3\u30bb\u30eb\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b. */ func imagePickerControllerDidCancel ( _ picker : UIImagePickerController ) { // \u30e2\u30fc\u30c0\u30eb\u30d3\u30e5\u30fc\u3092\u9589\u3058\u308b self . dismiss ( animated : true , completion : nil ) } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 // // ViewController.swift // UIKit056 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController , UINavigationControllerDelegate , UIImagePickerControllerDelegate { var myImagePicker : UIImagePickerController ! var myImageView : UIImageView ! override func viewDidLoad () { super . viewDidLoad () self . title = \"Select a Image\" myImageView = UIImageView ( frame : self . view . bounds ) // \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210 myImagePicker = UIImagePickerController () // \u30c7\u30ea\u30b2\u30fc\u30c8\u8a2d\u5b9a myImagePicker . delegate = self // \u753b\u50cf\u306e\u53d6\u5f97\u5148\u306f\u30d5\u30a9\u30c8\u30e9\u30a4\u30d6\u30e9\u30ea myImagePicker . sourceType = UIImagePickerControllerSourceType . photoLibrary // \u753b\u50cf\u53d6\u5f97\u5f8c\u306e\u7de8\u96c6\u3092\u4e0d\u53ef\u306b myImagePicker . allowsEditing = false } override func viewDidAppear ( _ animated : Bool ) { self . present ( myImagePicker , animated : true , completion : nil ) } /** \u753b\u50cf\u304c\u9078\u629e\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b. */ func imagePickerController ( _ picker : UIImagePickerController , didFinishPickingMediaWithInfo info : [ String : AnyObject ]) { //\u9078\u629e\u3055\u308c\u305f\u753b\u50cf\u3092\u53d6\u5f97. let myImage : AnyObject ? = info [ UIImagePickerControllerOriginalImage ] //\u9078\u629e\u3055\u308c\u305f\u753b\u50cf\u3092\u8868\u793a\u3059\u308bViewController\u3092\u751f\u6210. let secondViewController = SecondViewController () //\u9078\u629e\u3055\u308c\u305f\u753b\u50cf\u3092\u8868\u793a\u3059\u308bViewContorller\u306b\u30bb\u30c3\u30c8\u3059\u308b. secondViewController . mySelectedImage = myImage as ! UIImage myImagePicker . pushViewController ( secondViewController , animated : true ) } /** \u753b\u50cf\u9078\u629e\u304c\u30ad\u30e3\u30f3\u30bb\u30eb\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b. */ func imagePickerControllerDidCancel ( _ picker : UIImagePickerController ) { // \u30e2\u30fc\u30c0\u30eb\u30d3\u30e5\u30fc\u3092\u9589\u3058\u308b self . dismiss ( animated : true , completion : nil ) } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 // // ViewController.swift // UIKit056 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController , UINavigationControllerDelegate , UIImagePickerControllerDelegate { var myImagePicker : UIImagePickerController ! var myImageView : UIImageView ! override func viewDidLoad () { super . viewDidLoad () self . title = \"Select a Image\" myImageView = UIImageView ( frame : self . view . bounds ) // \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210 myImagePicker = UIImagePickerController () // \u30c7\u30ea\u30b2\u30fc\u30c8\u8a2d\u5b9a myImagePicker . delegate = self // \u753b\u50cf\u306e\u53d6\u5f97\u5148\u306f\u30d5\u30a9\u30c8\u30e9\u30a4\u30d6\u30e9\u30ea myImagePicker . sourceType = UIImagePickerControllerSourceType . PhotoLibrary // \u753b\u50cf\u53d6\u5f97\u5f8c\u306e\u7de8\u96c6\u3092\u4e0d\u53ef\u306b myImagePicker . allowsEditing = false } override func viewDidAppear ( animated : Bool ) { self . presentViewController ( myImagePicker , animated : true , completion : nil ) } /** \u753b\u50cf\u304c\u9078\u629e\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b. */ func imagePickerController ( picker : UIImagePickerController , didFinishPickingMediaWithInfo info : [ String : AnyObject ]) { //\u9078\u629e\u3055\u308c\u305f\u753b\u50cf\u3092\u53d6\u5f97. let myImage : AnyObject ? = info [ UIImagePickerControllerOriginalImage ] //\u9078\u629e\u3055\u308c\u305f\u753b\u50cf\u3092\u8868\u793a\u3059\u308bViewController\u3092\u751f\u6210. let secondViewController = SecondViewController () //\u9078\u629e\u3055\u308c\u305f\u753b\u50cf\u3092\u8868\u793a\u3059\u308bViewContorller\u306b\u30bb\u30c3\u30c8\u3059\u308b. secondViewController . mySelectedImage = myImage as ! UIImage myImagePicker . pushViewController ( secondViewController , animated : true ) } /** \u753b\u50cf\u9078\u629e\u304c\u30ad\u30e3\u30f3\u30bb\u30eb\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b. */ func imagePickerControllerDidCancel ( picker : UIImagePickerController ) { // \u30e2\u30fc\u30c0\u30eb\u30d3\u30e5\u30fc\u3092\u9589\u3058\u308b self . dismissViewControllerAnimated ( true , completion : nil ) } }","title":"ViewController.swift"},{"location":"1.uikit/056_uiimagepickercontroller/#secondviewcontroller","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 // // SecondViewController.swift // UIKit056 // // Created by Misato Morino on 2016/08/22. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import Foundation import UIKit class SecondViewController : UIViewController { var mySelectedImage : UIImage ! var mySelectedImageView : UIImageView ! override func viewDidLoad () { self . edgesForExtendedLayout = [] self . view . backgroundColor = UIColor . white setImage () } /** \u9078\u629e\u3055\u308c\u305f\u753b\u50cf\u3092UIImageView\u306b\u30bb\u30c3\u30c8\u3059\u308b. */ func setImage (){ self . title = \"Selected Image\" mySelectedImageView = UIImageView ( frame : self . view . bounds ) mySelectedImageView . contentMode = UIView . ContentMode . scaleAspectFit mySelectedImageView . image = mySelectedImage self . view . addSubview ( mySelectedImageView ) } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 // // SecondViewController.swift // UIKit056 // // Created by Misato Morino on 2016/08/22. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import Foundation import UIKit class SecondViewController : UIViewController { var mySelectedImage : UIImage ! var mySelectedImageView : UIImageView ! override func viewDidLoad () { self . edgesForExtendedLayout = [] self . view . backgroundColor = UIColor . white setImage () } /** \u9078\u629e\u3055\u308c\u305f\u753b\u50cf\u3092UIImageView\u306b\u30bb\u30c3\u30c8\u3059\u308b. */ func setImage (){ self . title = \"Selected Image\" mySelectedImageView = UIImageView ( frame : self . view . bounds ) mySelectedImageView . contentMode = UIViewContentMode . scaleAspectFit mySelectedImageView . image = mySelectedImage self . view . addSubview ( mySelectedImageView ) } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 // // SecondViewController.swift // UIKit056 // // Created by Misato Morino on 2016/08/22. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import Foundation import UIKit class SecondViewController : UIViewController { var mySelectedImage : UIImage ! var mySelectedImageView : UIImageView ! override func viewDidLoad () { self . edgesForExtendedLayout = UIRectEdge . None self . view . backgroundColor = UIColor . whiteColor () setImage () } /** \u9078\u629e\u3055\u308c\u305f\u753b\u50cf\u3092UIImageView\u306b\u30bb\u30c3\u30c8\u3059\u308b. */ func setImage (){ self . title = \"Selected Image\" mySelectedImageView = UIImageView ( frame : self . view . bounds ) mySelectedImageView . contentMode = UIViewContentMode . ScaleAspectFit mySelectedImageView . image = mySelectedImage self . view . addSubview ( mySelectedImageView ) } }","title":"SecondViewController"},{"location":"1.uikit/056_uiimagepickercontroller/#infoplist","text":"1 2 3 4 < key > NSPhotoLibraryUsageDescription </ key > < string > YES </ string > < key > NSAppleMusicUsageDescription </ key > < string > YES </ string > Info.plist\u306b\u4e0a\u8a18\u3092\u8ffd\u52a0\uff082.3\u306b\u306f\u5fc5\u8981\u306a\u3044\uff09","title":"Info,plist"},{"location":"1.uikit/056_uiimagepickercontroller/#3x4x","text":"func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -> Bool \u304c\u3001 func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]? = nil) -> Bool \u306b\u5909\u66f4 UIImagePickerControllerSourceType \u304c UIImagePickerController.SourceType \u306b\u5909\u66f4 func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : AnyObject]) \u304c func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) \u306b\u5909\u66f4 info[UIImagePickerControllerOriginalImage] \u304c info[UIImagePickerController.InfoKey.originalImage] as AnyObject \u306b\u5909\u66f4 myImage as! UIImage \u304c myImage as? UIImage \u306b\u5909\u66f4 UIViewContentMode \u304c` ``UIView.ContentMode``` \u306b\u5909\u66f4","title":"3.x\u30684.x\u306e\u5dee\u5206"},{"location":"1.uikit/056_uiimagepickercontroller/#2330","text":"func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : AnyObject]) \u304b\u3089 func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : AnyObject]) \u306b\u5909\u66f4 func imagePickerControllerDidCancel(picker: UIImagePickerController) \u304b\u3089 func imagePickerControllerDidCancel(_ picker: UIImagePickerController) \u306b\u5909\u66f4 presentViewController \u304b\u3089 present \u306b\u5909\u66f4 dismissViewControllerAnimated \u304b\u3089 dismiss \u306b\u5909\u66f4","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/056_uiimagepickercontroller/#reference","text":"UIImagePickerController https://developer.apple.com/reference/uikit/uiimagepickercontroller","title":"Reference"},{"location":"1.uikit/057_uiimage/","text":"UIImage\u3067\u753b\u50cf\u306e\u900f\u904e Swift4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 // // ViewController.swift // UIKit057 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit extension UIImage { // Resize\u306e\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u308b. class func Resize\u00dcIImage ( image : UIImage , width : CGFloat , height : CGFloat )-> UIImage !{ // \u6307\u5b9a\u3055\u308c\u305f\u753b\u50cf\u306e\u5927\u304d\u3055\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u7528\u610f. UIGraphicsBeginImageContext ( CGSize ( width : width , height : height )) // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306b\u753b\u50cf\u3092\u63cf\u753b\u3059\u308b. image . draw ( in : CGRect ( x : 0 , y : 0 , width : width , height : height )) // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u304b\u3089UIImage\u3092\u4f5c\u308b. let newImage = UIGraphicsGetImageFromCurrentImageContext () // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u9589\u3058\u308b. UIGraphicsEndImageContext () return newImage } } class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // \u753b\u50cf\u306e\u8a2d\u5b9a. let myImage : UIImage = UIImage ( named : \"sample1\" ) ! // \u30ea\u30b5\u30a4\u30ba\u3055\u308c\u305fUIImage\u3092\u6307\u5b9a\u3057\u3066\u3001UIImageView\u3092\u4f5c\u308b. let myImageView = UIImageView ( image : UIImage . Resize\u00dcIImage ( image : myImage , width : self . view . frame . maxX , height : self . view . frame . maxY )) // \u900f\u904e\u3059\u308b. myImageView . alpha = 0.05 // view\u306bUIImageView\u3092\u8ffd\u52a0. self . view . addSubview ( myImageView ) } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 // // ViewController.swift // UIKit057 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit extension UIImage { // Resize\u306e\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u308b. class func Resize\u00dcIImage ( image : UIImage , width : CGFloat , height : CGFloat )-> UIImage !{ // \u6307\u5b9a\u3055\u308c\u305f\u753b\u50cf\u306e\u5927\u304d\u3055\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u7528\u610f. UIGraphicsBeginImageContext ( CGSizeMake ( width , height )) // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306b\u753b\u50cf\u3092\u63cf\u753b\u3059\u308b. image . drawInRect ( CGRectMake ( 0 , 0 , width , height )) // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u304b\u3089UIImage\u3092\u4f5c\u308b. let newImage = UIGraphicsGetImageFromCurrentImageContext () // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u9589\u3058\u308b. UIGraphicsEndImageContext () return newImage } } class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // \u753b\u50cf\u306e\u8a2d\u5b9a. let myImage : UIImage = UIImage ( named : \"sample1\" ) ! // \u30ea\u30b5\u30a4\u30ba\u3055\u308c\u305fUIImage\u3092\u6307\u5b9a\u3057\u3066\u3001UIImageView\u3092\u4f5c\u308b. let myImageView = UIImageView ( image : UIImage . Resize\u00dcIImage ( myImage , width : self . view . frame . maxX , height : self . view . frame . maxY )) // \u900f\u904e\u3059\u308b. myImageView . alpha = 0.05 // view\u306bUIImageView\u3092\u8ffd\u52a0. self . view . addSubview ( myImageView ) } } 2.3\u30683.0\u306e\u5dee\u5206 CGSizeMake \u3001 CGRectMake \u304c\u5ec3\u6b62 Reference UIImage https://developer.apple.com/reference/uikit/uiimage","title":"UIImage\u3067\u753b\u50cf\u306e\u900f\u904e"},{"location":"1.uikit/057_uiimage/#uiimage","text":"Swift4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 // // ViewController.swift // UIKit057 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit extension UIImage { // Resize\u306e\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u308b. class func Resize\u00dcIImage ( image : UIImage , width : CGFloat , height : CGFloat )-> UIImage !{ // \u6307\u5b9a\u3055\u308c\u305f\u753b\u50cf\u306e\u5927\u304d\u3055\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u7528\u610f. UIGraphicsBeginImageContext ( CGSize ( width : width , height : height )) // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306b\u753b\u50cf\u3092\u63cf\u753b\u3059\u308b. image . draw ( in : CGRect ( x : 0 , y : 0 , width : width , height : height )) // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u304b\u3089UIImage\u3092\u4f5c\u308b. let newImage = UIGraphicsGetImageFromCurrentImageContext () // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u9589\u3058\u308b. UIGraphicsEndImageContext () return newImage } } class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // \u753b\u50cf\u306e\u8a2d\u5b9a. let myImage : UIImage = UIImage ( named : \"sample1\" ) ! // \u30ea\u30b5\u30a4\u30ba\u3055\u308c\u305fUIImage\u3092\u6307\u5b9a\u3057\u3066\u3001UIImageView\u3092\u4f5c\u308b. let myImageView = UIImageView ( image : UIImage . Resize\u00dcIImage ( image : myImage , width : self . view . frame . maxX , height : self . view . frame . maxY )) // \u900f\u904e\u3059\u308b. myImageView . alpha = 0.05 // view\u306bUIImageView\u3092\u8ffd\u52a0. self . view . addSubview ( myImageView ) } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 // // ViewController.swift // UIKit057 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit extension UIImage { // Resize\u306e\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u308b. class func Resize\u00dcIImage ( image : UIImage , width : CGFloat , height : CGFloat )-> UIImage !{ // \u6307\u5b9a\u3055\u308c\u305f\u753b\u50cf\u306e\u5927\u304d\u3055\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u7528\u610f. UIGraphicsBeginImageContext ( CGSizeMake ( width , height )) // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306b\u753b\u50cf\u3092\u63cf\u753b\u3059\u308b. image . drawInRect ( CGRectMake ( 0 , 0 , width , height )) // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u304b\u3089UIImage\u3092\u4f5c\u308b. let newImage = UIGraphicsGetImageFromCurrentImageContext () // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u9589\u3058\u308b. UIGraphicsEndImageContext () return newImage } } class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // \u753b\u50cf\u306e\u8a2d\u5b9a. let myImage : UIImage = UIImage ( named : \"sample1\" ) ! // \u30ea\u30b5\u30a4\u30ba\u3055\u308c\u305fUIImage\u3092\u6307\u5b9a\u3057\u3066\u3001UIImageView\u3092\u4f5c\u308b. let myImageView = UIImageView ( image : UIImage . Resize\u00dcIImage ( myImage , width : self . view . frame . maxX , height : self . view . frame . maxY )) // \u900f\u904e\u3059\u308b. myImageView . alpha = 0.05 // view\u306bUIImageView\u3092\u8ffd\u52a0. self . view . addSubview ( myImageView ) } }","title":"UIImage\u3067\u753b\u50cf\u306e\u900f\u904e"},{"location":"1.uikit/057_uiimage/#2330","text":"CGSizeMake \u3001 CGRectMake \u304c\u5ec3\u6b62","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/057_uiimage/#reference","text":"UIImage https://developer.apple.com/reference/uikit/uiimage","title":"Reference"},{"location":"1.uikit/058_image/","text":"UIImage\u3092\u307c\u304b\u3059 Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 // // ViewController.swift // swiftdocs // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit extension UIImage { // \u753b\u50cf\u3092Resize\u3059\u308b\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9. class func Resize\u00dcIImage ( image : UIImage , width : CGFloat , height : CGFloat )-> UIImage !{ // \u6307\u5b9a\u3055\u308c\u305f\u753b\u50cf\u306e\u5927\u304d\u3055\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u7528\u610f. UIGraphicsBeginImageContext ( CGSize ( width : width , height : height )) // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306b\u753b\u50cf\u3092\u63cf\u753b\u3059\u308b. image . draw ( in : CGRect ( x : 0 , y : 0 , width : width , height : height )) // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u304b\u3089UIImage\u3092\u4f5c\u308b. let newImage = UIGraphicsGetImageFromCurrentImageContext () // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u9589\u3058\u308b. UIGraphicsEndImageContext () return newImage } } class ViewController : UIViewController { var myImageView : UIImageView ? override func viewDidLoad () { // \u30e9\u30b9\u30bf\u30e9\u30a4\u30ba\u5316\u306e\u521d\u671f\u5316\u5024. let initRasterizeValue : CGFloat = 1.0 // \u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u7528\u610f. let rasterizeSlider = UISlider () rasterizeSlider . layer . position = CGPoint ( x : self . view . frame . midX , y : self . view . frame . maxY - 50 ) rasterizeSlider . layer . zPosition = 1 rasterizeSlider . minimumValue = 0.1 rasterizeSlider . maximumValue = 1.0 rasterizeSlider . value = Float ( 1.0 - initRasterizeValue ) rasterizeSlider . addTarget ( self , action : #selector ( ViewController . onValueChanged ( slider :)), for : UIControl . Event . valueChanged ) self . view . addSubview ( rasterizeSlider ) // UIImage\u3092\u4f5c\u308b. let myImage = UIImage ( named : \"temple.jpg\" ) ! // \u30ea\u30b5\u30a4\u30ba\u3055\u308c\u305fUIImage\u3092\u6307\u5b9a\u3057\u3066\u3001UIImageView\u3092\u4f5c\u308b. myImageView = UIImageView ( image : UIImage . Resize\u00dcIImage ( image : myImage , width : self . view . frame . maxX , height : self . view . frame . maxY )) if myImageView != nil { // \u30e9\u30b9\u30bf\u30e9\u30a4\u30ba\u5316\u3059\u308b. myImageView !. layer . shouldRasterize = true // \u5024\u306e\u521d\u671f\u5316. myImageView !. layer . rasterizationScale = initRasterizeValue self . view . addSubview ( myImageView !) } } /* Slider\u306e\u5024\u304c\u5909\u308f\u3063\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ @objc func onValueChanged ( slider : UISlider ){ if myImageView != nil { // \u30e9\u30b9\u30bf\u30e9\u30a4\u30ba\u5316\u3059\u308b. myImageView !. layer . rasterizationScale = CGFloat ( 1.1 - slider . value ) } } } Swift3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 // // ViewController.swift // swiftdocs // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit extension UIImage { // \u753b\u50cf\u3092Resize\u3059\u308b\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9. class func Resize\u00dcIImage ( image : UIImage , width : CGFloat , height : CGFloat )-> UIImage !{ // \u6307\u5b9a\u3055\u308c\u305f\u753b\u50cf\u306e\u5927\u304d\u3055\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u7528\u610f. UIGraphicsBeginImageContext ( CGSize ( width : width , height : height )) // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306b\u753b\u50cf\u3092\u63cf\u753b\u3059\u308b. image . draw ( in : CGRect ( x : 0 , y : 0 , width : width , height : height )) // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u304b\u3089UIImage\u3092\u4f5c\u308b. let newImage = UIGraphicsGetImageFromCurrentImageContext () // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u9589\u3058\u308b. UIGraphicsEndImageContext () return newImage } } class ViewController : UIViewController { var myImageView : UIImageView ? override func viewDidLoad () { // \u30e9\u30b9\u30bf\u30e9\u30a4\u30ba\u5316\u306e\u521d\u671f\u5316\u5024. let initRasterizeValue : CGFloat = 1.0 // \u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u7528\u610f. let rasterizeSlider = UISlider () rasterizeSlider . layer . position = CGPoint ( x : self . view . frame . midX , y : self . view . frame . maxY - 50 ) rasterizeSlider . layer . zPosition = 1 rasterizeSlider . minimumValue = 0.1 rasterizeSlider . maximumValue = 1.0 rasterizeSlider . value = Float ( 1.0 - initRasterizeValue ) rasterizeSlider . addTarget ( self , action : #selector ( ViewController . onValueChanged ( slider :)), for : UIControlEvents . valueChanged ) self . view . addSubview ( rasterizeSlider ) // UIImage\u3092\u4f5c\u308b. let myImage = UIImage ( named : \"sample2\" ) ! // \u30ea\u30b5\u30a4\u30ba\u3055\u308c\u305fUIImage\u3092\u6307\u5b9a\u3057\u3066\u3001UIImageView\u3092\u4f5c\u308b. myImageView = UIImageView ( image : UIImage . Resize\u00dcIImage ( image : myImage , width : self . view . frame . maxX , height : self . view . frame . maxY )) if myImageView != nil { // \u30e9\u30b9\u30bf\u30e9\u30a4\u30ba\u5316\u3059\u308b. myImageView !. layer . shouldRasterize = true // \u5024\u306e\u521d\u671f\u5316. myImageView !. layer . rasterizationScale = initRasterizeValue self . view . addSubview ( myImageView !) } } /* Slider\u306e\u5024\u304c\u5909\u308f\u3063\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func onValueChanged ( slider : UISlider ){ if myImageView != nil { // \u30e9\u30b9\u30bf\u30e9\u30a4\u30ba\u5316\u3059\u308b. myImageView !. layer . rasterizationScale = CGFloat ( 1.1 - slider . value ) } } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 // // ViewController.swift // UIKit058 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit extension UIImage { // \u753b\u50cf\u3092Resize\u3059\u308b\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9. class func Resize\u00dcIImage ( image : UIImage , width : CGFloat , height : CGFloat )-> UIImage !{ // \u6307\u5b9a\u3055\u308c\u305f\u753b\u50cf\u306e\u5927\u304d\u3055\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u7528\u610f. UIGraphicsBeginImageContext ( CGSizeMake ( width , height )) // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306b\u753b\u50cf\u3092\u63cf\u753b\u3059\u308b. image . drawInRect ( CGRectMake ( 0 , 0 , width , height )) // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u304b\u3089UIImage\u3092\u4f5c\u308b. let newImage = UIGraphicsGetImageFromCurrentImageContext () // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u9589\u3058\u308b. UIGraphicsEndImageContext () return newImage } } class ViewController : UIViewController { var myImageView : UIImageView ? override func viewDidLoad () { // \u30e9\u30b9\u30bf\u30e9\u30a4\u30ba\u5316\u306e\u521d\u671f\u5316\u5024. let initRasterizeValue : CGFloat = 1.0 // \u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u7528\u610f. let rasterizeSlider = UISlider () rasterizeSlider . layer . position = CGPointMake ( self . view . frame . midX , self . view . frame . maxY - 50 ) rasterizeSlider . layer . zPosition = 1 rasterizeSlider . minimumValue = 0.1 rasterizeSlider . maximumValue = 1.0 rasterizeSlider . value = Float ( 1.0 - initRasterizeValue ) rasterizeSlider . addTarget ( self , action : #selector ( ViewController . onValueChanged ( _ :)), forControlEvents : UIControlEvents . ValueChanged ) self . view . addSubview ( rasterizeSlider ) // UIImage\u3092\u4f5c\u308b. let myImage = UIImage ( named : \"sample2\" ) ! // \u30ea\u30b5\u30a4\u30ba\u3055\u308c\u305fUIImage\u3092\u6307\u5b9a\u3057\u3066\u3001UIImageView\u3092\u4f5c\u308b. myImageView = UIImageView ( image : UIImage . Resize\u00dcIImage ( myImage , width : self . view . frame . maxX , height : self . view . frame . maxY )) if myImageView != nil { // \u30e9\u30b9\u30bf\u30e9\u30a4\u30ba\u5316\u3059\u308b. myImageView !. layer . shouldRasterize = true // \u5024\u306e\u521d\u671f\u5316. myImageView !. layer . rasterizationScale = initRasterizeValue self . view . addSubview ( myImageView !) } } /* Slider\u306e\u5024\u304c\u5909\u308f\u3063\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func onValueChanged ( slider : UISlider ){ if myImageView != nil { // \u30e9\u30b9\u30bf\u30e9\u30a4\u30ba\u5316\u3059\u308b. myImageView !. layer . rasterizationScale = CGFloat ( 1.1 - slider . value ) } } } 3.x\u30684.x\u306e\u5dee\u5206 func onValueChanged(slider : UISlider) \u306b @objc \u3092\u8ffd\u52a0 UIControlEvents.valueChanged \u304c UIControl.Event.valueChanged \u306b\u5909\u66f4 2.3\u30683.0\u306e\u5dee\u5206 CGSizeMake \u3001 CGRectMake \u3001 CGPointMake \u304c\u5ec3\u6b62 Reference UIImage https://developer.apple.com/reference/uikit/uiimage","title":"UIImage\u3092\u307c\u304b\u3059"},{"location":"1.uikit/058_image/#uiimage","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 // // ViewController.swift // swiftdocs // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit extension UIImage { // \u753b\u50cf\u3092Resize\u3059\u308b\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9. class func Resize\u00dcIImage ( image : UIImage , width : CGFloat , height : CGFloat )-> UIImage !{ // \u6307\u5b9a\u3055\u308c\u305f\u753b\u50cf\u306e\u5927\u304d\u3055\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u7528\u610f. UIGraphicsBeginImageContext ( CGSize ( width : width , height : height )) // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306b\u753b\u50cf\u3092\u63cf\u753b\u3059\u308b. image . draw ( in : CGRect ( x : 0 , y : 0 , width : width , height : height )) // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u304b\u3089UIImage\u3092\u4f5c\u308b. let newImage = UIGraphicsGetImageFromCurrentImageContext () // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u9589\u3058\u308b. UIGraphicsEndImageContext () return newImage } } class ViewController : UIViewController { var myImageView : UIImageView ? override func viewDidLoad () { // \u30e9\u30b9\u30bf\u30e9\u30a4\u30ba\u5316\u306e\u521d\u671f\u5316\u5024. let initRasterizeValue : CGFloat = 1.0 // \u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u7528\u610f. let rasterizeSlider = UISlider () rasterizeSlider . layer . position = CGPoint ( x : self . view . frame . midX , y : self . view . frame . maxY - 50 ) rasterizeSlider . layer . zPosition = 1 rasterizeSlider . minimumValue = 0.1 rasterizeSlider . maximumValue = 1.0 rasterizeSlider . value = Float ( 1.0 - initRasterizeValue ) rasterizeSlider . addTarget ( self , action : #selector ( ViewController . onValueChanged ( slider :)), for : UIControl . Event . valueChanged ) self . view . addSubview ( rasterizeSlider ) // UIImage\u3092\u4f5c\u308b. let myImage = UIImage ( named : \"temple.jpg\" ) ! // \u30ea\u30b5\u30a4\u30ba\u3055\u308c\u305fUIImage\u3092\u6307\u5b9a\u3057\u3066\u3001UIImageView\u3092\u4f5c\u308b. myImageView = UIImageView ( image : UIImage . Resize\u00dcIImage ( image : myImage , width : self . view . frame . maxX , height : self . view . frame . maxY )) if myImageView != nil { // \u30e9\u30b9\u30bf\u30e9\u30a4\u30ba\u5316\u3059\u308b. myImageView !. layer . shouldRasterize = true // \u5024\u306e\u521d\u671f\u5316. myImageView !. layer . rasterizationScale = initRasterizeValue self . view . addSubview ( myImageView !) } } /* Slider\u306e\u5024\u304c\u5909\u308f\u3063\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ @objc func onValueChanged ( slider : UISlider ){ if myImageView != nil { // \u30e9\u30b9\u30bf\u30e9\u30a4\u30ba\u5316\u3059\u308b. myImageView !. layer . rasterizationScale = CGFloat ( 1.1 - slider . value ) } } } Swift3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 // // ViewController.swift // swiftdocs // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit extension UIImage { // \u753b\u50cf\u3092Resize\u3059\u308b\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9. class func Resize\u00dcIImage ( image : UIImage , width : CGFloat , height : CGFloat )-> UIImage !{ // \u6307\u5b9a\u3055\u308c\u305f\u753b\u50cf\u306e\u5927\u304d\u3055\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u7528\u610f. UIGraphicsBeginImageContext ( CGSize ( width : width , height : height )) // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306b\u753b\u50cf\u3092\u63cf\u753b\u3059\u308b. image . draw ( in : CGRect ( x : 0 , y : 0 , width : width , height : height )) // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u304b\u3089UIImage\u3092\u4f5c\u308b. let newImage = UIGraphicsGetImageFromCurrentImageContext () // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u9589\u3058\u308b. UIGraphicsEndImageContext () return newImage } } class ViewController : UIViewController { var myImageView : UIImageView ? override func viewDidLoad () { // \u30e9\u30b9\u30bf\u30e9\u30a4\u30ba\u5316\u306e\u521d\u671f\u5316\u5024. let initRasterizeValue : CGFloat = 1.0 // \u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u7528\u610f. let rasterizeSlider = UISlider () rasterizeSlider . layer . position = CGPoint ( x : self . view . frame . midX , y : self . view . frame . maxY - 50 ) rasterizeSlider . layer . zPosition = 1 rasterizeSlider . minimumValue = 0.1 rasterizeSlider . maximumValue = 1.0 rasterizeSlider . value = Float ( 1.0 - initRasterizeValue ) rasterizeSlider . addTarget ( self , action : #selector ( ViewController . onValueChanged ( slider :)), for : UIControlEvents . valueChanged ) self . view . addSubview ( rasterizeSlider ) // UIImage\u3092\u4f5c\u308b. let myImage = UIImage ( named : \"sample2\" ) ! // \u30ea\u30b5\u30a4\u30ba\u3055\u308c\u305fUIImage\u3092\u6307\u5b9a\u3057\u3066\u3001UIImageView\u3092\u4f5c\u308b. myImageView = UIImageView ( image : UIImage . Resize\u00dcIImage ( image : myImage , width : self . view . frame . maxX , height : self . view . frame . maxY )) if myImageView != nil { // \u30e9\u30b9\u30bf\u30e9\u30a4\u30ba\u5316\u3059\u308b. myImageView !. layer . shouldRasterize = true // \u5024\u306e\u521d\u671f\u5316. myImageView !. layer . rasterizationScale = initRasterizeValue self . view . addSubview ( myImageView !) } } /* Slider\u306e\u5024\u304c\u5909\u308f\u3063\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func onValueChanged ( slider : UISlider ){ if myImageView != nil { // \u30e9\u30b9\u30bf\u30e9\u30a4\u30ba\u5316\u3059\u308b. myImageView !. layer . rasterizationScale = CGFloat ( 1.1 - slider . value ) } } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 // // ViewController.swift // UIKit058 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit extension UIImage { // \u753b\u50cf\u3092Resize\u3059\u308b\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9. class func Resize\u00dcIImage ( image : UIImage , width : CGFloat , height : CGFloat )-> UIImage !{ // \u6307\u5b9a\u3055\u308c\u305f\u753b\u50cf\u306e\u5927\u304d\u3055\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u7528\u610f. UIGraphicsBeginImageContext ( CGSizeMake ( width , height )) // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306b\u753b\u50cf\u3092\u63cf\u753b\u3059\u308b. image . drawInRect ( CGRectMake ( 0 , 0 , width , height )) // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u304b\u3089UIImage\u3092\u4f5c\u308b. let newImage = UIGraphicsGetImageFromCurrentImageContext () // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u9589\u3058\u308b. UIGraphicsEndImageContext () return newImage } } class ViewController : UIViewController { var myImageView : UIImageView ? override func viewDidLoad () { // \u30e9\u30b9\u30bf\u30e9\u30a4\u30ba\u5316\u306e\u521d\u671f\u5316\u5024. let initRasterizeValue : CGFloat = 1.0 // \u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u7528\u610f. let rasterizeSlider = UISlider () rasterizeSlider . layer . position = CGPointMake ( self . view . frame . midX , self . view . frame . maxY - 50 ) rasterizeSlider . layer . zPosition = 1 rasterizeSlider . minimumValue = 0.1 rasterizeSlider . maximumValue = 1.0 rasterizeSlider . value = Float ( 1.0 - initRasterizeValue ) rasterizeSlider . addTarget ( self , action : #selector ( ViewController . onValueChanged ( _ :)), forControlEvents : UIControlEvents . ValueChanged ) self . view . addSubview ( rasterizeSlider ) // UIImage\u3092\u4f5c\u308b. let myImage = UIImage ( named : \"sample2\" ) ! // \u30ea\u30b5\u30a4\u30ba\u3055\u308c\u305fUIImage\u3092\u6307\u5b9a\u3057\u3066\u3001UIImageView\u3092\u4f5c\u308b. myImageView = UIImageView ( image : UIImage . Resize\u00dcIImage ( myImage , width : self . view . frame . maxX , height : self . view . frame . maxY )) if myImageView != nil { // \u30e9\u30b9\u30bf\u30e9\u30a4\u30ba\u5316\u3059\u308b. myImageView !. layer . shouldRasterize = true // \u5024\u306e\u521d\u671f\u5316. myImageView !. layer . rasterizationScale = initRasterizeValue self . view . addSubview ( myImageView !) } } /* Slider\u306e\u5024\u304c\u5909\u308f\u3063\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func onValueChanged ( slider : UISlider ){ if myImageView != nil { // \u30e9\u30b9\u30bf\u30e9\u30a4\u30ba\u5316\u3059\u308b. myImageView !. layer . rasterizationScale = CGFloat ( 1.1 - slider . value ) } } }","title":"UIImage\u3092\u307c\u304b\u3059"},{"location":"1.uikit/058_image/#3x4x","text":"func onValueChanged(slider : UISlider) \u306b @objc \u3092\u8ffd\u52a0 UIControlEvents.valueChanged \u304c UIControl.Event.valueChanged \u306b\u5909\u66f4","title":"3.x\u30684.x\u306e\u5dee\u5206"},{"location":"1.uikit/058_image/#2330","text":"CGSizeMake \u3001 CGRectMake \u3001 CGPointMake \u304c\u5ec3\u6b62","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/058_image/#reference","text":"UIImage https://developer.apple.com/reference/uikit/uiimage","title":"Reference"},{"location":"1.uikit/059_uiimage/","text":"UIImage\u3092\u30ea\u30b5\u30a4\u30ba\u3059\u308b Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 // // ViewController.swift // UIKit059 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit extension UIImage { // Resize\u3059\u308b\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9. func Resize\u00dcIImage ( width : CGFloat , height : CGFloat )-> UIImage !{ // \u6307\u5b9a\u3055\u308c\u305f\u753b\u50cf\u306e\u5927\u304d\u3055\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u7528\u610f. UIGraphicsBeginImageContext ( CGSize ( width : width , height : height )) // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306b\u81ea\u8eab\u306b\u8a2d\u5b9a\u3055\u308c\u305f\u753b\u50cf\u3092\u63cf\u753b\u3059\u308b. self . draw ( in : CGRect ( x : 0 , y : 0 , width : width , height : height )) // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u304b\u3089UIImage\u3092\u4f5c\u308b. let newImage = UIGraphicsGetImageFromCurrentImageContext () // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u9589\u3058\u308b. UIGraphicsEndImageContext () return newImage } } class ViewController : UIViewController { override func viewDidLoad () { // \u80cc\u666f\u3092\u9ed2\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . black // \u30ea\u30b5\u30a4\u30ba\u5bfe\u8c61\u306eUIImage\u3092\u7528\u610f. let myImage = UIImage ( named : \"sample1.png\" ) ! // \u30ea\u30b5\u30a4\u30ba\u5f8c\u306eUIImage\u3092\u7528\u610f. let resize = myImage . Resize\u00dcIImage ( width : self . view . frame . midX , height : self . view . frame . midY ) // UIImageView\u306b\u30ea\u30b5\u30a4\u30ba\u5f8c\u306eUIImage\u3092\u8a2d\u5b9a. let myImageView = UIImageView ( image : resize ) myImageView . layer . position = CGPoint ( x : self . view . frame . midX , y : self . view . frame . midY ) self . view . addSubview ( myImageView ) } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 // // ViewController.swift // UIKit059 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit extension UIImage { // Resize\u3059\u308b\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9. func Resize\u00dcIImage ( width : CGFloat , height : CGFloat )-> UIImage !{ // \u6307\u5b9a\u3055\u308c\u305f\u753b\u50cf\u306e\u5927\u304d\u3055\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u7528\u610f. UIGraphicsBeginImageContext ( CGSizeMake ( width , height )) // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306b\u81ea\u8eab\u306b\u8a2d\u5b9a\u3055\u308c\u305f\u753b\u50cf\u3092\u63cf\u753b\u3059\u308b. self . drawInRect ( CGRectMake ( 0 , 0 , width , height )) // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u304b\u3089UIImage\u3092\u4f5c\u308b. let newImage = UIGraphicsGetImageFromCurrentImageContext () // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u9589\u3058\u308b. UIGraphicsEndImageContext () return newImage } } class ViewController : UIViewController { override func viewDidLoad () { // \u80cc\u666f\u3092\u9ed2\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . blackColor () // \u30ea\u30b5\u30a4\u30ba\u5bfe\u8c61\u306eUIImage\u3092\u7528\u610f. let myImage = UIImage ( named : \"sample1.png\" ) ! // \u30ea\u30b5\u30a4\u30ba\u5f8c\u306eUIImage\u3092\u7528\u610f. let resize = myImage . Resize\u00dcIImage ( self . view . frame . midX , height : self . view . frame . midY ) // UIImageView\u306b\u30ea\u30b5\u30a4\u30ba\u5f8c\u306eUIImage\u3092\u8a2d\u5b9a. let myImageView = UIImageView ( image : resize ) myImageView . layer . position = CGPointMake ( self . view . frame . midX , self . view . frame . midY ) self . view . addSubview ( myImageView ) } } 2.3\u30683.0\u306e\u5dee\u5206 CGRectMake\u304c\u5ec3\u6b62 drawInRect() \u3067\u306f\u306a\u304f draw(in:) \u3092\u4f7f\u3046 Reference UIImage https://developer.apple.com/reference/uiimage/uiimage","title":"UIImage\u3092\u30ea\u30b5\u30a4\u30ba\u3059\u308b"},{"location":"1.uikit/059_uiimage/#uiimage","text":"Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 // // ViewController.swift // UIKit059 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit extension UIImage { // Resize\u3059\u308b\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9. func Resize\u00dcIImage ( width : CGFloat , height : CGFloat )-> UIImage !{ // \u6307\u5b9a\u3055\u308c\u305f\u753b\u50cf\u306e\u5927\u304d\u3055\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u7528\u610f. UIGraphicsBeginImageContext ( CGSize ( width : width , height : height )) // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306b\u81ea\u8eab\u306b\u8a2d\u5b9a\u3055\u308c\u305f\u753b\u50cf\u3092\u63cf\u753b\u3059\u308b. self . draw ( in : CGRect ( x : 0 , y : 0 , width : width , height : height )) // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u304b\u3089UIImage\u3092\u4f5c\u308b. let newImage = UIGraphicsGetImageFromCurrentImageContext () // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u9589\u3058\u308b. UIGraphicsEndImageContext () return newImage } } class ViewController : UIViewController { override func viewDidLoad () { // \u80cc\u666f\u3092\u9ed2\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . black // \u30ea\u30b5\u30a4\u30ba\u5bfe\u8c61\u306eUIImage\u3092\u7528\u610f. let myImage = UIImage ( named : \"sample1.png\" ) ! // \u30ea\u30b5\u30a4\u30ba\u5f8c\u306eUIImage\u3092\u7528\u610f. let resize = myImage . Resize\u00dcIImage ( width : self . view . frame . midX , height : self . view . frame . midY ) // UIImageView\u306b\u30ea\u30b5\u30a4\u30ba\u5f8c\u306eUIImage\u3092\u8a2d\u5b9a. let myImageView = UIImageView ( image : resize ) myImageView . layer . position = CGPoint ( x : self . view . frame . midX , y : self . view . frame . midY ) self . view . addSubview ( myImageView ) } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 // // ViewController.swift // UIKit059 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit extension UIImage { // Resize\u3059\u308b\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9. func Resize\u00dcIImage ( width : CGFloat , height : CGFloat )-> UIImage !{ // \u6307\u5b9a\u3055\u308c\u305f\u753b\u50cf\u306e\u5927\u304d\u3055\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u7528\u610f. UIGraphicsBeginImageContext ( CGSizeMake ( width , height )) // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306b\u81ea\u8eab\u306b\u8a2d\u5b9a\u3055\u308c\u305f\u753b\u50cf\u3092\u63cf\u753b\u3059\u308b. self . drawInRect ( CGRectMake ( 0 , 0 , width , height )) // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u304b\u3089UIImage\u3092\u4f5c\u308b. let newImage = UIGraphicsGetImageFromCurrentImageContext () // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u9589\u3058\u308b. UIGraphicsEndImageContext () return newImage } } class ViewController : UIViewController { override func viewDidLoad () { // \u80cc\u666f\u3092\u9ed2\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . blackColor () // \u30ea\u30b5\u30a4\u30ba\u5bfe\u8c61\u306eUIImage\u3092\u7528\u610f. let myImage = UIImage ( named : \"sample1.png\" ) ! // \u30ea\u30b5\u30a4\u30ba\u5f8c\u306eUIImage\u3092\u7528\u610f. let resize = myImage . Resize\u00dcIImage ( self . view . frame . midX , height : self . view . frame . midY ) // UIImageView\u306b\u30ea\u30b5\u30a4\u30ba\u5f8c\u306eUIImage\u3092\u8a2d\u5b9a. let myImageView = UIImageView ( image : resize ) myImageView . layer . position = CGPointMake ( self . view . frame . midX , self . view . frame . midY ) self . view . addSubview ( myImageView ) } }","title":"UIImage\u3092\u30ea\u30b5\u30a4\u30ba\u3059\u308b"},{"location":"1.uikit/059_uiimage/#2330","text":"CGRectMake\u304c\u5ec3\u6b62 drawInRect() \u3067\u306f\u306a\u304f draw(in:) \u3092\u4f7f\u3046","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/059_uiimage/#reference","text":"UIImage https://developer.apple.com/reference/uiimage/uiimage","title":"Reference"},{"location":"1.uikit/060_uiimage/","text":"UIImage\u3092\u5408\u6210\u3059\u308b Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 // // ViewController.swift // UIKit060 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit extension UIImage { /* \u753b\u50cf\u3092Resize\u3059\u308b\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9. */ class func Resize\u00dcIImage ( image : UIImage , width : CGFloat , height : CGFloat )-> UIImage !{ // \u6307\u5b9a\u3055\u308c\u305f\u753b\u50cf\u306e\u5927\u304d\u3055\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u7528\u610f. UIGraphicsBeginImageContext ( CGSize ( width : width , height : height )) // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306b\u753b\u50cf\u3092\u63cf\u753b\u3059\u308b. image . draw ( in : CGRect ( x : 0 , y : 0 , width : width , height : height )) // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u304b\u3089UIImage\u3092\u4f5c\u308b. let newImage = UIGraphicsGetImageFromCurrentImageContext () // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u9589\u3058\u308b. UIGraphicsEndImageContext () return newImage } /* \u753b\u50cf\u3092\u5408\u6210\u3059\u308b\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9. */ class func ComposeUIImage ( UIImageArray : [ UIImage ], width : CGFloat , height : CGFloat )-> UIImage !{ // \u6307\u5b9a\u3055\u308c\u305f\u753b\u50cf\u306e\u5927\u304d\u3055\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u7528\u610f. UIGraphicsBeginImageContext ( CGSize ( width : width , height : height )) // UIImage\u306e\u3042\u308b\u5206\u56de\u3059. for image : UIImage in UIImageArray { // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306b\u753b\u50cf\u3092\u63cf\u753b\u3059\u308b. image . draw ( in : CGRect ( x : 0 , y : 0 , width : image . size . width , height : image . size . height )) } // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u304b\u3089UIImage\u3092\u4f5c\u308b. let newImage = UIGraphicsGetImageFromCurrentImageContext () // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u9589\u3058\u308b. UIGraphicsEndImageContext () return newImage } } class ViewController : UIViewController { override func viewDidLoad () { // 1\u3064\u76ee\u306eUIImage\u3092\u4f5c\u308b. var myImage1 = UIImage ( named : \"sample1\" ) ! // \u30ea\u30b5\u30a4\u30ba\u3059\u308b. myImage1 = UIImage . Resize\u00dcIImage ( image : myImage1 , width : self . view . frame . maxX , height : self . view . frame . maxY ) // 2\u3064\u76ee\u306eUIImage\u3092\u4f5c\u308b. var myImage2 = UIImage ( named : \"sample2\" ) ! // \u30ea\u30b5\u30a4\u30ba\u3059\u308b. myImage2 = UIImage . Resize\u00dcIImage ( image : myImage2 , width : self . view . frame . midX , height : self . view . frame . midY ) // \u753b\u50cf\u3092\u5408\u6210\u3059\u308b. let ComposedImage = UIImage . ComposeUIImage ( UIImageArray : [ myImage1 , myImage2 ], width : self . view . frame . maxX , height : self . view . frame . maxY ) // UIImageView\u306b\u5408\u6210\u3055\u308c\u305fUIImage\u3092\u6307\u5b9a\u3059\u308b. let myImageView = UIImageView ( image : ComposedImage ) self . view . addSubview ( myImageView ) } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 // // ViewController.swift // UIKit060 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit extension UIImage { /* \u753b\u50cf\u3092Resize\u3059\u308b\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9. */ class func Resize\u00dcIImage ( image : UIImage , width : CGFloat , height : CGFloat )-> UIImage !{ // \u6307\u5b9a\u3055\u308c\u305f\u753b\u50cf\u306e\u5927\u304d\u3055\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u7528\u610f. UIGraphicsBeginImageContext ( CGSizeMake ( width , height )) // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306b\u753b\u50cf\u3092\u63cf\u753b\u3059\u308b. image . drawInRect ( CGRectMake ( 0 , 0 , width , height )) // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u304b\u3089UIImage\u3092\u4f5c\u308b. let newImage = UIGraphicsGetImageFromCurrentImageContext () // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u9589\u3058\u308b. UIGraphicsEndImageContext () return newImage } /* \u753b\u50cf\u3092\u5408\u6210\u3059\u308b\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9. */ class func ComposeUIImage ( UIImageArray : [ UIImage ], width : CGFloat , height : CGFloat )-> UIImage !{ // \u6307\u5b9a\u3055\u308c\u305f\u753b\u50cf\u306e\u5927\u304d\u3055\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u7528\u610f. UIGraphicsBeginImageContext ( CGSizeMake ( width , height )) // UIImage\u306e\u3042\u308b\u5206\u56de\u3059. for image : UIImage in UIImageArray { // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306b\u753b\u50cf\u3092\u63cf\u753b\u3059\u308b. image . drawInRect ( CGRectMake ( 0 , 0 , image . size . width , image . size . height )) } // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u304b\u3089UIImage\u3092\u4f5c\u308b. let newImage = UIGraphicsGetImageFromCurrentImageContext () // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u9589\u3058\u308b. UIGraphicsEndImageContext () return newImage } } class ViewController : UIViewController { override func viewDidLoad () { // 1\u3064\u76ee\u306eUIImage\u3092\u4f5c\u308b. var myImage1 = UIImage ( named : \"sample1\" ) ! // \u30ea\u30b5\u30a4\u30ba\u3059\u308b. myImage1 = UIImage . Resize\u00dcIImage ( myImage1 , width : self . view . frame . maxX , height : self . view . frame . maxY ) // 2\u3064\u76ee\u306eUIImage\u3092\u4f5c\u308b. var myImage2 = UIImage ( named : \"sample2\" ) ! // \u30ea\u30b5\u30a4\u30ba\u3059\u308b. myImage2 = UIImage . Resize\u00dcIImage ( myImage2 , width : self . view . frame . midX , height : self . view . frame . midY ) // \u753b\u50cf\u3092\u5408\u6210\u3059\u308b. let ComposedImage = UIImage . ComposeUIImage ([ myImage1 , myImage2 ], width : self . view . frame . maxX , height : self . view . frame . maxY ) // UIImageView\u306b\u5408\u6210\u3055\u308c\u305fUIImage\u3092\u6307\u5b9a\u3059\u308b. let myImageView = UIImageView ( image : ComposedImage ) self . view . addSubview ( myImageView ) } } 2.3\u30683.0\u306e\u5dee\u5206 CGRectMake\u304c\u5ec3\u6b62 drawInRect() \u3067\u306f\u306a\u304f draw(in:) \u3092\u4f7f\u3046 Reference UIImage https://developer.apple.com/reference/uiimage/uiimage","title":"UIImage\u3092\u5408\u6210\u3059\u308b"},{"location":"1.uikit/060_uiimage/#uiimage","text":"Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 // // ViewController.swift // UIKit060 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit extension UIImage { /* \u753b\u50cf\u3092Resize\u3059\u308b\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9. */ class func Resize\u00dcIImage ( image : UIImage , width : CGFloat , height : CGFloat )-> UIImage !{ // \u6307\u5b9a\u3055\u308c\u305f\u753b\u50cf\u306e\u5927\u304d\u3055\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u7528\u610f. UIGraphicsBeginImageContext ( CGSize ( width : width , height : height )) // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306b\u753b\u50cf\u3092\u63cf\u753b\u3059\u308b. image . draw ( in : CGRect ( x : 0 , y : 0 , width : width , height : height )) // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u304b\u3089UIImage\u3092\u4f5c\u308b. let newImage = UIGraphicsGetImageFromCurrentImageContext () // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u9589\u3058\u308b. UIGraphicsEndImageContext () return newImage } /* \u753b\u50cf\u3092\u5408\u6210\u3059\u308b\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9. */ class func ComposeUIImage ( UIImageArray : [ UIImage ], width : CGFloat , height : CGFloat )-> UIImage !{ // \u6307\u5b9a\u3055\u308c\u305f\u753b\u50cf\u306e\u5927\u304d\u3055\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u7528\u610f. UIGraphicsBeginImageContext ( CGSize ( width : width , height : height )) // UIImage\u306e\u3042\u308b\u5206\u56de\u3059. for image : UIImage in UIImageArray { // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306b\u753b\u50cf\u3092\u63cf\u753b\u3059\u308b. image . draw ( in : CGRect ( x : 0 , y : 0 , width : image . size . width , height : image . size . height )) } // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u304b\u3089UIImage\u3092\u4f5c\u308b. let newImage = UIGraphicsGetImageFromCurrentImageContext () // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u9589\u3058\u308b. UIGraphicsEndImageContext () return newImage } } class ViewController : UIViewController { override func viewDidLoad () { // 1\u3064\u76ee\u306eUIImage\u3092\u4f5c\u308b. var myImage1 = UIImage ( named : \"sample1\" ) ! // \u30ea\u30b5\u30a4\u30ba\u3059\u308b. myImage1 = UIImage . Resize\u00dcIImage ( image : myImage1 , width : self . view . frame . maxX , height : self . view . frame . maxY ) // 2\u3064\u76ee\u306eUIImage\u3092\u4f5c\u308b. var myImage2 = UIImage ( named : \"sample2\" ) ! // \u30ea\u30b5\u30a4\u30ba\u3059\u308b. myImage2 = UIImage . Resize\u00dcIImage ( image : myImage2 , width : self . view . frame . midX , height : self . view . frame . midY ) // \u753b\u50cf\u3092\u5408\u6210\u3059\u308b. let ComposedImage = UIImage . ComposeUIImage ( UIImageArray : [ myImage1 , myImage2 ], width : self . view . frame . maxX , height : self . view . frame . maxY ) // UIImageView\u306b\u5408\u6210\u3055\u308c\u305fUIImage\u3092\u6307\u5b9a\u3059\u308b. let myImageView = UIImageView ( image : ComposedImage ) self . view . addSubview ( myImageView ) } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 // // ViewController.swift // UIKit060 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit extension UIImage { /* \u753b\u50cf\u3092Resize\u3059\u308b\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9. */ class func Resize\u00dcIImage ( image : UIImage , width : CGFloat , height : CGFloat )-> UIImage !{ // \u6307\u5b9a\u3055\u308c\u305f\u753b\u50cf\u306e\u5927\u304d\u3055\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u7528\u610f. UIGraphicsBeginImageContext ( CGSizeMake ( width , height )) // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306b\u753b\u50cf\u3092\u63cf\u753b\u3059\u308b. image . drawInRect ( CGRectMake ( 0 , 0 , width , height )) // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u304b\u3089UIImage\u3092\u4f5c\u308b. let newImage = UIGraphicsGetImageFromCurrentImageContext () // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u9589\u3058\u308b. UIGraphicsEndImageContext () return newImage } /* \u753b\u50cf\u3092\u5408\u6210\u3059\u308b\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9. */ class func ComposeUIImage ( UIImageArray : [ UIImage ], width : CGFloat , height : CGFloat )-> UIImage !{ // \u6307\u5b9a\u3055\u308c\u305f\u753b\u50cf\u306e\u5927\u304d\u3055\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u7528\u610f. UIGraphicsBeginImageContext ( CGSizeMake ( width , height )) // UIImage\u306e\u3042\u308b\u5206\u56de\u3059. for image : UIImage in UIImageArray { // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306b\u753b\u50cf\u3092\u63cf\u753b\u3059\u308b. image . drawInRect ( CGRectMake ( 0 , 0 , image . size . width , image . size . height )) } // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u304b\u3089UIImage\u3092\u4f5c\u308b. let newImage = UIGraphicsGetImageFromCurrentImageContext () // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u9589\u3058\u308b. UIGraphicsEndImageContext () return newImage } } class ViewController : UIViewController { override func viewDidLoad () { // 1\u3064\u76ee\u306eUIImage\u3092\u4f5c\u308b. var myImage1 = UIImage ( named : \"sample1\" ) ! // \u30ea\u30b5\u30a4\u30ba\u3059\u308b. myImage1 = UIImage . Resize\u00dcIImage ( myImage1 , width : self . view . frame . maxX , height : self . view . frame . maxY ) // 2\u3064\u76ee\u306eUIImage\u3092\u4f5c\u308b. var myImage2 = UIImage ( named : \"sample2\" ) ! // \u30ea\u30b5\u30a4\u30ba\u3059\u308b. myImage2 = UIImage . Resize\u00dcIImage ( myImage2 , width : self . view . frame . midX , height : self . view . frame . midY ) // \u753b\u50cf\u3092\u5408\u6210\u3059\u308b. let ComposedImage = UIImage . ComposeUIImage ([ myImage1 , myImage2 ], width : self . view . frame . maxX , height : self . view . frame . maxY ) // UIImageView\u306b\u5408\u6210\u3055\u308c\u305fUIImage\u3092\u6307\u5b9a\u3059\u308b. let myImageView = UIImageView ( image : ComposedImage ) self . view . addSubview ( myImageView ) } }","title":"UIImage\u3092\u5408\u6210\u3059\u308b"},{"location":"1.uikit/060_uiimage/#2330","text":"CGRectMake\u304c\u5ec3\u6b62 drawInRect() \u3067\u306f\u306a\u304f draw(in:) \u3092\u4f7f\u3046","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/060_uiimage/#reference","text":"UIImage https://developer.apple.com/reference/uiimage/uiimage","title":"Reference"},{"location":"1.uikit/061_screenshot/","text":"UIView\u304b\u3089UIImage\u3092\u53d6\u5f97\u3059\u308b\uff08\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\uff09 Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 // // ViewController.swift // UIKit061 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit extension UIView { func GetImage () -> UIImage { // \u30ad\u30e3\u30d7\u30c1\u30e3\u3059\u308b\u7bc4\u56f2\u3092\u53d6\u5f97. let rect = self . bounds // \u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u753b\u50cf\u306econtext\u3092\u4f5c\u6210. UIGraphicsBeginImageContextWithOptions ( rect . size , false , 0.0 ) let context : CGContext = UIGraphicsGetCurrentContext () ! // \u5bfe\u8c61\u306eview\u5185\u306e\u63cf\u753b\u3092context\u306b\u8907\u5199\u3059\u308b. self . layer . render ( in : context ) // \u73fe\u5728\u306econtext\u306e\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u3092UIImage\u3068\u3057\u3066\u53d6\u5f97. let capturedImage : UIImage = UIGraphicsGetImageFromCurrentImageContext () ! // context\u3092\u9589\u3058\u308b. UIGraphicsEndImageContext () return capturedImage } } class ViewController : UIViewController { var myLabel : UILabel ! var myImageView : UIImageView ! override func viewDidLoad () { // Label\u3092\u751f\u6210. myLabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 100 , height : 100 )) myLabel . text = \"test\" myLabel . textColor = UIColor . white myLabel . layer . cornerRadius = 50.0 myLabel . layer . masksToBounds = true myLabel . backgroundColor = UIColor . blue myLabel . textAlignment = NSTextAlignment . center myLabel . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height / 2 - 100 ) // ImageView\u3092\u751f\u6210. myImageView = UIImageView ( frame : CGRect ( x : 0 , y : 0 , width : 150 , height : 150 )) myImageView . layer . borderColor = UIColor . black . cgColor myImageView . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height - 200 ) myImageView . layer . borderWidth = 0.5 // Button\u3092\u751f\u6210. let myButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 50 , height : 20 )) myButton . setTitle ( \"push\" , for : UIControl . State . normal ) myButton . setTitleColor ( UIColor . blue , for : UIControl . State . normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : UIControl . Event . touchUpInside ) myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height - 50 ) // view\u306b\u305d\u308c\u305e\u308c\u3092\u8ffd\u52a0. self . view . addSubview ( myLabel ) self . view . addSubview ( myImageView ) self . view . addSubview ( myButton ) } /* Button\u304c\u62bc\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ @objc func onClickMyButton ( sender : UIButton ) { // \u30ad\u30e3\u30d7\u30c1\u30e3\u753b\u50cf\u3092\u53d6\u5f97. let myImage = myLabel . GetImage () as UIImage // ImageView\u306eimage\u306b\u30bb\u30c3\u30c8. myImageView . image = myImage // \u7e26\u6a2a\u6bd4\u7387\u3092\u4fdd\u3061\u3064\u3064\u753b\u50cf\u3092UIImageView\u306e\u5927\u304d\u3055\u306b\u5408\u308f\u305b\u308b. myImageView . contentMode = UIView . ContentMode . scaleAspectFit } } Swift3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 // // ViewController.swift // UIKit061 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit extension UIView { func GetImage () -> UIImage { // \u30ad\u30e3\u30d7\u30c1\u30e3\u3059\u308b\u7bc4\u56f2\u3092\u53d6\u5f97. let rect = self . bounds // \u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u753b\u50cf\u306econtext\u3092\u4f5c\u6210. UIGraphicsBeginImageContextWithOptions ( rect . size , false , 0.0 ) let context : CGContext = UIGraphicsGetCurrentContext () ! // \u5bfe\u8c61\u306eview\u5185\u306e\u63cf\u753b\u3092context\u306b\u8907\u5199\u3059\u308b. self . layer . render ( in : context ) // \u73fe\u5728\u306econtext\u306e\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u3092UIImage\u3068\u3057\u3066\u53d6\u5f97. let capturedImage : UIImage = UIGraphicsGetImageFromCurrentImageContext () ! // context\u3092\u9589\u3058\u308b. UIGraphicsEndImageContext () return capturedImage } } class ViewController : UIViewController { var myLabel : UILabel ! var myImageView : UIImageView ! override func viewDidLoad () { // Label\u3092\u751f\u6210. myLabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 100 , height : 100 )) myLabel . text = \"test\" myLabel . textColor = UIColor . white myLabel . layer . cornerRadius = 50.0 myLabel . layer . masksToBounds = true myLabel . backgroundColor = UIColor . blue myLabel . textAlignment = NSTextAlignment . center myLabel . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height / 2 - 100 ) // ImageView\u3092\u751f\u6210. myImageView = UIImageView ( frame : CGRect ( x : 0 , y : 0 , width : 150 , height : 150 )) myImageView . layer . borderColor = UIColor . black . cgColor myImageView . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height - 200 ) myImageView . layer . borderWidth = 0.5 // Button\u3092\u751f\u6210. let myButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 50 , height : 20 )) myButton . setTitle ( \"push\" , for : UIControlState . normal ) myButton . setTitleColor ( UIColor . blue , for : UIControlState . normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : UIControlEvents . touchUpInside ) myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height - 50 ) // view\u306b\u305d\u308c\u305e\u308c\u3092\u8ffd\u52a0. self . view . addSubview ( myLabel ) self . view . addSubview ( myImageView ) self . view . addSubview ( myButton ) } /* Button\u304c\u62bc\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func onClickMyButton ( sender : UIButton ) { // \u30ad\u30e3\u30d7\u30c1\u30e3\u753b\u50cf\u3092\u53d6\u5f97. let myImage = myLabel . GetImage () as UIImage // ImageView\u306eimage\u306b\u30bb\u30c3\u30c8. myImageView . image = myImage // \u7e26\u6a2a\u6bd4\u7387\u3092\u4fdd\u3061\u3064\u3064\u753b\u50cf\u3092UIImageView\u306e\u5927\u304d\u3055\u306b\u5408\u308f\u305b\u308b. myImageView . contentMode = UIViewContentMode . scaleAspectFit } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 // // ViewController.swift // UIKit061 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit extension UIView { func GetImage () -> UIImage { // \u30ad\u30e3\u30d7\u30c1\u30e3\u3059\u308b\u7bc4\u56f2\u3092\u53d6\u5f97. let rect = self . bounds // \u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u753b\u50cf\u306econtext\u3092\u4f5c\u6210. UIGraphicsBeginImageContextWithOptions ( rect . size , false , 0.0 ) let context : CGContextRef = UIGraphicsGetCurrentContext () ! // \u5bfe\u8c61\u306eview\u5185\u306e\u63cf\u753b\u3092context\u306b\u8907\u5199\u3059\u308b. self . layer . renderInContext ( context ) // \u73fe\u5728\u306econtext\u306e\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u3092UIImage\u3068\u3057\u3066\u53d6\u5f97. let capturedImage : UIImage = UIGraphicsGetImageFromCurrentImageContext () // context\u3092\u9589\u3058\u308b. UIGraphicsEndImageContext () return capturedImage } } class ViewController : UIViewController { var myLabel : UILabel ! var myImageView : UIImageView ! override func viewDidLoad () { // Label\u3092\u751f\u6210. myLabel = UILabel ( frame : CGRectMake ( 0 , 0 , 100 , 100 )) myLabel . text = \"test\" myLabel . textColor = UIColor . whiteColor () myLabel . layer . cornerRadius = 50.0 myLabel . layer . masksToBounds = true myLabel . backgroundColor = UIColor . blueColor () myLabel . textAlignment = NSTextAlignment . Center myLabel . layer . position = CGPointMake ( self . view . frame . width / 2 , self . view . frame . height / 2 - 100 ) // ImageView\u3092\u751f\u6210. myImageView = UIImageView ( frame : CGRectMake ( 0 , 0 , 150 , 150 )) myImageView . layer . borderColor = UIColor . blackColor (). CGColor myImageView . layer . position = CGPointMake ( self . view . frame . width / 2 , self . view . frame . height - 200 ) myImageView . layer . borderWidth = 0.5 // Button\u3092\u751f\u6210. let myButton = UIButton ( frame : CGRectMake ( 0 , 0 , 50 , 20 )) myButton . setTitle ( \"push\" , forState : UIControlState . Normal ) myButton . setTitleColor ( UIColor . blueColor (), forState : UIControlState . Normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : UIControlEvents . TouchUpInside ) myButton . layer . position = CGPointMake ( self . view . frame . width / 2 , self . view . frame . height - 50 ) // view\u306b\u305d\u308c\u305e\u308c\u3092\u8ffd\u52a0. self . view . addSubview ( myLabel ) self . view . addSubview ( myImageView ) self . view . addSubview ( myButton ) } /* Button\u304c\u62bc\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func onClickMyButton ( sender : UIButton ) { // \u30ad\u30e3\u30d7\u30c1\u30e3\u753b\u50cf\u3092\u53d6\u5f97. let myImage = myLabel . GetImage () as UIImage // ImageView\u306eimage\u306b\u30bb\u30c3\u30c8. myImageView . image = myImage // \u7e26\u6a2a\u6bd4\u7387\u3092\u4fdd\u3061\u3064\u3064\u753b\u50cf\u3092UIImageView\u306e\u5927\u304d\u3055\u306b\u5408\u308f\u305b\u308b. myImageView . contentMode = UIViewContentMode . ScaleAspectFit } } 3.x\u30684.x\u306e\u5dee\u5206 UIControlState \u304c UIControl.State \u306b\u5909\u66f4 func onClickMyButton(sender: UIButton) \u306b @objc \u3092\u8ffd\u52a0 UIControlEvents \u304c UIControl.Event \u306b\u5909\u66f4 UIViewContentMode \u304c UIView.ContentMode \u306b\u5909\u66f4 2.3\u30683.0\u306e\u5dee\u5206 CGRectMake\u304c\u5ec3\u6b62 CGContextRef \u3067\u306f\u306a\u304f CGContext \u3092\u4f7f\u3046 Reference CGContextRef https://developer.apple.com/reference/coregraphics/cgcontextref CGContext https://developer.apple.com/reference/coregraphics/cgcontext","title":"UIView\u304b\u3089UIImage\u3092\u53d6\u5f97\u3059\u308b\uff08\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\uff09"},{"location":"1.uikit/061_screenshot/#uiviewuiimage","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 // // ViewController.swift // UIKit061 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit extension UIView { func GetImage () -> UIImage { // \u30ad\u30e3\u30d7\u30c1\u30e3\u3059\u308b\u7bc4\u56f2\u3092\u53d6\u5f97. let rect = self . bounds // \u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u753b\u50cf\u306econtext\u3092\u4f5c\u6210. UIGraphicsBeginImageContextWithOptions ( rect . size , false , 0.0 ) let context : CGContext = UIGraphicsGetCurrentContext () ! // \u5bfe\u8c61\u306eview\u5185\u306e\u63cf\u753b\u3092context\u306b\u8907\u5199\u3059\u308b. self . layer . render ( in : context ) // \u73fe\u5728\u306econtext\u306e\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u3092UIImage\u3068\u3057\u3066\u53d6\u5f97. let capturedImage : UIImage = UIGraphicsGetImageFromCurrentImageContext () ! // context\u3092\u9589\u3058\u308b. UIGraphicsEndImageContext () return capturedImage } } class ViewController : UIViewController { var myLabel : UILabel ! var myImageView : UIImageView ! override func viewDidLoad () { // Label\u3092\u751f\u6210. myLabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 100 , height : 100 )) myLabel . text = \"test\" myLabel . textColor = UIColor . white myLabel . layer . cornerRadius = 50.0 myLabel . layer . masksToBounds = true myLabel . backgroundColor = UIColor . blue myLabel . textAlignment = NSTextAlignment . center myLabel . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height / 2 - 100 ) // ImageView\u3092\u751f\u6210. myImageView = UIImageView ( frame : CGRect ( x : 0 , y : 0 , width : 150 , height : 150 )) myImageView . layer . borderColor = UIColor . black . cgColor myImageView . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height - 200 ) myImageView . layer . borderWidth = 0.5 // Button\u3092\u751f\u6210. let myButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 50 , height : 20 )) myButton . setTitle ( \"push\" , for : UIControl . State . normal ) myButton . setTitleColor ( UIColor . blue , for : UIControl . State . normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : UIControl . Event . touchUpInside ) myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height - 50 ) // view\u306b\u305d\u308c\u305e\u308c\u3092\u8ffd\u52a0. self . view . addSubview ( myLabel ) self . view . addSubview ( myImageView ) self . view . addSubview ( myButton ) } /* Button\u304c\u62bc\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ @objc func onClickMyButton ( sender : UIButton ) { // \u30ad\u30e3\u30d7\u30c1\u30e3\u753b\u50cf\u3092\u53d6\u5f97. let myImage = myLabel . GetImage () as UIImage // ImageView\u306eimage\u306b\u30bb\u30c3\u30c8. myImageView . image = myImage // \u7e26\u6a2a\u6bd4\u7387\u3092\u4fdd\u3061\u3064\u3064\u753b\u50cf\u3092UIImageView\u306e\u5927\u304d\u3055\u306b\u5408\u308f\u305b\u308b. myImageView . contentMode = UIView . ContentMode . scaleAspectFit } } Swift3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 // // ViewController.swift // UIKit061 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit extension UIView { func GetImage () -> UIImage { // \u30ad\u30e3\u30d7\u30c1\u30e3\u3059\u308b\u7bc4\u56f2\u3092\u53d6\u5f97. let rect = self . bounds // \u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u753b\u50cf\u306econtext\u3092\u4f5c\u6210. UIGraphicsBeginImageContextWithOptions ( rect . size , false , 0.0 ) let context : CGContext = UIGraphicsGetCurrentContext () ! // \u5bfe\u8c61\u306eview\u5185\u306e\u63cf\u753b\u3092context\u306b\u8907\u5199\u3059\u308b. self . layer . render ( in : context ) // \u73fe\u5728\u306econtext\u306e\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u3092UIImage\u3068\u3057\u3066\u53d6\u5f97. let capturedImage : UIImage = UIGraphicsGetImageFromCurrentImageContext () ! // context\u3092\u9589\u3058\u308b. UIGraphicsEndImageContext () return capturedImage } } class ViewController : UIViewController { var myLabel : UILabel ! var myImageView : UIImageView ! override func viewDidLoad () { // Label\u3092\u751f\u6210. myLabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 100 , height : 100 )) myLabel . text = \"test\" myLabel . textColor = UIColor . white myLabel . layer . cornerRadius = 50.0 myLabel . layer . masksToBounds = true myLabel . backgroundColor = UIColor . blue myLabel . textAlignment = NSTextAlignment . center myLabel . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height / 2 - 100 ) // ImageView\u3092\u751f\u6210. myImageView = UIImageView ( frame : CGRect ( x : 0 , y : 0 , width : 150 , height : 150 )) myImageView . layer . borderColor = UIColor . black . cgColor myImageView . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height - 200 ) myImageView . layer . borderWidth = 0.5 // Button\u3092\u751f\u6210. let myButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 50 , height : 20 )) myButton . setTitle ( \"push\" , for : UIControlState . normal ) myButton . setTitleColor ( UIColor . blue , for : UIControlState . normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : UIControlEvents . touchUpInside ) myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height - 50 ) // view\u306b\u305d\u308c\u305e\u308c\u3092\u8ffd\u52a0. self . view . addSubview ( myLabel ) self . view . addSubview ( myImageView ) self . view . addSubview ( myButton ) } /* Button\u304c\u62bc\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func onClickMyButton ( sender : UIButton ) { // \u30ad\u30e3\u30d7\u30c1\u30e3\u753b\u50cf\u3092\u53d6\u5f97. let myImage = myLabel . GetImage () as UIImage // ImageView\u306eimage\u306b\u30bb\u30c3\u30c8. myImageView . image = myImage // \u7e26\u6a2a\u6bd4\u7387\u3092\u4fdd\u3061\u3064\u3064\u753b\u50cf\u3092UIImageView\u306e\u5927\u304d\u3055\u306b\u5408\u308f\u305b\u308b. myImageView . contentMode = UIViewContentMode . scaleAspectFit } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 // // ViewController.swift // UIKit061 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit extension UIView { func GetImage () -> UIImage { // \u30ad\u30e3\u30d7\u30c1\u30e3\u3059\u308b\u7bc4\u56f2\u3092\u53d6\u5f97. let rect = self . bounds // \u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u753b\u50cf\u306econtext\u3092\u4f5c\u6210. UIGraphicsBeginImageContextWithOptions ( rect . size , false , 0.0 ) let context : CGContextRef = UIGraphicsGetCurrentContext () ! // \u5bfe\u8c61\u306eview\u5185\u306e\u63cf\u753b\u3092context\u306b\u8907\u5199\u3059\u308b. self . layer . renderInContext ( context ) // \u73fe\u5728\u306econtext\u306e\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u3092UIImage\u3068\u3057\u3066\u53d6\u5f97. let capturedImage : UIImage = UIGraphicsGetImageFromCurrentImageContext () // context\u3092\u9589\u3058\u308b. UIGraphicsEndImageContext () return capturedImage } } class ViewController : UIViewController { var myLabel : UILabel ! var myImageView : UIImageView ! override func viewDidLoad () { // Label\u3092\u751f\u6210. myLabel = UILabel ( frame : CGRectMake ( 0 , 0 , 100 , 100 )) myLabel . text = \"test\" myLabel . textColor = UIColor . whiteColor () myLabel . layer . cornerRadius = 50.0 myLabel . layer . masksToBounds = true myLabel . backgroundColor = UIColor . blueColor () myLabel . textAlignment = NSTextAlignment . Center myLabel . layer . position = CGPointMake ( self . view . frame . width / 2 , self . view . frame . height / 2 - 100 ) // ImageView\u3092\u751f\u6210. myImageView = UIImageView ( frame : CGRectMake ( 0 , 0 , 150 , 150 )) myImageView . layer . borderColor = UIColor . blackColor (). CGColor myImageView . layer . position = CGPointMake ( self . view . frame . width / 2 , self . view . frame . height - 200 ) myImageView . layer . borderWidth = 0.5 // Button\u3092\u751f\u6210. let myButton = UIButton ( frame : CGRectMake ( 0 , 0 , 50 , 20 )) myButton . setTitle ( \"push\" , forState : UIControlState . Normal ) myButton . setTitleColor ( UIColor . blueColor (), forState : UIControlState . Normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : UIControlEvents . TouchUpInside ) myButton . layer . position = CGPointMake ( self . view . frame . width / 2 , self . view . frame . height - 50 ) // view\u306b\u305d\u308c\u305e\u308c\u3092\u8ffd\u52a0. self . view . addSubview ( myLabel ) self . view . addSubview ( myImageView ) self . view . addSubview ( myButton ) } /* Button\u304c\u62bc\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func onClickMyButton ( sender : UIButton ) { // \u30ad\u30e3\u30d7\u30c1\u30e3\u753b\u50cf\u3092\u53d6\u5f97. let myImage = myLabel . GetImage () as UIImage // ImageView\u306eimage\u306b\u30bb\u30c3\u30c8. myImageView . image = myImage // \u7e26\u6a2a\u6bd4\u7387\u3092\u4fdd\u3061\u3064\u3064\u753b\u50cf\u3092UIImageView\u306e\u5927\u304d\u3055\u306b\u5408\u308f\u305b\u308b. myImageView . contentMode = UIViewContentMode . ScaleAspectFit } }","title":"UIView\u304b\u3089UIImage\u3092\u53d6\u5f97\u3059\u308b\uff08\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\uff09"},{"location":"1.uikit/061_screenshot/#3x4x","text":"UIControlState \u304c UIControl.State \u306b\u5909\u66f4 func onClickMyButton(sender: UIButton) \u306b @objc \u3092\u8ffd\u52a0 UIControlEvents \u304c UIControl.Event \u306b\u5909\u66f4 UIViewContentMode \u304c UIView.ContentMode \u306b\u5909\u66f4","title":"3.x\u30684.x\u306e\u5dee\u5206"},{"location":"1.uikit/061_screenshot/#2330","text":"CGRectMake\u304c\u5ec3\u6b62 CGContextRef \u3067\u306f\u306a\u304f CGContext \u3092\u4f7f\u3046","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/061_screenshot/#reference","text":"CGContextRef https://developer.apple.com/reference/coregraphics/cgcontextref CGContext https://developer.apple.com/reference/coregraphics/cgcontext","title":"Reference"},{"location":"1.uikit/062_uipopover/","text":"UIPopoverController\u3092\u4f7f\u3063\u3066View\u3092\u30dd\u30c3\u30d7\u3055\u305b\u308b(iPad\u5c02\u7528) Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 // // ViewController.swift // swiftdocs // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { // Button\u3092\u4f5c\u308b. let myButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myButton . layer . position = self . view . center myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . backgroundColor = UIColor . orange myButton . setTitle ( \"Present!\" , for : UIControl . State . normal ) myButton . addTarget ( self , action : #selector ( ViewController . onMyButtonClick ( sender :)), for : UIControl . Event . touchUpInside ) // view\u306bButton\u3092\u8ffd\u52a0. self . view . addSubview ( myButton ) } /* \u30dc\u30bf\u30f3\u304c\u30bf\u30c3\u30d7\u3055\u308c\u305f\u6642\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ @objc func onMyButtonClick ( sender : UIButton ){ // \u30b3\u30f3\u30c6\u30f3\u30c4\u306eViewController\u3092\u751f\u6210. let popover = UIViewController () // \u30b3\u30f3\u30c6\u30f3\u30c4ViewController\u306e\u30b5\u30a4\u30ba\u3092\u6307\u5b9a. popover . preferredContentSize = CGSize ( width : 200 , height : 200 ) // \u30b3\u30f3\u30c6\u30f3\u30c4ViewController\u306e\u80cc\u666f\u3092\u9752\u8272\u306b\u8a2d\u5b9a. popover . view . backgroundColor = UIColor . blue popover . modalPresentationStyle = . popover if let presentationController = popover . popoverPresentationController { presentationController . permittedArrowDirections = . any presentationController . sourceView = sender presentationController . sourceRect = sender . bounds } present ( popover , animated : true , completion : nil ) } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 // // ViewController.swift // swiftdocs // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { // Button\u3092\u4f5c\u308b. let myButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myButton . layer . position = self . view . center myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . backgroundColor = UIColor . orange myButton . setTitle ( \"Present!\" , for : UIControlState . normal ) myButton . addTarget ( self , action : #selector ( ViewController . onMyButtonClick ( sender :)), for : UIControlEvents . touchUpInside ) // view\u306bButton\u3092\u8ffd\u52a0. self . view . addSubview ( myButton ) } /* \u30dc\u30bf\u30f3\u304c\u30bf\u30c3\u30d7\u3055\u308c\u305f\u6642\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func onMyButtonClick ( sender : UIButton ){ // \u30b3\u30f3\u30c6\u30f3\u30c4\u306eViewController\u3092\u751f\u6210. let popover = UIViewController () // \u30b3\u30f3\u30c6\u30f3\u30c4ViewController\u306e\u30b5\u30a4\u30ba\u3092\u6307\u5b9a. popover . preferredContentSize = CGSize ( width : 200 , height : 200 ) // \u30b3\u30f3\u30c6\u30f3\u30c4ViewController\u306e\u80cc\u666f\u3092\u9752\u8272\u306b\u8a2d\u5b9a. popover . view . backgroundColor = UIColor . blue popover . modalPresentationStyle = . popover if let presentationController = popover . popoverPresentationController { presentationController . permittedArrowDirections = . any presentationController . sourceView = sender presentationController . sourceRect = sender . bounds } present ( popover , animated : true , completion : nil ) } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 // // ViewController.swift // UIKit062 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { // Button\u3092\u4f5c\u308b. let myButton = UIButton ( frame : CGRectMake ( 0 , 0 , 200 , 50 )) myButton . layer . position = self . view . center myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . backgroundColor = UIColor . orangeColor () myButton . setTitle ( \"Present!\" , forState : UIControlState . Normal ) myButton . addTarget ( self , action : #selector ( ViewController . onMyButtonClick ( _ :)), forControlEvents : UIControlEvents . TouchUpInside ) // view\u306bButton\u3092\u8ffd\u52a0. self . view . addSubview ( myButton ) } /* \u30dc\u30bf\u30f3\u304c\u30bf\u30c3\u30d7\u3055\u308c\u305f\u6642\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func onMyButtonClick ( sender : UIButton ){ // \u30b3\u30f3\u30c6\u30f3\u30c4\u306eViewController\u3092\u751f\u6210. let popover = UIViewController () // \u30b3\u30f3\u30c6\u30f3\u30c4ViewController\u306e\u30b5\u30a4\u30ba\u3092\u6307\u5b9a. popover . preferredContentSize = CGSize ( width : 200 , height : 200 ) // \u30b3\u30f3\u30c6\u30f3\u30c4ViewController\u306e\u80cc\u666f\u3092\u9752\u8272\u306b\u8a2d\u5b9a. popover . view . backgroundColor = UIColor . blueColor () popover . modalPresentationStyle = . Popover if let presentationController = popover . popoverPresentationController { presentationController . permittedArrowDirections = . Any presentationController . sourceView = sender presentationController . sourceRect = sender . bounds } presentViewController ( popover , animated : true , completion : nil ) } } 3.x\u30684.x\u306e\u5dee\u5206 UIControlState \u304c UIControl.State \u306b\u5909\u66f4 UIControlEvents \u304c UIControl.Event \u306b\u5909\u66f4 func onMyButtonClick(sender : UIButton) \u306b @objc \u3092\u8ffd\u52a0 2.3\u30683.0\u306e\u5dee\u5206 CGRectMake\u304c\u5ec3\u6b62 presentViewController \u304b\u3089 present \u306b\u5909\u66f4 Reference UIViewController https://developer.apple.com/reference/uikit/uiviewcontroller UIPopverController https://developer.apple.com/reference/uikit/uipopovercontroller","title":"UIPopoverController\u3092\u4f7f\u3063\u3066View\u3092\u30dd\u30c3\u30d7\u3055\u305b\u308b(iPad\u5c02\u7528)"},{"location":"1.uikit/062_uipopover/#uipopovercontrollerviewipad","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 // // ViewController.swift // swiftdocs // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { // Button\u3092\u4f5c\u308b. let myButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myButton . layer . position = self . view . center myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . backgroundColor = UIColor . orange myButton . setTitle ( \"Present!\" , for : UIControl . State . normal ) myButton . addTarget ( self , action : #selector ( ViewController . onMyButtonClick ( sender :)), for : UIControl . Event . touchUpInside ) // view\u306bButton\u3092\u8ffd\u52a0. self . view . addSubview ( myButton ) } /* \u30dc\u30bf\u30f3\u304c\u30bf\u30c3\u30d7\u3055\u308c\u305f\u6642\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ @objc func onMyButtonClick ( sender : UIButton ){ // \u30b3\u30f3\u30c6\u30f3\u30c4\u306eViewController\u3092\u751f\u6210. let popover = UIViewController () // \u30b3\u30f3\u30c6\u30f3\u30c4ViewController\u306e\u30b5\u30a4\u30ba\u3092\u6307\u5b9a. popover . preferredContentSize = CGSize ( width : 200 , height : 200 ) // \u30b3\u30f3\u30c6\u30f3\u30c4ViewController\u306e\u80cc\u666f\u3092\u9752\u8272\u306b\u8a2d\u5b9a. popover . view . backgroundColor = UIColor . blue popover . modalPresentationStyle = . popover if let presentationController = popover . popoverPresentationController { presentationController . permittedArrowDirections = . any presentationController . sourceView = sender presentationController . sourceRect = sender . bounds } present ( popover , animated : true , completion : nil ) } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 // // ViewController.swift // swiftdocs // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { // Button\u3092\u4f5c\u308b. let myButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myButton . layer . position = self . view . center myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . backgroundColor = UIColor . orange myButton . setTitle ( \"Present!\" , for : UIControlState . normal ) myButton . addTarget ( self , action : #selector ( ViewController . onMyButtonClick ( sender :)), for : UIControlEvents . touchUpInside ) // view\u306bButton\u3092\u8ffd\u52a0. self . view . addSubview ( myButton ) } /* \u30dc\u30bf\u30f3\u304c\u30bf\u30c3\u30d7\u3055\u308c\u305f\u6642\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func onMyButtonClick ( sender : UIButton ){ // \u30b3\u30f3\u30c6\u30f3\u30c4\u306eViewController\u3092\u751f\u6210. let popover = UIViewController () // \u30b3\u30f3\u30c6\u30f3\u30c4ViewController\u306e\u30b5\u30a4\u30ba\u3092\u6307\u5b9a. popover . preferredContentSize = CGSize ( width : 200 , height : 200 ) // \u30b3\u30f3\u30c6\u30f3\u30c4ViewController\u306e\u80cc\u666f\u3092\u9752\u8272\u306b\u8a2d\u5b9a. popover . view . backgroundColor = UIColor . blue popover . modalPresentationStyle = . popover if let presentationController = popover . popoverPresentationController { presentationController . permittedArrowDirections = . any presentationController . sourceView = sender presentationController . sourceRect = sender . bounds } present ( popover , animated : true , completion : nil ) } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 // // ViewController.swift // UIKit062 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { // Button\u3092\u4f5c\u308b. let myButton = UIButton ( frame : CGRectMake ( 0 , 0 , 200 , 50 )) myButton . layer . position = self . view . center myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . backgroundColor = UIColor . orangeColor () myButton . setTitle ( \"Present!\" , forState : UIControlState . Normal ) myButton . addTarget ( self , action : #selector ( ViewController . onMyButtonClick ( _ :)), forControlEvents : UIControlEvents . TouchUpInside ) // view\u306bButton\u3092\u8ffd\u52a0. self . view . addSubview ( myButton ) } /* \u30dc\u30bf\u30f3\u304c\u30bf\u30c3\u30d7\u3055\u308c\u305f\u6642\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func onMyButtonClick ( sender : UIButton ){ // \u30b3\u30f3\u30c6\u30f3\u30c4\u306eViewController\u3092\u751f\u6210. let popover = UIViewController () // \u30b3\u30f3\u30c6\u30f3\u30c4ViewController\u306e\u30b5\u30a4\u30ba\u3092\u6307\u5b9a. popover . preferredContentSize = CGSize ( width : 200 , height : 200 ) // \u30b3\u30f3\u30c6\u30f3\u30c4ViewController\u306e\u80cc\u666f\u3092\u9752\u8272\u306b\u8a2d\u5b9a. popover . view . backgroundColor = UIColor . blueColor () popover . modalPresentationStyle = . Popover if let presentationController = popover . popoverPresentationController { presentationController . permittedArrowDirections = . Any presentationController . sourceView = sender presentationController . sourceRect = sender . bounds } presentViewController ( popover , animated : true , completion : nil ) } }","title":"UIPopoverController\u3092\u4f7f\u3063\u3066View\u3092\u30dd\u30c3\u30d7\u3055\u305b\u308b(iPad\u5c02\u7528)"},{"location":"1.uikit/062_uipopover/#3x4x","text":"UIControlState \u304c UIControl.State \u306b\u5909\u66f4 UIControlEvents \u304c UIControl.Event \u306b\u5909\u66f4 func onMyButtonClick(sender : UIButton) \u306b @objc \u3092\u8ffd\u52a0","title":"3.x\u30684.x\u306e\u5dee\u5206"},{"location":"1.uikit/062_uipopover/#2330","text":"CGRectMake\u304c\u5ec3\u6b62 presentViewController \u304b\u3089 present \u306b\u5909\u66f4","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/062_uipopover/#reference","text":"UIViewController https://developer.apple.com/reference/uikit/uiviewcontroller UIPopverController https://developer.apple.com/reference/uikit/uipopovercontroller","title":"Reference"},{"location":"1.uikit/063_uitextchecker/","text":"UITextChecker\u3067\u30b9\u30da\u30eb\u30c1\u30a7\u30c3\u30af Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 // // ViewController.swift // swiftdocs // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController , UITextFieldDelegate { var myTextField : UITextField ! var suggestTextField : UITextView ! override func viewDidLoad () { super . viewDidLoad () // Button\u3092\u751f\u6210. let myButton = UIButton () myButton . frame = CGRect ( x : 0 , y : 0 , width : 200 , height : 40 ) myButton . backgroundColor = UIColor . red myButton . layer . masksToBounds = true myButton . setTitle ( \"\u30c1\u30a7\u30c3\u30af\u3059\u308b\" , for : UIControl . State . normal ) myButton . setTitleColor ( UIColor . white , for : UIControl . State . normal ) myButton . setTitleColor ( UIColor . black , for : UIControl . State . highlighted ) myButton . layer . cornerRadius = 20.0 myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : 200 ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchUpInside ) self . view . addSubview ( myButton ) // \u5019\u88dc\u7528TextField\u3092\u751f\u6210. suggestTextField = UITextView ( frame : CGRect ( x : 0 , y : 0 , width : 300 , height : 250 )) suggestTextField . layer . position = CGPoint ( x : self . view . frame . midX , y : self . view . frame . midY + 150 ) suggestTextField . backgroundColor = UIColor . black suggestTextField . textColor = UIColor . white suggestTextField . textAlignment = NSTextAlignment . left suggestTextField . text = \"\u3082\u3057\u304b\u3057\u3066: \" suggestTextField . font = UIFont . systemFont ( ofSize : CGFloat ( 20 )) suggestTextField . isEditable = false self . view . addSubview ( suggestTextField !) // \u30b9\u30da\u30eb\u5165\u529b\u7528UITextField\u3092\u4f5c\u6210. myTextField = UITextField ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 30 )) myTextField . borderStyle = UITextField . BorderStyle . roundedRect myTextField . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 100 ) self . view . addSubview ( myTextField ) } /* Button\u304c\u62bc\u3055\u308c\u305f\u3068\u304d\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ @objc func onClickMyButton ( sender : UIButton ){ // \u30b9\u30da\u30eb\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3046. suggestUpdate () } /* \u30b9\u30da\u30eb\u30c1\u30a7\u30c3\u30af\u3059\u308b\u30e1\u30bd\u30c3\u30c9. */ func suggestUpdate (){ // UITextChecker\u306e\u5ba3\u8a00. let checker : UITextChecker = UITextChecker () // text\u306e\u6587\u5b57\u6570\u3092\u53d6\u5f97. let length = myTextField . text ?. characters . count // \u30b9\u30da\u30eb\u30c1\u30a7\u30c3\u30af\u3092\u3059\u308b\u7bc4\u56f2(0~\u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u6570)\u3092\u6307\u5b9a. let checkRange : NSRange = NSMakeRange ( 0 , length !) // \u7bc4\u56f2\u306e\u4e2d\u304b\u3089\u9593\u9055\u3063\u305f\u30b9\u30da\u30eb\u306e\u7269\u3092\u63a2\u3059. let misspelledRange : NSRange = checker . rangeOfMisspelledWord ( // \u30c1\u30a7\u30c3\u30af\u3059\u308b\u6587\u5b57\u3092\u6307\u5b9a. in : myTextField . text !, // \u30c1\u30a7\u30c3\u30af\u3059\u308b\u7bc4\u56f2\u3092\u6307\u5b9a. range : checkRange , // \u958b\u59cb\u4f4d\u7f6e\u3092\u7bc4\u56f2\u306e\u5148\u982d\u306b\u6307\u5b9a. startingAt : checkRange . location , // \u6307\u5b9a\u3055\u308c\u305f\u7bc4\u56f2\u5185\u306b\u30df\u30b9\u304c\u898b\u3064\u304b\u3089\u306a\u304f\u3066\u3082range\u306e\u958b\u59cb\u4f4d\u7f6e\u304b\u3089\u63a2\u3057\u59cb\u3081\u308b.(false\u306a\u3089\u30df\u30b9\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u672b\u5c3e\u306e\u4f4d\u7f6e\u3092\u4fdd\u6301\u3059\u308b) wrap : true , // \u8a00\u8a9e\u3092\u82f1\u8a9e\u306b\u6307\u5b9a. language : \"en_US\" ) // \u30b9\u30da\u30eb\u30df\u30b9\u304c\u898b\u3064\u304b\u3063\u305f\u5834\u5408. if misspelledRange . location != NSNotFound { // \u6b63\u3057\u3044\u30b9\u30da\u30eb\u306e\u5019\u88dc\u3092\u53d6\u5f97. let candidateArray : NSArray = checker . guesses ( // \u30b9\u30da\u30eb\u30df\u30b9\u304c\u3042\u308b\u7bc4\u56f2. forWordRange : misspelledRange , // \u30b9\u30da\u30eb\u30df\u30b9\u3092\u542b\u3080\u6587\u5b57(range\u5185). in : myTextField . text !, // \u8a00\u8a9e\u3092\u6307\u5b9a. language : \"en_US\" ) ! as NSArray var str = \"\u3082\u3057\u304b\u3057\u3066: \\n \" // \u5019\u88dc\u3092\u914d\u5217\u304b\u30891\u3064\u305a\u3064\u53d6\u308a\u51fa\u3059. for text in candidateArray { str += ( text as AnyObject ). description ! str += \", \" } suggestTextField ?. text = str } } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 // // ViewController.swift // swiftdocs // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController , UITextFieldDelegate { var myTextField : UITextField ! var suggestTextField : UITextView ! override func viewDidLoad () { super . viewDidLoad () // Button\u3092\u751f\u6210. let myButton = UIButton () myButton . frame = CGRect ( x : 0 , y : 0 , width : 200 , height : 40 ) myButton . backgroundColor = UIColor . red myButton . layer . masksToBounds = true myButton . setTitle ( \"\u30c1\u30a7\u30c3\u30af\u3059\u308b\" , for : UIControlState . normal ) myButton . setTitleColor ( UIColor . white , for : UIControlState . normal ) myButton . setTitleColor ( UIColor . black , for : UIControlState . highlighted ) myButton . layer . cornerRadius = 20.0 myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : 200 ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchUpInside ) self . view . addSubview ( myButton ) // \u5019\u88dc\u7528TextField\u3092\u751f\u6210. suggestTextField = UITextView ( frame : CGRect ( x : 0 , y : 0 , width : 300 , height : 250 )) suggestTextField . layer . position = CGPoint ( x : self . view . frame . midX , y : self . view . frame . midY + 150 ) suggestTextField . backgroundColor = UIColor . black suggestTextField . textColor = UIColor . white suggestTextField . textAlignment = NSTextAlignment . left suggestTextField . text = \"\u3082\u3057\u304b\u3057\u3066: \" suggestTextField . font = UIFont . systemFont ( ofSize : CGFloat ( 20 )) suggestTextField . isEditable = false self . view . addSubview ( suggestTextField !) // \u30b9\u30da\u30eb\u5165\u529b\u7528UITextField\u3092\u4f5c\u6210. myTextField = UITextField ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 30 )) myTextField . borderStyle = UITextBorderStyle . roundedRect myTextField . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 100 ) self . view . addSubview ( myTextField ) } /* Button\u304c\u62bc\u3055\u308c\u305f\u3068\u304d\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func onClickMyButton ( sender : UIButton ){ // \u30b9\u30da\u30eb\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3046. suggestUpdate () } /* \u30b9\u30da\u30eb\u30c1\u30a7\u30c3\u30af\u3059\u308b\u30e1\u30bd\u30c3\u30c9. */ func suggestUpdate (){ // UITextChecker\u306e\u5ba3\u8a00. let checker : UITextChecker = UITextChecker () // text\u306e\u6587\u5b57\u6570\u3092\u53d6\u5f97. let length = myTextField . text ?. characters . count // \u30b9\u30da\u30eb\u30c1\u30a7\u30c3\u30af\u3092\u3059\u308b\u7bc4\u56f2(0~\u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u6570)\u3092\u6307\u5b9a. let checkRange : NSRange = NSMakeRange ( 0 , length !) // \u7bc4\u56f2\u306e\u4e2d\u304b\u3089\u9593\u9055\u3063\u305f\u30b9\u30da\u30eb\u306e\u7269\u3092\u63a2\u3059. let misspelledRange : NSRange = checker . rangeOfMisspelledWord ( // \u30c1\u30a7\u30c3\u30af\u3059\u308b\u6587\u5b57\u3092\u6307\u5b9a. in : myTextField . text !, // \u30c1\u30a7\u30c3\u30af\u3059\u308b\u7bc4\u56f2\u3092\u6307\u5b9a. range : checkRange , // \u958b\u59cb\u4f4d\u7f6e\u3092\u7bc4\u56f2\u306e\u5148\u982d\u306b\u6307\u5b9a. startingAt : checkRange . location , // \u6307\u5b9a\u3055\u308c\u305f\u7bc4\u56f2\u5185\u306b\u30df\u30b9\u304c\u898b\u3064\u304b\u3089\u306a\u304f\u3066\u3082range\u306e\u958b\u59cb\u4f4d\u7f6e\u304b\u3089\u63a2\u3057\u59cb\u3081\u308b.(false\u306a\u3089\u30df\u30b9\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u672b\u5c3e\u306e\u4f4d\u7f6e\u3092\u4fdd\u6301\u3059\u308b) wrap : true , // \u8a00\u8a9e\u3092\u82f1\u8a9e\u306b\u6307\u5b9a. language : \"en_US\" ) // \u30b9\u30da\u30eb\u30df\u30b9\u304c\u898b\u3064\u304b\u3063\u305f\u5834\u5408. if misspelledRange . location != NSNotFound { // \u6b63\u3057\u3044\u30b9\u30da\u30eb\u306e\u5019\u88dc\u3092\u53d6\u5f97. let candidateArray : NSArray = checker . guesses ( // \u30b9\u30da\u30eb\u30df\u30b9\u304c\u3042\u308b\u7bc4\u56f2. forWordRange : misspelledRange , // \u30b9\u30da\u30eb\u30df\u30b9\u3092\u542b\u3080\u6587\u5b57(range\u5185). in : myTextField . text !, // \u8a00\u8a9e\u3092\u6307\u5b9a. language : \"en_US\" ) ! var str = \"\u3082\u3057\u304b\u3057\u3066: \\n \" // \u5019\u88dc\u3092\u914d\u5217\u304b\u30891\u3064\u305a\u3064\u53d6\u308a\u51fa\u3059. for text in candidateArray { str += text . description ! str += \", \" } suggestTextField ?. text = str } } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 // // ViewController.swift // swiftdocs // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController , UITextFieldDelegate { var myTextField : UITextField ! var suggestTextField : UITextView ! override func viewDidLoad () { super . viewDidLoad () // Button\u3092\u751f\u6210. let myButton = UIButton () myButton . frame = CGRectMake ( 0 , 0 , 200 , 40 ) myButton . backgroundColor = UIColor . redColor () myButton . layer . masksToBounds = true myButton . setTitle ( \"\u30c1\u30a7\u30c3\u30af\u3059\u308b\" , forState : UIControlState . Normal ) myButton . setTitleColor ( UIColor . whiteColor (), forState : UIControlState . Normal ) myButton . setTitleColor ( UIColor . blackColor (), forState : UIControlState . Highlighted ) myButton . layer . cornerRadius = 20.0 myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : 200 ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : . TouchUpInside ) self . view . addSubview ( myButton ) // \u5019\u88dc\u7528TextField\u3092\u751f\u6210. suggestTextField = UITextView ( frame : CGRectMake ( 0 , 0 , 300 , 250 )) suggestTextField . layer . position = CGPointMake ( self . view . frame . midX , self . view . frame . midY + 150 ) suggestTextField . backgroundColor = UIColor . blackColor () suggestTextField . textColor = UIColor . whiteColor () suggestTextField . textAlignment = NSTextAlignment . Left suggestTextField . text = \"\u3082\u3057\u304b\u3057\u3066: \" suggestTextField . font = UIFont . systemFontOfSize ( CGFloat ( 20 )) suggestTextField . editable = false self . view . addSubview ( suggestTextField !) // \u30b9\u30da\u30eb\u5165\u529b\u7528UITextField\u3092\u4f5c\u6210. myTextField = UITextField ( frame : CGRectMake ( 0 , 0 , 200 , 30 )) myTextField . borderStyle = UITextBorderStyle . RoundedRect myTextField . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 100 ) self . view . addSubview ( myTextField ) } /* Button\u304c\u62bc\u3055\u308c\u305f\u3068\u304d\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func onClickMyButton ( sender : UIButton ){ // \u30b9\u30da\u30eb\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3046. suggestUpdate () } /* \u30b9\u30da\u30eb\u30c1\u30a7\u30c3\u30af\u3059\u308b\u30e1\u30bd\u30c3\u30c9. */ func suggestUpdate (){ // UITextChecker\u306e\u5ba3\u8a00. let checker : UITextChecker = UITextChecker () // text\u306e\u6587\u5b57\u6570\u3092\u53d6\u5f97. let length = myTextField . text ?. characters . count // \u30b9\u30da\u30eb\u30c1\u30a7\u30c3\u30af\u3092\u3059\u308b\u7bc4\u56f2(0~\u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u6570)\u3092\u6307\u5b9a. let checkRange : NSRange = NSMakeRange ( 0 , length !) // \u7bc4\u56f2\u306e\u4e2d\u304b\u3089\u9593\u9055\u3063\u305f\u30b9\u30da\u30eb\u306e\u7269\u3092\u63a2\u3059. let misspelledRange : NSRange = checker . rangeOfMisspelledWordInString ( // \u30c1\u30a7\u30c3\u30af\u3059\u308b\u6587\u5b57\u3092\u6307\u5b9a. myTextField . text !, // \u30c1\u30a7\u30c3\u30af\u3059\u308b\u7bc4\u56f2\u3092\u6307\u5b9a. range : checkRange , // \u958b\u59cb\u4f4d\u7f6e\u3092\u7bc4\u56f2\u306e\u5148\u982d\u306b\u6307\u5b9a. startingAt : checkRange . location , // \u6307\u5b9a\u3055\u308c\u305f\u7bc4\u56f2\u5185\u306b\u30df\u30b9\u304c\u898b\u3064\u304b\u3089\u306a\u304f\u3066\u3082range\u306e\u958b\u59cb\u4f4d\u7f6e\u304b\u3089\u63a2\u3057\u59cb\u3081\u308b.(false\u306a\u3089\u30df\u30b9\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u672b\u5c3e\u306e\u4f4d\u7f6e\u3092\u4fdd\u6301\u3059\u308b) wrap : true , // \u8a00\u8a9e\u3092\u82f1\u8a9e\u306b\u6307\u5b9a. language : \"en_US\" ) // \u30b9\u30da\u30eb\u30df\u30b9\u304c\u898b\u3064\u304b\u3063\u305f\u5834\u5408. if misspelledRange . location != NSNotFound { // \u6b63\u3057\u3044\u30b9\u30da\u30eb\u306e\u5019\u88dc\u3092\u53d6\u5f97. let candidateArray : NSArray = checker . guessesForWordRange ( // \u30b9\u30da\u30eb\u30df\u30b9\u304c\u3042\u308b\u7bc4\u56f2. misspelledRange , // \u30b9\u30da\u30eb\u30df\u30b9\u3092\u542b\u3080\u6587\u5b57(range\u5185). inString : myTextField . text !, // \u8a00\u8a9e\u3092\u6307\u5b9a. language : \"en_US\" ) ! var str = \"\u3082\u3057\u304b\u3057\u3066: \\n \" // \u5019\u88dc\u3092\u914d\u5217\u304b\u30891\u3064\u305a\u3064\u53d6\u308a\u51fa\u3059. for text in candidateArray { str += text . description ! str += \", \" } suggestTextField ?. text = str } } } 3.x\u30684.x\u306e\u5dee\u5206 UIControlState \u304c UIControl.State \u306b\u5909\u66f4 func onClickMyButton(sender : UIButton) \u306b @objc \u3092\u8ffd\u52a0 UITextBorderStyle \u304c UITextField.BorderStyle \u306b\u5909\u66f4 let candidateArray: NSArray = checker.guesses(forWordRange: misspelledRange, in: myTextField.text!, language: \"en_US\") ! \u304c let candidateArray: NSArray = checker.guesses(forWordRange: misspelledRange, in: myTextField.text!, language: \"en_US\") ! as NSArray \u306b\u5909\u66f4 text.description! \u3092 (text as AnyObject).description! \u306b\u5909\u66f4 2.3\u30683.0\u306e\u5dee\u5206 rangeOfMisspelledWordInString \u304b\u3089 rangeOfMisspelledWord \u306b\u5909\u66f4 guessesForWordRange \u304b\u3089 guesses \u306b\u5909\u66f4 \u8a00\u8a9e \u8a00\u8a9e\u30b3\u30fc\u30c9 \u82f1\u8a9e / \u30a2\u30e1\u30ea\u30ab en_US \u82f1\u8a9e / \u30ab\u30ca\u30c0 en_CA \u30c7\u30f3\u30de\u30fc\u30af\u8a9e / \u30c7\u30f3\u30de\u30fc\u30af da_DK \u82f1\u8a9e / \u30a4\u30f3\u30c9 en_IN \u30aa\u30e9\u30f3\u30c0\u8a9e / \u30aa\u30e9\u30f3\u30c0 nl_NL \u82f1\u8a9e / \u30aa\u30fc\u30b9\u30c8\u30e9\u30ea\u30a2 en_AU \u30d5\u30e9\u30f3\u30b9\u8a9e / \u30d5\u30e9\u30f3\u30b9 fr_FR \u30dd\u30eb\u30c8\u30ac\u30eb\u8a9e / \u30dd\u30eb\u30c8\u30ac\u30eb pt_PT \u82f1\u8a9e / \u30a4\u30ae\u30ea\u30b9 en_GB \u30ab\u30bf\u30ed\u30cb\u30a2\u8a9e / \u30b9\u30da\u30a4\u30f3 es_ES \u30b9\u30a6\u30a7\u30fc\u30c7\u30f3\u8a9e / \u30b9\u30a6\u30a7\u30fc\u30c7\u30f3 sv_SE \u30ed\u30b7\u30a2\u8a9e / \u30ed\u30b7\u30a2 ru_RU \u30c9\u30a4\u30c4\u8a9e / \u30c9\u30a4\u30c4 de_DE \u30c8\u30eb\u30b3\u8a9e / \u30c8\u30eb\u30b3 tr_TR \u30a4\u30bf\u30ea\u30a2\u8a9e / \u30a4\u30bf\u30ea\u30a2 it_IT \u30dd\u30eb\u30c8\u30ac\u30eb\u8a9e / \u30d6\u30e9\u30b8\u30eb pt_BR Reference UITextChecker https://developer.apple.com/reference/uikit/uitextchecker UITextField https://developer.apple.com/reference/uikit/uitextfield","title":"UITextChecker\u3067\u30b9\u30da\u30eb\u30c1\u30a7\u30c3\u30af"},{"location":"1.uikit/063_uitextchecker/#uitextchecker","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 // // ViewController.swift // swiftdocs // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController , UITextFieldDelegate { var myTextField : UITextField ! var suggestTextField : UITextView ! override func viewDidLoad () { super . viewDidLoad () // Button\u3092\u751f\u6210. let myButton = UIButton () myButton . frame = CGRect ( x : 0 , y : 0 , width : 200 , height : 40 ) myButton . backgroundColor = UIColor . red myButton . layer . masksToBounds = true myButton . setTitle ( \"\u30c1\u30a7\u30c3\u30af\u3059\u308b\" , for : UIControl . State . normal ) myButton . setTitleColor ( UIColor . white , for : UIControl . State . normal ) myButton . setTitleColor ( UIColor . black , for : UIControl . State . highlighted ) myButton . layer . cornerRadius = 20.0 myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : 200 ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchUpInside ) self . view . addSubview ( myButton ) // \u5019\u88dc\u7528TextField\u3092\u751f\u6210. suggestTextField = UITextView ( frame : CGRect ( x : 0 , y : 0 , width : 300 , height : 250 )) suggestTextField . layer . position = CGPoint ( x : self . view . frame . midX , y : self . view . frame . midY + 150 ) suggestTextField . backgroundColor = UIColor . black suggestTextField . textColor = UIColor . white suggestTextField . textAlignment = NSTextAlignment . left suggestTextField . text = \"\u3082\u3057\u304b\u3057\u3066: \" suggestTextField . font = UIFont . systemFont ( ofSize : CGFloat ( 20 )) suggestTextField . isEditable = false self . view . addSubview ( suggestTextField !) // \u30b9\u30da\u30eb\u5165\u529b\u7528UITextField\u3092\u4f5c\u6210. myTextField = UITextField ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 30 )) myTextField . borderStyle = UITextField . BorderStyle . roundedRect myTextField . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 100 ) self . view . addSubview ( myTextField ) } /* Button\u304c\u62bc\u3055\u308c\u305f\u3068\u304d\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ @objc func onClickMyButton ( sender : UIButton ){ // \u30b9\u30da\u30eb\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3046. suggestUpdate () } /* \u30b9\u30da\u30eb\u30c1\u30a7\u30c3\u30af\u3059\u308b\u30e1\u30bd\u30c3\u30c9. */ func suggestUpdate (){ // UITextChecker\u306e\u5ba3\u8a00. let checker : UITextChecker = UITextChecker () // text\u306e\u6587\u5b57\u6570\u3092\u53d6\u5f97. let length = myTextField . text ?. characters . count // \u30b9\u30da\u30eb\u30c1\u30a7\u30c3\u30af\u3092\u3059\u308b\u7bc4\u56f2(0~\u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u6570)\u3092\u6307\u5b9a. let checkRange : NSRange = NSMakeRange ( 0 , length !) // \u7bc4\u56f2\u306e\u4e2d\u304b\u3089\u9593\u9055\u3063\u305f\u30b9\u30da\u30eb\u306e\u7269\u3092\u63a2\u3059. let misspelledRange : NSRange = checker . rangeOfMisspelledWord ( // \u30c1\u30a7\u30c3\u30af\u3059\u308b\u6587\u5b57\u3092\u6307\u5b9a. in : myTextField . text !, // \u30c1\u30a7\u30c3\u30af\u3059\u308b\u7bc4\u56f2\u3092\u6307\u5b9a. range : checkRange , // \u958b\u59cb\u4f4d\u7f6e\u3092\u7bc4\u56f2\u306e\u5148\u982d\u306b\u6307\u5b9a. startingAt : checkRange . location , // \u6307\u5b9a\u3055\u308c\u305f\u7bc4\u56f2\u5185\u306b\u30df\u30b9\u304c\u898b\u3064\u304b\u3089\u306a\u304f\u3066\u3082range\u306e\u958b\u59cb\u4f4d\u7f6e\u304b\u3089\u63a2\u3057\u59cb\u3081\u308b.(false\u306a\u3089\u30df\u30b9\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u672b\u5c3e\u306e\u4f4d\u7f6e\u3092\u4fdd\u6301\u3059\u308b) wrap : true , // \u8a00\u8a9e\u3092\u82f1\u8a9e\u306b\u6307\u5b9a. language : \"en_US\" ) // \u30b9\u30da\u30eb\u30df\u30b9\u304c\u898b\u3064\u304b\u3063\u305f\u5834\u5408. if misspelledRange . location != NSNotFound { // \u6b63\u3057\u3044\u30b9\u30da\u30eb\u306e\u5019\u88dc\u3092\u53d6\u5f97. let candidateArray : NSArray = checker . guesses ( // \u30b9\u30da\u30eb\u30df\u30b9\u304c\u3042\u308b\u7bc4\u56f2. forWordRange : misspelledRange , // \u30b9\u30da\u30eb\u30df\u30b9\u3092\u542b\u3080\u6587\u5b57(range\u5185). in : myTextField . text !, // \u8a00\u8a9e\u3092\u6307\u5b9a. language : \"en_US\" ) ! as NSArray var str = \"\u3082\u3057\u304b\u3057\u3066: \\n \" // \u5019\u88dc\u3092\u914d\u5217\u304b\u30891\u3064\u305a\u3064\u53d6\u308a\u51fa\u3059. for text in candidateArray { str += ( text as AnyObject ). description ! str += \", \" } suggestTextField ?. text = str } } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 // // ViewController.swift // swiftdocs // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController , UITextFieldDelegate { var myTextField : UITextField ! var suggestTextField : UITextView ! override func viewDidLoad () { super . viewDidLoad () // Button\u3092\u751f\u6210. let myButton = UIButton () myButton . frame = CGRect ( x : 0 , y : 0 , width : 200 , height : 40 ) myButton . backgroundColor = UIColor . red myButton . layer . masksToBounds = true myButton . setTitle ( \"\u30c1\u30a7\u30c3\u30af\u3059\u308b\" , for : UIControlState . normal ) myButton . setTitleColor ( UIColor . white , for : UIControlState . normal ) myButton . setTitleColor ( UIColor . black , for : UIControlState . highlighted ) myButton . layer . cornerRadius = 20.0 myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : 200 ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchUpInside ) self . view . addSubview ( myButton ) // \u5019\u88dc\u7528TextField\u3092\u751f\u6210. suggestTextField = UITextView ( frame : CGRect ( x : 0 , y : 0 , width : 300 , height : 250 )) suggestTextField . layer . position = CGPoint ( x : self . view . frame . midX , y : self . view . frame . midY + 150 ) suggestTextField . backgroundColor = UIColor . black suggestTextField . textColor = UIColor . white suggestTextField . textAlignment = NSTextAlignment . left suggestTextField . text = \"\u3082\u3057\u304b\u3057\u3066: \" suggestTextField . font = UIFont . systemFont ( ofSize : CGFloat ( 20 )) suggestTextField . isEditable = false self . view . addSubview ( suggestTextField !) // \u30b9\u30da\u30eb\u5165\u529b\u7528UITextField\u3092\u4f5c\u6210. myTextField = UITextField ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 30 )) myTextField . borderStyle = UITextBorderStyle . roundedRect myTextField . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 100 ) self . view . addSubview ( myTextField ) } /* Button\u304c\u62bc\u3055\u308c\u305f\u3068\u304d\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func onClickMyButton ( sender : UIButton ){ // \u30b9\u30da\u30eb\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3046. suggestUpdate () } /* \u30b9\u30da\u30eb\u30c1\u30a7\u30c3\u30af\u3059\u308b\u30e1\u30bd\u30c3\u30c9. */ func suggestUpdate (){ // UITextChecker\u306e\u5ba3\u8a00. let checker : UITextChecker = UITextChecker () // text\u306e\u6587\u5b57\u6570\u3092\u53d6\u5f97. let length = myTextField . text ?. characters . count // \u30b9\u30da\u30eb\u30c1\u30a7\u30c3\u30af\u3092\u3059\u308b\u7bc4\u56f2(0~\u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u6570)\u3092\u6307\u5b9a. let checkRange : NSRange = NSMakeRange ( 0 , length !) // \u7bc4\u56f2\u306e\u4e2d\u304b\u3089\u9593\u9055\u3063\u305f\u30b9\u30da\u30eb\u306e\u7269\u3092\u63a2\u3059. let misspelledRange : NSRange = checker . rangeOfMisspelledWord ( // \u30c1\u30a7\u30c3\u30af\u3059\u308b\u6587\u5b57\u3092\u6307\u5b9a. in : myTextField . text !, // \u30c1\u30a7\u30c3\u30af\u3059\u308b\u7bc4\u56f2\u3092\u6307\u5b9a. range : checkRange , // \u958b\u59cb\u4f4d\u7f6e\u3092\u7bc4\u56f2\u306e\u5148\u982d\u306b\u6307\u5b9a. startingAt : checkRange . location , // \u6307\u5b9a\u3055\u308c\u305f\u7bc4\u56f2\u5185\u306b\u30df\u30b9\u304c\u898b\u3064\u304b\u3089\u306a\u304f\u3066\u3082range\u306e\u958b\u59cb\u4f4d\u7f6e\u304b\u3089\u63a2\u3057\u59cb\u3081\u308b.(false\u306a\u3089\u30df\u30b9\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u672b\u5c3e\u306e\u4f4d\u7f6e\u3092\u4fdd\u6301\u3059\u308b) wrap : true , // \u8a00\u8a9e\u3092\u82f1\u8a9e\u306b\u6307\u5b9a. language : \"en_US\" ) // \u30b9\u30da\u30eb\u30df\u30b9\u304c\u898b\u3064\u304b\u3063\u305f\u5834\u5408. if misspelledRange . location != NSNotFound { // \u6b63\u3057\u3044\u30b9\u30da\u30eb\u306e\u5019\u88dc\u3092\u53d6\u5f97. let candidateArray : NSArray = checker . guesses ( // \u30b9\u30da\u30eb\u30df\u30b9\u304c\u3042\u308b\u7bc4\u56f2. forWordRange : misspelledRange , // \u30b9\u30da\u30eb\u30df\u30b9\u3092\u542b\u3080\u6587\u5b57(range\u5185). in : myTextField . text !, // \u8a00\u8a9e\u3092\u6307\u5b9a. language : \"en_US\" ) ! var str = \"\u3082\u3057\u304b\u3057\u3066: \\n \" // \u5019\u88dc\u3092\u914d\u5217\u304b\u30891\u3064\u305a\u3064\u53d6\u308a\u51fa\u3059. for text in candidateArray { str += text . description ! str += \", \" } suggestTextField ?. text = str } } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 // // ViewController.swift // swiftdocs // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController , UITextFieldDelegate { var myTextField : UITextField ! var suggestTextField : UITextView ! override func viewDidLoad () { super . viewDidLoad () // Button\u3092\u751f\u6210. let myButton = UIButton () myButton . frame = CGRectMake ( 0 , 0 , 200 , 40 ) myButton . backgroundColor = UIColor . redColor () myButton . layer . masksToBounds = true myButton . setTitle ( \"\u30c1\u30a7\u30c3\u30af\u3059\u308b\" , forState : UIControlState . Normal ) myButton . setTitleColor ( UIColor . whiteColor (), forState : UIControlState . Normal ) myButton . setTitleColor ( UIColor . blackColor (), forState : UIControlState . Highlighted ) myButton . layer . cornerRadius = 20.0 myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : 200 ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : . TouchUpInside ) self . view . addSubview ( myButton ) // \u5019\u88dc\u7528TextField\u3092\u751f\u6210. suggestTextField = UITextView ( frame : CGRectMake ( 0 , 0 , 300 , 250 )) suggestTextField . layer . position = CGPointMake ( self . view . frame . midX , self . view . frame . midY + 150 ) suggestTextField . backgroundColor = UIColor . blackColor () suggestTextField . textColor = UIColor . whiteColor () suggestTextField . textAlignment = NSTextAlignment . Left suggestTextField . text = \"\u3082\u3057\u304b\u3057\u3066: \" suggestTextField . font = UIFont . systemFontOfSize ( CGFloat ( 20 )) suggestTextField . editable = false self . view . addSubview ( suggestTextField !) // \u30b9\u30da\u30eb\u5165\u529b\u7528UITextField\u3092\u4f5c\u6210. myTextField = UITextField ( frame : CGRectMake ( 0 , 0 , 200 , 30 )) myTextField . borderStyle = UITextBorderStyle . RoundedRect myTextField . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 100 ) self . view . addSubview ( myTextField ) } /* Button\u304c\u62bc\u3055\u308c\u305f\u3068\u304d\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func onClickMyButton ( sender : UIButton ){ // \u30b9\u30da\u30eb\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3046. suggestUpdate () } /* \u30b9\u30da\u30eb\u30c1\u30a7\u30c3\u30af\u3059\u308b\u30e1\u30bd\u30c3\u30c9. */ func suggestUpdate (){ // UITextChecker\u306e\u5ba3\u8a00. let checker : UITextChecker = UITextChecker () // text\u306e\u6587\u5b57\u6570\u3092\u53d6\u5f97. let length = myTextField . text ?. characters . count // \u30b9\u30da\u30eb\u30c1\u30a7\u30c3\u30af\u3092\u3059\u308b\u7bc4\u56f2(0~\u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u6570)\u3092\u6307\u5b9a. let checkRange : NSRange = NSMakeRange ( 0 , length !) // \u7bc4\u56f2\u306e\u4e2d\u304b\u3089\u9593\u9055\u3063\u305f\u30b9\u30da\u30eb\u306e\u7269\u3092\u63a2\u3059. let misspelledRange : NSRange = checker . rangeOfMisspelledWordInString ( // \u30c1\u30a7\u30c3\u30af\u3059\u308b\u6587\u5b57\u3092\u6307\u5b9a. myTextField . text !, // \u30c1\u30a7\u30c3\u30af\u3059\u308b\u7bc4\u56f2\u3092\u6307\u5b9a. range : checkRange , // \u958b\u59cb\u4f4d\u7f6e\u3092\u7bc4\u56f2\u306e\u5148\u982d\u306b\u6307\u5b9a. startingAt : checkRange . location , // \u6307\u5b9a\u3055\u308c\u305f\u7bc4\u56f2\u5185\u306b\u30df\u30b9\u304c\u898b\u3064\u304b\u3089\u306a\u304f\u3066\u3082range\u306e\u958b\u59cb\u4f4d\u7f6e\u304b\u3089\u63a2\u3057\u59cb\u3081\u308b.(false\u306a\u3089\u30df\u30b9\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u672b\u5c3e\u306e\u4f4d\u7f6e\u3092\u4fdd\u6301\u3059\u308b) wrap : true , // \u8a00\u8a9e\u3092\u82f1\u8a9e\u306b\u6307\u5b9a. language : \"en_US\" ) // \u30b9\u30da\u30eb\u30df\u30b9\u304c\u898b\u3064\u304b\u3063\u305f\u5834\u5408. if misspelledRange . location != NSNotFound { // \u6b63\u3057\u3044\u30b9\u30da\u30eb\u306e\u5019\u88dc\u3092\u53d6\u5f97. let candidateArray : NSArray = checker . guessesForWordRange ( // \u30b9\u30da\u30eb\u30df\u30b9\u304c\u3042\u308b\u7bc4\u56f2. misspelledRange , // \u30b9\u30da\u30eb\u30df\u30b9\u3092\u542b\u3080\u6587\u5b57(range\u5185). inString : myTextField . text !, // \u8a00\u8a9e\u3092\u6307\u5b9a. language : \"en_US\" ) ! var str = \"\u3082\u3057\u304b\u3057\u3066: \\n \" // \u5019\u88dc\u3092\u914d\u5217\u304b\u30891\u3064\u305a\u3064\u53d6\u308a\u51fa\u3059. for text in candidateArray { str += text . description ! str += \", \" } suggestTextField ?. text = str } } }","title":"UITextChecker\u3067\u30b9\u30da\u30eb\u30c1\u30a7\u30c3\u30af"},{"location":"1.uikit/063_uitextchecker/#3x4x","text":"UIControlState \u304c UIControl.State \u306b\u5909\u66f4 func onClickMyButton(sender : UIButton) \u306b @objc \u3092\u8ffd\u52a0 UITextBorderStyle \u304c UITextField.BorderStyle \u306b\u5909\u66f4 let candidateArray: NSArray = checker.guesses(forWordRange: misspelledRange, in: myTextField.text!, language: \"en_US\") ! \u304c let candidateArray: NSArray = checker.guesses(forWordRange: misspelledRange, in: myTextField.text!, language: \"en_US\") ! as NSArray \u306b\u5909\u66f4 text.description! \u3092 (text as AnyObject).description! \u306b\u5909\u66f4","title":"3.x\u30684.x\u306e\u5dee\u5206"},{"location":"1.uikit/063_uitextchecker/#2330","text":"rangeOfMisspelledWordInString \u304b\u3089 rangeOfMisspelledWord \u306b\u5909\u66f4 guessesForWordRange \u304b\u3089 guesses \u306b\u5909\u66f4 \u8a00\u8a9e \u8a00\u8a9e\u30b3\u30fc\u30c9 \u82f1\u8a9e / \u30a2\u30e1\u30ea\u30ab en_US \u82f1\u8a9e / \u30ab\u30ca\u30c0 en_CA \u30c7\u30f3\u30de\u30fc\u30af\u8a9e / \u30c7\u30f3\u30de\u30fc\u30af da_DK \u82f1\u8a9e / \u30a4\u30f3\u30c9 en_IN \u30aa\u30e9\u30f3\u30c0\u8a9e / \u30aa\u30e9\u30f3\u30c0 nl_NL \u82f1\u8a9e / \u30aa\u30fc\u30b9\u30c8\u30e9\u30ea\u30a2 en_AU \u30d5\u30e9\u30f3\u30b9\u8a9e / \u30d5\u30e9\u30f3\u30b9 fr_FR \u30dd\u30eb\u30c8\u30ac\u30eb\u8a9e / \u30dd\u30eb\u30c8\u30ac\u30eb pt_PT \u82f1\u8a9e / \u30a4\u30ae\u30ea\u30b9 en_GB \u30ab\u30bf\u30ed\u30cb\u30a2\u8a9e / \u30b9\u30da\u30a4\u30f3 es_ES \u30b9\u30a6\u30a7\u30fc\u30c7\u30f3\u8a9e / \u30b9\u30a6\u30a7\u30fc\u30c7\u30f3 sv_SE \u30ed\u30b7\u30a2\u8a9e / \u30ed\u30b7\u30a2 ru_RU \u30c9\u30a4\u30c4\u8a9e / \u30c9\u30a4\u30c4 de_DE \u30c8\u30eb\u30b3\u8a9e / \u30c8\u30eb\u30b3 tr_TR \u30a4\u30bf\u30ea\u30a2\u8a9e / \u30a4\u30bf\u30ea\u30a2 it_IT \u30dd\u30eb\u30c8\u30ac\u30eb\u8a9e / \u30d6\u30e9\u30b8\u30eb pt_BR","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/063_uitextchecker/#reference","text":"UITextChecker https://developer.apple.com/reference/uikit/uitextchecker UITextField https://developer.apple.com/reference/uikit/uitextfield","title":"Reference"},{"location":"1.uikit/064_uiview/","text":"UIView\u306b\u30a2\u30bf\u30c3\u30c1\u30e1\u30f3\u30c8\u3092\u9069\u7528\u3055\u305b\u308b Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 // // ViewController.swift // UIKit064 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { // UIDynamicAnimator\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4fdd\u5b58\u3057\u306a\u3051\u308c\u3070\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u304c\u5b9f\u884c\u3055\u308c\u306a\u3044. var animator : UIDynamicAnimator ! var gravity : UIGravityBehavior ! override func viewDidLoad () { super . viewDidLoad () self . view . backgroundColor = UIColor . cyan // Button\u3092\u4f5c\u6210. let myButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myButton . layer . position = self . view . center myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . setTitleColor ( UIColor . white , for : UIControl . State . normal ) myButton . setTitleColor ( UIColor . black , for : UIControl . State . highlighted ) myButton . backgroundColor = UIColor . red myButton . setTitle ( \"Dropped!\" , for : UIControl . State . normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : UIControl . Event . touchUpInside ) self . view . addSubview ( myButton ) // myButton\u3092\u7e4b\u3050\u30b9\u30d7\u30ea\u30f3\u30b0\u3092\u4f5c\u6210. let springView = UIView ( frame : CGRect ( x : 0 , y : 0 , width : 5 , height : 50 )) springView . layer . position = self . view . center springView . backgroundColor = UIColor . brown self . view . addSubview ( springView ) // UIDynamicAnimator\u306e\u751f\u6210\u3068\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4fdd\u5b58. animator = UIDynamicAnimator ( referenceView : self . view ) // \u91cd\u529b\u3092\u751f\u6210\u3057\u3066Button\u306b\u4ed8\u968f\u3055\u305b\u308b. gravity = UIGravityBehavior ( items : [ myButton ]) // \u30a2\u30bf\u30c3\u30c1\u3092\u751f\u6210. let attach = UIAttachmentBehavior ( item : myButton , attachedToAnchor : self . view . center ) // \u6e1b\u8870\u5024. attach . damping = 0.01 // \u632f\u5e45. attach . frequency = 1.0 // \u30d2\u30e2\u306e\u9577\u3055. attach . length = 100 // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u304c\u52d5\u3044\u3066\u308b\u969b\u306b\u547c\u3070\u308c\u308b\u30d6\u30ed\u30c3\u30af\u6587\u3092\u8a2d\u5b9a. attach . action = { var rect = springView . frame rect . size . height = myButton . frame . origin . y - rect . origin . y springView . frame = rect } // UIDynamicAnimator\u306b\u30a2\u30bf\u30c3\u30c1\u3092\u8ffd\u52a0. animator . addBehavior ( attach ) } /* Button\u3092\u62bc\u3057\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ @objc func onClickMyButton ( sender : UIButton ){ // UIDynamicAnimator\u306b\u91cd\u529b\u3092\u8ffd\u52a0. animator . addBehavior ( gravity ) } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 // // ViewController.swift // UIKit064 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { // UIDynamicAnimator\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4fdd\u5b58\u3057\u306a\u3051\u308c\u3070\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u304c\u5b9f\u884c\u3055\u308c\u306a\u3044. var animator : UIDynamicAnimator ! var gravity : UIGravityBehavior ! override func viewDidLoad () { super . viewDidLoad () self . view . backgroundColor = UIColor . cyan // Button\u3092\u4f5c\u6210. let myButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myButton . layer . position = self . view . center myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . setTitleColor ( UIColor . white , for : UIControlState . normal ) myButton . setTitleColor ( UIColor . black , for : UIControlState . highlighted ) myButton . backgroundColor = UIColor . red myButton . setTitle ( \"Dropped!\" , for : UIControlState . normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : UIControlEvents . touchUpInside ) self . view . addSubview ( myButton ) // myButton\u3092\u7e4b\u3050\u30b9\u30d7\u30ea\u30f3\u30b0\u3092\u4f5c\u6210. let springView = UIView ( frame : CGRect ( x : 0 , y : 0 , width : 5 , height : 50 )) springView . layer . position = self . view . center springView . backgroundColor = UIColor . brown self . view . addSubview ( springView ) // UIDynamicAnimator\u306e\u751f\u6210\u3068\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4fdd\u5b58. animator = UIDynamicAnimator ( referenceView : self . view ) // \u91cd\u529b\u3092\u751f\u6210\u3057\u3066Button\u306b\u4ed8\u968f\u3055\u305b\u308b. gravity = UIGravityBehavior ( items : [ myButton ]) // \u30a2\u30bf\u30c3\u30c1\u3092\u751f\u6210. let attach = UIAttachmentBehavior ( item : myButton , attachedToAnchor : self . view . center ) // \u6e1b\u8870\u5024. attach . damping = 0.01 // \u632f\u5e45. attach . frequency = 1.0 // \u30d2\u30e2\u306e\u9577\u3055. attach . length = 100 // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u304c\u52d5\u3044\u3066\u308b\u969b\u306b\u547c\u3070\u308c\u308b\u30d6\u30ed\u30c3\u30af\u6587\u3092\u8a2d\u5b9a. attach . action = { var rect = springView . frame rect . size . height = myButton . frame . origin . y - rect . origin . y springView . frame = rect } // UIDynamicAnimator\u306b\u30a2\u30bf\u30c3\u30c1\u3092\u8ffd\u52a0. animator . addBehavior ( attach ) } /* Button\u3092\u62bc\u3057\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func onClickMyButton ( sender : UIButton ){ // UIDynamicAnimator\u306b\u91cd\u529b\u3092\u8ffd\u52a0. animator . addBehavior ( gravity ) } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 // // ViewController.swift // UIKit064 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { // UIDynamicAnimator\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4fdd\u5b58\u3057\u306a\u3051\u308c\u3070\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u304c\u5b9f\u884c\u3055\u308c\u306a\u3044. var animator : UIDynamicAnimator ! var gravity : UIGravityBehavior ! override func viewDidLoad () { super . viewDidLoad () self . view . backgroundColor = UIColor . cyanColor () // Button\u3092\u4f5c\u6210. let myButton = UIButton ( frame : CGRectMake ( 0 , 0 , 200 , 50 )) myButton . layer . position = self . view . center myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . setTitleColor ( UIColor . whiteColor (), forState : UIControlState . Normal ) myButton . setTitleColor ( UIColor . blackColor (), forState : UIControlState . Highlighted ) myButton . backgroundColor = UIColor . redColor () myButton . setTitle ( \"Dropped!\" , forState : UIControlState . Normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : UIControlEvents . TouchUpInside ) self . view . addSubview ( myButton ) // myButton\u3092\u7e4b\u3050\u30b9\u30d7\u30ea\u30f3\u30b0\u3092\u4f5c\u6210. let springView = UIView ( frame : CGRectMake ( 0 , 0 , 5 , 50 )) springView . layer . position = self . view . center springView . backgroundColor = UIColor . brownColor () self . view . addSubview ( springView ) // UIDynamicAnimator\u306e\u751f\u6210\u3068\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4fdd\u5b58. animator = UIDynamicAnimator ( referenceView : self . view ) // \u91cd\u529b\u3092\u751f\u6210\u3057\u3066Button\u306b\u4ed8\u968f\u3055\u305b\u308b. gravity = UIGravityBehavior ( items : [ myButton ]) // \u30a2\u30bf\u30c3\u30c1\u3092\u751f\u6210. let attach = UIAttachmentBehavior ( item : myButton , attachedToAnchor : self . view . center ) // \u6e1b\u8870\u5024. attach . damping = 0.01 // \u632f\u5e45. attach . frequency = 1.0 // \u30d2\u30e2\u306e\u9577\u3055. attach . length = 100 // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u304c\u52d5\u3044\u3066\u308b\u969b\u306b\u547c\u3070\u308c\u308b\u30d6\u30ed\u30c3\u30af\u6587\u3092\u8a2d\u5b9a. attach . action = { var rect = springView . frame rect . size . height = myButton . frame . origin . y - rect . origin . y springView . frame = rect } // UIDynamicAnimator\u306b\u30a2\u30bf\u30c3\u30c1\u3092\u8ffd\u52a0. animator . addBehavior ( attach ) } /* Button\u3092\u62bc\u3057\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func onClickMyButton ( sender : UIButton ){ // UIDynamicAnimator\u306b\u91cd\u529b\u3092\u8ffd\u52a0. animator . addBehavior ( gravity ) } } 3.x\u30684.x\u306e\u5dee\u5206 UIControlState \u304c UIControl.State \u306b\u5909\u66f4 UIControlEvents \u304c UIControl.Event \u306b\u5909\u66f4 func onClickMyButton(sender : UIButton) \u306b @objc \u3092\u8ffd\u52a0 2.3\u30683.0\u306e\u5dee\u5206 CGRectMake\u304c\u5ec3\u6b62 Reference UIView https://developer.apple.com/reference/uikit/uiview UIGravityBehavior https://developer.apple.com/reference/uikit/uigravitybehavior UIAttachmentBehavior https://developer.apple.com/reference/uikit/uiattachmentbehavior UIDynamicAnimator https://developer.apple.com/reference/uikit/UIDynamicAnimator","title":"UIView\u306b\u30a2\u30bf\u30c3\u30c1\u30e1\u30f3\u30c8\u3092\u9069\u7528\u3055\u305b\u308b"},{"location":"1.uikit/064_uiview/#uiview","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 // // ViewController.swift // UIKit064 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { // UIDynamicAnimator\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4fdd\u5b58\u3057\u306a\u3051\u308c\u3070\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u304c\u5b9f\u884c\u3055\u308c\u306a\u3044. var animator : UIDynamicAnimator ! var gravity : UIGravityBehavior ! override func viewDidLoad () { super . viewDidLoad () self . view . backgroundColor = UIColor . cyan // Button\u3092\u4f5c\u6210. let myButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myButton . layer . position = self . view . center myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . setTitleColor ( UIColor . white , for : UIControl . State . normal ) myButton . setTitleColor ( UIColor . black , for : UIControl . State . highlighted ) myButton . backgroundColor = UIColor . red myButton . setTitle ( \"Dropped!\" , for : UIControl . State . normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : UIControl . Event . touchUpInside ) self . view . addSubview ( myButton ) // myButton\u3092\u7e4b\u3050\u30b9\u30d7\u30ea\u30f3\u30b0\u3092\u4f5c\u6210. let springView = UIView ( frame : CGRect ( x : 0 , y : 0 , width : 5 , height : 50 )) springView . layer . position = self . view . center springView . backgroundColor = UIColor . brown self . view . addSubview ( springView ) // UIDynamicAnimator\u306e\u751f\u6210\u3068\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4fdd\u5b58. animator = UIDynamicAnimator ( referenceView : self . view ) // \u91cd\u529b\u3092\u751f\u6210\u3057\u3066Button\u306b\u4ed8\u968f\u3055\u305b\u308b. gravity = UIGravityBehavior ( items : [ myButton ]) // \u30a2\u30bf\u30c3\u30c1\u3092\u751f\u6210. let attach = UIAttachmentBehavior ( item : myButton , attachedToAnchor : self . view . center ) // \u6e1b\u8870\u5024. attach . damping = 0.01 // \u632f\u5e45. attach . frequency = 1.0 // \u30d2\u30e2\u306e\u9577\u3055. attach . length = 100 // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u304c\u52d5\u3044\u3066\u308b\u969b\u306b\u547c\u3070\u308c\u308b\u30d6\u30ed\u30c3\u30af\u6587\u3092\u8a2d\u5b9a. attach . action = { var rect = springView . frame rect . size . height = myButton . frame . origin . y - rect . origin . y springView . frame = rect } // UIDynamicAnimator\u306b\u30a2\u30bf\u30c3\u30c1\u3092\u8ffd\u52a0. animator . addBehavior ( attach ) } /* Button\u3092\u62bc\u3057\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ @objc func onClickMyButton ( sender : UIButton ){ // UIDynamicAnimator\u306b\u91cd\u529b\u3092\u8ffd\u52a0. animator . addBehavior ( gravity ) } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 // // ViewController.swift // UIKit064 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { // UIDynamicAnimator\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4fdd\u5b58\u3057\u306a\u3051\u308c\u3070\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u304c\u5b9f\u884c\u3055\u308c\u306a\u3044. var animator : UIDynamicAnimator ! var gravity : UIGravityBehavior ! override func viewDidLoad () { super . viewDidLoad () self . view . backgroundColor = UIColor . cyan // Button\u3092\u4f5c\u6210. let myButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myButton . layer . position = self . view . center myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . setTitleColor ( UIColor . white , for : UIControlState . normal ) myButton . setTitleColor ( UIColor . black , for : UIControlState . highlighted ) myButton . backgroundColor = UIColor . red myButton . setTitle ( \"Dropped!\" , for : UIControlState . normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : UIControlEvents . touchUpInside ) self . view . addSubview ( myButton ) // myButton\u3092\u7e4b\u3050\u30b9\u30d7\u30ea\u30f3\u30b0\u3092\u4f5c\u6210. let springView = UIView ( frame : CGRect ( x : 0 , y : 0 , width : 5 , height : 50 )) springView . layer . position = self . view . center springView . backgroundColor = UIColor . brown self . view . addSubview ( springView ) // UIDynamicAnimator\u306e\u751f\u6210\u3068\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4fdd\u5b58. animator = UIDynamicAnimator ( referenceView : self . view ) // \u91cd\u529b\u3092\u751f\u6210\u3057\u3066Button\u306b\u4ed8\u968f\u3055\u305b\u308b. gravity = UIGravityBehavior ( items : [ myButton ]) // \u30a2\u30bf\u30c3\u30c1\u3092\u751f\u6210. let attach = UIAttachmentBehavior ( item : myButton , attachedToAnchor : self . view . center ) // \u6e1b\u8870\u5024. attach . damping = 0.01 // \u632f\u5e45. attach . frequency = 1.0 // \u30d2\u30e2\u306e\u9577\u3055. attach . length = 100 // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u304c\u52d5\u3044\u3066\u308b\u969b\u306b\u547c\u3070\u308c\u308b\u30d6\u30ed\u30c3\u30af\u6587\u3092\u8a2d\u5b9a. attach . action = { var rect = springView . frame rect . size . height = myButton . frame . origin . y - rect . origin . y springView . frame = rect } // UIDynamicAnimator\u306b\u30a2\u30bf\u30c3\u30c1\u3092\u8ffd\u52a0. animator . addBehavior ( attach ) } /* Button\u3092\u62bc\u3057\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func onClickMyButton ( sender : UIButton ){ // UIDynamicAnimator\u306b\u91cd\u529b\u3092\u8ffd\u52a0. animator . addBehavior ( gravity ) } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 // // ViewController.swift // UIKit064 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { // UIDynamicAnimator\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4fdd\u5b58\u3057\u306a\u3051\u308c\u3070\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u304c\u5b9f\u884c\u3055\u308c\u306a\u3044. var animator : UIDynamicAnimator ! var gravity : UIGravityBehavior ! override func viewDidLoad () { super . viewDidLoad () self . view . backgroundColor = UIColor . cyanColor () // Button\u3092\u4f5c\u6210. let myButton = UIButton ( frame : CGRectMake ( 0 , 0 , 200 , 50 )) myButton . layer . position = self . view . center myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . setTitleColor ( UIColor . whiteColor (), forState : UIControlState . Normal ) myButton . setTitleColor ( UIColor . blackColor (), forState : UIControlState . Highlighted ) myButton . backgroundColor = UIColor . redColor () myButton . setTitle ( \"Dropped!\" , forState : UIControlState . Normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : UIControlEvents . TouchUpInside ) self . view . addSubview ( myButton ) // myButton\u3092\u7e4b\u3050\u30b9\u30d7\u30ea\u30f3\u30b0\u3092\u4f5c\u6210. let springView = UIView ( frame : CGRectMake ( 0 , 0 , 5 , 50 )) springView . layer . position = self . view . center springView . backgroundColor = UIColor . brownColor () self . view . addSubview ( springView ) // UIDynamicAnimator\u306e\u751f\u6210\u3068\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4fdd\u5b58. animator = UIDynamicAnimator ( referenceView : self . view ) // \u91cd\u529b\u3092\u751f\u6210\u3057\u3066Button\u306b\u4ed8\u968f\u3055\u305b\u308b. gravity = UIGravityBehavior ( items : [ myButton ]) // \u30a2\u30bf\u30c3\u30c1\u3092\u751f\u6210. let attach = UIAttachmentBehavior ( item : myButton , attachedToAnchor : self . view . center ) // \u6e1b\u8870\u5024. attach . damping = 0.01 // \u632f\u5e45. attach . frequency = 1.0 // \u30d2\u30e2\u306e\u9577\u3055. attach . length = 100 // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u304c\u52d5\u3044\u3066\u308b\u969b\u306b\u547c\u3070\u308c\u308b\u30d6\u30ed\u30c3\u30af\u6587\u3092\u8a2d\u5b9a. attach . action = { var rect = springView . frame rect . size . height = myButton . frame . origin . y - rect . origin . y springView . frame = rect } // UIDynamicAnimator\u306b\u30a2\u30bf\u30c3\u30c1\u3092\u8ffd\u52a0. animator . addBehavior ( attach ) } /* Button\u3092\u62bc\u3057\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func onClickMyButton ( sender : UIButton ){ // UIDynamicAnimator\u306b\u91cd\u529b\u3092\u8ffd\u52a0. animator . addBehavior ( gravity ) } }","title":"UIView\u306b\u30a2\u30bf\u30c3\u30c1\u30e1\u30f3\u30c8\u3092\u9069\u7528\u3055\u305b\u308b"},{"location":"1.uikit/064_uiview/#3x4x","text":"UIControlState \u304c UIControl.State \u306b\u5909\u66f4 UIControlEvents \u304c UIControl.Event \u306b\u5909\u66f4 func onClickMyButton(sender : UIButton) \u306b @objc \u3092\u8ffd\u52a0","title":"3.x\u30684.x\u306e\u5dee\u5206"},{"location":"1.uikit/064_uiview/#2330","text":"CGRectMake\u304c\u5ec3\u6b62","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/064_uiview/#reference","text":"UIView https://developer.apple.com/reference/uikit/uiview UIGravityBehavior https://developer.apple.com/reference/uikit/uigravitybehavior UIAttachmentBehavior https://developer.apple.com/reference/uikit/uiattachmentbehavior UIDynamicAnimator https://developer.apple.com/reference/uikit/UIDynamicAnimator","title":"Reference"},{"location":"1.uikit/065_collision/","text":"UIWebView\u3067\u30d5\u30a1\u30a4\u30eb\u306e\u8868\u793a Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 // // ViewController.swift // UIKit065 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { // UIDynamicAnimator\u306f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4fdd\u5b58\u3057\u306a\u3051\u308c\u3070\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u304c\u5b9f\u884c\u3055\u308c\u306a\u3044. var animator : UIDynamicAnimator ! var gravity : UIGravityBehavior ! override func viewDidLoad () { super . viewDidLoad () self . view . backgroundColor = UIColor . cyan // Label\u3092\u4f5c\u6210. let myLabel : UILabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 40 )) myLabel . backgroundColor = UIColor . orange myLabel . layer . masksToBounds = true myLabel . layer . cornerRadius = 20.0 myLabel . text = \"Hello Swift!!\" myLabel . textColor = UIColor . white myLabel . shadowColor = UIColor . gray myLabel . textAlignment = NSTextAlignment . center myLabel . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : - 200 ) self . view . addSubview ( myLabel ) // \u969c\u5bb3\u7269\u3092\u4f5c\u6210. let myBoxView = UIView ( frame : CGRect ( x : 0 , y : 0 , width : 50 , height : 40 )) myBoxView . backgroundColor = UIColor . blue myBoxView . layer . masksToBounds = true myBoxView . layer . position = CGPoint ( x : self . view . frame . midX - 50 , y : self . view . frame . midY ) self . view . addSubview ( myBoxView ) // DropButton\u3092\u4f5c\u6210. let myButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myButton . layer . position = CGPoint ( x : self . view . frame . midX , y : 500 ) myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . setTitleColor ( UIColor . white , for : UIControl . State . normal ) myButton . setTitleColor ( UIColor . black , for : UIControl . State . highlighted ) myButton . backgroundColor = UIColor . red myButton . setTitle ( \"Dropped!\" , for : UIControl . State . normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : UIControl . Event . touchUpInside ) myButton . tag = 0 self . view . addSubview ( myButton ) // ResetButton\u3092\u4f5c\u6210. let myResetButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myResetButton . layer . position = CGPoint ( x : self . view . frame . midX , y : 400 ) myResetButton . layer . masksToBounds = true myResetButton . layer . cornerRadius = 20.0 myResetButton . setTitleColor ( UIColor . white , for : UIControl . State . normal ) myResetButton . setTitleColor ( UIColor . black , for : UIControl . State . highlighted ) myResetButton . backgroundColor = UIColor . blue myResetButton . setTitle ( \"Reset!\" , for : UIControl . State . normal ) myResetButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : UIControl . Event . touchUpInside ) myResetButton . tag = 1 self . view . addSubview ( myResetButton ) // UIDynamiAnimator\u306e\u751f\u6210\u3068\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4fdd\u5b58. animator = UIDynamicAnimator ( referenceView : self . view ) // \u91cd\u529b\u3092\u4f5c\u308a\u3001View\u306b\u9069\u7528\u3055\u305b\u308b. gravity = UIGravityBehavior ( items : [ myLabel ]) // Collision\u3092\u4f5c\u6210\u3001View\u306b\u9069\u7528\u3055\u305b\u308b. let collision = UICollisionBehavior ( items : [ myLabel , myBoxView ]) // Collision\u306e\u6319\u52d5\u3092\u6307\u5b9a. collision . addBoundary ( withIdentifier : \"barrier\" as NSCopying , for : UIBezierPath ( rect : myBoxView . frame )) // Collision\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c. animator . addBehavior ( collision ) } @objc func onClickMyButton ( sender : UIButton ){ switch ( sender . tag ) { // DropButton. case 0 : // Gravity\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c. animator . addBehavior ( gravity ) // ResetButton. case 1 : let next = ViewController () self . present ( next , animated : false , completion : nil ) default : print ( \"error!\" ) } } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 // // ViewController.swift // UIKit065 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { // UIDynamicAnimator\u306f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4fdd\u5b58\u3057\u306a\u3051\u308c\u3070\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u304c\u5b9f\u884c\u3055\u308c\u306a\u3044. var animator : UIDynamicAnimator ! var gravity : UIGravityBehavior ! override func viewDidLoad () { super . viewDidLoad () self . view . backgroundColor = UIColor . cyan // Label\u3092\u4f5c\u6210. let myLabel : UILabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 40 )) myLabel . backgroundColor = UIColor . orange myLabel . layer . masksToBounds = true myLabel . layer . cornerRadius = 20.0 myLabel . text = \"Hello Swift!!\" myLabel . textColor = UIColor . white myLabel . shadowColor = UIColor . gray myLabel . textAlignment = NSTextAlignment . center myLabel . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : - 200 ) self . view . addSubview ( myLabel ) // \u969c\u5bb3\u7269\u3092\u4f5c\u6210. let myBoxView = UIView ( frame : CGRect ( x : 0 , y : 0 , width : 50 , height : 40 )) myBoxView . backgroundColor = UIColor . blue myBoxView . layer . masksToBounds = true myBoxView . layer . position = CGPoint ( x : self . view . frame . midX - 50 , y : self . view . frame . midY ) self . view . addSubview ( myBoxView ) // DropButton\u3092\u4f5c\u6210. let myButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myButton . layer . position = CGPoint ( x : self . view . frame . midX , y : 500 ) myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . setTitleColor ( UIColor . white , for : UIControlState . normal ) myButton . setTitleColor ( UIColor . black , for : UIControlState . highlighted ) myButton . backgroundColor = UIColor . red myButton . setTitle ( \"Dropped!\" , for : UIControlState . normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : UIControlEvents . touchUpInside ) myButton . tag = 0 self . view . addSubview ( myButton ) // ResetButton\u3092\u4f5c\u6210. let myResetButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myResetButton . layer . position = CGPoint ( x : self . view . frame . midX , y : 400 ) myResetButton . layer . masksToBounds = true myResetButton . layer . cornerRadius = 20.0 myResetButton . setTitleColor ( UIColor . white , for : UIControlState . normal ) myResetButton . setTitleColor ( UIColor . black , for : UIControlState . highlighted ) myResetButton . backgroundColor = UIColor . blue myResetButton . setTitle ( \"Reset!\" , for : UIControlState . normal ) myResetButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : UIControlEvents . touchUpInside ) myResetButton . tag = 1 self . view . addSubview ( myResetButton ) // UIDynamiAnimator\u306e\u751f\u6210\u3068\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4fdd\u5b58. animator = UIDynamicAnimator ( referenceView : self . view ) // \u91cd\u529b\u3092\u4f5c\u308a\u3001View\u306b\u9069\u7528\u3055\u305b\u308b. gravity = UIGravityBehavior ( items : [ myLabel ]) // Collision\u3092\u4f5c\u6210\u3001View\u306b\u9069\u7528\u3055\u305b\u308b. let collision = UICollisionBehavior ( items : [ myLabel , myBoxView ]) // Collision\u306e\u6319\u52d5\u3092\u6307\u5b9a. collision . addBoundary ( withIdentifier : \"barrier\" , for : UIBezierPath ( rect : myBoxView . frame )) // Collision\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c. animator . addBehavior ( collision ) } func onClickMyButton ( sender : UIButton ){ switch ( sender . tag ) { // DropButton. case 0 : // Gravity\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c. animator . addBehavior ( gravity ) // ResetButton. case 1 : let next = ViewController () self . present ( next , animated : false , completion : nil ) default : print ( \"error!\" ) } } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 // // ViewController.swift // UIKit065 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { // UIDynamicAnimator\u306f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4fdd\u5b58\u3057\u306a\u3051\u308c\u3070\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u304c\u5b9f\u884c\u3055\u308c\u306a\u3044. var animator : UIDynamicAnimator ! var gravity : UIGravityBehavior ! override func viewDidLoad () { super . viewDidLoad () self . view . backgroundColor = UIColor . cyanColor () // Label\u3092\u4f5c\u6210. let myLabel : UILabel = UILabel ( frame : CGRectMake ( 0 , 0 , 200 , 40 )) myLabel . backgroundColor = UIColor . orangeColor () myLabel . layer . masksToBounds = true myLabel . layer . cornerRadius = 20.0 myLabel . text = \"Hello Swift!!\" myLabel . textColor = UIColor . whiteColor () myLabel . shadowColor = UIColor . grayColor () myLabel . textAlignment = NSTextAlignment . Center myLabel . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : - 200 ) self . view . addSubview ( myLabel ) // \u969c\u5bb3\u7269\u3092\u4f5c\u6210. let myBoxView = UIView ( frame : CGRectMake ( 0 , 0 , 50 , 40 )) myBoxView . backgroundColor = UIColor . blueColor () myBoxView . layer . masksToBounds = true myBoxView . layer . position = CGPointMake ( self . view . frame . midX - 50 , self . view . frame . midY ) self . view . addSubview ( myBoxView ) // DropButton\u3092\u4f5c\u6210. let myButton = UIButton ( frame : CGRectMake ( 0 , 0 , 200 , 50 )) myButton . layer . position = CGPointMake ( self . view . frame . midX , 500 ) myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . setTitleColor ( UIColor . whiteColor (), forState : UIControlState . Normal ) myButton . setTitleColor ( UIColor . blackColor (), forState : UIControlState . Highlighted ) myButton . backgroundColor = UIColor . redColor () myButton . setTitle ( \"Dropped!\" , forState : UIControlState . Normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : UIControlEvents . TouchUpInside ) myButton . tag = 0 self . view . addSubview ( myButton ) // ResetButton\u3092\u4f5c\u6210. let myResetButton = UIButton ( frame : CGRectMake ( 0 , 0 , 200 , 50 )) myResetButton . layer . position = CGPointMake ( self . view . frame . midX , 400 ) myResetButton . layer . masksToBounds = true myResetButton . layer . cornerRadius = 20.0 myResetButton . setTitleColor ( UIColor . whiteColor (), forState : UIControlState . Normal ) myResetButton . setTitleColor ( UIColor . blackColor (), forState : UIControlState . Highlighted ) myResetButton . backgroundColor = UIColor . blueColor () myResetButton . setTitle ( \"Reset!\" , forState : UIControlState . Normal ) myResetButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : UIControlEvents . TouchUpInside ) myResetButton . tag = 1 self . view . addSubview ( myResetButton ) // UIDynamiAnimator\u306e\u751f\u6210\u3068\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4fdd\u5b58. animator = UIDynamicAnimator ( referenceView : self . view ) // \u91cd\u529b\u3092\u4f5c\u308a\u3001View\u306b\u9069\u7528\u3055\u305b\u308b. gravity = UIGravityBehavior ( items : [ myLabel ]) // Collision\u3092\u4f5c\u6210\u3001View\u306b\u9069\u7528\u3055\u305b\u308b. let collision = UICollisionBehavior ( items : [ myLabel , myBoxView ]) // Collision\u306e\u6319\u52d5\u3092\u6307\u5b9a. collision . addBoundaryWithIdentifier ( \"barrier\" , forPath : UIBezierPath ( rect : myBoxView . frame )) // Collision\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c. animator . addBehavior ( collision ) } func onClickMyButton ( sender : UIButton ){ switch ( sender . tag ) { // DropButton. case 0 : // Gravity\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c. animator . addBehavior ( gravity ) // ResetButton. case 1 : let next = ViewController () self . presentViewController ( next , animated : false , completion : nil ) default : print ( \"error!\" ) } } } 3.x\u30684.x\u306e\u5dee\u5206 UIControlState \u304c UIControl.Staten \u306b\u5909\u66f4 UIControlEvents \u304c UIControl.Event \u306b\u5909\u66f4 func onClickMyButton(sender : UIButton) \u306b @objc \u3092\u8ffd\u52a0 \"barrier\" \u3092 \"barrier\" as NSCopying \u306b\u5909\u66f4 2.3\u30683.0\u306e\u5dee\u5206 CGRectMake, CGPointMake\u304c\u5ec3\u6b62 Reference UIView https://developer.apple.com/reference/uikit/uiview UIGravityBehavior https://developer.apple.com/reference/uikit/uigravitybehavior UICollisionBehavior https://developer.apple.com/reference/uikit/uicollisionbehavior UIDynamicAnimator https://developer.apple.com/reference/uikit/UIDynamicAnimator","title":"UIWebView\u3067\u30d5\u30a1\u30a4\u30eb\u306e\u8868\u793a"},{"location":"1.uikit/065_collision/#uiwebview","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 // // ViewController.swift // UIKit065 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { // UIDynamicAnimator\u306f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4fdd\u5b58\u3057\u306a\u3051\u308c\u3070\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u304c\u5b9f\u884c\u3055\u308c\u306a\u3044. var animator : UIDynamicAnimator ! var gravity : UIGravityBehavior ! override func viewDidLoad () { super . viewDidLoad () self . view . backgroundColor = UIColor . cyan // Label\u3092\u4f5c\u6210. let myLabel : UILabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 40 )) myLabel . backgroundColor = UIColor . orange myLabel . layer . masksToBounds = true myLabel . layer . cornerRadius = 20.0 myLabel . text = \"Hello Swift!!\" myLabel . textColor = UIColor . white myLabel . shadowColor = UIColor . gray myLabel . textAlignment = NSTextAlignment . center myLabel . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : - 200 ) self . view . addSubview ( myLabel ) // \u969c\u5bb3\u7269\u3092\u4f5c\u6210. let myBoxView = UIView ( frame : CGRect ( x : 0 , y : 0 , width : 50 , height : 40 )) myBoxView . backgroundColor = UIColor . blue myBoxView . layer . masksToBounds = true myBoxView . layer . position = CGPoint ( x : self . view . frame . midX - 50 , y : self . view . frame . midY ) self . view . addSubview ( myBoxView ) // DropButton\u3092\u4f5c\u6210. let myButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myButton . layer . position = CGPoint ( x : self . view . frame . midX , y : 500 ) myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . setTitleColor ( UIColor . white , for : UIControl . State . normal ) myButton . setTitleColor ( UIColor . black , for : UIControl . State . highlighted ) myButton . backgroundColor = UIColor . red myButton . setTitle ( \"Dropped!\" , for : UIControl . State . normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : UIControl . Event . touchUpInside ) myButton . tag = 0 self . view . addSubview ( myButton ) // ResetButton\u3092\u4f5c\u6210. let myResetButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myResetButton . layer . position = CGPoint ( x : self . view . frame . midX , y : 400 ) myResetButton . layer . masksToBounds = true myResetButton . layer . cornerRadius = 20.0 myResetButton . setTitleColor ( UIColor . white , for : UIControl . State . normal ) myResetButton . setTitleColor ( UIColor . black , for : UIControl . State . highlighted ) myResetButton . backgroundColor = UIColor . blue myResetButton . setTitle ( \"Reset!\" , for : UIControl . State . normal ) myResetButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : UIControl . Event . touchUpInside ) myResetButton . tag = 1 self . view . addSubview ( myResetButton ) // UIDynamiAnimator\u306e\u751f\u6210\u3068\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4fdd\u5b58. animator = UIDynamicAnimator ( referenceView : self . view ) // \u91cd\u529b\u3092\u4f5c\u308a\u3001View\u306b\u9069\u7528\u3055\u305b\u308b. gravity = UIGravityBehavior ( items : [ myLabel ]) // Collision\u3092\u4f5c\u6210\u3001View\u306b\u9069\u7528\u3055\u305b\u308b. let collision = UICollisionBehavior ( items : [ myLabel , myBoxView ]) // Collision\u306e\u6319\u52d5\u3092\u6307\u5b9a. collision . addBoundary ( withIdentifier : \"barrier\" as NSCopying , for : UIBezierPath ( rect : myBoxView . frame )) // Collision\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c. animator . addBehavior ( collision ) } @objc func onClickMyButton ( sender : UIButton ){ switch ( sender . tag ) { // DropButton. case 0 : // Gravity\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c. animator . addBehavior ( gravity ) // ResetButton. case 1 : let next = ViewController () self . present ( next , animated : false , completion : nil ) default : print ( \"error!\" ) } } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 // // ViewController.swift // UIKit065 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { // UIDynamicAnimator\u306f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4fdd\u5b58\u3057\u306a\u3051\u308c\u3070\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u304c\u5b9f\u884c\u3055\u308c\u306a\u3044. var animator : UIDynamicAnimator ! var gravity : UIGravityBehavior ! override func viewDidLoad () { super . viewDidLoad () self . view . backgroundColor = UIColor . cyan // Label\u3092\u4f5c\u6210. let myLabel : UILabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 40 )) myLabel . backgroundColor = UIColor . orange myLabel . layer . masksToBounds = true myLabel . layer . cornerRadius = 20.0 myLabel . text = \"Hello Swift!!\" myLabel . textColor = UIColor . white myLabel . shadowColor = UIColor . gray myLabel . textAlignment = NSTextAlignment . center myLabel . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : - 200 ) self . view . addSubview ( myLabel ) // \u969c\u5bb3\u7269\u3092\u4f5c\u6210. let myBoxView = UIView ( frame : CGRect ( x : 0 , y : 0 , width : 50 , height : 40 )) myBoxView . backgroundColor = UIColor . blue myBoxView . layer . masksToBounds = true myBoxView . layer . position = CGPoint ( x : self . view . frame . midX - 50 , y : self . view . frame . midY ) self . view . addSubview ( myBoxView ) // DropButton\u3092\u4f5c\u6210. let myButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myButton . layer . position = CGPoint ( x : self . view . frame . midX , y : 500 ) myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . setTitleColor ( UIColor . white , for : UIControlState . normal ) myButton . setTitleColor ( UIColor . black , for : UIControlState . highlighted ) myButton . backgroundColor = UIColor . red myButton . setTitle ( \"Dropped!\" , for : UIControlState . normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : UIControlEvents . touchUpInside ) myButton . tag = 0 self . view . addSubview ( myButton ) // ResetButton\u3092\u4f5c\u6210. let myResetButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myResetButton . layer . position = CGPoint ( x : self . view . frame . midX , y : 400 ) myResetButton . layer . masksToBounds = true myResetButton . layer . cornerRadius = 20.0 myResetButton . setTitleColor ( UIColor . white , for : UIControlState . normal ) myResetButton . setTitleColor ( UIColor . black , for : UIControlState . highlighted ) myResetButton . backgroundColor = UIColor . blue myResetButton . setTitle ( \"Reset!\" , for : UIControlState . normal ) myResetButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : UIControlEvents . touchUpInside ) myResetButton . tag = 1 self . view . addSubview ( myResetButton ) // UIDynamiAnimator\u306e\u751f\u6210\u3068\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4fdd\u5b58. animator = UIDynamicAnimator ( referenceView : self . view ) // \u91cd\u529b\u3092\u4f5c\u308a\u3001View\u306b\u9069\u7528\u3055\u305b\u308b. gravity = UIGravityBehavior ( items : [ myLabel ]) // Collision\u3092\u4f5c\u6210\u3001View\u306b\u9069\u7528\u3055\u305b\u308b. let collision = UICollisionBehavior ( items : [ myLabel , myBoxView ]) // Collision\u306e\u6319\u52d5\u3092\u6307\u5b9a. collision . addBoundary ( withIdentifier : \"barrier\" , for : UIBezierPath ( rect : myBoxView . frame )) // Collision\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c. animator . addBehavior ( collision ) } func onClickMyButton ( sender : UIButton ){ switch ( sender . tag ) { // DropButton. case 0 : // Gravity\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c. animator . addBehavior ( gravity ) // ResetButton. case 1 : let next = ViewController () self . present ( next , animated : false , completion : nil ) default : print ( \"error!\" ) } } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 // // ViewController.swift // UIKit065 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { // UIDynamicAnimator\u306f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4fdd\u5b58\u3057\u306a\u3051\u308c\u3070\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u304c\u5b9f\u884c\u3055\u308c\u306a\u3044. var animator : UIDynamicAnimator ! var gravity : UIGravityBehavior ! override func viewDidLoad () { super . viewDidLoad () self . view . backgroundColor = UIColor . cyanColor () // Label\u3092\u4f5c\u6210. let myLabel : UILabel = UILabel ( frame : CGRectMake ( 0 , 0 , 200 , 40 )) myLabel . backgroundColor = UIColor . orangeColor () myLabel . layer . masksToBounds = true myLabel . layer . cornerRadius = 20.0 myLabel . text = \"Hello Swift!!\" myLabel . textColor = UIColor . whiteColor () myLabel . shadowColor = UIColor . grayColor () myLabel . textAlignment = NSTextAlignment . Center myLabel . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : - 200 ) self . view . addSubview ( myLabel ) // \u969c\u5bb3\u7269\u3092\u4f5c\u6210. let myBoxView = UIView ( frame : CGRectMake ( 0 , 0 , 50 , 40 )) myBoxView . backgroundColor = UIColor . blueColor () myBoxView . layer . masksToBounds = true myBoxView . layer . position = CGPointMake ( self . view . frame . midX - 50 , self . view . frame . midY ) self . view . addSubview ( myBoxView ) // DropButton\u3092\u4f5c\u6210. let myButton = UIButton ( frame : CGRectMake ( 0 , 0 , 200 , 50 )) myButton . layer . position = CGPointMake ( self . view . frame . midX , 500 ) myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . setTitleColor ( UIColor . whiteColor (), forState : UIControlState . Normal ) myButton . setTitleColor ( UIColor . blackColor (), forState : UIControlState . Highlighted ) myButton . backgroundColor = UIColor . redColor () myButton . setTitle ( \"Dropped!\" , forState : UIControlState . Normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : UIControlEvents . TouchUpInside ) myButton . tag = 0 self . view . addSubview ( myButton ) // ResetButton\u3092\u4f5c\u6210. let myResetButton = UIButton ( frame : CGRectMake ( 0 , 0 , 200 , 50 )) myResetButton . layer . position = CGPointMake ( self . view . frame . midX , 400 ) myResetButton . layer . masksToBounds = true myResetButton . layer . cornerRadius = 20.0 myResetButton . setTitleColor ( UIColor . whiteColor (), forState : UIControlState . Normal ) myResetButton . setTitleColor ( UIColor . blackColor (), forState : UIControlState . Highlighted ) myResetButton . backgroundColor = UIColor . blueColor () myResetButton . setTitle ( \"Reset!\" , forState : UIControlState . Normal ) myResetButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : UIControlEvents . TouchUpInside ) myResetButton . tag = 1 self . view . addSubview ( myResetButton ) // UIDynamiAnimator\u306e\u751f\u6210\u3068\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4fdd\u5b58. animator = UIDynamicAnimator ( referenceView : self . view ) // \u91cd\u529b\u3092\u4f5c\u308a\u3001View\u306b\u9069\u7528\u3055\u305b\u308b. gravity = UIGravityBehavior ( items : [ myLabel ]) // Collision\u3092\u4f5c\u6210\u3001View\u306b\u9069\u7528\u3055\u305b\u308b. let collision = UICollisionBehavior ( items : [ myLabel , myBoxView ]) // Collision\u306e\u6319\u52d5\u3092\u6307\u5b9a. collision . addBoundaryWithIdentifier ( \"barrier\" , forPath : UIBezierPath ( rect : myBoxView . frame )) // Collision\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c. animator . addBehavior ( collision ) } func onClickMyButton ( sender : UIButton ){ switch ( sender . tag ) { // DropButton. case 0 : // Gravity\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c. animator . addBehavior ( gravity ) // ResetButton. case 1 : let next = ViewController () self . presentViewController ( next , animated : false , completion : nil ) default : print ( \"error!\" ) } } }","title":"UIWebView\u3067\u30d5\u30a1\u30a4\u30eb\u306e\u8868\u793a"},{"location":"1.uikit/065_collision/#3x4x","text":"UIControlState \u304c UIControl.Staten \u306b\u5909\u66f4 UIControlEvents \u304c UIControl.Event \u306b\u5909\u66f4 func onClickMyButton(sender : UIButton) \u306b @objc \u3092\u8ffd\u52a0 \"barrier\" \u3092 \"barrier\" as NSCopying \u306b\u5909\u66f4","title":"3.x\u30684.x\u306e\u5dee\u5206"},{"location":"1.uikit/065_collision/#2330","text":"CGRectMake, CGPointMake\u304c\u5ec3\u6b62","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/065_collision/#reference","text":"UIView https://developer.apple.com/reference/uikit/uiview UIGravityBehavior https://developer.apple.com/reference/uikit/uigravitybehavior UICollisionBehavior https://developer.apple.com/reference/uikit/uicollisionbehavior UIDynamicAnimator https://developer.apple.com/reference/uikit/UIDynamicAnimator","title":"Reference"},{"location":"1.uikit/066_uiview/","text":"UIView\u306b\u91cd\u529b\u3092\u9069\u7528\u3055\u305b\u308b Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 // // ViewController.swift // UIKit075 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { //UIDynamicAnimator\u306f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4fdd\u5b58\u3057\u306a\u3051\u308c\u3070\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u304c\u5b9f\u884c\u3055\u308c\u306a\u3044 var animator : UIDynamicAnimator ! var gravity : UIGravityBehavior ! override func viewDidLoad () { super . viewDidLoad () self . view . backgroundColor = UIColor . cyan // Label\u3092\u4f5c\u6210. let myLabel : UILabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 40 )) myLabel . backgroundColor = UIColor . orange myLabel . layer . masksToBounds = true myLabel . layer . cornerRadius = 20.0 myLabel . text = \"Hello Swift!!\" myLabel . textColor = UIColor . white myLabel . shadowColor = UIColor . gray myLabel . textAlignment = NSTextAlignment . center myLabel . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : - 200 ) self . view . addSubview ( myLabel ) // Button\u3092\u4f5c\u6210. let myButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myButton . layer . position = CGPoint ( x : self . view . frame . midX , y : 500 ) myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . setTitleColor ( UIColor . white , for : UIControl . State . normal ) myButton . setTitleColor ( UIColor . black , for : UIControl . State . highlighted ) myButton . backgroundColor = UIColor . red myButton . setTitle ( \"Dropped!\" , for : UIControl . State . normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : UIControl . Event . touchUpInside ) self . view . addSubview ( myButton ) // UIDynamiAnimator\u306e\u751f\u6210\u3068\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4fdd\u5b58. animator = UIDynamicAnimator ( referenceView : self . view ) // \u91cd\u91cf\u3092\u4f5c\u308a\u3001View\u306b\u9069\u7528\u3055\u305b\u308b. gravity = UIGravityBehavior ( items : [ myLabel ]) // Collision\u3092\u4f5c\u6210\u3001View\u306b\u9069\u7528\u3055\u305b\u308b. let collision = UICollisionBehavior ( items : [ myLabel ]) // \u900f\u660e\u306a\u56db\u89d2\u5f62\u306e\u5f53\u305f\u308a\u5224\u5b9a\u3092\u4f5c\u308b. collision . addBoundary ( // Identifier. withIdentifier : \"barrier\" as NSCopying , // \u30d9\u30b8\u30a8\u3067\u56db\u89d2\u5f62\u306e\u56f3\u5f62\u3092\u4f5c\u308b. for : UIBezierPath ( rect : CGRect ( x : self . view . frame . midX , y : self . view . frame . midY , width : self . view . frame . maxX , height : 10 ) ) ) // Collision\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c. animator . addBehavior ( collision ) } @objc func onClickMyButton ( sender : UIButton ){ // Gravity\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c. animator . addBehavior ( gravity ) } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 // // ViewController.swift // UIKit075 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { //UIDynamicAnimator\u306f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4fdd\u5b58\u3057\u306a\u3051\u308c\u3070\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u304c\u5b9f\u884c\u3055\u308c\u306a\u3044 var animator : UIDynamicAnimator ! var gravity : UIGravityBehavior ! override func viewDidLoad () { super . viewDidLoad () self . view . backgroundColor = UIColor . cyan // Label\u3092\u4f5c\u6210. let myLabel : UILabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 40 )) myLabel . backgroundColor = UIColor . orange myLabel . layer . masksToBounds = true myLabel . layer . cornerRadius = 20.0 myLabel . text = \"Hello Swift!!\" myLabel . textColor = UIColor . white myLabel . shadowColor = UIColor . gray myLabel . textAlignment = NSTextAlignment . center myLabel . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : - 200 ) self . view . addSubview ( myLabel ) // Button\u3092\u4f5c\u6210. let myButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myButton . layer . position = CGPoint ( x : self . view . frame . midX , y : 500 ) myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . setTitleColor ( UIColor . white , for : UIControlState . normal ) myButton . setTitleColor ( UIColor . black , for : UIControlState . highlighted ) myButton . backgroundColor = UIColor . red myButton . setTitle ( \"Dropped!\" , for : UIControlState . normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : UIControlEvents . touchUpInside ) self . view . addSubview ( myButton ) // UIDynamiAnimator\u306e\u751f\u6210\u3068\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4fdd\u5b58. animator = UIDynamicAnimator ( referenceView : self . view ) // \u91cd\u91cf\u3092\u4f5c\u308a\u3001View\u306b\u9069\u7528\u3055\u305b\u308b. gravity = UIGravityBehavior ( items : [ myLabel ]) // Collision\u3092\u4f5c\u6210\u3001View\u306b\u9069\u7528\u3055\u305b\u308b. let collision = UICollisionBehavior ( items : [ myLabel ]) // \u900f\u660e\u306a\u56db\u89d2\u5f62\u306e\u5f53\u305f\u308a\u5224\u5b9a\u3092\u4f5c\u308b. collision . addBoundary ( // Identifier. withIdentifier : \"barrier\" , // \u30d9\u30b8\u30a8\u3067\u56db\u89d2\u5f62\u306e\u56f3\u5f62\u3092\u4f5c\u308b. for : UIBezierPath ( rect : CGRect ( x : self . view . frame . midX , y : self . view . frame . midY , width : self . view . frame . maxX , height : 10 ) ) ) // Collision\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c. animator . addBehavior ( collision ) } func onClickMyButton ( sender : UIButton ){ // Gravity\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c. animator . addBehavior ( gravity ) } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 // // ViewController.swift // UIKit075 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { //UIDynamicAnimator\u306f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4fdd\u5b58\u3057\u306a\u3051\u308c\u3070\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u304c\u5b9f\u884c\u3055\u308c\u306a\u3044 var animator : UIDynamicAnimator ! var gravity : UIGravityBehavior ! override func viewDidLoad () { super . viewDidLoad () self . view . backgroundColor = UIColor . cyanColor () // Label\u3092\u4f5c\u6210. let myLabel : UILabel = UILabel ( frame : CGRectMake ( 0 , 0 , 200 , 40 )) myLabel . backgroundColor = UIColor . orangeColor () myLabel . layer . masksToBounds = true myLabel . layer . cornerRadius = 20.0 myLabel . text = \"Hello Swift!!\" myLabel . textColor = UIColor . whiteColor () myLabel . shadowColor = UIColor . grayColor () myLabel . textAlignment = NSTextAlignment . Center myLabel . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : - 200 ) self . view . addSubview ( myLabel ) // Button\u3092\u4f5c\u6210. let myButton = UIButton ( frame : CGRectMake ( 0 , 0 , 200 , 50 )) myButton . layer . position = CGPointMake ( self . view . frame . midX , 500 ) myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . setTitleColor ( UIColor . whiteColor (), forState : UIControlState . Normal ) myButton . setTitleColor ( UIColor . blackColor (), forState : UIControlState . Highlighted ) myButton . backgroundColor = UIColor . redColor () myButton . setTitle ( \"Dropped!\" , forState : UIControlState . Normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : UIControlEvents . TouchUpInside ) self . view . addSubview ( myButton ) // UIDynamiAnimator\u306e\u751f\u6210\u3068\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4fdd\u5b58. animator = UIDynamicAnimator ( referenceView : self . view ) // \u91cd\u91cf\u3092\u4f5c\u308a\u3001View\u306b\u9069\u7528\u3055\u305b\u308b. gravity = UIGravityBehavior ( items : [ myLabel ]) // Collision\u3092\u4f5c\u6210\u3001View\u306b\u9069\u7528\u3055\u305b\u308b. let collision = UICollisionBehavior ( items : [ myLabel ]) // \u900f\u660e\u306a\u56db\u89d2\u5f62\u306e\u5f53\u305f\u308a\u5224\u5b9a\u3092\u4f5c\u308b. collision . addBoundaryWithIdentifier ( // Identifier. \"barrier\" , // \u30d9\u30b8\u30a8\u3067\u56db\u89d2\u5f62\u306e\u56f3\u5f62\u3092\u4f5c\u308b. forPath : UIBezierPath ( rect : CGRectMake ( self . view . frame . midX , self . view . frame . midY , self . view . frame . maxX , 10 ) ) ) // Collision\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c. animator . addBehavior ( collision ) } func onClickMyButton ( sender : UIButton ){ // Gravity\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c. animator . addBehavior ( gravity ) } } 3.x\u30684.x\u306e\u5dee\u5206 UIControlState \u3092 UIControl.State \u306b\u5909\u66f4 UIControlEvents \u3092 UIControl.Event \u306b\u5909\u66f4 \"barrier\" \u3092 \"barrier\" as NSCopying \u306b\u5909\u66f4 func onClickMyButton(sender : UIButton) \u306b @objc \u3092\u8ffd\u52a0 2.3\u30683.0\u306e\u5dee\u5206 addBoundaryWithIdentifier \u304b\u3089 addBoundary \u306b\u5909\u66f4 Reference UIDynamicAnimator https://developer.apple.com/reference/uikit/uidynamicanimator UIGravityBehavior https://developer.apple.com/reference/uikit/uigravitybehavior UICollisionBehavior https://developer.apple.com/reference/uikit/uicollisionbehavior UIBezierPath https://developer.apple.com/reference/uikit/uibezierpath","title":"UIView\u306b\u91cd\u529b\u3092\u9069\u7528\u3055\u305b\u308b"},{"location":"1.uikit/066_uiview/#uiview","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 // // ViewController.swift // UIKit075 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { //UIDynamicAnimator\u306f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4fdd\u5b58\u3057\u306a\u3051\u308c\u3070\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u304c\u5b9f\u884c\u3055\u308c\u306a\u3044 var animator : UIDynamicAnimator ! var gravity : UIGravityBehavior ! override func viewDidLoad () { super . viewDidLoad () self . view . backgroundColor = UIColor . cyan // Label\u3092\u4f5c\u6210. let myLabel : UILabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 40 )) myLabel . backgroundColor = UIColor . orange myLabel . layer . masksToBounds = true myLabel . layer . cornerRadius = 20.0 myLabel . text = \"Hello Swift!!\" myLabel . textColor = UIColor . white myLabel . shadowColor = UIColor . gray myLabel . textAlignment = NSTextAlignment . center myLabel . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : - 200 ) self . view . addSubview ( myLabel ) // Button\u3092\u4f5c\u6210. let myButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myButton . layer . position = CGPoint ( x : self . view . frame . midX , y : 500 ) myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . setTitleColor ( UIColor . white , for : UIControl . State . normal ) myButton . setTitleColor ( UIColor . black , for : UIControl . State . highlighted ) myButton . backgroundColor = UIColor . red myButton . setTitle ( \"Dropped!\" , for : UIControl . State . normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : UIControl . Event . touchUpInside ) self . view . addSubview ( myButton ) // UIDynamiAnimator\u306e\u751f\u6210\u3068\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4fdd\u5b58. animator = UIDynamicAnimator ( referenceView : self . view ) // \u91cd\u91cf\u3092\u4f5c\u308a\u3001View\u306b\u9069\u7528\u3055\u305b\u308b. gravity = UIGravityBehavior ( items : [ myLabel ]) // Collision\u3092\u4f5c\u6210\u3001View\u306b\u9069\u7528\u3055\u305b\u308b. let collision = UICollisionBehavior ( items : [ myLabel ]) // \u900f\u660e\u306a\u56db\u89d2\u5f62\u306e\u5f53\u305f\u308a\u5224\u5b9a\u3092\u4f5c\u308b. collision . addBoundary ( // Identifier. withIdentifier : \"barrier\" as NSCopying , // \u30d9\u30b8\u30a8\u3067\u56db\u89d2\u5f62\u306e\u56f3\u5f62\u3092\u4f5c\u308b. for : UIBezierPath ( rect : CGRect ( x : self . view . frame . midX , y : self . view . frame . midY , width : self . view . frame . maxX , height : 10 ) ) ) // Collision\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c. animator . addBehavior ( collision ) } @objc func onClickMyButton ( sender : UIButton ){ // Gravity\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c. animator . addBehavior ( gravity ) } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 // // ViewController.swift // UIKit075 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { //UIDynamicAnimator\u306f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4fdd\u5b58\u3057\u306a\u3051\u308c\u3070\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u304c\u5b9f\u884c\u3055\u308c\u306a\u3044 var animator : UIDynamicAnimator ! var gravity : UIGravityBehavior ! override func viewDidLoad () { super . viewDidLoad () self . view . backgroundColor = UIColor . cyan // Label\u3092\u4f5c\u6210. let myLabel : UILabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 40 )) myLabel . backgroundColor = UIColor . orange myLabel . layer . masksToBounds = true myLabel . layer . cornerRadius = 20.0 myLabel . text = \"Hello Swift!!\" myLabel . textColor = UIColor . white myLabel . shadowColor = UIColor . gray myLabel . textAlignment = NSTextAlignment . center myLabel . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : - 200 ) self . view . addSubview ( myLabel ) // Button\u3092\u4f5c\u6210. let myButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myButton . layer . position = CGPoint ( x : self . view . frame . midX , y : 500 ) myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . setTitleColor ( UIColor . white , for : UIControlState . normal ) myButton . setTitleColor ( UIColor . black , for : UIControlState . highlighted ) myButton . backgroundColor = UIColor . red myButton . setTitle ( \"Dropped!\" , for : UIControlState . normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : UIControlEvents . touchUpInside ) self . view . addSubview ( myButton ) // UIDynamiAnimator\u306e\u751f\u6210\u3068\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4fdd\u5b58. animator = UIDynamicAnimator ( referenceView : self . view ) // \u91cd\u91cf\u3092\u4f5c\u308a\u3001View\u306b\u9069\u7528\u3055\u305b\u308b. gravity = UIGravityBehavior ( items : [ myLabel ]) // Collision\u3092\u4f5c\u6210\u3001View\u306b\u9069\u7528\u3055\u305b\u308b. let collision = UICollisionBehavior ( items : [ myLabel ]) // \u900f\u660e\u306a\u56db\u89d2\u5f62\u306e\u5f53\u305f\u308a\u5224\u5b9a\u3092\u4f5c\u308b. collision . addBoundary ( // Identifier. withIdentifier : \"barrier\" , // \u30d9\u30b8\u30a8\u3067\u56db\u89d2\u5f62\u306e\u56f3\u5f62\u3092\u4f5c\u308b. for : UIBezierPath ( rect : CGRect ( x : self . view . frame . midX , y : self . view . frame . midY , width : self . view . frame . maxX , height : 10 ) ) ) // Collision\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c. animator . addBehavior ( collision ) } func onClickMyButton ( sender : UIButton ){ // Gravity\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c. animator . addBehavior ( gravity ) } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 // // ViewController.swift // UIKit075 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { //UIDynamicAnimator\u306f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4fdd\u5b58\u3057\u306a\u3051\u308c\u3070\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u304c\u5b9f\u884c\u3055\u308c\u306a\u3044 var animator : UIDynamicAnimator ! var gravity : UIGravityBehavior ! override func viewDidLoad () { super . viewDidLoad () self . view . backgroundColor = UIColor . cyanColor () // Label\u3092\u4f5c\u6210. let myLabel : UILabel = UILabel ( frame : CGRectMake ( 0 , 0 , 200 , 40 )) myLabel . backgroundColor = UIColor . orangeColor () myLabel . layer . masksToBounds = true myLabel . layer . cornerRadius = 20.0 myLabel . text = \"Hello Swift!!\" myLabel . textColor = UIColor . whiteColor () myLabel . shadowColor = UIColor . grayColor () myLabel . textAlignment = NSTextAlignment . Center myLabel . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : - 200 ) self . view . addSubview ( myLabel ) // Button\u3092\u4f5c\u6210. let myButton = UIButton ( frame : CGRectMake ( 0 , 0 , 200 , 50 )) myButton . layer . position = CGPointMake ( self . view . frame . midX , 500 ) myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . setTitleColor ( UIColor . whiteColor (), forState : UIControlState . Normal ) myButton . setTitleColor ( UIColor . blackColor (), forState : UIControlState . Highlighted ) myButton . backgroundColor = UIColor . redColor () myButton . setTitle ( \"Dropped!\" , forState : UIControlState . Normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : UIControlEvents . TouchUpInside ) self . view . addSubview ( myButton ) // UIDynamiAnimator\u306e\u751f\u6210\u3068\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4fdd\u5b58. animator = UIDynamicAnimator ( referenceView : self . view ) // \u91cd\u91cf\u3092\u4f5c\u308a\u3001View\u306b\u9069\u7528\u3055\u305b\u308b. gravity = UIGravityBehavior ( items : [ myLabel ]) // Collision\u3092\u4f5c\u6210\u3001View\u306b\u9069\u7528\u3055\u305b\u308b. let collision = UICollisionBehavior ( items : [ myLabel ]) // \u900f\u660e\u306a\u56db\u89d2\u5f62\u306e\u5f53\u305f\u308a\u5224\u5b9a\u3092\u4f5c\u308b. collision . addBoundaryWithIdentifier ( // Identifier. \"barrier\" , // \u30d9\u30b8\u30a8\u3067\u56db\u89d2\u5f62\u306e\u56f3\u5f62\u3092\u4f5c\u308b. forPath : UIBezierPath ( rect : CGRectMake ( self . view . frame . midX , self . view . frame . midY , self . view . frame . maxX , 10 ) ) ) // Collision\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c. animator . addBehavior ( collision ) } func onClickMyButton ( sender : UIButton ){ // Gravity\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c. animator . addBehavior ( gravity ) } }","title":"UIView\u306b\u91cd\u529b\u3092\u9069\u7528\u3055\u305b\u308b"},{"location":"1.uikit/066_uiview/#3x4x","text":"UIControlState \u3092 UIControl.State \u306b\u5909\u66f4 UIControlEvents \u3092 UIControl.Event \u306b\u5909\u66f4 \"barrier\" \u3092 \"barrier\" as NSCopying \u306b\u5909\u66f4 func onClickMyButton(sender : UIButton) \u306b @objc \u3092\u8ffd\u52a0","title":"3.x\u30684.x\u306e\u5dee\u5206"},{"location":"1.uikit/066_uiview/#2330","text":"addBoundaryWithIdentifier \u304b\u3089 addBoundary \u306b\u5909\u66f4","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/066_uiview/#reference","text":"UIDynamicAnimator https://developer.apple.com/reference/uikit/uidynamicanimator UIGravityBehavior https://developer.apple.com/reference/uikit/uigravitybehavior UICollisionBehavior https://developer.apple.com/reference/uikit/uicollisionbehavior UIBezierPath https://developer.apple.com/reference/uikit/uibezierpath","title":"Reference"},{"location":"1.uikit/067_uiview/","text":"UIView\u3092\u30b9\u30ca\u30c3\u30d7\u3055\u305b\u308b Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 // // ViewController.swift // UIKit067 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { // UIDynamicAnimator\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4fdd\u5b58\u3057\u306a\u3051\u308c\u3070\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u304c\u5b9f\u884c\u3055\u308c\u306a\u3044. var animator : UIDynamicAnimator ! var myLabel : UILabel ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u6c34\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . cyan // Label\u3092\u4f5c\u6210. myLabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myLabel . backgroundColor = UIColor . orange myLabel . layer . masksToBounds = true myLabel . layer . cornerRadius = 20.0 myLabel . text = \"Hello Swift!!\" myLabel . textColor = UIColor . white myLabel . shadowColor = UIColor . gray myLabel . textAlignment = NSTextAlignment . center myLabel . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 200 ) self . view . backgroundColor = UIColor . cyan self . view . addSubview ( myLabel ) // UIDynamiAnimator\u306e\u751f\u6210\u3068\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4fdd\u5b58. animator = UIDynamicAnimator ( referenceView : self . view ) } /* \u30bf\u30c3\u30d7\u3092\u611f\u77e5\u3057\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ override func touchesBegan ( _ touches : Set < UITouch >, with event : UIEvent ?) { for touch : AnyObject in touches { // \u30bf\u30c3\u30c1\u3055\u308c\u305f\u5ea7\u6a19\u3092\u53d6\u5f97. let location = touch . location ( in : self . view ) // animator\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u305fBahavior\u3092\u5168\u3066\u524a\u9664. animator . removeAllBehaviors () // UIView\u3092\u30b9\u30ca\u30c3\u30d7\u3055\u305b\u308bUISnapBehavior\u3092\u751f\u6210. let snap = UISnapBehavior ( item : myLabel , snapTo : location ) // \u30b9\u30ca\u30c3\u30d7\u3092\u9069\u7528\u3055\u305b\u308b. animator . addBehavior ( snap ) } } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 // // ViewController.swift // UIKit067 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { // UIDynamicAnimator\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4fdd\u5b58\u3057\u306a\u3051\u308c\u3070\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u304c\u5b9f\u884c\u3055\u308c\u306a\u3044. var animator : UIDynamicAnimator ! var myLabel : UILabel ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u6c34\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . cyanColor () // Label\u3092\u4f5c\u6210. myLabel = UILabel ( frame : CGRectMake ( 0 , 0 , 200 , 50 )) myLabel . backgroundColor = UIColor . orangeColor () myLabel . layer . masksToBounds = true myLabel . layer . cornerRadius = 20.0 myLabel . text = \"Hello Swift!!\" myLabel . textColor = UIColor . whiteColor () myLabel . shadowColor = UIColor . grayColor () myLabel . textAlignment = NSTextAlignment . Center myLabel . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 200 ) self . view . backgroundColor = UIColor . cyanColor () self . view . addSubview ( myLabel ) // UIDynamiAnimator\u306e\u751f\u6210\u3068\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4fdd\u5b58. animator = UIDynamicAnimator ( referenceView : self . view ) } /* \u30bf\u30c3\u30d7\u3092\u611f\u77e5\u3057\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ override func touchesBegan ( touches : Set < UITouch >, withEvent event : UIEvent ?) { for touch : AnyObject in touches { // \u30bf\u30c3\u30c1\u3055\u308c\u305f\u5ea7\u6a19\u3092\u53d6\u5f97. let location = touch . locationInView ( self . view ) // animator\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u305fBahavior\u3092\u5168\u3066\u524a\u9664. animator . removeAllBehaviors () // UIView\u3092\u30b9\u30ca\u30c3\u30d7\u3055\u305b\u308bUISnapBehavior\u3092\u751f\u6210. let snap = UISnapBehavior ( item : myLabel , snapToPoint : location ) // \u30b9\u30ca\u30c3\u30d7\u3092\u9069\u7528\u3055\u305b\u308b. animator . addBehavior ( snap ) } } } 2.3\u30683.0\u306e\u5dee\u5206 touch.locationInView(self.view) \u304b\u3089 touch.location(in: self.view) \u306b\u5909\u66f4 UISnapBehavior(item: myLabel, snapToPoint: location) \u304b\u3089 UISnapBehavior(item: myLabel, snapTo: location) \u306b\u5909\u66f4 Reference UIDynamicAnimator https://developer.apple.com/reference/uikit/uidynamianimator UISnapBehavior https://developer.apple.com/reference/uikit/uisnapbehavior UIView https://developer.apple.com/reference/uikit/uipushbehavioe","title":"UIView\u3092\u30b9\u30ca\u30c3\u30d7\u3055\u305b\u308b"},{"location":"1.uikit/067_uiview/#uiview","text":"Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 // // ViewController.swift // UIKit067 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { // UIDynamicAnimator\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4fdd\u5b58\u3057\u306a\u3051\u308c\u3070\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u304c\u5b9f\u884c\u3055\u308c\u306a\u3044. var animator : UIDynamicAnimator ! var myLabel : UILabel ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u6c34\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . cyan // Label\u3092\u4f5c\u6210. myLabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myLabel . backgroundColor = UIColor . orange myLabel . layer . masksToBounds = true myLabel . layer . cornerRadius = 20.0 myLabel . text = \"Hello Swift!!\" myLabel . textColor = UIColor . white myLabel . shadowColor = UIColor . gray myLabel . textAlignment = NSTextAlignment . center myLabel . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 200 ) self . view . backgroundColor = UIColor . cyan self . view . addSubview ( myLabel ) // UIDynamiAnimator\u306e\u751f\u6210\u3068\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4fdd\u5b58. animator = UIDynamicAnimator ( referenceView : self . view ) } /* \u30bf\u30c3\u30d7\u3092\u611f\u77e5\u3057\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ override func touchesBegan ( _ touches : Set < UITouch >, with event : UIEvent ?) { for touch : AnyObject in touches { // \u30bf\u30c3\u30c1\u3055\u308c\u305f\u5ea7\u6a19\u3092\u53d6\u5f97. let location = touch . location ( in : self . view ) // animator\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u305fBahavior\u3092\u5168\u3066\u524a\u9664. animator . removeAllBehaviors () // UIView\u3092\u30b9\u30ca\u30c3\u30d7\u3055\u305b\u308bUISnapBehavior\u3092\u751f\u6210. let snap = UISnapBehavior ( item : myLabel , snapTo : location ) // \u30b9\u30ca\u30c3\u30d7\u3092\u9069\u7528\u3055\u305b\u308b. animator . addBehavior ( snap ) } } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 // // ViewController.swift // UIKit067 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { // UIDynamicAnimator\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4fdd\u5b58\u3057\u306a\u3051\u308c\u3070\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u304c\u5b9f\u884c\u3055\u308c\u306a\u3044. var animator : UIDynamicAnimator ! var myLabel : UILabel ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u6c34\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . cyanColor () // Label\u3092\u4f5c\u6210. myLabel = UILabel ( frame : CGRectMake ( 0 , 0 , 200 , 50 )) myLabel . backgroundColor = UIColor . orangeColor () myLabel . layer . masksToBounds = true myLabel . layer . cornerRadius = 20.0 myLabel . text = \"Hello Swift!!\" myLabel . textColor = UIColor . whiteColor () myLabel . shadowColor = UIColor . grayColor () myLabel . textAlignment = NSTextAlignment . Center myLabel . layer . position = CGPoint ( x : self . view . bounds . width / 2 , y : 200 ) self . view . backgroundColor = UIColor . cyanColor () self . view . addSubview ( myLabel ) // UIDynamiAnimator\u306e\u751f\u6210\u3068\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4fdd\u5b58. animator = UIDynamicAnimator ( referenceView : self . view ) } /* \u30bf\u30c3\u30d7\u3092\u611f\u77e5\u3057\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ override func touchesBegan ( touches : Set < UITouch >, withEvent event : UIEvent ?) { for touch : AnyObject in touches { // \u30bf\u30c3\u30c1\u3055\u308c\u305f\u5ea7\u6a19\u3092\u53d6\u5f97. let location = touch . locationInView ( self . view ) // animator\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u305fBahavior\u3092\u5168\u3066\u524a\u9664. animator . removeAllBehaviors () // UIView\u3092\u30b9\u30ca\u30c3\u30d7\u3055\u305b\u308bUISnapBehavior\u3092\u751f\u6210. let snap = UISnapBehavior ( item : myLabel , snapToPoint : location ) // \u30b9\u30ca\u30c3\u30d7\u3092\u9069\u7528\u3055\u305b\u308b. animator . addBehavior ( snap ) } } }","title":"UIView\u3092\u30b9\u30ca\u30c3\u30d7\u3055\u305b\u308b"},{"location":"1.uikit/067_uiview/#2330","text":"touch.locationInView(self.view) \u304b\u3089 touch.location(in: self.view) \u306b\u5909\u66f4 UISnapBehavior(item: myLabel, snapToPoint: location) \u304b\u3089 UISnapBehavior(item: myLabel, snapTo: location) \u306b\u5909\u66f4","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/067_uiview/#reference","text":"UIDynamicAnimator https://developer.apple.com/reference/uikit/uidynamianimator UISnapBehavior https://developer.apple.com/reference/uikit/uisnapbehavior UIView https://developer.apple.com/reference/uikit/uipushbehavioe","title":"Reference"},{"location":"1.uikit/068_uiview/","text":"UIView\u3092\u52d5\u7684\u306b\u52d5\u304b\u3059 Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 // // ViewController.swift // UIKit068 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { // UIDynamicAnimator\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4fdd\u5b58\u3057\u306a\u3051\u308c\u3070\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u304c\u5b9f\u884c\u3055\u308c\u306a\u3044. var animator : UIDynamicAnimator ! var continuousPush : UIPushBehavior ! var instantaneousPush : UIPushBehavior ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u6c34\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . cyan // ContinuousButton\u3092\u4f5c\u6210. let myButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myButton . layer . position = CGPoint ( x : self . view . center . x , y : self . view . bounds . maxY - myButton . bounds . midY ) myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . setTitleColor ( UIColor . white , for : UIControl . State . normal ) myButton . setTitleColor ( UIColor . black , for : UIControl . State . highlighted ) myButton . backgroundColor = UIColor . red myButton . setTitle ( \"Continuous!!\" , for : UIControl . State . normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : UIControl . Event . touchUpInside ) myButton . tag = 1 self . view . addSubview ( myButton ) // InstaneousButton\u3092\u4f5c\u6210. let myButton2 = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myButton2 . layer . position = CGPoint ( x : self . view . center . x , y : self . view . bounds . minY + myButton . bounds . midY ) myButton2 . layer . masksToBounds = true myButton2 . layer . cornerRadius = 20.0 myButton2 . setTitleColor ( UIColor . white , for : UIControl . State . normal ) myButton2 . setTitleColor ( UIColor . black , for : UIControl . State . highlighted ) myButton2 . backgroundColor = UIColor . red myButton2 . setTitle ( \"Instantaneous!!\" , for : UIControl . State . normal ) myButton2 . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : UIControl . Event . touchUpInside ) myButton2 . tag = 2 self . view . addSubview ( myButton2 ) // UIDynamiAnimator\u306e\u751f\u6210\u3068\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4fdd\u5b58. animator = UIDynamicAnimator ( referenceView : self . view ) // UIView\u3092\u7b49\u52a0\u901f\u5ea6\u904b\u52d5\u3067\u52d5\u304b\u3059UIPushBehavior\u3092\u751f\u6210. continuousPush = UIPushBehavior ( items : [ myButton ], mode : UIPushBehavior . Mode . continuous ) continuousPush . pushDirection = CGVector ( dx : 0.0 , dy : - 1.0 ) // UIView\u3092\u7b49\u901f\u904b\u52d5\u3067\u52d5\u304b\u3059UIPushBehavior\u3092\u751f\u6210. instantaneousPush = UIPushBehavior ( items : [ myButton2 ], mode : UIPushBehavior . Mode . instantaneous ) instantaneousPush . pushDirection = CGVector ( dx : 0.0 , dy : 1.0 ) } /* Button\u304c\u62bc\u3055\u308c\u305f\u3068\u304d\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ @objc func onClickMyButton ( sender : UIButton ){ switch ( sender . tag ){ case 1 : animator . addBehavior ( continuousPush ) case 2 : animator . addBehavior ( instantaneousPush ) default : print ( \"Error\" ) } } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 // // ViewController.swift // UIKit068 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { // UIDynamicAnimator\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4fdd\u5b58\u3057\u306a\u3051\u308c\u3070\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u304c\u5b9f\u884c\u3055\u308c\u306a\u3044. var animator : UIDynamicAnimator ! var continuousPush : UIPushBehavior ! var instantaneousPush : UIPushBehavior ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u6c34\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . cyan // ContinuousButton\u3092\u4f5c\u6210. let myButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myButton . layer . position = CGPoint ( x : self . view . center . x , y : self . view . bounds . maxY - myButton . bounds . midY ) myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . setTitleColor ( UIColor . white , for : UIControlState . normal ) myButton . setTitleColor ( UIColor . black , for : UIControlState . highlighted ) myButton . backgroundColor = UIColor . red myButton . setTitle ( \"Continuous!!\" , for : UIControlState . normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : UIControlEvents . touchUpInside ) myButton . tag = 1 self . view . addSubview ( myButton ) // InstaneousButton\u3092\u4f5c\u6210. let myButton2 = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myButton2 . layer . position = CGPoint ( x : self . view . center . x , y : self . view . bounds . minY + myButton . bounds . midY ) myButton2 . layer . masksToBounds = true myButton2 . layer . cornerRadius = 20.0 myButton2 . setTitleColor ( UIColor . white , for : UIControlState . normal ) myButton2 . setTitleColor ( UIColor . black , for : UIControlState . highlighted ) myButton2 . backgroundColor = UIColor . red myButton2 . setTitle ( \"Instantaneous!!\" , for : UIControlState . normal ) myButton2 . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : UIControlEvents . touchUpInside ) myButton2 . tag = 2 self . view . addSubview ( myButton2 ) // UIDynamiAnimator\u306e\u751f\u6210\u3068\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4fdd\u5b58. animator = UIDynamicAnimator ( referenceView : self . view ) // UIView\u3092\u7b49\u52a0\u901f\u5ea6\u904b\u52d5\u3067\u52d5\u304b\u3059UIPushBehavior\u3092\u751f\u6210. continuousPush = UIPushBehavior ( items : [ myButton ], mode : UIPushBehaviorMode . continuous ) continuousPush . pushDirection = CGVector ( dx : 0.0 , dy : - 1.0 ) // UIView\u3092\u7b49\u901f\u904b\u52d5\u3067\u52d5\u304b\u3059UIPushBehavior\u3092\u751f\u6210. instantaneousPush = UIPushBehavior ( items : [ myButton2 ], mode : UIPushBehaviorMode . instantaneous ) instantaneousPush . pushDirection = CGVector ( dx : 0.0 , dy : 1.0 ) } /* Button\u304c\u62bc\u3055\u308c\u305f\u3068\u304d\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func onClickMyButton ( sender : UIButton ){ switch ( sender . tag ){ case 1 : animator . addBehavior ( continuousPush ) case 2 : animator . addBehavior ( instantaneousPush ) default : print ( \"Error\" ) } } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 // // ViewController.swift // UIKit068 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { // UIDynamicAnimator\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4fdd\u5b58\u3057\u306a\u3051\u308c\u3070\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u304c\u5b9f\u884c\u3055\u308c\u306a\u3044. var animator : UIDynamicAnimator ! var continuousPush : UIPushBehavior ! var instantaneousPush : UIPushBehavior ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u6c34\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . cyanColor () // ContinuousButton\u3092\u4f5c\u6210. let myButton = UIButton ( frame : CGRectMake ( 0 , 0 , 200 , 50 )) myButton . layer . position = CGPointMake ( self . view . center . x , self . view . bounds . maxY - myButton . bounds . midY ) myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . setTitleColor ( UIColor . whiteColor (), forState : UIControlState . Normal ) myButton . setTitleColor ( UIColor . blackColor (), forState : UIControlState . Highlighted ) myButton . backgroundColor = UIColor . redColor () myButton . setTitle ( \"Continuous!!\" , forState : UIControlState . Normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : UIControlEvents . TouchUpInside ) myButton . tag = 1 self . view . addSubview ( myButton ) // InstaneousButton\u3092\u4f5c\u6210. let myButton2 = UIButton ( frame : CGRectMake ( 0 , 0 , 200 , 50 )) myButton2 . layer . position = CGPointMake ( self . view . center . x , self . view . bounds . minY + myButton . bounds . midY ) myButton2 . layer . masksToBounds = true myButton2 . layer . cornerRadius = 20.0 myButton2 . setTitleColor ( UIColor . whiteColor (), forState : UIControlState . Normal ) myButton2 . setTitleColor ( UIColor . blackColor (), forState : UIControlState . Highlighted ) myButton2 . backgroundColor = UIColor . redColor () myButton2 . setTitle ( \"Instantaneous!!\" , forState : UIControlState . Normal ) myButton2 . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : UIControlEvents . TouchUpInside ) myButton2 . tag = 2 self . view . addSubview ( myButton2 ) // UIDynamiAnimator\u306e\u751f\u6210\u3068\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4fdd\u5b58. animator = UIDynamicAnimator ( referenceView : self . view ) // UIView\u3092\u7b49\u52a0\u901f\u5ea6\u904b\u52d5\u3067\u52d5\u304b\u3059UIPushBehavior\u3092\u751f\u6210. continuousPush = UIPushBehavior ( items : [ myButton ], mode : UIPushBehaviorMode . Continuous ) continuousPush . pushDirection = CGVectorMake ( 0.0 , - 1.0 ) // UIView\u3092\u7b49\u901f\u904b\u52d5\u3067\u52d5\u304b\u3059UIPushBehavior\u3092\u751f\u6210. instantaneousPush = UIPushBehavior ( items : [ myButton2 ], mode : UIPushBehaviorMode . Instantaneous ) instantaneousPush . pushDirection = CGVector ( dx : 0.0 , dy : 1.0 ) } /* Button\u304c\u62bc\u3055\u308c\u305f\u3068\u304d\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func onClickMyButton ( sender : UIButton ){ switch ( sender . tag ){ case 1 : animator . addBehavior ( continuousPush ) case 2 : animator . addBehavior ( instantaneousPush ) default : print ( \"Error\" ) } } } 3.x\u30684.x\u306e\u5dee\u5206 UIControlState \u3092 UIControl.State \u306b\u5909\u66f4 UIControlEvents \u3092 UIControl.Event \u306b\u5909\u66f4 func onClickMyButton(sender : UIButton) \u306b @objc \u3092\u8ffd\u52a0 UIPushBehaviorMode \u3092 UIPushBehavior.Mode \u306b\u5909\u66f4 2.3\u30683.0\u306e\u5dee\u5206 CGVectorMake\u304c\u5ec3\u6b62 Reference UIDynamicBehavior https://developer.apple.com/reference/uikit/uidynamicbehavior UIPushBehavior https://developer.apple.com/reference/uikit/uipushbehavior","title":"UIView\u3092\u52d5\u7684\u306b\u52d5\u304b\u3059"},{"location":"1.uikit/068_uiview/#uiview","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 // // ViewController.swift // UIKit068 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { // UIDynamicAnimator\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4fdd\u5b58\u3057\u306a\u3051\u308c\u3070\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u304c\u5b9f\u884c\u3055\u308c\u306a\u3044. var animator : UIDynamicAnimator ! var continuousPush : UIPushBehavior ! var instantaneousPush : UIPushBehavior ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u6c34\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . cyan // ContinuousButton\u3092\u4f5c\u6210. let myButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myButton . layer . position = CGPoint ( x : self . view . center . x , y : self . view . bounds . maxY - myButton . bounds . midY ) myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . setTitleColor ( UIColor . white , for : UIControl . State . normal ) myButton . setTitleColor ( UIColor . black , for : UIControl . State . highlighted ) myButton . backgroundColor = UIColor . red myButton . setTitle ( \"Continuous!!\" , for : UIControl . State . normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : UIControl . Event . touchUpInside ) myButton . tag = 1 self . view . addSubview ( myButton ) // InstaneousButton\u3092\u4f5c\u6210. let myButton2 = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myButton2 . layer . position = CGPoint ( x : self . view . center . x , y : self . view . bounds . minY + myButton . bounds . midY ) myButton2 . layer . masksToBounds = true myButton2 . layer . cornerRadius = 20.0 myButton2 . setTitleColor ( UIColor . white , for : UIControl . State . normal ) myButton2 . setTitleColor ( UIColor . black , for : UIControl . State . highlighted ) myButton2 . backgroundColor = UIColor . red myButton2 . setTitle ( \"Instantaneous!!\" , for : UIControl . State . normal ) myButton2 . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : UIControl . Event . touchUpInside ) myButton2 . tag = 2 self . view . addSubview ( myButton2 ) // UIDynamiAnimator\u306e\u751f\u6210\u3068\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4fdd\u5b58. animator = UIDynamicAnimator ( referenceView : self . view ) // UIView\u3092\u7b49\u52a0\u901f\u5ea6\u904b\u52d5\u3067\u52d5\u304b\u3059UIPushBehavior\u3092\u751f\u6210. continuousPush = UIPushBehavior ( items : [ myButton ], mode : UIPushBehavior . Mode . continuous ) continuousPush . pushDirection = CGVector ( dx : 0.0 , dy : - 1.0 ) // UIView\u3092\u7b49\u901f\u904b\u52d5\u3067\u52d5\u304b\u3059UIPushBehavior\u3092\u751f\u6210. instantaneousPush = UIPushBehavior ( items : [ myButton2 ], mode : UIPushBehavior . Mode . instantaneous ) instantaneousPush . pushDirection = CGVector ( dx : 0.0 , dy : 1.0 ) } /* Button\u304c\u62bc\u3055\u308c\u305f\u3068\u304d\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ @objc func onClickMyButton ( sender : UIButton ){ switch ( sender . tag ){ case 1 : animator . addBehavior ( continuousPush ) case 2 : animator . addBehavior ( instantaneousPush ) default : print ( \"Error\" ) } } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 // // ViewController.swift // UIKit068 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { // UIDynamicAnimator\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4fdd\u5b58\u3057\u306a\u3051\u308c\u3070\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u304c\u5b9f\u884c\u3055\u308c\u306a\u3044. var animator : UIDynamicAnimator ! var continuousPush : UIPushBehavior ! var instantaneousPush : UIPushBehavior ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u6c34\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . cyan // ContinuousButton\u3092\u4f5c\u6210. let myButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myButton . layer . position = CGPoint ( x : self . view . center . x , y : self . view . bounds . maxY - myButton . bounds . midY ) myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . setTitleColor ( UIColor . white , for : UIControlState . normal ) myButton . setTitleColor ( UIColor . black , for : UIControlState . highlighted ) myButton . backgroundColor = UIColor . red myButton . setTitle ( \"Continuous!!\" , for : UIControlState . normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : UIControlEvents . touchUpInside ) myButton . tag = 1 self . view . addSubview ( myButton ) // InstaneousButton\u3092\u4f5c\u6210. let myButton2 = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myButton2 . layer . position = CGPoint ( x : self . view . center . x , y : self . view . bounds . minY + myButton . bounds . midY ) myButton2 . layer . masksToBounds = true myButton2 . layer . cornerRadius = 20.0 myButton2 . setTitleColor ( UIColor . white , for : UIControlState . normal ) myButton2 . setTitleColor ( UIColor . black , for : UIControlState . highlighted ) myButton2 . backgroundColor = UIColor . red myButton2 . setTitle ( \"Instantaneous!!\" , for : UIControlState . normal ) myButton2 . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : UIControlEvents . touchUpInside ) myButton2 . tag = 2 self . view . addSubview ( myButton2 ) // UIDynamiAnimator\u306e\u751f\u6210\u3068\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4fdd\u5b58. animator = UIDynamicAnimator ( referenceView : self . view ) // UIView\u3092\u7b49\u52a0\u901f\u5ea6\u904b\u52d5\u3067\u52d5\u304b\u3059UIPushBehavior\u3092\u751f\u6210. continuousPush = UIPushBehavior ( items : [ myButton ], mode : UIPushBehaviorMode . continuous ) continuousPush . pushDirection = CGVector ( dx : 0.0 , dy : - 1.0 ) // UIView\u3092\u7b49\u901f\u904b\u52d5\u3067\u52d5\u304b\u3059UIPushBehavior\u3092\u751f\u6210. instantaneousPush = UIPushBehavior ( items : [ myButton2 ], mode : UIPushBehaviorMode . instantaneous ) instantaneousPush . pushDirection = CGVector ( dx : 0.0 , dy : 1.0 ) } /* Button\u304c\u62bc\u3055\u308c\u305f\u3068\u304d\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func onClickMyButton ( sender : UIButton ){ switch ( sender . tag ){ case 1 : animator . addBehavior ( continuousPush ) case 2 : animator . addBehavior ( instantaneousPush ) default : print ( \"Error\" ) } } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 // // ViewController.swift // UIKit068 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { // UIDynamicAnimator\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4fdd\u5b58\u3057\u306a\u3051\u308c\u3070\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u304c\u5b9f\u884c\u3055\u308c\u306a\u3044. var animator : UIDynamicAnimator ! var continuousPush : UIPushBehavior ! var instantaneousPush : UIPushBehavior ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u6c34\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . cyanColor () // ContinuousButton\u3092\u4f5c\u6210. let myButton = UIButton ( frame : CGRectMake ( 0 , 0 , 200 , 50 )) myButton . layer . position = CGPointMake ( self . view . center . x , self . view . bounds . maxY - myButton . bounds . midY ) myButton . layer . masksToBounds = true myButton . layer . cornerRadius = 20.0 myButton . setTitleColor ( UIColor . whiteColor (), forState : UIControlState . Normal ) myButton . setTitleColor ( UIColor . blackColor (), forState : UIControlState . Highlighted ) myButton . backgroundColor = UIColor . redColor () myButton . setTitle ( \"Continuous!!\" , forState : UIControlState . Normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : UIControlEvents . TouchUpInside ) myButton . tag = 1 self . view . addSubview ( myButton ) // InstaneousButton\u3092\u4f5c\u6210. let myButton2 = UIButton ( frame : CGRectMake ( 0 , 0 , 200 , 50 )) myButton2 . layer . position = CGPointMake ( self . view . center . x , self . view . bounds . minY + myButton . bounds . midY ) myButton2 . layer . masksToBounds = true myButton2 . layer . cornerRadius = 20.0 myButton2 . setTitleColor ( UIColor . whiteColor (), forState : UIControlState . Normal ) myButton2 . setTitleColor ( UIColor . blackColor (), forState : UIControlState . Highlighted ) myButton2 . backgroundColor = UIColor . redColor () myButton2 . setTitle ( \"Instantaneous!!\" , forState : UIControlState . Normal ) myButton2 . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : UIControlEvents . TouchUpInside ) myButton2 . tag = 2 self . view . addSubview ( myButton2 ) // UIDynamiAnimator\u306e\u751f\u6210\u3068\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4fdd\u5b58. animator = UIDynamicAnimator ( referenceView : self . view ) // UIView\u3092\u7b49\u52a0\u901f\u5ea6\u904b\u52d5\u3067\u52d5\u304b\u3059UIPushBehavior\u3092\u751f\u6210. continuousPush = UIPushBehavior ( items : [ myButton ], mode : UIPushBehaviorMode . Continuous ) continuousPush . pushDirection = CGVectorMake ( 0.0 , - 1.0 ) // UIView\u3092\u7b49\u901f\u904b\u52d5\u3067\u52d5\u304b\u3059UIPushBehavior\u3092\u751f\u6210. instantaneousPush = UIPushBehavior ( items : [ myButton2 ], mode : UIPushBehaviorMode . Instantaneous ) instantaneousPush . pushDirection = CGVector ( dx : 0.0 , dy : 1.0 ) } /* Button\u304c\u62bc\u3055\u308c\u305f\u3068\u304d\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func onClickMyButton ( sender : UIButton ){ switch ( sender . tag ){ case 1 : animator . addBehavior ( continuousPush ) case 2 : animator . addBehavior ( instantaneousPush ) default : print ( \"Error\" ) } } }","title":"UIView\u3092\u52d5\u7684\u306b\u52d5\u304b\u3059"},{"location":"1.uikit/068_uiview/#3x4x","text":"UIControlState \u3092 UIControl.State \u306b\u5909\u66f4 UIControlEvents \u3092 UIControl.Event \u306b\u5909\u66f4 func onClickMyButton(sender : UIButton) \u306b @objc \u3092\u8ffd\u52a0 UIPushBehaviorMode \u3092 UIPushBehavior.Mode \u306b\u5909\u66f4","title":"3.x\u30684.x\u306e\u5dee\u5206"},{"location":"1.uikit/068_uiview/#2330","text":"CGVectorMake\u304c\u5ec3\u6b62","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/068_uiview/#reference","text":"UIDynamicBehavior https://developer.apple.com/reference/uikit/uidynamicbehavior UIPushBehavior https://developer.apple.com/reference/uikit/uipushbehavior","title":"Reference"},{"location":"1.uikit/069_animation/","text":"UIView\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u307e\u3068\u3081 Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 // // ViewController.swift // UIKit069 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { var myLabel : UILabel ! override func viewDidLoad () { super . viewDidLoad () // Label\u3092\u751f\u6210 myLabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myLabel . backgroundColor = UIColor ( red : 0.561 , green : 0.737 , blue : 0.561 , alpha : 1.0 ) myLabel . center = self . view . center myLabel . text = \"*\uff65\u309c\uff9f\uff65*:.\uff61..\uff61.:*\uff65\u309c\" myLabel . textAlignment = NSTextAlignment . center myLabel . textColor = UIColor . white // SegmentesController\u3092\u751f\u6210. let mySegcon = UISegmentedControl ( items : [ \"Spring\" , \"Invert\" , \"Rotate\" , \"Scaling\" , \"Move\" ]) mySegcon . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height - 50 ) mySegcon . tintColor = UIColor . blue mySegcon . addTarget ( self , action : #selector ( ViewController . changedValue ( sender :)), for : UIControl . Event . valueChanged ) // Label\u3092view\u306b\u8ffd\u52a0 self . view . addSubview ( myLabel ) // SegmentedController\u3092view\u306b\u8ffd\u52a0. self . view . addSubview ( mySegcon ) } /* SegmentedController\u306e\u5024\u304c\u5909\u308f\u3063\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ @objc func changedValue ( sender : UISegmentedControl ) { myLabel . center = self . view . center // \u5404\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u51e6\u7406. switch ( sender . selectedSegmentIndex ) { /* \u30d0\u30cd\u306e\u3088\u3046\u306a\u52d5\u304d\u3092\u3059\u308b\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3. */ case 0 : // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u6642\u9593\u30922\u79d2\u306b\u8a2d\u5b9a. UIView . animate ( withDuration : 2.0 , // \u9045\u5ef6\u6642\u9593. delay : 0.0 , // \u30d0\u30cd\u306e\u5f3e\u6027\u529b. \u5c0f\u3055\u3044\u307b\u3069\u5f3e\u6027\u529b\u306f\u5927\u304d\u304f\u306a\u308b. usingSpringWithDamping : 0.2 , // \u521d\u901f\u5ea6. initialSpringVelocity : 1.5 , // \u4e00\u5b9a\u306e\u901f\u5ea6. options : UIView . AnimationOptions . curveLinear , animations : { () -> Void in self . myLabel . layer . position = CGPoint ( x : self . view . frame . width - 50 , y : 100 ) // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u5b8c\u4e86\u6642\u306e\u51e6\u7406 }) { ( Bool ) -> Void in self . myLabel . center = self . view . center } /* X, Y\u65b9\u5411\u306b\u305d\u308c\u305e\u308c\u53cd\u8ee2\u3059\u308b\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3. */ case 1 : // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u6642\u9593\u30923\u79d2\u306b\u8a2d\u5b9a UIView . animate ( withDuration : 3.0 , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406 animations : { () -> Void in // X\u65b9\u5411\u306b\u53cd\u8ee2\u7528\u306e\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u4f5c\u6210 self . myLabel . transform = self . myLabel . transform . scaledBy ( x : - 1.0 , y : 1.0 ) // \u9023\u7d9a\u3057\u305f\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u51e6\u7406. }) { ( Bool ) -> Void in UIView . animate ( withDuration : 3.0 , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406 animations : { () -> Void in // Y\u65b9\u5411\u306b\u53cd\u8ee2\u7528\u306e\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u4f5c\u6210 self . myLabel . transform = self . myLabel . transform . scaledBy ( x : 1.0 , y : - 1.0 ) // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u5b8c\u4e86\u6642\u306e\u51e6\u7406 }) { ( Bool ) -> Void in } } /* \u56de\u8ee2\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3. */ case 2 : // \u521d\u671f\u5316. self . myLabel . transform = CGAffineTransform ( rotationAngle : 0 ) // radian\u3067\u56de\u8ee2\u89d2\u5ea6\u3092\u6307\u5b9a(90\u5ea6). let angle : CGFloat = CGFloat ( M_PI_2 ) // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u79d2\u6570\u3092\u8a2d\u5b9a(3\u79d2). UIView . animate ( withDuration : 3.0 , animations : { () -> Void in // \u56de\u8ee2\u7528\u306e\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u751f\u6210. self . myLabel . transform = CGAffineTransform ( rotationAngle : angle ) }, completion : { ( Bool ) -> Void in }) /* \u62e1\u7e2e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3. */ case 3 : self . myLabel . transform = CGAffineTransform ( scaleX : 1 , y : 1 ) // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u6642\u9593\u30923\u79d2\u306b\u8a2d\u5b9a. UIView . animate ( withDuration : 3.0 , animations : { () -> Void in // \u7e2e\u5c0f\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u4f5c\u6210. self . myLabel . transform = CGAffineTransform ( scaleX : 1.5 , y : 1.5 ) }) // \u9023\u7d9a\u3057\u305f\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u51e6\u7406. { ( Bool ) -> Void in UIView . animate ( withDuration : 3.0 , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406. animations : { () -> Void in // \u62e1\u5927\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u4f5c\u6210. self . myLabel . transform = CGAffineTransform ( scaleX : 0.5 , y : 0.5 ) }) // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u5b8c\u4e86\u6642\u306e\u51e6\u7406. { ( Bool ) -> Void in // \u5927\u304d\u3055\u3092\u5143\u306b\u623b\u3059. self . myLabel . transform = CGAffineTransform ( scaleX : 1 , y : 1 ) } } /* \u79fb\u52d5\u3059\u308b\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3. */ case 4 : myLabel . layer . position = CGPoint ( x : - 30 , y : - 30 ) // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u51e6\u7406 UIView . animate ( withDuration : TimeInterval ( CGFloat ( 3.0 )), animations : {() -> Void in // \u79fb\u52d5\u5148\u306e\u5ea7\u6a19\u3092\u6307\u5b9a\u3059\u308b. self . myLabel . center = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height / 2 ); }, completion : {( Bool ) -> Void in }) default : print ( \"error!\" ) } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 // // ViewController.swift // UIKit069 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { var myLabel : UILabel ! override func viewDidLoad () { super . viewDidLoad () // Label\u3092\u751f\u6210 myLabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myLabel . backgroundColor = UIColor ( red : 0.561 , green : 0.737 , blue : 0.561 , alpha : 1.0 ) myLabel . center = self . view . center myLabel . text = \"*\uff65\u309c\uff9f\uff65*:.\uff61..\uff61.:*\uff65\u309c\" myLabel . textAlignment = NSTextAlignment . center myLabel . textColor = UIColor . white // SegmentesController\u3092\u751f\u6210. let mySegcon = UISegmentedControl ( items : [ \"Spring\" , \"Invert\" , \"Rotate\" , \"Scaling\" , \"Move\" ]) mySegcon . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height - 50 ) mySegcon . tintColor = UIColor . blue mySegcon . addTarget ( self , action : #selector ( ViewController . changedValue ( sender :)), for : UIControlEvents . valueChanged ) // Label\u3092view\u306b\u8ffd\u52a0 self . view . addSubview ( myLabel ) // SegmentedController\u3092view\u306b\u8ffd\u52a0. self . view . addSubview ( mySegcon ) } /* SegmentedController\u306e\u5024\u304c\u5909\u308f\u3063\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func changedValue ( sender : UISegmentedControl ) { myLabel . center = self . view . center // \u5404\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u51e6\u7406. switch ( sender . selectedSegmentIndex ) { /* \u30d0\u30cd\u306e\u3088\u3046\u306a\u52d5\u304d\u3092\u3059\u308b\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3. */ case 0 : // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u6642\u9593\u30922\u79d2\u306b\u8a2d\u5b9a. UIView . animate ( withDuration : 2.0 , // \u9045\u5ef6\u6642\u9593. delay : 0.0 , // \u30d0\u30cd\u306e\u5f3e\u6027\u529b. \u5c0f\u3055\u3044\u307b\u3069\u5f3e\u6027\u529b\u306f\u5927\u304d\u304f\u306a\u308b. usingSpringWithDamping : 0.2 , // \u521d\u901f\u5ea6. initialSpringVelocity : 1.5 , // \u4e00\u5b9a\u306e\u901f\u5ea6. options : UIViewAnimationOptions . curveLinear , animations : { () -> Void in self . myLabel . layer . position = CGPoint ( x : self . view . frame . width - 50 , y : 100 ) // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u5b8c\u4e86\u6642\u306e\u51e6\u7406 }) { ( Bool ) -> Void in self . myLabel . center = self . view . center } /* X, Y\u65b9\u5411\u306b\u305d\u308c\u305e\u308c\u53cd\u8ee2\u3059\u308b\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3. */ case 1 : // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u6642\u9593\u30923\u79d2\u306b\u8a2d\u5b9a UIView . animate ( withDuration : 3.0 , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406 animations : { () -> Void in // X\u65b9\u5411\u306b\u53cd\u8ee2\u7528\u306e\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u4f5c\u6210 self . myLabel . transform = self . myLabel . transform . scaledBy ( x : - 1.0 , y : 1.0 ) // \u9023\u7d9a\u3057\u305f\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u51e6\u7406. }) { ( Bool ) -> Void in UIView . animate ( withDuration : 3.0 , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406 animations : { () -> Void in // Y\u65b9\u5411\u306b\u53cd\u8ee2\u7528\u306e\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u4f5c\u6210 self . myLabel . transform = self . myLabel . transform . scaledBy ( x : 1.0 , y : - 1.0 ) // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u5b8c\u4e86\u6642\u306e\u51e6\u7406 }) { ( Bool ) -> Void in } } /* \u56de\u8ee2\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3. */ case 2 : // \u521d\u671f\u5316. self . myLabel . transform = CGAffineTransform ( rotationAngle : 0 ) // radian\u3067\u56de\u8ee2\u89d2\u5ea6\u3092\u6307\u5b9a(90\u5ea6). let angle : CGFloat = CGFloat ( M_PI_2 ) // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u79d2\u6570\u3092\u8a2d\u5b9a(3\u79d2). UIView . animate ( withDuration : 3.0 , animations : { () -> Void in // \u56de\u8ee2\u7528\u306e\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u751f\u6210. self . myLabel . transform = CGAffineTransform ( rotationAngle : angle ) }, completion : { ( Bool ) -> Void in }) /* \u62e1\u7e2e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3. */ case 3 : self . myLabel . transform = CGAffineTransform ( scaleX : 1 , y : 1 ) // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u6642\u9593\u30923\u79d2\u306b\u8a2d\u5b9a. UIView . animate ( withDuration : 3.0 , animations : { () -> Void in // \u7e2e\u5c0f\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u4f5c\u6210. self . myLabel . transform = CGAffineTransform ( scaleX : 1.5 , y : 1.5 ) }) // \u9023\u7d9a\u3057\u305f\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u51e6\u7406. { ( Bool ) -> Void in UIView . animate ( withDuration : 3.0 , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406. animations : { () -> Void in // \u62e1\u5927\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u4f5c\u6210. self . myLabel . transform = CGAffineTransform ( scaleX : 0.5 , y : 0.5 ) }) // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u5b8c\u4e86\u6642\u306e\u51e6\u7406. { ( Bool ) -> Void in // \u5927\u304d\u3055\u3092\u5143\u306b\u623b\u3059. self . myLabel . transform = CGAffineTransform ( scaleX : 1 , y : 1 ) } } /* \u79fb\u52d5\u3059\u308b\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3. */ case 4 : myLabel . layer . position = CGPoint ( x : - 30 , y : - 30 ) // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u51e6\u7406 UIView . animate ( withDuration : TimeInterval ( CGFloat ( 3.0 )), animations : {() -> Void in // \u79fb\u52d5\u5148\u306e\u5ea7\u6a19\u3092\u6307\u5b9a\u3059\u308b. self . myLabel . center = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height / 2 ); }, completion : {( Bool ) -> Void in }) default : print ( \"error!\" ) } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 // // ViewController.swift // UIKit069 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { var myLabel : UILabel ! override func viewDidLoad () { super . viewDidLoad () // Label\u3092\u751f\u6210 myLabel = UILabel ( frame : CGRectMake ( 0 , 0 , 200 , 50 )) myLabel . backgroundColor = UIColor ( red : 0.561 , green : 0.737 , blue : 0.561 , alpha : 1.0 ) myLabel . center = self . view . center myLabel . text = \"*\uff65\u309c\uff9f\uff65*:.\uff61..\uff61.:*\uff65\u309c\" myLabel . textAlignment = NSTextAlignment . Center myLabel . textColor = UIColor . whiteColor () // SegmentesController\u3092\u751f\u6210. let mySegcon = UISegmentedControl ( items : [ \"Spring\" , \"Invert\" , \"Rotate\" , \"Scaling\" , \"Move\" ]) mySegcon . layer . position = CGPointMake ( self . view . frame . width / 2 , self . view . frame . height - 50 ) mySegcon . tintColor = UIColor . blueColor () mySegcon . addTarget ( self , action : #selector ( ViewController . changedValue ( _ :)), forControlEvents : UIControlEvents . ValueChanged ) // Label\u3092view\u306b\u8ffd\u52a0 self . view . addSubview ( myLabel ) // SegmentedController\u3092view\u306b\u8ffd\u52a0. self . view . addSubview ( mySegcon ) } /* SegmentedController\u306e\u5024\u304c\u5909\u308f\u3063\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func changedValue ( sender : UISegmentedControl ) { myLabel . center = self . view . center // \u5404\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u51e6\u7406. switch ( sender . selectedSegmentIndex ) { /* \u30d0\u30cd\u306e\u3088\u3046\u306a\u52d5\u304d\u3092\u3059\u308b\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3. */ case 0 : // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u6642\u9593\u30922\u79d2\u306b\u8a2d\u5b9a. UIView . animateWithDuration ( 2.0 , // \u9045\u5ef6\u6642\u9593. delay : 0.0 , // \u30d0\u30cd\u306e\u5f3e\u6027\u529b. \u5c0f\u3055\u3044\u307b\u3069\u5f3e\u6027\u529b\u306f\u5927\u304d\u304f\u306a\u308b. usingSpringWithDamping : 0.2 , // \u521d\u901f\u5ea6. initialSpringVelocity : 1.5 , // \u4e00\u5b9a\u306e\u901f\u5ea6. options : UIViewAnimationOptions . CurveLinear , animations : { () -> Void in self . myLabel . layer . position = CGPointMake ( self . view . frame . width - 50 , 100 ) // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u5b8c\u4e86\u6642\u306e\u51e6\u7406 }) { ( Bool ) -> Void in self . myLabel . center = self . view . center } /* X, Y\u65b9\u5411\u306b\u305d\u308c\u305e\u308c\u53cd\u8ee2\u3059\u308b\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3. */ case 1 : // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u6642\u9593\u30923\u79d2\u306b\u8a2d\u5b9a UIView . animateWithDuration ( 3.0 , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406 animations : { () -> Void in // X\u65b9\u5411\u306b\u53cd\u8ee2\u7528\u306e\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u4f5c\u6210 self . myLabel . transform = CGAffineTransformScale ( self . myLabel . transform , - 1.0 , 1.0 ) // \u9023\u7d9a\u3057\u305f\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u51e6\u7406. }) { ( Bool ) -> Void in UIView . animateWithDuration ( 3.0 , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406 animations : { () -> Void in // Y\u65b9\u5411\u306b\u53cd\u8ee2\u7528\u306e\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u4f5c\u6210 self . myLabel . transform = CGAffineTransformScale ( self . myLabel . transform , 1.0 , - 1.0 ) // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u5b8c\u4e86\u6642\u306e\u51e6\u7406 }) { ( Bool ) -> Void in } } /* \u56de\u8ee2\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3. */ case 2 : // \u521d\u671f\u5316. self . myLabel . transform = CGAffineTransformMakeRotation ( 0 ) // radian\u3067\u56de\u8ee2\u89d2\u5ea6\u3092\u6307\u5b9a(90\u5ea6). let angle : CGFloat = CGFloat ( M_PI_2 ) // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u79d2\u6570\u3092\u8a2d\u5b9a(3\u79d2). UIView . animateWithDuration ( 3.0 , animations : { () -> Void in // \u56de\u8ee2\u7528\u306e\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u751f\u6210. self . myLabel . transform = CGAffineTransformMakeRotation ( angle ) }, completion : { ( Bool ) -> Void in }) /* \u62e1\u7e2e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3. */ case 3 : self . myLabel . transform = CGAffineTransformMakeScale ( 1 , 1 ) // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u6642\u9593\u30923\u79d2\u306b\u8a2d\u5b9a. UIView . animateWithDuration ( 3.0 , animations : { () -> Void in // \u7e2e\u5c0f\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u4f5c\u6210. self . myLabel . transform = CGAffineTransformMakeScale ( 1.5 , 1.5 ) }) // \u9023\u7d9a\u3057\u305f\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u51e6\u7406. { ( Bool ) -> Void in UIView . animateWithDuration ( 3.0 , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406. animations : { () -> Void in // \u62e1\u5927\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u4f5c\u6210. self . myLabel . transform = CGAffineTransformMakeScale ( 0.5 , 0.5 ) }) // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u5b8c\u4e86\u6642\u306e\u51e6\u7406. { ( Bool ) -> Void in // \u5927\u304d\u3055\u3092\u5143\u306b\u623b\u3059. self . myLabel . transform = CGAffineTransformMakeScale ( 1 , 1 ) } } /* \u79fb\u52d5\u3059\u308b\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3. */ case 4 : myLabel . layer . position = CGPointMake ( - 30 , - 30 ) // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u51e6\u7406 UIView . animateWithDuration ( NSTimeInterval ( CGFloat ( 3.0 )), animations : {() -> Void in // \u79fb\u52d5\u5148\u306e\u5ea7\u6a19\u3092\u6307\u5b9a\u3059\u308b. self . myLabel . center = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height / 2 ); }, completion : {( Bool ) -> Void in }) default : print ( \"error!\" ) } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } 3.x\u30684.x\u306e\u5dee\u5206 UIControlEvents \u304c UIControl.Event \u306b\u5909\u66f4 func changedValue(sender: UISegmentedControl) \u306b @objc \u3092\u8ffd\u52a0 UIViewAnimationOptions \u3092 UIView.AnimationOptions \u306b\u5909\u66f4 2.3\u30683.0\u306e\u5dee\u5206 CGPointMake\u304c\u5ec3\u6b62 CGRectMake\u304c\u5ec3\u6b62 Reference UIView https://developer.apple.com/reference/uikit/uiview","title":"UIView\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u307e\u3068\u3081"},{"location":"1.uikit/069_animation/#uiview","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 // // ViewController.swift // UIKit069 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { var myLabel : UILabel ! override func viewDidLoad () { super . viewDidLoad () // Label\u3092\u751f\u6210 myLabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myLabel . backgroundColor = UIColor ( red : 0.561 , green : 0.737 , blue : 0.561 , alpha : 1.0 ) myLabel . center = self . view . center myLabel . text = \"*\uff65\u309c\uff9f\uff65*:.\uff61..\uff61.:*\uff65\u309c\" myLabel . textAlignment = NSTextAlignment . center myLabel . textColor = UIColor . white // SegmentesController\u3092\u751f\u6210. let mySegcon = UISegmentedControl ( items : [ \"Spring\" , \"Invert\" , \"Rotate\" , \"Scaling\" , \"Move\" ]) mySegcon . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height - 50 ) mySegcon . tintColor = UIColor . blue mySegcon . addTarget ( self , action : #selector ( ViewController . changedValue ( sender :)), for : UIControl . Event . valueChanged ) // Label\u3092view\u306b\u8ffd\u52a0 self . view . addSubview ( myLabel ) // SegmentedController\u3092view\u306b\u8ffd\u52a0. self . view . addSubview ( mySegcon ) } /* SegmentedController\u306e\u5024\u304c\u5909\u308f\u3063\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ @objc func changedValue ( sender : UISegmentedControl ) { myLabel . center = self . view . center // \u5404\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u51e6\u7406. switch ( sender . selectedSegmentIndex ) { /* \u30d0\u30cd\u306e\u3088\u3046\u306a\u52d5\u304d\u3092\u3059\u308b\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3. */ case 0 : // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u6642\u9593\u30922\u79d2\u306b\u8a2d\u5b9a. UIView . animate ( withDuration : 2.0 , // \u9045\u5ef6\u6642\u9593. delay : 0.0 , // \u30d0\u30cd\u306e\u5f3e\u6027\u529b. \u5c0f\u3055\u3044\u307b\u3069\u5f3e\u6027\u529b\u306f\u5927\u304d\u304f\u306a\u308b. usingSpringWithDamping : 0.2 , // \u521d\u901f\u5ea6. initialSpringVelocity : 1.5 , // \u4e00\u5b9a\u306e\u901f\u5ea6. options : UIView . AnimationOptions . curveLinear , animations : { () -> Void in self . myLabel . layer . position = CGPoint ( x : self . view . frame . width - 50 , y : 100 ) // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u5b8c\u4e86\u6642\u306e\u51e6\u7406 }) { ( Bool ) -> Void in self . myLabel . center = self . view . center } /* X, Y\u65b9\u5411\u306b\u305d\u308c\u305e\u308c\u53cd\u8ee2\u3059\u308b\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3. */ case 1 : // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u6642\u9593\u30923\u79d2\u306b\u8a2d\u5b9a UIView . animate ( withDuration : 3.0 , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406 animations : { () -> Void in // X\u65b9\u5411\u306b\u53cd\u8ee2\u7528\u306e\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u4f5c\u6210 self . myLabel . transform = self . myLabel . transform . scaledBy ( x : - 1.0 , y : 1.0 ) // \u9023\u7d9a\u3057\u305f\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u51e6\u7406. }) { ( Bool ) -> Void in UIView . animate ( withDuration : 3.0 , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406 animations : { () -> Void in // Y\u65b9\u5411\u306b\u53cd\u8ee2\u7528\u306e\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u4f5c\u6210 self . myLabel . transform = self . myLabel . transform . scaledBy ( x : 1.0 , y : - 1.0 ) // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u5b8c\u4e86\u6642\u306e\u51e6\u7406 }) { ( Bool ) -> Void in } } /* \u56de\u8ee2\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3. */ case 2 : // \u521d\u671f\u5316. self . myLabel . transform = CGAffineTransform ( rotationAngle : 0 ) // radian\u3067\u56de\u8ee2\u89d2\u5ea6\u3092\u6307\u5b9a(90\u5ea6). let angle : CGFloat = CGFloat ( M_PI_2 ) // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u79d2\u6570\u3092\u8a2d\u5b9a(3\u79d2). UIView . animate ( withDuration : 3.0 , animations : { () -> Void in // \u56de\u8ee2\u7528\u306e\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u751f\u6210. self . myLabel . transform = CGAffineTransform ( rotationAngle : angle ) }, completion : { ( Bool ) -> Void in }) /* \u62e1\u7e2e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3. */ case 3 : self . myLabel . transform = CGAffineTransform ( scaleX : 1 , y : 1 ) // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u6642\u9593\u30923\u79d2\u306b\u8a2d\u5b9a. UIView . animate ( withDuration : 3.0 , animations : { () -> Void in // \u7e2e\u5c0f\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u4f5c\u6210. self . myLabel . transform = CGAffineTransform ( scaleX : 1.5 , y : 1.5 ) }) // \u9023\u7d9a\u3057\u305f\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u51e6\u7406. { ( Bool ) -> Void in UIView . animate ( withDuration : 3.0 , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406. animations : { () -> Void in // \u62e1\u5927\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u4f5c\u6210. self . myLabel . transform = CGAffineTransform ( scaleX : 0.5 , y : 0.5 ) }) // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u5b8c\u4e86\u6642\u306e\u51e6\u7406. { ( Bool ) -> Void in // \u5927\u304d\u3055\u3092\u5143\u306b\u623b\u3059. self . myLabel . transform = CGAffineTransform ( scaleX : 1 , y : 1 ) } } /* \u79fb\u52d5\u3059\u308b\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3. */ case 4 : myLabel . layer . position = CGPoint ( x : - 30 , y : - 30 ) // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u51e6\u7406 UIView . animate ( withDuration : TimeInterval ( CGFloat ( 3.0 )), animations : {() -> Void in // \u79fb\u52d5\u5148\u306e\u5ea7\u6a19\u3092\u6307\u5b9a\u3059\u308b. self . myLabel . center = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height / 2 ); }, completion : {( Bool ) -> Void in }) default : print ( \"error!\" ) } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 // // ViewController.swift // UIKit069 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { var myLabel : UILabel ! override func viewDidLoad () { super . viewDidLoad () // Label\u3092\u751f\u6210 myLabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myLabel . backgroundColor = UIColor ( red : 0.561 , green : 0.737 , blue : 0.561 , alpha : 1.0 ) myLabel . center = self . view . center myLabel . text = \"*\uff65\u309c\uff9f\uff65*:.\uff61..\uff61.:*\uff65\u309c\" myLabel . textAlignment = NSTextAlignment . center myLabel . textColor = UIColor . white // SegmentesController\u3092\u751f\u6210. let mySegcon = UISegmentedControl ( items : [ \"Spring\" , \"Invert\" , \"Rotate\" , \"Scaling\" , \"Move\" ]) mySegcon . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height - 50 ) mySegcon . tintColor = UIColor . blue mySegcon . addTarget ( self , action : #selector ( ViewController . changedValue ( sender :)), for : UIControlEvents . valueChanged ) // Label\u3092view\u306b\u8ffd\u52a0 self . view . addSubview ( myLabel ) // SegmentedController\u3092view\u306b\u8ffd\u52a0. self . view . addSubview ( mySegcon ) } /* SegmentedController\u306e\u5024\u304c\u5909\u308f\u3063\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func changedValue ( sender : UISegmentedControl ) { myLabel . center = self . view . center // \u5404\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u51e6\u7406. switch ( sender . selectedSegmentIndex ) { /* \u30d0\u30cd\u306e\u3088\u3046\u306a\u52d5\u304d\u3092\u3059\u308b\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3. */ case 0 : // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u6642\u9593\u30922\u79d2\u306b\u8a2d\u5b9a. UIView . animate ( withDuration : 2.0 , // \u9045\u5ef6\u6642\u9593. delay : 0.0 , // \u30d0\u30cd\u306e\u5f3e\u6027\u529b. \u5c0f\u3055\u3044\u307b\u3069\u5f3e\u6027\u529b\u306f\u5927\u304d\u304f\u306a\u308b. usingSpringWithDamping : 0.2 , // \u521d\u901f\u5ea6. initialSpringVelocity : 1.5 , // \u4e00\u5b9a\u306e\u901f\u5ea6. options : UIViewAnimationOptions . curveLinear , animations : { () -> Void in self . myLabel . layer . position = CGPoint ( x : self . view . frame . width - 50 , y : 100 ) // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u5b8c\u4e86\u6642\u306e\u51e6\u7406 }) { ( Bool ) -> Void in self . myLabel . center = self . view . center } /* X, Y\u65b9\u5411\u306b\u305d\u308c\u305e\u308c\u53cd\u8ee2\u3059\u308b\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3. */ case 1 : // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u6642\u9593\u30923\u79d2\u306b\u8a2d\u5b9a UIView . animate ( withDuration : 3.0 , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406 animations : { () -> Void in // X\u65b9\u5411\u306b\u53cd\u8ee2\u7528\u306e\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u4f5c\u6210 self . myLabel . transform = self . myLabel . transform . scaledBy ( x : - 1.0 , y : 1.0 ) // \u9023\u7d9a\u3057\u305f\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u51e6\u7406. }) { ( Bool ) -> Void in UIView . animate ( withDuration : 3.0 , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406 animations : { () -> Void in // Y\u65b9\u5411\u306b\u53cd\u8ee2\u7528\u306e\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u4f5c\u6210 self . myLabel . transform = self . myLabel . transform . scaledBy ( x : 1.0 , y : - 1.0 ) // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u5b8c\u4e86\u6642\u306e\u51e6\u7406 }) { ( Bool ) -> Void in } } /* \u56de\u8ee2\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3. */ case 2 : // \u521d\u671f\u5316. self . myLabel . transform = CGAffineTransform ( rotationAngle : 0 ) // radian\u3067\u56de\u8ee2\u89d2\u5ea6\u3092\u6307\u5b9a(90\u5ea6). let angle : CGFloat = CGFloat ( M_PI_2 ) // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u79d2\u6570\u3092\u8a2d\u5b9a(3\u79d2). UIView . animate ( withDuration : 3.0 , animations : { () -> Void in // \u56de\u8ee2\u7528\u306e\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u751f\u6210. self . myLabel . transform = CGAffineTransform ( rotationAngle : angle ) }, completion : { ( Bool ) -> Void in }) /* \u62e1\u7e2e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3. */ case 3 : self . myLabel . transform = CGAffineTransform ( scaleX : 1 , y : 1 ) // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u6642\u9593\u30923\u79d2\u306b\u8a2d\u5b9a. UIView . animate ( withDuration : 3.0 , animations : { () -> Void in // \u7e2e\u5c0f\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u4f5c\u6210. self . myLabel . transform = CGAffineTransform ( scaleX : 1.5 , y : 1.5 ) }) // \u9023\u7d9a\u3057\u305f\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u51e6\u7406. { ( Bool ) -> Void in UIView . animate ( withDuration : 3.0 , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406. animations : { () -> Void in // \u62e1\u5927\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u4f5c\u6210. self . myLabel . transform = CGAffineTransform ( scaleX : 0.5 , y : 0.5 ) }) // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u5b8c\u4e86\u6642\u306e\u51e6\u7406. { ( Bool ) -> Void in // \u5927\u304d\u3055\u3092\u5143\u306b\u623b\u3059. self . myLabel . transform = CGAffineTransform ( scaleX : 1 , y : 1 ) } } /* \u79fb\u52d5\u3059\u308b\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3. */ case 4 : myLabel . layer . position = CGPoint ( x : - 30 , y : - 30 ) // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u51e6\u7406 UIView . animate ( withDuration : TimeInterval ( CGFloat ( 3.0 )), animations : {() -> Void in // \u79fb\u52d5\u5148\u306e\u5ea7\u6a19\u3092\u6307\u5b9a\u3059\u308b. self . myLabel . center = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height / 2 ); }, completion : {( Bool ) -> Void in }) default : print ( \"error!\" ) } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 // // ViewController.swift // UIKit069 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { var myLabel : UILabel ! override func viewDidLoad () { super . viewDidLoad () // Label\u3092\u751f\u6210 myLabel = UILabel ( frame : CGRectMake ( 0 , 0 , 200 , 50 )) myLabel . backgroundColor = UIColor ( red : 0.561 , green : 0.737 , blue : 0.561 , alpha : 1.0 ) myLabel . center = self . view . center myLabel . text = \"*\uff65\u309c\uff9f\uff65*:.\uff61..\uff61.:*\uff65\u309c\" myLabel . textAlignment = NSTextAlignment . Center myLabel . textColor = UIColor . whiteColor () // SegmentesController\u3092\u751f\u6210. let mySegcon = UISegmentedControl ( items : [ \"Spring\" , \"Invert\" , \"Rotate\" , \"Scaling\" , \"Move\" ]) mySegcon . layer . position = CGPointMake ( self . view . frame . width / 2 , self . view . frame . height - 50 ) mySegcon . tintColor = UIColor . blueColor () mySegcon . addTarget ( self , action : #selector ( ViewController . changedValue ( _ :)), forControlEvents : UIControlEvents . ValueChanged ) // Label\u3092view\u306b\u8ffd\u52a0 self . view . addSubview ( myLabel ) // SegmentedController\u3092view\u306b\u8ffd\u52a0. self . view . addSubview ( mySegcon ) } /* SegmentedController\u306e\u5024\u304c\u5909\u308f\u3063\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func changedValue ( sender : UISegmentedControl ) { myLabel . center = self . view . center // \u5404\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u51e6\u7406. switch ( sender . selectedSegmentIndex ) { /* \u30d0\u30cd\u306e\u3088\u3046\u306a\u52d5\u304d\u3092\u3059\u308b\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3. */ case 0 : // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u6642\u9593\u30922\u79d2\u306b\u8a2d\u5b9a. UIView . animateWithDuration ( 2.0 , // \u9045\u5ef6\u6642\u9593. delay : 0.0 , // \u30d0\u30cd\u306e\u5f3e\u6027\u529b. \u5c0f\u3055\u3044\u307b\u3069\u5f3e\u6027\u529b\u306f\u5927\u304d\u304f\u306a\u308b. usingSpringWithDamping : 0.2 , // \u521d\u901f\u5ea6. initialSpringVelocity : 1.5 , // \u4e00\u5b9a\u306e\u901f\u5ea6. options : UIViewAnimationOptions . CurveLinear , animations : { () -> Void in self . myLabel . layer . position = CGPointMake ( self . view . frame . width - 50 , 100 ) // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u5b8c\u4e86\u6642\u306e\u51e6\u7406 }) { ( Bool ) -> Void in self . myLabel . center = self . view . center } /* X, Y\u65b9\u5411\u306b\u305d\u308c\u305e\u308c\u53cd\u8ee2\u3059\u308b\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3. */ case 1 : // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u6642\u9593\u30923\u79d2\u306b\u8a2d\u5b9a UIView . animateWithDuration ( 3.0 , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406 animations : { () -> Void in // X\u65b9\u5411\u306b\u53cd\u8ee2\u7528\u306e\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u4f5c\u6210 self . myLabel . transform = CGAffineTransformScale ( self . myLabel . transform , - 1.0 , 1.0 ) // \u9023\u7d9a\u3057\u305f\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u51e6\u7406. }) { ( Bool ) -> Void in UIView . animateWithDuration ( 3.0 , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406 animations : { () -> Void in // Y\u65b9\u5411\u306b\u53cd\u8ee2\u7528\u306e\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u4f5c\u6210 self . myLabel . transform = CGAffineTransformScale ( self . myLabel . transform , 1.0 , - 1.0 ) // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u5b8c\u4e86\u6642\u306e\u51e6\u7406 }) { ( Bool ) -> Void in } } /* \u56de\u8ee2\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3. */ case 2 : // \u521d\u671f\u5316. self . myLabel . transform = CGAffineTransformMakeRotation ( 0 ) // radian\u3067\u56de\u8ee2\u89d2\u5ea6\u3092\u6307\u5b9a(90\u5ea6). let angle : CGFloat = CGFloat ( M_PI_2 ) // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u79d2\u6570\u3092\u8a2d\u5b9a(3\u79d2). UIView . animateWithDuration ( 3.0 , animations : { () -> Void in // \u56de\u8ee2\u7528\u306e\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u751f\u6210. self . myLabel . transform = CGAffineTransformMakeRotation ( angle ) }, completion : { ( Bool ) -> Void in }) /* \u62e1\u7e2e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3. */ case 3 : self . myLabel . transform = CGAffineTransformMakeScale ( 1 , 1 ) // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u6642\u9593\u30923\u79d2\u306b\u8a2d\u5b9a. UIView . animateWithDuration ( 3.0 , animations : { () -> Void in // \u7e2e\u5c0f\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u4f5c\u6210. self . myLabel . transform = CGAffineTransformMakeScale ( 1.5 , 1.5 ) }) // \u9023\u7d9a\u3057\u305f\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u51e6\u7406. { ( Bool ) -> Void in UIView . animateWithDuration ( 3.0 , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406. animations : { () -> Void in // \u62e1\u5927\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u4f5c\u6210. self . myLabel . transform = CGAffineTransformMakeScale ( 0.5 , 0.5 ) }) // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u5b8c\u4e86\u6642\u306e\u51e6\u7406. { ( Bool ) -> Void in // \u5927\u304d\u3055\u3092\u5143\u306b\u623b\u3059. self . myLabel . transform = CGAffineTransformMakeScale ( 1 , 1 ) } } /* \u79fb\u52d5\u3059\u308b\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3. */ case 4 : myLabel . layer . position = CGPointMake ( - 30 , - 30 ) // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u51e6\u7406 UIView . animateWithDuration ( NSTimeInterval ( CGFloat ( 3.0 )), animations : {() -> Void in // \u79fb\u52d5\u5148\u306e\u5ea7\u6a19\u3092\u6307\u5b9a\u3059\u308b. self . myLabel . center = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height / 2 ); }, completion : {( Bool ) -> Void in }) default : print ( \"error!\" ) } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } }","title":"UIView\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u307e\u3068\u3081"},{"location":"1.uikit/069_animation/#3x4x","text":"UIControlEvents \u304c UIControl.Event \u306b\u5909\u66f4 func changedValue(sender: UISegmentedControl) \u306b @objc \u3092\u8ffd\u52a0 UIViewAnimationOptions \u3092 UIView.AnimationOptions \u306b\u5909\u66f4","title":"3.x\u30684.x\u306e\u5dee\u5206"},{"location":"1.uikit/069_animation/#2330","text":"CGPointMake\u304c\u5ec3\u6b62 CGRectMake\u304c\u5ec3\u6b62","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/069_animation/#reference","text":"UIView https://developer.apple.com/reference/uikit/uiview","title":"Reference"},{"location":"1.uikit/070_uitouch/","text":"\u30c9\u30e9\u30c3\u30b0\u3067View\u3092\u79fb\u52d5\u3055\u305b\u308b Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 // // ViewController.swift // UIKit070 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { var myLabel : UILabel ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u9ed2\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . black // Label\u3092\u751f\u6210. myLabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 80 , height : 80 )) myLabel . text = \"Drag!\" myLabel . textAlignment = NSTextAlignment . center myLabel . backgroundColor = UIColor . red myLabel . layer . masksToBounds = true myLabel . center = self . view . center myLabel . layer . cornerRadius = 40.0 // Label\u3092view\u306b\u8ffd\u52a0. self . view . addSubview ( myLabel ) } /* \u30bf\u30c3\u30c1\u3092\u611f\u77e5\u3057\u305f\u969b\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ override func touchesBegan ( _ touches : Set < UITouch >, with event : UIEvent ?) { print ( \"touchesBegan\" ) // Label\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3. UIView . animate ( withDuration : 0.06 , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406. animations : { () -> Void in // \u7e2e\u5c0f\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u4f5c\u6210\u3059\u308b. self . myLabel . transform = CGAffineTransform ( scaleX : 0.9 , y : 0.9 ) }) { ( Bool ) -> Void in } } /* \u30c9\u30e9\u30c3\u30b0\u3092\u611f\u77e5\u3057\u305f\u969b\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. (\u30c9\u30e9\u30c3\u30b0\u4e2d\u4f55\u5ea6\u3082\u547c\u3070\u308c\u308b) */ override func touchesMoved ( _ touches : Set < UITouch >, with event : UIEvent ?) { print ( \"touchesMoved\" ) // \u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u3092\u53d6\u5f97. let aTouch : UITouch = touches . first ! // \u79fb\u52d5\u3057\u305f\u5148\u306e\u5ea7\u6a19\u3092\u53d6\u5f97. let location = aTouch . location ( in : self . view ) // \u79fb\u52d5\u3059\u308b\u524d\u306e\u5ea7\u6a19\u3092\u53d6\u5f97. let prevLocation = aTouch . previousLocation ( in : self . view ) // CGRect\u751f\u6210. var myFrame : CGRect = self . view . frame // \u30c9\u30e9\u30c3\u30b0\u3067\u79fb\u52d5\u3057\u305fx, y\u8ddd\u96e2\u3092\u3068\u308b. let deltaX : CGFloat = location . x - prevLocation . x let deltaY : CGFloat = location . y - prevLocation . y // \u79fb\u52d5\u3057\u305f\u5206\u306e\u8ddd\u96e2\u3092myFrame\u306e\u5ea7\u6a19\u306b\u30d7\u30e9\u30b9\u3059\u308b. myFrame . origin . x += deltaX myFrame . origin . y += deltaY // frame\u306bmyFrame\u3092\u8ffd\u52a0. self . view . frame = myFrame } /* \u6307\u304c\u96e2\u308c\u305f\u3053\u3068\u3092\u611f\u77e5\u3057\u305f\u969b\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ override func touchesEnded ( _ touches : Set < UITouch >, with event : UIEvent ?) { print ( \"touchesEnded\" ) // Label\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3. UIView . animate ( withDuration : 0.1 , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406. animations : { () -> Void in // \u62e1\u5927\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u4f5c\u6210\u3059\u308b. self . myLabel . transform = CGAffineTransform ( scaleX : 0.4 , y : 0.4 ) // \u7e2e\u5c0f\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u4f5c\u6210\u3059\u308b. self . myLabel . transform = CGAffineTransform ( scaleX : 1.0 , y : 1.0 ) }) { ( Bool ) -> Void in } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 // // ViewController.swift // UIKit070 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { var myLabel : UILabel ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u9ed2\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . blackColor () // Label\u3092\u751f\u6210. myLabel = UILabel ( frame : CGRectMake ( 0 , 0 , 80 , 80 )) myLabel . text = \"Drag!\" myLabel . textAlignment = NSTextAlignment . Center myLabel . backgroundColor = UIColor . redColor () myLabel . layer . masksToBounds = true myLabel . center = self . view . center myLabel . layer . cornerRadius = 40.0 // Label\u3092view\u306b\u8ffd\u52a0. self . view . addSubview ( myLabel ) } /* \u30bf\u30c3\u30c1\u3092\u611f\u77e5\u3057\u305f\u969b\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ override func touchesBegan ( touches : Set < UITouch >, withEvent event : UIEvent ?) { print ( \"touchesBegan\" ) // Label\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3. UIView . animateWithDuration ( 0.06 , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406. animations : { () -> Void in // \u7e2e\u5c0f\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u4f5c\u6210\u3059\u308b. self . myLabel . transform = CGAffineTransformMakeScale ( 0.9 , 0.9 ) }) { ( Bool ) -> Void in } } /* \u30c9\u30e9\u30c3\u30b0\u3092\u611f\u77e5\u3057\u305f\u969b\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. (\u30c9\u30e9\u30c3\u30b0\u4e2d\u4f55\u5ea6\u3082\u547c\u3070\u308c\u308b) */ override func touchesMoved ( touches : Set < UITouch >, withEvent event : UIEvent ?) { print ( \"touchesMoved\" ) // \u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u3092\u53d6\u5f97. let aTouch : UITouch = touches . first ! // \u79fb\u52d5\u3057\u305f\u5148\u306e\u5ea7\u6a19\u3092\u53d6\u5f97. let location = aTouch . locationInView ( self . view ) // \u79fb\u52d5\u3059\u308b\u524d\u306e\u5ea7\u6a19\u3092\u53d6\u5f97. let prevLocation = aTouch . previousLocationInView ( self . view ) // CGRect\u751f\u6210. var myFrame : CGRect = self . view . frame // \u30c9\u30e9\u30c3\u30b0\u3067\u79fb\u52d5\u3057\u305fx, y\u8ddd\u96e2\u3092\u3068\u308b. let deltaX : CGFloat = location . x - prevLocation . x let deltaY : CGFloat = location . y - prevLocation . y // \u79fb\u52d5\u3057\u305f\u5206\u306e\u8ddd\u96e2\u3092myFrame\u306e\u5ea7\u6a19\u306b\u30d7\u30e9\u30b9\u3059\u308b. myFrame . origin . x += deltaX myFrame . origin . y += deltaY // frame\u306bmyFrame\u3092\u8ffd\u52a0. self . view . frame = myFrame } /* \u6307\u304c\u96e2\u308c\u305f\u3053\u3068\u3092\u611f\u77e5\u3057\u305f\u969b\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ override func touchesEnded ( touches : Set < UITouch >, withEvent event : UIEvent ?) { print ( \"touchesEnded\" ) // Label\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3. UIView . animateWithDuration ( 0.1 , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406. animations : { () -> Void in // \u62e1\u5927\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u4f5c\u6210\u3059\u308b. self . myLabel . transform = CGAffineTransformMakeScale ( 0.4 , 0.4 ) // \u7e2e\u5c0f\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u4f5c\u6210\u3059\u308b. self . myLabel . transform = CGAffineTransformMakeScale ( 1.0 , 1.0 ) }) { ( Bool ) -> Void in } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } 2.3\u30683.0\u306e\u5dee\u5206 touchesBegan(touches: Set<UITouch>, withEvent event: UIEvent?) \u304b\u3089 touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) \u306b\u5909\u66f4 Reference UITouch https://developer.apple.com/reference/uikit/uitouch","title":"\u30c9\u30e9\u30c3\u30b0\u3067View\u3092\u79fb\u52d5\u3055\u305b\u308b"},{"location":"1.uikit/070_uitouch/#view","text":"Swift 4.x/Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 // // ViewController.swift // UIKit070 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { var myLabel : UILabel ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u9ed2\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . black // Label\u3092\u751f\u6210. myLabel = UILabel ( frame : CGRect ( x : 0 , y : 0 , width : 80 , height : 80 )) myLabel . text = \"Drag!\" myLabel . textAlignment = NSTextAlignment . center myLabel . backgroundColor = UIColor . red myLabel . layer . masksToBounds = true myLabel . center = self . view . center myLabel . layer . cornerRadius = 40.0 // Label\u3092view\u306b\u8ffd\u52a0. self . view . addSubview ( myLabel ) } /* \u30bf\u30c3\u30c1\u3092\u611f\u77e5\u3057\u305f\u969b\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ override func touchesBegan ( _ touches : Set < UITouch >, with event : UIEvent ?) { print ( \"touchesBegan\" ) // Label\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3. UIView . animate ( withDuration : 0.06 , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406. animations : { () -> Void in // \u7e2e\u5c0f\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u4f5c\u6210\u3059\u308b. self . myLabel . transform = CGAffineTransform ( scaleX : 0.9 , y : 0.9 ) }) { ( Bool ) -> Void in } } /* \u30c9\u30e9\u30c3\u30b0\u3092\u611f\u77e5\u3057\u305f\u969b\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. (\u30c9\u30e9\u30c3\u30b0\u4e2d\u4f55\u5ea6\u3082\u547c\u3070\u308c\u308b) */ override func touchesMoved ( _ touches : Set < UITouch >, with event : UIEvent ?) { print ( \"touchesMoved\" ) // \u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u3092\u53d6\u5f97. let aTouch : UITouch = touches . first ! // \u79fb\u52d5\u3057\u305f\u5148\u306e\u5ea7\u6a19\u3092\u53d6\u5f97. let location = aTouch . location ( in : self . view ) // \u79fb\u52d5\u3059\u308b\u524d\u306e\u5ea7\u6a19\u3092\u53d6\u5f97. let prevLocation = aTouch . previousLocation ( in : self . view ) // CGRect\u751f\u6210. var myFrame : CGRect = self . view . frame // \u30c9\u30e9\u30c3\u30b0\u3067\u79fb\u52d5\u3057\u305fx, y\u8ddd\u96e2\u3092\u3068\u308b. let deltaX : CGFloat = location . x - prevLocation . x let deltaY : CGFloat = location . y - prevLocation . y // \u79fb\u52d5\u3057\u305f\u5206\u306e\u8ddd\u96e2\u3092myFrame\u306e\u5ea7\u6a19\u306b\u30d7\u30e9\u30b9\u3059\u308b. myFrame . origin . x += deltaX myFrame . origin . y += deltaY // frame\u306bmyFrame\u3092\u8ffd\u52a0. self . view . frame = myFrame } /* \u6307\u304c\u96e2\u308c\u305f\u3053\u3068\u3092\u611f\u77e5\u3057\u305f\u969b\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ override func touchesEnded ( _ touches : Set < UITouch >, with event : UIEvent ?) { print ( \"touchesEnded\" ) // Label\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3. UIView . animate ( withDuration : 0.1 , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406. animations : { () -> Void in // \u62e1\u5927\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u4f5c\u6210\u3059\u308b. self . myLabel . transform = CGAffineTransform ( scaleX : 0.4 , y : 0.4 ) // \u7e2e\u5c0f\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u4f5c\u6210\u3059\u308b. self . myLabel . transform = CGAffineTransform ( scaleX : 1.0 , y : 1.0 ) }) { ( Bool ) -> Void in } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 // // ViewController.swift // UIKit070 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { var myLabel : UILabel ! override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u9ed2\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . blackColor () // Label\u3092\u751f\u6210. myLabel = UILabel ( frame : CGRectMake ( 0 , 0 , 80 , 80 )) myLabel . text = \"Drag!\" myLabel . textAlignment = NSTextAlignment . Center myLabel . backgroundColor = UIColor . redColor () myLabel . layer . masksToBounds = true myLabel . center = self . view . center myLabel . layer . cornerRadius = 40.0 // Label\u3092view\u306b\u8ffd\u52a0. self . view . addSubview ( myLabel ) } /* \u30bf\u30c3\u30c1\u3092\u611f\u77e5\u3057\u305f\u969b\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ override func touchesBegan ( touches : Set < UITouch >, withEvent event : UIEvent ?) { print ( \"touchesBegan\" ) // Label\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3. UIView . animateWithDuration ( 0.06 , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406. animations : { () -> Void in // \u7e2e\u5c0f\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u4f5c\u6210\u3059\u308b. self . myLabel . transform = CGAffineTransformMakeScale ( 0.9 , 0.9 ) }) { ( Bool ) -> Void in } } /* \u30c9\u30e9\u30c3\u30b0\u3092\u611f\u77e5\u3057\u305f\u969b\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. (\u30c9\u30e9\u30c3\u30b0\u4e2d\u4f55\u5ea6\u3082\u547c\u3070\u308c\u308b) */ override func touchesMoved ( touches : Set < UITouch >, withEvent event : UIEvent ?) { print ( \"touchesMoved\" ) // \u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u3092\u53d6\u5f97. let aTouch : UITouch = touches . first ! // \u79fb\u52d5\u3057\u305f\u5148\u306e\u5ea7\u6a19\u3092\u53d6\u5f97. let location = aTouch . locationInView ( self . view ) // \u79fb\u52d5\u3059\u308b\u524d\u306e\u5ea7\u6a19\u3092\u53d6\u5f97. let prevLocation = aTouch . previousLocationInView ( self . view ) // CGRect\u751f\u6210. var myFrame : CGRect = self . view . frame // \u30c9\u30e9\u30c3\u30b0\u3067\u79fb\u52d5\u3057\u305fx, y\u8ddd\u96e2\u3092\u3068\u308b. let deltaX : CGFloat = location . x - prevLocation . x let deltaY : CGFloat = location . y - prevLocation . y // \u79fb\u52d5\u3057\u305f\u5206\u306e\u8ddd\u96e2\u3092myFrame\u306e\u5ea7\u6a19\u306b\u30d7\u30e9\u30b9\u3059\u308b. myFrame . origin . x += deltaX myFrame . origin . y += deltaY // frame\u306bmyFrame\u3092\u8ffd\u52a0. self . view . frame = myFrame } /* \u6307\u304c\u96e2\u308c\u305f\u3053\u3068\u3092\u611f\u77e5\u3057\u305f\u969b\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ override func touchesEnded ( touches : Set < UITouch >, withEvent event : UIEvent ?) { print ( \"touchesEnded\" ) // Label\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3. UIView . animateWithDuration ( 0.1 , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406. animations : { () -> Void in // \u62e1\u5927\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u4f5c\u6210\u3059\u308b. self . myLabel . transform = CGAffineTransformMakeScale ( 0.4 , 0.4 ) // \u7e2e\u5c0f\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u4f5c\u6210\u3059\u308b. self . myLabel . transform = CGAffineTransformMakeScale ( 1.0 , 1.0 ) }) { ( Bool ) -> Void in } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } }","title":"\u30c9\u30e9\u30c3\u30b0\u3067View\u3092\u79fb\u52d5\u3055\u305b\u308b"},{"location":"1.uikit/070_uitouch/#2330","text":"touchesBegan(touches: Set<UITouch>, withEvent event: UIEvent?) \u304b\u3089 touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) \u306b\u5909\u66f4","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/070_uitouch/#reference","text":"UITouch https://developer.apple.com/reference/uikit/uitouch","title":"Reference"},{"location":"1.uikit/071_modal/","text":"\u30e2\u30fc\u30c0\u30eb\u8868\u793a\u3055\u305b\u308b ViewController.swift Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 // // ViewController.swift // UIKit071 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { // PopButton\u3092\u751f\u6210. let myButton = UIButton () myButton . frame = CGRect ( x : 0 , y : 0 , width : 200 , height : 40 ) myButton . backgroundColor = UIColor . red myButton . layer . masksToBounds = true myButton . setTitle ( \"PopOver\" , for : UIControl . State . normal ) myButton . setTitleColor ( UIColor . white , for : UIControl . State . normal ) myButton . setTitleColor ( UIColor . black , for : UIControl . State . highlighted ) myButton . layer . cornerRadius = 20.0 myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : 200 ) myButton . tag = 0 myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchUpInside ) // view\u306bButton\u3092\u8ffd\u52a0. self . view . addSubview ( myButton ) } /* Button\u304c\u62bc\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ @objc func onClickMyButton ( sender : UIButton ){ // secondViewController\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210. let second = SecondViewController () // navigationController\u306erootViewController\u306bsecondViewController\u3092\u30bb\u30c3\u30c8. let nav = UINavigationController ( rootViewController : second ) // \u753b\u9762\u9077\u79fb. self . present ( nav , animated : true , completion : nil ) } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 // // ViewController.swift // UIKit071 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { // PopButton\u3092\u751f\u6210. let myButton = UIButton () myButton . frame = CGRect ( x : 0 , y : 0 , width : 200 , height : 40 ) myButton . backgroundColor = UIColor . red myButton . layer . masksToBounds = true myButton . setTitle ( \"PopOver\" , for : UIControlState . normal ) myButton . setTitleColor ( UIColor . white , for : UIControlState . normal ) myButton . setTitleColor ( UIColor . black , for : UIControlState . highlighted ) myButton . layer . cornerRadius = 20.0 myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : 200 ) myButton . tag = 0 myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchUpInside ) // view\u306bButton\u3092\u8ffd\u52a0. self . view . addSubview ( myButton ) } /* Button\u304c\u62bc\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func onClickMyButton ( sender : UIButton ){ // secondViewController\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210. let second = SecondViewController () // navigationController\u306erootViewController\u306bsecondViewController\u3092\u30bb\u30c3\u30c8. let nav = UINavigationController ( rootViewController : second ) // \u753b\u9762\u9077\u79fb. self . present ( nav , animated : true , completion : nil ) } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 // // ViewController.swift // UIKit071 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { // PopButton\u3092\u751f\u6210. let myButton = UIButton () myButton . frame = CGRectMake ( 0 , 0 , 200 , 40 ) myButton . backgroundColor = UIColor . redColor () myButton . layer . masksToBounds = true myButton . setTitle ( \"PopOver\" , forState : UIControlState . Normal ) myButton . setTitleColor ( UIColor . whiteColor (), forState : UIControlState . Normal ) myButton . setTitleColor ( UIColor . blackColor (), forState : UIControlState . Highlighted ) myButton . layer . cornerRadius = 20.0 myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : 200 ) myButton . tag = 0 myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : . TouchUpInside ) // view\u306bButton\u3092\u8ffd\u52a0. self . view . addSubview ( myButton ) } /* Button\u304c\u62bc\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func onClickMyButton ( sender : UIButton ){ // secondViewController\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210. let second = SecondViewController () // navigationController\u306erootViewController\u306bsecondViewController\u3092\u30bb\u30c3\u30c8. let nav = UINavigationController ( rootViewController : second ) // \u753b\u9762\u9077\u79fb. self . presentViewController ( nav , animated : true , completion : nil ) } } SecondViewController.swift Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 // // SecondViewController.swift // UIKit071 // // Created by Misato Morino on 2016/08/19. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class SecondViewController : UIViewController { override func viewDidLoad () { self . view . backgroundColor = UIColor . black // \u3082\u3069\u308bButton\u3092\u751f\u6210. let myButton = UIButton () myButton . frame = CGRect ( x : 0 , y : 0 , width : 200 , height : 40 ) myButton . backgroundColor = UIColor . red myButton . layer . masksToBounds = true myButton . setTitle ( \"\u3082\u3069\u308b\" , for : UIControl . State . normal ) myButton . setTitleColor ( UIColor . white , for : UIControl . State . normal ) myButton . setTitleColor ( UIColor . black , for : UIControl . State . highlighted ) myButton . layer . cornerRadius = 20.0 myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : 200 ) myButton . tag = 1 myButton . addTarget ( self , action : #selector ( SecondViewController . onClickMyButton ( sender :)), for : . touchUpInside ) // view\u306bButton\u3092\u8ffd\u52a0. self . view . addSubview ( myButton ) } /* Button\u3092\u62bc\u3057\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ @objc func onClickMyButton ( sender : UIButton ){ // view\u3092\u9589\u3058\u308b. self . navigationController ?. dismiss ( animated : true , completion : nil ) } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 // // SecondViewController.swift // UIKit071 // // Created by Misato Morino on 2016/08/19. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class SecondViewController : UIViewController { override func viewDidLoad () { self . view . backgroundColor = UIColor . black // \u3082\u3069\u308bButton\u3092\u751f\u6210. let myButton = UIButton () myButton . frame = CGRect ( x : 0 , y : 0 , width : 200 , height : 40 ) myButton . backgroundColor = UIColor . red myButton . layer . masksToBounds = true myButton . setTitle ( \"\u3082\u3069\u308b\" , for : UIControlState . normal ) myButton . setTitleColor ( UIColor . white , for : UIControlState . normal ) myButton . setTitleColor ( UIColor . black , for : UIControlState . highlighted ) myButton . layer . cornerRadius = 20.0 myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : 200 ) myButton . tag = 1 myButton . addTarget ( self , action : #selector ( SecondViewController . onClickMyButton ( sender :)), for : . touchUpInside ) // view\u306bButton\u3092\u8ffd\u52a0. self . view . addSubview ( myButton ) } /* Button\u3092\u62bc\u3057\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func onClickMyButton ( sender : UIButton ){ // view\u3092\u9589\u3058\u308b. self . navigationController ?. dismiss ( animated : true , completion : nil ) } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 // // SecondViewController.swift // UIKit071 // // Created by Misato Morino on 2016/08/19. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class SecondViewController : UIViewController { override func viewDidLoad () { self . view . backgroundColor = UIColor . blackColor () // \u3082\u3069\u308bButton\u3092\u751f\u6210. let myButton = UIButton () myButton . frame = CGRectMake ( 0 , 0 , 200 , 40 ) myButton . backgroundColor = UIColor . redColor () myButton . layer . masksToBounds = true myButton . setTitle ( \"\u3082\u3069\u308b\" , forState : UIControlState . Normal ) myButton . setTitleColor ( UIColor . whiteColor (), forState : UIControlState . Normal ) myButton . setTitleColor ( UIColor . blackColor (), forState : UIControlState . Highlighted ) myButton . layer . cornerRadius = 20.0 myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : 200 ) myButton . tag = 1 myButton . addTarget ( self , action : #selector ( SecondViewController . onClickMyButton ( _ :)), forControlEvents : . TouchUpInside ) // view\u306bButton\u3092\u8ffd\u52a0. self . view . addSubview ( myButton ) } /* Button\u3092\u62bc\u3057\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func onClickMyButton ( sender : UIButton ){ // view\u3092\u9589\u3058\u308b. self . navigationController ?. dismissViewControllerAnimated ( true , completion : nil ) } } 3.x\u30684.x\u306e\u5dee\u5206 UIControlState \u304c UIControl.State \u306b\u5909\u66f4 func onClickMyButton(sender : UIButton) \u306b @objc \u3092\u8ffd\u52a0 2.3\u30683.0\u306e\u5dee\u5206 CGRectMake\u304c\u5ec3\u6b62 \u30bb\u30ec\u30af\u30bf\u304c Selector(\"onDownMainButton:\") \u304b\u3089 #selector(myCusButton.onDownMainButton(sender:) \u306b\u5909\u66f4 Reference UINavigationController https://developer.apple.com/reference/uikit/uinavigationcontroller UIViewController https://developer.apple.com/reference/uikit/uiviewcontroller","title":"\u30e2\u30fc\u30c0\u30eb\u8868\u793a\u3055\u305b\u308b"},{"location":"1.uikit/071_modal/#_1","text":"","title":"\u30e2\u30fc\u30c0\u30eb\u8868\u793a\u3055\u305b\u308b"},{"location":"1.uikit/071_modal/#viewcontrollerswift","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 // // ViewController.swift // UIKit071 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { // PopButton\u3092\u751f\u6210. let myButton = UIButton () myButton . frame = CGRect ( x : 0 , y : 0 , width : 200 , height : 40 ) myButton . backgroundColor = UIColor . red myButton . layer . masksToBounds = true myButton . setTitle ( \"PopOver\" , for : UIControl . State . normal ) myButton . setTitleColor ( UIColor . white , for : UIControl . State . normal ) myButton . setTitleColor ( UIColor . black , for : UIControl . State . highlighted ) myButton . layer . cornerRadius = 20.0 myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : 200 ) myButton . tag = 0 myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchUpInside ) // view\u306bButton\u3092\u8ffd\u52a0. self . view . addSubview ( myButton ) } /* Button\u304c\u62bc\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ @objc func onClickMyButton ( sender : UIButton ){ // secondViewController\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210. let second = SecondViewController () // navigationController\u306erootViewController\u306bsecondViewController\u3092\u30bb\u30c3\u30c8. let nav = UINavigationController ( rootViewController : second ) // \u753b\u9762\u9077\u79fb. self . present ( nav , animated : true , completion : nil ) } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 // // ViewController.swift // UIKit071 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { // PopButton\u3092\u751f\u6210. let myButton = UIButton () myButton . frame = CGRect ( x : 0 , y : 0 , width : 200 , height : 40 ) myButton . backgroundColor = UIColor . red myButton . layer . masksToBounds = true myButton . setTitle ( \"PopOver\" , for : UIControlState . normal ) myButton . setTitleColor ( UIColor . white , for : UIControlState . normal ) myButton . setTitleColor ( UIColor . black , for : UIControlState . highlighted ) myButton . layer . cornerRadius = 20.0 myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : 200 ) myButton . tag = 0 myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchUpInside ) // view\u306bButton\u3092\u8ffd\u52a0. self . view . addSubview ( myButton ) } /* Button\u304c\u62bc\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func onClickMyButton ( sender : UIButton ){ // secondViewController\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210. let second = SecondViewController () // navigationController\u306erootViewController\u306bsecondViewController\u3092\u30bb\u30c3\u30c8. let nav = UINavigationController ( rootViewController : second ) // \u753b\u9762\u9077\u79fb. self . present ( nav , animated : true , completion : nil ) } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 // // ViewController.swift // UIKit071 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { // PopButton\u3092\u751f\u6210. let myButton = UIButton () myButton . frame = CGRectMake ( 0 , 0 , 200 , 40 ) myButton . backgroundColor = UIColor . redColor () myButton . layer . masksToBounds = true myButton . setTitle ( \"PopOver\" , forState : UIControlState . Normal ) myButton . setTitleColor ( UIColor . whiteColor (), forState : UIControlState . Normal ) myButton . setTitleColor ( UIColor . blackColor (), forState : UIControlState . Highlighted ) myButton . layer . cornerRadius = 20.0 myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : 200 ) myButton . tag = 0 myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : . TouchUpInside ) // view\u306bButton\u3092\u8ffd\u52a0. self . view . addSubview ( myButton ) } /* Button\u304c\u62bc\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func onClickMyButton ( sender : UIButton ){ // secondViewController\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210. let second = SecondViewController () // navigationController\u306erootViewController\u306bsecondViewController\u3092\u30bb\u30c3\u30c8. let nav = UINavigationController ( rootViewController : second ) // \u753b\u9762\u9077\u79fb. self . presentViewController ( nav , animated : true , completion : nil ) } }","title":"ViewController.swift"},{"location":"1.uikit/071_modal/#secondviewcontrollerswift","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 // // SecondViewController.swift // UIKit071 // // Created by Misato Morino on 2016/08/19. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class SecondViewController : UIViewController { override func viewDidLoad () { self . view . backgroundColor = UIColor . black // \u3082\u3069\u308bButton\u3092\u751f\u6210. let myButton = UIButton () myButton . frame = CGRect ( x : 0 , y : 0 , width : 200 , height : 40 ) myButton . backgroundColor = UIColor . red myButton . layer . masksToBounds = true myButton . setTitle ( \"\u3082\u3069\u308b\" , for : UIControl . State . normal ) myButton . setTitleColor ( UIColor . white , for : UIControl . State . normal ) myButton . setTitleColor ( UIColor . black , for : UIControl . State . highlighted ) myButton . layer . cornerRadius = 20.0 myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : 200 ) myButton . tag = 1 myButton . addTarget ( self , action : #selector ( SecondViewController . onClickMyButton ( sender :)), for : . touchUpInside ) // view\u306bButton\u3092\u8ffd\u52a0. self . view . addSubview ( myButton ) } /* Button\u3092\u62bc\u3057\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ @objc func onClickMyButton ( sender : UIButton ){ // view\u3092\u9589\u3058\u308b. self . navigationController ?. dismiss ( animated : true , completion : nil ) } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 // // SecondViewController.swift // UIKit071 // // Created by Misato Morino on 2016/08/19. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class SecondViewController : UIViewController { override func viewDidLoad () { self . view . backgroundColor = UIColor . black // \u3082\u3069\u308bButton\u3092\u751f\u6210. let myButton = UIButton () myButton . frame = CGRect ( x : 0 , y : 0 , width : 200 , height : 40 ) myButton . backgroundColor = UIColor . red myButton . layer . masksToBounds = true myButton . setTitle ( \"\u3082\u3069\u308b\" , for : UIControlState . normal ) myButton . setTitleColor ( UIColor . white , for : UIControlState . normal ) myButton . setTitleColor ( UIColor . black , for : UIControlState . highlighted ) myButton . layer . cornerRadius = 20.0 myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : 200 ) myButton . tag = 1 myButton . addTarget ( self , action : #selector ( SecondViewController . onClickMyButton ( sender :)), for : . touchUpInside ) // view\u306bButton\u3092\u8ffd\u52a0. self . view . addSubview ( myButton ) } /* Button\u3092\u62bc\u3057\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func onClickMyButton ( sender : UIButton ){ // view\u3092\u9589\u3058\u308b. self . navigationController ?. dismiss ( animated : true , completion : nil ) } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 // // SecondViewController.swift // UIKit071 // // Created by Misato Morino on 2016/08/19. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class SecondViewController : UIViewController { override func viewDidLoad () { self . view . backgroundColor = UIColor . blackColor () // \u3082\u3069\u308bButton\u3092\u751f\u6210. let myButton = UIButton () myButton . frame = CGRectMake ( 0 , 0 , 200 , 40 ) myButton . backgroundColor = UIColor . redColor () myButton . layer . masksToBounds = true myButton . setTitle ( \"\u3082\u3069\u308b\" , forState : UIControlState . Normal ) myButton . setTitleColor ( UIColor . whiteColor (), forState : UIControlState . Normal ) myButton . setTitleColor ( UIColor . blackColor (), forState : UIControlState . Highlighted ) myButton . layer . cornerRadius = 20.0 myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : 200 ) myButton . tag = 1 myButton . addTarget ( self , action : #selector ( SecondViewController . onClickMyButton ( _ :)), forControlEvents : . TouchUpInside ) // view\u306bButton\u3092\u8ffd\u52a0. self . view . addSubview ( myButton ) } /* Button\u3092\u62bc\u3057\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func onClickMyButton ( sender : UIButton ){ // view\u3092\u9589\u3058\u308b. self . navigationController ?. dismissViewControllerAnimated ( true , completion : nil ) } }","title":"SecondViewController.swift"},{"location":"1.uikit/071_modal/#3x4x","text":"UIControlState \u304c UIControl.State \u306b\u5909\u66f4 func onClickMyButton(sender : UIButton) \u306b @objc \u3092\u8ffd\u52a0","title":"3.x\u30684.x\u306e\u5dee\u5206"},{"location":"1.uikit/071_modal/#2330","text":"CGRectMake\u304c\u5ec3\u6b62 \u30bb\u30ec\u30af\u30bf\u304c Selector(\"onDownMainButton:\") \u304b\u3089 #selector(myCusButton.onDownMainButton(sender:) \u306b\u5909\u66f4","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/071_modal/#reference","text":"UINavigationController https://developer.apple.com/reference/uikit/uinavigationcontroller UIViewController https://developer.apple.com/reference/uikit/uiviewcontroller","title":"Reference"},{"location":"1.uikit/072_custombutton/","text":"\u4e00\u3064\u306e\u30dc\u30bf\u30f3\u304b\u3089\u8907\u6570\u306e\u30dc\u30bf\u30f3\u304c\u98db\u3073\u51fa\u3059 ViewController.swift Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 // // ViewController.swift // UIKit072 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { var mainButton : UIButton = UIButton () override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u9ed2\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . black // main\u30dc\u30bf\u30f3\u751f\u6210. mainButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 100 , height : 100 )) mainButton . center = self . view . center // myCustomButton\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210. let myCusButton : MyCustomButton = MyCustomButton ( frame : self . view . frame ) myCusButton . mainButton = self . mainButton myCusButton . mainPosition = self . mainButton . layer . position // \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092view\u306b\u8ffd\u52a0. self . view . addSubview ( myCusButton ) // main\u30dc\u30bf\u30f3\u5404\u8a2d\u5b9a. mainButton . layer . masksToBounds = true mainButton . layer . cornerRadius = 50.0 mainButton . backgroundColor = UIColor . red mainButton . setTitle ( \"Fire!\" , for : . normal ) mainButton . setTitleColor ( UIColor . white , for : . normal ) mainButton . addTarget ( myCusButton , action : #selector ( myCusButton . onDownMainButton ( sender :)), for : UIControl . Event . touchUpInside ) mainButton . addTarget ( myCusButton , action : #selector ( myCusButton . onUpMainButton ( sender :)), for : [. touchUpInside , . touchDragOutside ]) mainButton . tag = 0 // main\u30dc\u30bf\u30f3\u3092view\u306b\u8ffd\u52a0. self . view . addSubview ( mainButton ) } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 // // ViewController.swift // UIKit072 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { var mainButton : UIButton = UIButton () override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u9ed2\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . black // main\u30dc\u30bf\u30f3\u751f\u6210. mainButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 100 , height : 100 )) mainButton . center = self . view . center // myCustomButton\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210. let myCusButton : MyCustomButton = MyCustomButton ( frame : self . view . frame ) myCusButton . mainButton = self . mainButton myCusButton . mainPosition = self . mainButton . layer . position // \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092view\u306b\u8ffd\u52a0. self . view . addSubview ( myCusButton ) // main\u30dc\u30bf\u30f3\u5404\u8a2d\u5b9a. mainButton . layer . masksToBounds = true mainButton . layer . cornerRadius = 50.0 mainButton . backgroundColor = UIColor . red mainButton . setTitle ( \"Fire!\" , for : . normal ) mainButton . setTitleColor ( UIColor . white , for : . normal ) mainButton . addTarget ( myCusButton , action : #selector ( myCusButton . onDownMainButton ( sender :)), for : UIControlEvents . touchUpInside ) mainButton . addTarget ( myCusButton , action : #selector ( myCusButton . onUpMainButton ( sender :)), for : [. touchUpInside , . touchDragOutside ]) mainButton . tag = 0 // main\u30dc\u30bf\u30f3\u3092view\u306b\u8ffd\u52a0. self . view . addSubview ( mainButton ) } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 // // ViewController.swift // UIKit072 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { var mainButton : UIButton = UIButton () override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u9ed2\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . blackColor () // main\u30dc\u30bf\u30f3\u751f\u6210. mainButton = UIButton ( frame : CGRectMake ( 0 , 0 , 100 , 100 )) mainButton . center = self . view . center // myCustomButton\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210. let myCusButton : MyCustomButton = MyCustomButton ( frame : self . view . frame ) myCusButton . mainButton = self . mainButton myCusButton . mainPosition = self . mainButton . layer . position // \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092view\u306b\u8ffd\u52a0. self . view . addSubview ( myCusButton ) // main\u30dc\u30bf\u30f3\u5404\u8a2d\u5b9a. mainButton . layer . masksToBounds = true mainButton . layer . cornerRadius = 50.0 mainButton . backgroundColor = UIColor . redColor () mainButton . setTitle ( \"Fire!\" , forState : . Normal ) mainButton . setTitleColor ( UIColor . whiteColor (), forState : . Normal ) mainButton . addTarget ( myCusButton , action : Selector ( \"onDownMainButton:\" ), forControlEvents : UIControlEvents . TouchDown ) mainButton . addTarget ( myCusButton , action : Selector ( \"onUpMainButton:\" ), forControlEvents : [ UIControlEvents . TouchUpInside , UIControlEvents . TouchDragOutside ]) mainButton . tag = 0 // main\u30dc\u30bf\u30f3\u3092view\u306b\u8ffd\u52a0. self . view . addSubview ( mainButton ) } } MyCustomeButton.swift Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 // // MyCustomButton.swift // UIKit072 // // Created by Misato Morino on 2016/08/19. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import Foundation import UIKit class MyCustomButton : UIView { // sub\u30dc\u30bf\u30f3(\u98db\u3073\u51fa\u3059\u30dc\u30bf\u30f3)\u3092\u751f\u6210 var subButton_1 : UIButton = UIButton () var subButton_2 : UIButton = UIButton () var subButton_3 : UIButton = UIButton () var subButton_4 : UIButton = UIButton () var subButton_5 : UIButton = UIButton () var mainButton : UIButton ! var colors : NSMutableArray ! var mainPosition : CGPoint ! //var viewControll: UIViewController = ViewController() required init ( coder aDecoder : NSCoder ) { super . init ( coder : aDecoder ) ! } override init ( frame : CGRect ) { super . init ( frame : frame ) } /* \u30e1\u30a4\u30f3\u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8(Down) */ @objc func onDownMainButton ( sender : UIButton ) { // \u80cc\u666f\u3092\u9ed2\u8272\u306b\u8a2d\u5b9a. self . backgroundColor = UIColor . black UIView . animate ( withDuration : 0.06 , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406. animations : { () -> Void in // \u7e2e\u5c0f\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u751f\u6210\u3059\u308b. sender . transform = CGAffineTransform ( scaleX : 0.9 , y : 0.9 ) }) { ( Bool ) -> Void in } } /* sub\u30dc\u30bf\u30f3\u306e\u5ea7\u6a19\u3092\u8fd4\u3059\u30e1\u30bd\u30c3\u30c9 */ func getPosition ( angle : CGFloat , radius : CGFloat ) -> CGPoint { // \u5ea6\u304b\u3089\u30e9\u30b8\u30a2\u30f3\u306b\u5909\u63db. let radian = angle * CGFloat ( M_PI ) / 180.0 // x\u5ea7\u6a19\u3092\u8a08\u7b97. let x_position : CGFloat = mainButton . layer . position . x + radius * cos ( radian ) // y\u5ea7\u6a19\u3092\u8a08\u7b97. let y_position = mainPosition . y + radius * sin ( radian ) let position = CGPoint ( x : x_position , y : y_position ) return position } /* \u30e1\u30a4\u30f3\u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8(Up) */ @objc func onUpMainButton ( sender : UIButton ) { // sub\u30dc\u30bf\u30f3\u3092\u914d\u5217\u306b\u683c\u7d0d. let buttons = [ subButton_1 , subButton_2 , subButton_3 , subButton_4 , subButton_5 ] // sub\u30dc\u30bf\u30f3\u7528\u306e\u3000UIColor\u3092\u914d\u5217\u306b\u683c\u7d0d. colors = [ UIColor . yellow , UIColor . green , UIColor . cyan , UIColor . magenta , UIColor . purple ] as NSMutableArray // main\u30dc\u30bf\u30f3\u304b\u3089\u306e\u8ddd\u96e2(\u534a\u5f84). let radius : CGFloat = 150 // sub\u30dc\u30bf\u30f3\u306b\u5404\u7a2e\u8a2d\u5b9a. for i in 0 .. < buttons . count { buttons [ i ]. frame = CGRect ( x : 0 , y : 0 , width : 60 , height : 60 ) buttons [ i ]. layer . cornerRadius = 30.0 buttons [ i ]. backgroundColor = colors [ i ] as ? UIColor buttons [ i ]. center = self . center buttons [ i ]. addTarget ( self , action : #selector ( MyCustomButton . onClickSubButtons ( sender :)), for : UIControl . Event . touchUpInside ) buttons [ i ]. tag = i + 1 // sub\u30dc\u30bf\u30f3\u3092view\u306b\u8ffd\u52a0. self . addSubview ( buttons [ i ]) } UIView . animate ( withDuration : 0.06 , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406. animations : { () -> Void in // \u62e1\u5927\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u4f5c\u6210\u3059\u308b. sender . transform = CGAffineTransform ( scaleX : 0.4 , y : 0.4 ) // \u7e2e\u5c0f\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u4f5c\u6210\u3059\u308b. sender . transform = CGAffineTransform ( scaleX : 1.0 , y : 1.0 ) }) { ( Bool ) -> Void in } UIView . animate ( withDuration : 0.7 , delay : 0.0 , // \u30d0\u30cd\u3092\u8a2d\u5b9a. usingSpringWithDamping : 0.5 , // \u30d0\u30cd\u306e\u5f3e\u6027\u529b. initialSpringVelocity : 1.5 , options : UIView . AnimationOptions . curveEaseIn , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406. animations : { () -> Void in // sub\u30dc\u30bf\u30f3\u306b\u5ea7\u6a19\u3092\u8a2d\u5b9a. self . subButton_1 . layer . position = self . getPosition ( angle : - 90 , radius : radius ) self . subButton_2 . layer . position = self . getPosition ( angle : - 30 , radius : radius ) self . subButton_3 . layer . position = self . getPosition ( angle : - 60 , radius : radius ) self . subButton_4 . layer . position = self . getPosition ( angle : - 120 , radius : radius ) self . subButton_5 . layer . position = self . getPosition ( angle : - 150 , radius : radius ) }) { ( Bool ) -> Void in } } /* sub\u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8 \u80cc\u666f\u306e\u8272\u3092\u8a2d\u5b9a. */ @objc func onClickSubButtons ( sender : UIButton ) { // \u80cc\u666f\u8272\u3092sub\u30dc\u30bf\u30f3\u306e\u8272\u306b\u8a2d\u5b9a. switch ( sender . tag ) { case 1 : self . backgroundColor = colors [ 0 ] as ? UIColor case 2 : self . backgroundColor = colors [ 1 ] as ? UIColor case 3 : self . backgroundColor = colors [ 2 ] as ? UIColor case 4 : self . backgroundColor = colors [ 3 ] as ? UIColor case 5 : self . backgroundColor = colors [ 4 ] as ? UIColor default : self . backgroundColor = UIColor . black } } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 // // MyCustomButton.swift // UIKit072 // // Created by Misato Morino on 2016/08/19. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import Foundation import UIKit class MyCustomButton : UIView { // sub\u30dc\u30bf\u30f3(\u98db\u3073\u51fa\u3059\u30dc\u30bf\u30f3)\u3092\u751f\u6210 var subButton_1 : UIButton = UIButton () var subButton_2 : UIButton = UIButton () var subButton_3 : UIButton = UIButton () var subButton_4 : UIButton = UIButton () var subButton_5 : UIButton = UIButton () var mainButton : UIButton ! var colors : NSMutableArray ! var mainPosition : CGPoint ! //var viewControll: UIViewController = ViewController() required init ( coder aDecoder : NSCoder ) { super . init ( coder : aDecoder ) ! } override init ( frame : CGRect ) { super . init ( frame : frame ) } /* \u30e1\u30a4\u30f3\u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8(Down) */ func onDownMainButton ( sender : UIButton ) { // \u80cc\u666f\u3092\u9ed2\u8272\u306b\u8a2d\u5b9a. self . backgroundColor = UIColor . black UIView . animate ( withDuration : 0.06 , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406. animations : { () -> Void in // \u7e2e\u5c0f\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u751f\u6210\u3059\u308b. sender . transform = CGAffineTransform ( scaleX : 0.9 , y : 0.9 ) }) { ( Bool ) -> Void in } } /* sub\u30dc\u30bf\u30f3\u306e\u5ea7\u6a19\u3092\u8fd4\u3059\u30e1\u30bd\u30c3\u30c9 */ func getPosition ( angle : CGFloat , radius : CGFloat ) -> CGPoint { // \u5ea6\u304b\u3089\u30e9\u30b8\u30a2\u30f3\u306b\u5909\u63db. let radian = angle * CGFloat ( M_PI ) / 180.0 // x\u5ea7\u6a19\u3092\u8a08\u7b97. let x_position : CGFloat = mainButton . layer . position . x + radius * cos ( radian ) // y\u5ea7\u6a19\u3092\u8a08\u7b97. let y_position = mainPosition . y + radius * sin ( radian ) let position = CGPoint ( x : x_position , y : y_position ) return position } /* \u30e1\u30a4\u30f3\u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8(Up) */ func onUpMainButton ( sender : UIButton ) { // sub\u30dc\u30bf\u30f3\u3092\u914d\u5217\u306b\u683c\u7d0d. let buttons = [ subButton_1 , subButton_2 , subButton_3 , subButton_4 , subButton_5 ] // sub\u30dc\u30bf\u30f3\u7528\u306e\u3000UIColor\u3092\u914d\u5217\u306b\u683c\u7d0d. colors = [ UIColor . yellow , UIColor . green , UIColor . cyan , UIColor . magenta , UIColor . purple ] as NSMutableArray // main\u30dc\u30bf\u30f3\u304b\u3089\u306e\u8ddd\u96e2(\u534a\u5f84). let radius : CGFloat = 150 // sub\u30dc\u30bf\u30f3\u306b\u5404\u7a2e\u8a2d\u5b9a. for i in 0 .. < buttons . count { buttons [ i ]. frame = CGRect ( x : 0 , y : 0 , width : 60 , height : 60 ) buttons [ i ]. layer . cornerRadius = 30.0 buttons [ i ]. backgroundColor = colors [ i ] as ? UIColor buttons [ i ]. center = self . center buttons [ i ]. addTarget ( self , action : #selector ( MyCustomButton . onClickSubButtons ( sender :)), for : UIControlEvents . touchUpInside ) buttons [ i ]. tag = i + 1 // sub\u30dc\u30bf\u30f3\u3092view\u306b\u8ffd\u52a0. self . addSubview ( buttons [ i ]) } UIView . animate ( withDuration : 0.06 , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406. animations : { () -> Void in // \u62e1\u5927\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u4f5c\u6210\u3059\u308b. sender . transform = CGAffineTransform ( scaleX : 0.4 , y : 0.4 ) // \u7e2e\u5c0f\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u4f5c\u6210\u3059\u308b. sender . transform = CGAffineTransform ( scaleX : 1.0 , y : 1.0 ) }) { ( Bool ) -> Void in } UIView . animate ( withDuration : 0.7 , delay : 0.0 , // \u30d0\u30cd\u3092\u8a2d\u5b9a. usingSpringWithDamping : 0.5 , // \u30d0\u30cd\u306e\u5f3e\u6027\u529b. initialSpringVelocity : 1.5 , options : UIViewAnimationOptions . curveEaseIn , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406. animations : { () -> Void in // sub\u30dc\u30bf\u30f3\u306b\u5ea7\u6a19\u3092\u8a2d\u5b9a. self . subButton_1 . layer . position = self . getPosition ( angle : - 90 , radius : radius ) self . subButton_2 . layer . position = self . getPosition ( angle : - 30 , radius : radius ) self . subButton_3 . layer . position = self . getPosition ( angle : - 60 , radius : radius ) self . subButton_4 . layer . position = self . getPosition ( angle : - 120 , radius : radius ) self . subButton_5 . layer . position = self . getPosition ( angle : - 150 , radius : radius ) }) { ( Bool ) -> Void in } } /* sub\u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8 \u80cc\u666f\u306e\u8272\u3092\u8a2d\u5b9a. */ func onClickSubButtons ( sender : UIButton ) { // \u80cc\u666f\u8272\u3092sub\u30dc\u30bf\u30f3\u306e\u8272\u306b\u8a2d\u5b9a. switch ( sender . tag ) { case 1 : self . backgroundColor = colors [ 0 ] as ? UIColor case 2 : self . backgroundColor = colors [ 1 ] as ? UIColor case 3 : self . backgroundColor = colors [ 2 ] as ? UIColor case 4 : self . backgroundColor = colors [ 3 ] as ? UIColor case 5 : self . backgroundColor = colors [ 4 ] as ? UIColor default : self . backgroundColor = UIColor . black } } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 // // MyCustomButton.swift // UIKit072 // // Created by Misato Morino on 2016/08/19. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import Foundation import UIKit class MyCustomButton : UIView { // sub\u30dc\u30bf\u30f3(\u98db\u3073\u51fa\u3059\u30dc\u30bf\u30f3)\u3092\u751f\u6210 var subButton_1 : UIButton = UIButton () var subButton_2 : UIButton = UIButton () var subButton_3 : UIButton = UIButton () var subButton_4 : UIButton = UIButton () var subButton_5 : UIButton = UIButton () var mainButton : UIButton ! var colors : NSMutableArray ! var mainPosition : CGPoint ! //var viewControll: UIViewController = ViewController() required init ( coder aDecoder : NSCoder ) { super . init ( coder : aDecoder ) ! } override init ( frame : CGRect ) { super . init ( frame : frame ) } /* \u30e1\u30a4\u30f3\u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8(Down) */ func onDownMainButton ( sender : UIButton ) { // \u80cc\u666f\u3092\u9ed2\u8272\u306b\u8a2d\u5b9a. self . backgroundColor = UIColor . blackColor () UIView . animateWithDuration ( 0.06 , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406. animations : { () -> Void in // \u7e2e\u5c0f\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u751f\u6210\u3059\u308b. sender . transform = CGAffineTransformMakeScale ( 0.9 , 0.9 ) }) { ( Bool ) -> Void in } } /* sub\u30dc\u30bf\u30f3\u306e\u5ea7\u6a19\u3092\u8fd4\u3059\u30e1\u30bd\u30c3\u30c9 */ func getPosition ( angle : CGFloat , radius : CGFloat ) -> CGPoint { // \u5ea6\u304b\u3089\u30e9\u30b8\u30a2\u30f3\u306b\u5909\u63db. let radian = angle * CGFloat ( M_PI ) / 180.0 // x\u5ea7\u6a19\u3092\u8a08\u7b97. let x_position : CGFloat = mainButton . layer . position . x + radius * cos ( radian ) // y\u5ea7\u6a19\u3092\u8a08\u7b97. let y_position = mainPosition . y + radius * sin ( radian ) let position = CGPointMake ( x_position , y_position ) return position } /* \u30e1\u30a4\u30f3\u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8(Up) */ func onUpMainButton ( sender : UIButton ) { // sub\u30dc\u30bf\u30f3\u3092\u914d\u5217\u306b\u683c\u7d0d. let buttons = [ subButton_1 , subButton_2 , subButton_3 , subButton_4 , subButton_5 ] // sub\u30dc\u30bf\u30f3\u7528\u306e\u3000UIColor\u3092\u914d\u5217\u306b\u683c\u7d0d. colors = [ UIColor . yellowColor (), UIColor . greenColor (), UIColor . cyanColor (), UIColor . magentaColor (), UIColor . purpleColor ()] as NSMutableArray // main\u30dc\u30bf\u30f3\u304b\u3089\u306e\u8ddd\u96e2(\u534a\u5f84). let radius : CGFloat = 150 // sub\u30dc\u30bf\u30f3\u306b\u5404\u7a2e\u8a2d\u5b9a. for i in 0 .. < buttons . count { buttons [ i ]. frame = CGRectMake ( 0 , 0 , 60 , 60 ) buttons [ i ]. layer . cornerRadius = 30.0 buttons [ i ]. backgroundColor = colors [ i ] as ? UIColor buttons [ i ]. center = self . center buttons [ i ]. addTarget ( self , action : #selector ( MyCustomButton . onClickSubButtons ( _ :)), forControlEvents : UIControlEvents . TouchUpInside ) buttons [ i ]. tag = i + 1 // sub\u30dc\u30bf\u30f3\u3092view\u306b\u8ffd\u52a0. self . addSubview ( buttons [ i ]) } UIView . animateWithDuration ( 0.06 , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406. animations : { () -> Void in // \u62e1\u5927\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u4f5c\u6210\u3059\u308b. sender . transform = CGAffineTransformMakeScale ( 0.4 , 0.4 ) // \u7e2e\u5c0f\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u4f5c\u6210\u3059\u308b. sender . transform = CGAffineTransformMakeScale ( 1.0 , 1.0 ) }) { ( Bool ) -> Void in } UIView . animateWithDuration ( 0.7 , delay : 0.0 , // \u30d0\u30cd\u3092\u8a2d\u5b9a. usingSpringWithDamping : 0.5 , // \u30d0\u30cd\u306e\u5f3e\u6027\u529b. initialSpringVelocity : 1.5 , options : UIViewAnimationOptions . CurveEaseIn , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406. animations : { () -> Void in // sub\u30dc\u30bf\u30f3\u306b\u5ea7\u6a19\u3092\u8a2d\u5b9a. self . subButton_1 . layer . position = self . getPosition ( - 90 , radius : radius ) self . subButton_2 . layer . position = self . getPosition ( - 30 , radius : radius ) self . subButton_3 . layer . position = self . getPosition ( - 60 , radius : radius ) self . subButton_4 . layer . position = self . getPosition ( - 120 , radius : radius ) self . subButton_5 . layer . position = self . getPosition ( - 150 , radius : radius ) }) { ( Bool ) -> Void in } } /* sub\u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8 \u80cc\u666f\u306e\u8272\u3092\u8a2d\u5b9a. */ func onClickSubButtons ( sender : UIButton ) { // \u80cc\u666f\u8272\u3092sub\u30dc\u30bf\u30f3\u306e\u8272\u306b\u8a2d\u5b9a. switch ( sender . tag ) { case 1 : self . backgroundColor = colors [ 0 ] as ? UIColor case 2 : self . backgroundColor = colors [ 1 ] as ? UIColor case 3 : self . backgroundColor = colors [ 2 ] as ? UIColor case 4 : self . backgroundColor = colors [ 3 ] as ? UIColor case 5 : self . backgroundColor = colors [ 4 ] as ? UIColor default : self . backgroundColor = UIColor . blackColor () } } } 3.x\u30684.x\u306e\u5dee\u5206 UIControlEvents \u3092 UIControl.Event \u306b\u5909\u66f4 onDownMainButton \u3001 onUpMainButton \u3001 onClickSubButtons \u306b @objc \u3092\u8ffd\u52a0 UIViewAnimationOptions \u304c UIView.AnimationOptions \u306b\u5909\u66f4 2.3\u30683.0\u306e\u5dee\u5206 CGPointMake\u304c\u5ec3\u6b62 \u30bb\u30ec\u30af\u30bf\u304c Selector(\"onDownMainButton:\") \u304b\u3089 #selector(myCusButton.onDownMainButton(sender:) \u306b\u5909\u66f4 Reference UIView https://developer.apple.com/reference/uikit/uiwebview UIButton https://developer.apple.com/reference/uikit/uibutton","title":"\u4e00\u3064\u306e\u30dc\u30bf\u30f3\u304b\u3089\u8907\u6570\u306e\u30dc\u30bf\u30f3\u304c\u98db\u3073\u51fa\u3059"},{"location":"1.uikit/072_custombutton/#_1","text":"","title":"\u4e00\u3064\u306e\u30dc\u30bf\u30f3\u304b\u3089\u8907\u6570\u306e\u30dc\u30bf\u30f3\u304c\u98db\u3073\u51fa\u3059"},{"location":"1.uikit/072_custombutton/#viewcontrollerswift","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 // // ViewController.swift // UIKit072 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { var mainButton : UIButton = UIButton () override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u9ed2\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . black // main\u30dc\u30bf\u30f3\u751f\u6210. mainButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 100 , height : 100 )) mainButton . center = self . view . center // myCustomButton\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210. let myCusButton : MyCustomButton = MyCustomButton ( frame : self . view . frame ) myCusButton . mainButton = self . mainButton myCusButton . mainPosition = self . mainButton . layer . position // \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092view\u306b\u8ffd\u52a0. self . view . addSubview ( myCusButton ) // main\u30dc\u30bf\u30f3\u5404\u8a2d\u5b9a. mainButton . layer . masksToBounds = true mainButton . layer . cornerRadius = 50.0 mainButton . backgroundColor = UIColor . red mainButton . setTitle ( \"Fire!\" , for : . normal ) mainButton . setTitleColor ( UIColor . white , for : . normal ) mainButton . addTarget ( myCusButton , action : #selector ( myCusButton . onDownMainButton ( sender :)), for : UIControl . Event . touchUpInside ) mainButton . addTarget ( myCusButton , action : #selector ( myCusButton . onUpMainButton ( sender :)), for : [. touchUpInside , . touchDragOutside ]) mainButton . tag = 0 // main\u30dc\u30bf\u30f3\u3092view\u306b\u8ffd\u52a0. self . view . addSubview ( mainButton ) } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 // // ViewController.swift // UIKit072 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { var mainButton : UIButton = UIButton () override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u9ed2\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . black // main\u30dc\u30bf\u30f3\u751f\u6210. mainButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 100 , height : 100 )) mainButton . center = self . view . center // myCustomButton\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210. let myCusButton : MyCustomButton = MyCustomButton ( frame : self . view . frame ) myCusButton . mainButton = self . mainButton myCusButton . mainPosition = self . mainButton . layer . position // \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092view\u306b\u8ffd\u52a0. self . view . addSubview ( myCusButton ) // main\u30dc\u30bf\u30f3\u5404\u8a2d\u5b9a. mainButton . layer . masksToBounds = true mainButton . layer . cornerRadius = 50.0 mainButton . backgroundColor = UIColor . red mainButton . setTitle ( \"Fire!\" , for : . normal ) mainButton . setTitleColor ( UIColor . white , for : . normal ) mainButton . addTarget ( myCusButton , action : #selector ( myCusButton . onDownMainButton ( sender :)), for : UIControlEvents . touchUpInside ) mainButton . addTarget ( myCusButton , action : #selector ( myCusButton . onUpMainButton ( sender :)), for : [. touchUpInside , . touchDragOutside ]) mainButton . tag = 0 // main\u30dc\u30bf\u30f3\u3092view\u306b\u8ffd\u52a0. self . view . addSubview ( mainButton ) } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 // // ViewController.swift // UIKit072 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { var mainButton : UIButton = UIButton () override func viewDidLoad () { super . viewDidLoad () // \u80cc\u666f\u3092\u9ed2\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . blackColor () // main\u30dc\u30bf\u30f3\u751f\u6210. mainButton = UIButton ( frame : CGRectMake ( 0 , 0 , 100 , 100 )) mainButton . center = self . view . center // myCustomButton\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210. let myCusButton : MyCustomButton = MyCustomButton ( frame : self . view . frame ) myCusButton . mainButton = self . mainButton myCusButton . mainPosition = self . mainButton . layer . position // \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092view\u306b\u8ffd\u52a0. self . view . addSubview ( myCusButton ) // main\u30dc\u30bf\u30f3\u5404\u8a2d\u5b9a. mainButton . layer . masksToBounds = true mainButton . layer . cornerRadius = 50.0 mainButton . backgroundColor = UIColor . redColor () mainButton . setTitle ( \"Fire!\" , forState : . Normal ) mainButton . setTitleColor ( UIColor . whiteColor (), forState : . Normal ) mainButton . addTarget ( myCusButton , action : Selector ( \"onDownMainButton:\" ), forControlEvents : UIControlEvents . TouchDown ) mainButton . addTarget ( myCusButton , action : Selector ( \"onUpMainButton:\" ), forControlEvents : [ UIControlEvents . TouchUpInside , UIControlEvents . TouchDragOutside ]) mainButton . tag = 0 // main\u30dc\u30bf\u30f3\u3092view\u306b\u8ffd\u52a0. self . view . addSubview ( mainButton ) } }","title":"ViewController.swift"},{"location":"1.uikit/072_custombutton/#mycustomebuttonswift","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 // // MyCustomButton.swift // UIKit072 // // Created by Misato Morino on 2016/08/19. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import Foundation import UIKit class MyCustomButton : UIView { // sub\u30dc\u30bf\u30f3(\u98db\u3073\u51fa\u3059\u30dc\u30bf\u30f3)\u3092\u751f\u6210 var subButton_1 : UIButton = UIButton () var subButton_2 : UIButton = UIButton () var subButton_3 : UIButton = UIButton () var subButton_4 : UIButton = UIButton () var subButton_5 : UIButton = UIButton () var mainButton : UIButton ! var colors : NSMutableArray ! var mainPosition : CGPoint ! //var viewControll: UIViewController = ViewController() required init ( coder aDecoder : NSCoder ) { super . init ( coder : aDecoder ) ! } override init ( frame : CGRect ) { super . init ( frame : frame ) } /* \u30e1\u30a4\u30f3\u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8(Down) */ @objc func onDownMainButton ( sender : UIButton ) { // \u80cc\u666f\u3092\u9ed2\u8272\u306b\u8a2d\u5b9a. self . backgroundColor = UIColor . black UIView . animate ( withDuration : 0.06 , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406. animations : { () -> Void in // \u7e2e\u5c0f\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u751f\u6210\u3059\u308b. sender . transform = CGAffineTransform ( scaleX : 0.9 , y : 0.9 ) }) { ( Bool ) -> Void in } } /* sub\u30dc\u30bf\u30f3\u306e\u5ea7\u6a19\u3092\u8fd4\u3059\u30e1\u30bd\u30c3\u30c9 */ func getPosition ( angle : CGFloat , radius : CGFloat ) -> CGPoint { // \u5ea6\u304b\u3089\u30e9\u30b8\u30a2\u30f3\u306b\u5909\u63db. let radian = angle * CGFloat ( M_PI ) / 180.0 // x\u5ea7\u6a19\u3092\u8a08\u7b97. let x_position : CGFloat = mainButton . layer . position . x + radius * cos ( radian ) // y\u5ea7\u6a19\u3092\u8a08\u7b97. let y_position = mainPosition . y + radius * sin ( radian ) let position = CGPoint ( x : x_position , y : y_position ) return position } /* \u30e1\u30a4\u30f3\u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8(Up) */ @objc func onUpMainButton ( sender : UIButton ) { // sub\u30dc\u30bf\u30f3\u3092\u914d\u5217\u306b\u683c\u7d0d. let buttons = [ subButton_1 , subButton_2 , subButton_3 , subButton_4 , subButton_5 ] // sub\u30dc\u30bf\u30f3\u7528\u306e\u3000UIColor\u3092\u914d\u5217\u306b\u683c\u7d0d. colors = [ UIColor . yellow , UIColor . green , UIColor . cyan , UIColor . magenta , UIColor . purple ] as NSMutableArray // main\u30dc\u30bf\u30f3\u304b\u3089\u306e\u8ddd\u96e2(\u534a\u5f84). let radius : CGFloat = 150 // sub\u30dc\u30bf\u30f3\u306b\u5404\u7a2e\u8a2d\u5b9a. for i in 0 .. < buttons . count { buttons [ i ]. frame = CGRect ( x : 0 , y : 0 , width : 60 , height : 60 ) buttons [ i ]. layer . cornerRadius = 30.0 buttons [ i ]. backgroundColor = colors [ i ] as ? UIColor buttons [ i ]. center = self . center buttons [ i ]. addTarget ( self , action : #selector ( MyCustomButton . onClickSubButtons ( sender :)), for : UIControl . Event . touchUpInside ) buttons [ i ]. tag = i + 1 // sub\u30dc\u30bf\u30f3\u3092view\u306b\u8ffd\u52a0. self . addSubview ( buttons [ i ]) } UIView . animate ( withDuration : 0.06 , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406. animations : { () -> Void in // \u62e1\u5927\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u4f5c\u6210\u3059\u308b. sender . transform = CGAffineTransform ( scaleX : 0.4 , y : 0.4 ) // \u7e2e\u5c0f\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u4f5c\u6210\u3059\u308b. sender . transform = CGAffineTransform ( scaleX : 1.0 , y : 1.0 ) }) { ( Bool ) -> Void in } UIView . animate ( withDuration : 0.7 , delay : 0.0 , // \u30d0\u30cd\u3092\u8a2d\u5b9a. usingSpringWithDamping : 0.5 , // \u30d0\u30cd\u306e\u5f3e\u6027\u529b. initialSpringVelocity : 1.5 , options : UIView . AnimationOptions . curveEaseIn , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406. animations : { () -> Void in // sub\u30dc\u30bf\u30f3\u306b\u5ea7\u6a19\u3092\u8a2d\u5b9a. self . subButton_1 . layer . position = self . getPosition ( angle : - 90 , radius : radius ) self . subButton_2 . layer . position = self . getPosition ( angle : - 30 , radius : radius ) self . subButton_3 . layer . position = self . getPosition ( angle : - 60 , radius : radius ) self . subButton_4 . layer . position = self . getPosition ( angle : - 120 , radius : radius ) self . subButton_5 . layer . position = self . getPosition ( angle : - 150 , radius : radius ) }) { ( Bool ) -> Void in } } /* sub\u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8 \u80cc\u666f\u306e\u8272\u3092\u8a2d\u5b9a. */ @objc func onClickSubButtons ( sender : UIButton ) { // \u80cc\u666f\u8272\u3092sub\u30dc\u30bf\u30f3\u306e\u8272\u306b\u8a2d\u5b9a. switch ( sender . tag ) { case 1 : self . backgroundColor = colors [ 0 ] as ? UIColor case 2 : self . backgroundColor = colors [ 1 ] as ? UIColor case 3 : self . backgroundColor = colors [ 2 ] as ? UIColor case 4 : self . backgroundColor = colors [ 3 ] as ? UIColor case 5 : self . backgroundColor = colors [ 4 ] as ? UIColor default : self . backgroundColor = UIColor . black } } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 // // MyCustomButton.swift // UIKit072 // // Created by Misato Morino on 2016/08/19. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import Foundation import UIKit class MyCustomButton : UIView { // sub\u30dc\u30bf\u30f3(\u98db\u3073\u51fa\u3059\u30dc\u30bf\u30f3)\u3092\u751f\u6210 var subButton_1 : UIButton = UIButton () var subButton_2 : UIButton = UIButton () var subButton_3 : UIButton = UIButton () var subButton_4 : UIButton = UIButton () var subButton_5 : UIButton = UIButton () var mainButton : UIButton ! var colors : NSMutableArray ! var mainPosition : CGPoint ! //var viewControll: UIViewController = ViewController() required init ( coder aDecoder : NSCoder ) { super . init ( coder : aDecoder ) ! } override init ( frame : CGRect ) { super . init ( frame : frame ) } /* \u30e1\u30a4\u30f3\u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8(Down) */ func onDownMainButton ( sender : UIButton ) { // \u80cc\u666f\u3092\u9ed2\u8272\u306b\u8a2d\u5b9a. self . backgroundColor = UIColor . black UIView . animate ( withDuration : 0.06 , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406. animations : { () -> Void in // \u7e2e\u5c0f\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u751f\u6210\u3059\u308b. sender . transform = CGAffineTransform ( scaleX : 0.9 , y : 0.9 ) }) { ( Bool ) -> Void in } } /* sub\u30dc\u30bf\u30f3\u306e\u5ea7\u6a19\u3092\u8fd4\u3059\u30e1\u30bd\u30c3\u30c9 */ func getPosition ( angle : CGFloat , radius : CGFloat ) -> CGPoint { // \u5ea6\u304b\u3089\u30e9\u30b8\u30a2\u30f3\u306b\u5909\u63db. let radian = angle * CGFloat ( M_PI ) / 180.0 // x\u5ea7\u6a19\u3092\u8a08\u7b97. let x_position : CGFloat = mainButton . layer . position . x + radius * cos ( radian ) // y\u5ea7\u6a19\u3092\u8a08\u7b97. let y_position = mainPosition . y + radius * sin ( radian ) let position = CGPoint ( x : x_position , y : y_position ) return position } /* \u30e1\u30a4\u30f3\u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8(Up) */ func onUpMainButton ( sender : UIButton ) { // sub\u30dc\u30bf\u30f3\u3092\u914d\u5217\u306b\u683c\u7d0d. let buttons = [ subButton_1 , subButton_2 , subButton_3 , subButton_4 , subButton_5 ] // sub\u30dc\u30bf\u30f3\u7528\u306e\u3000UIColor\u3092\u914d\u5217\u306b\u683c\u7d0d. colors = [ UIColor . yellow , UIColor . green , UIColor . cyan , UIColor . magenta , UIColor . purple ] as NSMutableArray // main\u30dc\u30bf\u30f3\u304b\u3089\u306e\u8ddd\u96e2(\u534a\u5f84). let radius : CGFloat = 150 // sub\u30dc\u30bf\u30f3\u306b\u5404\u7a2e\u8a2d\u5b9a. for i in 0 .. < buttons . count { buttons [ i ]. frame = CGRect ( x : 0 , y : 0 , width : 60 , height : 60 ) buttons [ i ]. layer . cornerRadius = 30.0 buttons [ i ]. backgroundColor = colors [ i ] as ? UIColor buttons [ i ]. center = self . center buttons [ i ]. addTarget ( self , action : #selector ( MyCustomButton . onClickSubButtons ( sender :)), for : UIControlEvents . touchUpInside ) buttons [ i ]. tag = i + 1 // sub\u30dc\u30bf\u30f3\u3092view\u306b\u8ffd\u52a0. self . addSubview ( buttons [ i ]) } UIView . animate ( withDuration : 0.06 , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406. animations : { () -> Void in // \u62e1\u5927\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u4f5c\u6210\u3059\u308b. sender . transform = CGAffineTransform ( scaleX : 0.4 , y : 0.4 ) // \u7e2e\u5c0f\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u4f5c\u6210\u3059\u308b. sender . transform = CGAffineTransform ( scaleX : 1.0 , y : 1.0 ) }) { ( Bool ) -> Void in } UIView . animate ( withDuration : 0.7 , delay : 0.0 , // \u30d0\u30cd\u3092\u8a2d\u5b9a. usingSpringWithDamping : 0.5 , // \u30d0\u30cd\u306e\u5f3e\u6027\u529b. initialSpringVelocity : 1.5 , options : UIViewAnimationOptions . curveEaseIn , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406. animations : { () -> Void in // sub\u30dc\u30bf\u30f3\u306b\u5ea7\u6a19\u3092\u8a2d\u5b9a. self . subButton_1 . layer . position = self . getPosition ( angle : - 90 , radius : radius ) self . subButton_2 . layer . position = self . getPosition ( angle : - 30 , radius : radius ) self . subButton_3 . layer . position = self . getPosition ( angle : - 60 , radius : radius ) self . subButton_4 . layer . position = self . getPosition ( angle : - 120 , radius : radius ) self . subButton_5 . layer . position = self . getPosition ( angle : - 150 , radius : radius ) }) { ( Bool ) -> Void in } } /* sub\u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8 \u80cc\u666f\u306e\u8272\u3092\u8a2d\u5b9a. */ func onClickSubButtons ( sender : UIButton ) { // \u80cc\u666f\u8272\u3092sub\u30dc\u30bf\u30f3\u306e\u8272\u306b\u8a2d\u5b9a. switch ( sender . tag ) { case 1 : self . backgroundColor = colors [ 0 ] as ? UIColor case 2 : self . backgroundColor = colors [ 1 ] as ? UIColor case 3 : self . backgroundColor = colors [ 2 ] as ? UIColor case 4 : self . backgroundColor = colors [ 3 ] as ? UIColor case 5 : self . backgroundColor = colors [ 4 ] as ? UIColor default : self . backgroundColor = UIColor . black } } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 // // MyCustomButton.swift // UIKit072 // // Created by Misato Morino on 2016/08/19. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import Foundation import UIKit class MyCustomButton : UIView { // sub\u30dc\u30bf\u30f3(\u98db\u3073\u51fa\u3059\u30dc\u30bf\u30f3)\u3092\u751f\u6210 var subButton_1 : UIButton = UIButton () var subButton_2 : UIButton = UIButton () var subButton_3 : UIButton = UIButton () var subButton_4 : UIButton = UIButton () var subButton_5 : UIButton = UIButton () var mainButton : UIButton ! var colors : NSMutableArray ! var mainPosition : CGPoint ! //var viewControll: UIViewController = ViewController() required init ( coder aDecoder : NSCoder ) { super . init ( coder : aDecoder ) ! } override init ( frame : CGRect ) { super . init ( frame : frame ) } /* \u30e1\u30a4\u30f3\u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8(Down) */ func onDownMainButton ( sender : UIButton ) { // \u80cc\u666f\u3092\u9ed2\u8272\u306b\u8a2d\u5b9a. self . backgroundColor = UIColor . blackColor () UIView . animateWithDuration ( 0.06 , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406. animations : { () -> Void in // \u7e2e\u5c0f\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u751f\u6210\u3059\u308b. sender . transform = CGAffineTransformMakeScale ( 0.9 , 0.9 ) }) { ( Bool ) -> Void in } } /* sub\u30dc\u30bf\u30f3\u306e\u5ea7\u6a19\u3092\u8fd4\u3059\u30e1\u30bd\u30c3\u30c9 */ func getPosition ( angle : CGFloat , radius : CGFloat ) -> CGPoint { // \u5ea6\u304b\u3089\u30e9\u30b8\u30a2\u30f3\u306b\u5909\u63db. let radian = angle * CGFloat ( M_PI ) / 180.0 // x\u5ea7\u6a19\u3092\u8a08\u7b97. let x_position : CGFloat = mainButton . layer . position . x + radius * cos ( radian ) // y\u5ea7\u6a19\u3092\u8a08\u7b97. let y_position = mainPosition . y + radius * sin ( radian ) let position = CGPointMake ( x_position , y_position ) return position } /* \u30e1\u30a4\u30f3\u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8(Up) */ func onUpMainButton ( sender : UIButton ) { // sub\u30dc\u30bf\u30f3\u3092\u914d\u5217\u306b\u683c\u7d0d. let buttons = [ subButton_1 , subButton_2 , subButton_3 , subButton_4 , subButton_5 ] // sub\u30dc\u30bf\u30f3\u7528\u306e\u3000UIColor\u3092\u914d\u5217\u306b\u683c\u7d0d. colors = [ UIColor . yellowColor (), UIColor . greenColor (), UIColor . cyanColor (), UIColor . magentaColor (), UIColor . purpleColor ()] as NSMutableArray // main\u30dc\u30bf\u30f3\u304b\u3089\u306e\u8ddd\u96e2(\u534a\u5f84). let radius : CGFloat = 150 // sub\u30dc\u30bf\u30f3\u306b\u5404\u7a2e\u8a2d\u5b9a. for i in 0 .. < buttons . count { buttons [ i ]. frame = CGRectMake ( 0 , 0 , 60 , 60 ) buttons [ i ]. layer . cornerRadius = 30.0 buttons [ i ]. backgroundColor = colors [ i ] as ? UIColor buttons [ i ]. center = self . center buttons [ i ]. addTarget ( self , action : #selector ( MyCustomButton . onClickSubButtons ( _ :)), forControlEvents : UIControlEvents . TouchUpInside ) buttons [ i ]. tag = i + 1 // sub\u30dc\u30bf\u30f3\u3092view\u306b\u8ffd\u52a0. self . addSubview ( buttons [ i ]) } UIView . animateWithDuration ( 0.06 , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406. animations : { () -> Void in // \u62e1\u5927\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u4f5c\u6210\u3059\u308b. sender . transform = CGAffineTransformMakeScale ( 0.4 , 0.4 ) // \u7e2e\u5c0f\u7528\u30a2\u30d5\u30a3\u30f3\u884c\u5217\u3092\u4f5c\u6210\u3059\u308b. sender . transform = CGAffineTransformMakeScale ( 1.0 , 1.0 ) }) { ( Bool ) -> Void in } UIView . animateWithDuration ( 0.7 , delay : 0.0 , // \u30d0\u30cd\u3092\u8a2d\u5b9a. usingSpringWithDamping : 0.5 , // \u30d0\u30cd\u306e\u5f3e\u6027\u529b. initialSpringVelocity : 1.5 , options : UIViewAnimationOptions . CurveEaseIn , // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\u51e6\u7406. animations : { () -> Void in // sub\u30dc\u30bf\u30f3\u306b\u5ea7\u6a19\u3092\u8a2d\u5b9a. self . subButton_1 . layer . position = self . getPosition ( - 90 , radius : radius ) self . subButton_2 . layer . position = self . getPosition ( - 30 , radius : radius ) self . subButton_3 . layer . position = self . getPosition ( - 60 , radius : radius ) self . subButton_4 . layer . position = self . getPosition ( - 120 , radius : radius ) self . subButton_5 . layer . position = self . getPosition ( - 150 , radius : radius ) }) { ( Bool ) -> Void in } } /* sub\u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8 \u80cc\u666f\u306e\u8272\u3092\u8a2d\u5b9a. */ func onClickSubButtons ( sender : UIButton ) { // \u80cc\u666f\u8272\u3092sub\u30dc\u30bf\u30f3\u306e\u8272\u306b\u8a2d\u5b9a. switch ( sender . tag ) { case 1 : self . backgroundColor = colors [ 0 ] as ? UIColor case 2 : self . backgroundColor = colors [ 1 ] as ? UIColor case 3 : self . backgroundColor = colors [ 2 ] as ? UIColor case 4 : self . backgroundColor = colors [ 3 ] as ? UIColor case 5 : self . backgroundColor = colors [ 4 ] as ? UIColor default : self . backgroundColor = UIColor . blackColor () } } }","title":"MyCustomeButton.swift"},{"location":"1.uikit/072_custombutton/#3x4x","text":"UIControlEvents \u3092 UIControl.Event \u306b\u5909\u66f4 onDownMainButton \u3001 onUpMainButton \u3001 onClickSubButtons \u306b @objc \u3092\u8ffd\u52a0 UIViewAnimationOptions \u304c UIView.AnimationOptions \u306b\u5909\u66f4","title":"3.x\u30684.x\u306e\u5dee\u5206"},{"location":"1.uikit/072_custombutton/#2330","text":"CGPointMake\u304c\u5ec3\u6b62 \u30bb\u30ec\u30af\u30bf\u304c Selector(\"onDownMainButton:\") \u304b\u3089 #selector(myCusButton.onDownMainButton(sender:) \u306b\u5909\u66f4","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/072_custombutton/#reference","text":"UIView https://developer.apple.com/reference/uikit/uiwebview UIButton https://developer.apple.com/reference/uikit/uibutton","title":"Reference"},{"location":"1.uikit/073_uiview/","text":"\u73feView\u306e\u4e0a\u306b\u5225View\u3092\u8868\u793a\u3059\u308b Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 // // ViewController.swift // UIKit074 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { var myView : UIView ! var myButton : UIButton ! var flag : Bool ! override func viewDidLoad () { super . viewDidLoad () // view\u8868\u793a\u30fb\u975e\u8868\u793a\u306e\u305f\u3081\u306e\u30d5\u30e9\u30b0. flag = false // view\u306e\u80cc\u666f\u3092\u9752\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . cyan // View\u3092\u751f\u6210. myView = UIView ( frame : CGRect ( x : 0 , y : 0 , width : 100 , height : 100 )) // myView\u306e\u80cc\u666f\u3092\u7dd1\u8272\u306b\u8a2d\u5b9a. myView . backgroundColor = UIColor . green // \u900f\u660e\u5ea6\u3092\u8a2d\u5b9a. myView . alpha = 0.5 // \u4f4d\u7f6e\u3092\u4e2d\u5fc3\u306b\u8a2d\u5b9a. myView . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height / 2 ) // myView\u3092\u975e\u8868\u793a. myView . isHidden = true // \u30dc\u30bf\u30f3\u3092\u751f\u6210. myButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 100 , height : 50 )) myButton . backgroundColor = UIColor . red myButton . layer . cornerRadius = 20.0 myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height - 50 ) myButton . setTitle ( \"Appear\" , for : . normal ) myButton . setTitleColor ( UIColor . white , for : . normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchUpInside ) // myView\u3092view\u306b\u8ffd\u52a0. self . view . addSubview ( myView ) // \u30dc\u30bf\u30f3\u3092view\u306b\u8ffd\u52a0. self . view . addSubview ( myButton ) } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8 */ @objc func onClickMyButton ( sender : UIButton ) { // flag\u304cfalse\u306a\u3089myView\u3092\u8868\u793a. if ! flag { // myView\u3092\u8868\u793a. myView . isHidden = false // \u30dc\u30bf\u30f3\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u5909\u66f4. myButton . setTitle ( \"Disappear\" , for : . normal ) flag = true } // flag\u304ctrue\u306a\u3089myView\u3092\u975e\u8868\u793a. else { // myView\u3092\u975e\u8868\u793a. myView . isHidden = true // \u30dc\u30bf\u30f3\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u5909\u66f4. myButton . setTitle ( \"Appear\" , for : . normal ) flag = false } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 // // ViewController.swift // UIKit074 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { var myView : UIView ! var myButton : UIButton ! var flag : Bool ! override func viewDidLoad () { super . viewDidLoad () // view\u8868\u793a\u30fb\u975e\u8868\u793a\u306e\u305f\u3081\u306e\u30d5\u30e9\u30b0. flag = false // view\u306e\u80cc\u666f\u3092\u9752\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . cyan // View\u3092\u751f\u6210. myView = UIView ( frame : CGRect ( x : 0 , y : 0 , width : 100 , height : 100 )) // myView\u306e\u80cc\u666f\u3092\u7dd1\u8272\u306b\u8a2d\u5b9a. myView . backgroundColor = UIColor . green // \u900f\u660e\u5ea6\u3092\u8a2d\u5b9a. myView . alpha = 0.5 // \u4f4d\u7f6e\u3092\u4e2d\u5fc3\u306b\u8a2d\u5b9a. myView . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height / 2 ) // myView\u3092\u975e\u8868\u793a. myView . isHidden = true // \u30dc\u30bf\u30f3\u3092\u751f\u6210. myButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 100 , height : 50 )) myButton . backgroundColor = UIColor . red myButton . layer . cornerRadius = 20.0 myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height - 50 ) myButton . setTitle ( \"Appear\" , for : . normal ) myButton . setTitleColor ( UIColor . white , for : . normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchUpInside ) // myView\u3092view\u306b\u8ffd\u52a0. self . view . addSubview ( myView ) // \u30dc\u30bf\u30f3\u3092view\u306b\u8ffd\u52a0. self . view . addSubview ( myButton ) } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8 */ func onClickMyButton ( sender : UIButton ) { // flag\u304cfalse\u306a\u3089myView\u3092\u8868\u793a. if ! flag { // myView\u3092\u8868\u793a. myView . isHidden = false // \u30dc\u30bf\u30f3\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u5909\u66f4. myButton . setTitle ( \"Disappear\" , for : . normal ) flag = true } // flag\u304ctrue\u306a\u3089myView\u3092\u975e\u8868\u793a. else { // myView\u3092\u975e\u8868\u793a. myView . isHidden = true // \u30dc\u30bf\u30f3\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u5909\u66f4. myButton . setTitle ( \"Appear\" , for : . normal ) flag = false } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 // // ViewController.swift // UIKit073 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { var myView : UIView ! var myButton : UIButton ! var flag : Bool ! override func viewDidLoad () { super . viewDidLoad () // view\u8868\u793a\u30fb\u975e\u8868\u793a\u306e\u305f\u3081\u306e\u30d5\u30e9\u30b0. flag = false // view\u306e\u80cc\u666f\u3092\u9752\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . cyanColor () // View\u3092\u751f\u6210. myView = UIView ( frame : CGRectMake ( 0 , 0 , 100 , 100 )) // myView\u306e\u80cc\u666f\u3092\u7dd1\u8272\u306b\u8a2d\u5b9a. myView . backgroundColor = UIColor . greenColor () // \u900f\u660e\u5ea6\u3092\u8a2d\u5b9a. myView . alpha = 0.5 // \u4f4d\u7f6e\u3092\u4e2d\u5fc3\u306b\u8a2d\u5b9a. myView . layer . position = CGPointMake ( self . view . frame . width / 2 , self . view . frame . height / 2 ) // myView\u3092\u975e\u8868\u793a. myView . hidden = true // \u30dc\u30bf\u30f3\u3092\u751f\u6210. myButton = UIButton ( frame : CGRectMake ( 0 , 0 , 100 , 50 )) myButton . backgroundColor = UIColor . redColor () myButton . layer . cornerRadius = 20.0 myButton . layer . position = CGPointMake ( self . view . frame . width / 2 , self . view . frame . height - 50 ) myButton . setTitle ( \"Appear\" , forState : . Normal ) myButton . setTitleColor ( UIColor . whiteColor (), forState : . Normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : . TouchUpInside ) // myView\u3092view\u306b\u8ffd\u52a0. self . view . addSubview ( myView ) // \u30dc\u30bf\u30f3\u3092view\u306b\u8ffd\u52a0. self . view . addSubview ( myButton ) } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8 */ func onClickMyButton ( sender : UIButton ) { // flag\u304cfalse\u306a\u3089myView\u3092\u8868\u793a. if ! flag { // myView\u3092\u8868\u793a. myView . hidden = false // \u30dc\u30bf\u30f3\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u5909\u66f4. myButton . setTitle ( \"Disappear\" , forState : . Normal ) flag = true } // flag\u304ctrue\u306a\u3089myView\u3092\u975e\u8868\u793a. else { // myView\u3092\u975e\u8868\u793a. myView . hidden = true // \u30dc\u30bf\u30f3\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u5909\u66f4. myButton . setTitle ( \"Appear\" , forState : . Normal ) flag = false } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } 3.x\u30684.x\u306e\u5dee\u5206 func onClickMyButton(sender: UIButton) \u306b @objc \u3092\u8ffd\u52a0 2.3\u30683.0\u306e\u5dee\u5206 #selector(ViewController.onClickMyButton(_:)) \u304b\u3089 #selector(ViewController.onClickMyButton(sender:)) \u306b\u5909\u66f4 Reference UIButton https://developer.apple.com/reference/uikit/uibutton UIView https://developer.apple.com/reference/uikit/uiview","title":"\u73feView\u306e\u4e0a\u306b\u5225View\u3092\u8868\u793a\u3059\u308b"},{"location":"1.uikit/073_uiview/#viewview","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 // // ViewController.swift // UIKit074 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { var myView : UIView ! var myButton : UIButton ! var flag : Bool ! override func viewDidLoad () { super . viewDidLoad () // view\u8868\u793a\u30fb\u975e\u8868\u793a\u306e\u305f\u3081\u306e\u30d5\u30e9\u30b0. flag = false // view\u306e\u80cc\u666f\u3092\u9752\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . cyan // View\u3092\u751f\u6210. myView = UIView ( frame : CGRect ( x : 0 , y : 0 , width : 100 , height : 100 )) // myView\u306e\u80cc\u666f\u3092\u7dd1\u8272\u306b\u8a2d\u5b9a. myView . backgroundColor = UIColor . green // \u900f\u660e\u5ea6\u3092\u8a2d\u5b9a. myView . alpha = 0.5 // \u4f4d\u7f6e\u3092\u4e2d\u5fc3\u306b\u8a2d\u5b9a. myView . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height / 2 ) // myView\u3092\u975e\u8868\u793a. myView . isHidden = true // \u30dc\u30bf\u30f3\u3092\u751f\u6210. myButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 100 , height : 50 )) myButton . backgroundColor = UIColor . red myButton . layer . cornerRadius = 20.0 myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height - 50 ) myButton . setTitle ( \"Appear\" , for : . normal ) myButton . setTitleColor ( UIColor . white , for : . normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchUpInside ) // myView\u3092view\u306b\u8ffd\u52a0. self . view . addSubview ( myView ) // \u30dc\u30bf\u30f3\u3092view\u306b\u8ffd\u52a0. self . view . addSubview ( myButton ) } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8 */ @objc func onClickMyButton ( sender : UIButton ) { // flag\u304cfalse\u306a\u3089myView\u3092\u8868\u793a. if ! flag { // myView\u3092\u8868\u793a. myView . isHidden = false // \u30dc\u30bf\u30f3\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u5909\u66f4. myButton . setTitle ( \"Disappear\" , for : . normal ) flag = true } // flag\u304ctrue\u306a\u3089myView\u3092\u975e\u8868\u793a. else { // myView\u3092\u975e\u8868\u793a. myView . isHidden = true // \u30dc\u30bf\u30f3\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u5909\u66f4. myButton . setTitle ( \"Appear\" , for : . normal ) flag = false } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 // // ViewController.swift // UIKit074 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { var myView : UIView ! var myButton : UIButton ! var flag : Bool ! override func viewDidLoad () { super . viewDidLoad () // view\u8868\u793a\u30fb\u975e\u8868\u793a\u306e\u305f\u3081\u306e\u30d5\u30e9\u30b0. flag = false // view\u306e\u80cc\u666f\u3092\u9752\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . cyan // View\u3092\u751f\u6210. myView = UIView ( frame : CGRect ( x : 0 , y : 0 , width : 100 , height : 100 )) // myView\u306e\u80cc\u666f\u3092\u7dd1\u8272\u306b\u8a2d\u5b9a. myView . backgroundColor = UIColor . green // \u900f\u660e\u5ea6\u3092\u8a2d\u5b9a. myView . alpha = 0.5 // \u4f4d\u7f6e\u3092\u4e2d\u5fc3\u306b\u8a2d\u5b9a. myView . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height / 2 ) // myView\u3092\u975e\u8868\u793a. myView . isHidden = true // \u30dc\u30bf\u30f3\u3092\u751f\u6210. myButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 100 , height : 50 )) myButton . backgroundColor = UIColor . red myButton . layer . cornerRadius = 20.0 myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height - 50 ) myButton . setTitle ( \"Appear\" , for : . normal ) myButton . setTitleColor ( UIColor . white , for : . normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : . touchUpInside ) // myView\u3092view\u306b\u8ffd\u52a0. self . view . addSubview ( myView ) // \u30dc\u30bf\u30f3\u3092view\u306b\u8ffd\u52a0. self . view . addSubview ( myButton ) } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8 */ func onClickMyButton ( sender : UIButton ) { // flag\u304cfalse\u306a\u3089myView\u3092\u8868\u793a. if ! flag { // myView\u3092\u8868\u793a. myView . isHidden = false // \u30dc\u30bf\u30f3\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u5909\u66f4. myButton . setTitle ( \"Disappear\" , for : . normal ) flag = true } // flag\u304ctrue\u306a\u3089myView\u3092\u975e\u8868\u793a. else { // myView\u3092\u975e\u8868\u793a. myView . isHidden = true // \u30dc\u30bf\u30f3\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u5909\u66f4. myButton . setTitle ( \"Appear\" , for : . normal ) flag = false } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 // // ViewController.swift // UIKit073 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { var myView : UIView ! var myButton : UIButton ! var flag : Bool ! override func viewDidLoad () { super . viewDidLoad () // view\u8868\u793a\u30fb\u975e\u8868\u793a\u306e\u305f\u3081\u306e\u30d5\u30e9\u30b0. flag = false // view\u306e\u80cc\u666f\u3092\u9752\u8272\u306b\u8a2d\u5b9a. self . view . backgroundColor = UIColor . cyanColor () // View\u3092\u751f\u6210. myView = UIView ( frame : CGRectMake ( 0 , 0 , 100 , 100 )) // myView\u306e\u80cc\u666f\u3092\u7dd1\u8272\u306b\u8a2d\u5b9a. myView . backgroundColor = UIColor . greenColor () // \u900f\u660e\u5ea6\u3092\u8a2d\u5b9a. myView . alpha = 0.5 // \u4f4d\u7f6e\u3092\u4e2d\u5fc3\u306b\u8a2d\u5b9a. myView . layer . position = CGPointMake ( self . view . frame . width / 2 , self . view . frame . height / 2 ) // myView\u3092\u975e\u8868\u793a. myView . hidden = true // \u30dc\u30bf\u30f3\u3092\u751f\u6210. myButton = UIButton ( frame : CGRectMake ( 0 , 0 , 100 , 50 )) myButton . backgroundColor = UIColor . redColor () myButton . layer . cornerRadius = 20.0 myButton . layer . position = CGPointMake ( self . view . frame . width / 2 , self . view . frame . height - 50 ) myButton . setTitle ( \"Appear\" , forState : . Normal ) myButton . setTitleColor ( UIColor . whiteColor (), forState : . Normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : . TouchUpInside ) // myView\u3092view\u306b\u8ffd\u52a0. self . view . addSubview ( myView ) // \u30dc\u30bf\u30f3\u3092view\u306b\u8ffd\u52a0. self . view . addSubview ( myButton ) } /* \u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8 */ func onClickMyButton ( sender : UIButton ) { // flag\u304cfalse\u306a\u3089myView\u3092\u8868\u793a. if ! flag { // myView\u3092\u8868\u793a. myView . hidden = false // \u30dc\u30bf\u30f3\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u5909\u66f4. myButton . setTitle ( \"Disappear\" , forState : . Normal ) flag = true } // flag\u304ctrue\u306a\u3089myView\u3092\u975e\u8868\u793a. else { // myView\u3092\u975e\u8868\u793a. myView . hidden = true // \u30dc\u30bf\u30f3\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u5909\u66f4. myButton . setTitle ( \"Appear\" , forState : . Normal ) flag = false } } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } }","title":"\u73feView\u306e\u4e0a\u306b\u5225View\u3092\u8868\u793a\u3059\u308b"},{"location":"1.uikit/073_uiview/#3x4x","text":"func onClickMyButton(sender: UIButton) \u306b @objc \u3092\u8ffd\u52a0","title":"3.x\u30684.x\u306e\u5dee\u5206"},{"location":"1.uikit/073_uiview/#2330","text":"#selector(ViewController.onClickMyButton(_:)) \u304b\u3089 #selector(ViewController.onClickMyButton(sender:)) \u306b\u5909\u66f4","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/073_uiview/#reference","text":"UIButton https://developer.apple.com/reference/uikit/uibutton UIView https://developer.apple.com/reference/uikit/uiview","title":"Reference"},{"location":"1.uikit/074_webviewpdf/","text":"UIWebView\u3067PDF\u3092\u958b\u304f Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 // // ViewController.swift // swiftdocs // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController , UIWebViewDelegate { var myWebView : UIWebView ! var myPDFurl : NSURL ! var myRequest : NSURLRequest ! var myIndiator : UIActivityIndicatorView ! override func viewDidLoad () { super . viewDidLoad () // Button\u3092\u751f\u6210. let myButton : UIButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myButton . layer . cornerRadius = 20.0 myButton . layer . masksToBounds = true myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height - 50 ) myButton . backgroundColor = UIColor . orange myButton . setTitle ( \"Open PDF\" , for : UIControl . State . normal ) myButton . setTitleColor ( UIColor . white , for : UIControl . State . normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : UIControl . Event . touchUpInside ) self . view . addSubview ( myButton ) // PDF\u3092\u958b\u304f\u305f\u3081\u306eWebView\u3092\u751f\u6210. myWebView = UIWebView ( frame : CGRect ( x : 0 , y : 0 , width : self . view . frame . width , height : self . view . frame . height )) myWebView . delegate = self myWebView . scalesPageToFit = true myWebView . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height / 2 ) // URLReqest\u3092\u751f\u6210. myPDFurl = NSURL ( string : \"https://developer.apple.com/jp/documentation/CocoaEncyclopedia.pdf\" ) ! myRequest = NSURLRequest ( url : myPDFurl as URL ) // \u30da\u30fc\u30b8\u8aad\u307f\u8fbc\u307f\u4e2d\u306b\u8868\u793a\u3055\u305b\u308b\u30a4\u30f3\u30b8\u30b1\u30fc\u30bf\u3092\u751f\u6210. myIndiator = UIActivityIndicatorView ( frame : CGRect ( x : 0 , y : 0 , width : 50 , height : 50 )) myIndiator . center = self . view . center myIndiator . hidesWhenStopped = true myIndiator . style = UIActivityIndicatorView . Style . gray } /* \u30a4\u30f3\u30b8\u30b1\u30fc\u30bf\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u958b\u59cb. */ func startAnimation () { // NetworkActivityIndicator\u3092\u8868\u793a. UIApplication . shared . isNetworkActivityIndicatorVisible = true // UIACtivityIndicator\u3092\u8868\u793a. if ! myIndiator . isAnimating { myIndiator . startAnimating () } // view\u306b\u30a4\u30f3\u30b8\u30b1\u30fc\u30bf\u3092\u8ffd\u52a0. self . view . addSubview ( myIndiator ) } /* \u30a4\u30f3\u30b8\u30b1\u30fc\u30bf\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u7d42\u4e86. */ func stopAnimation () { // NetworkActivityIndicator\u3092\u975e\u8868\u793a. UIApplication . shared . isNetworkActivityIndicatorVisible = false // UIACtivityIndicator\u3092\u975e\u8868\u793a. if myIndiator . isAnimating { myIndiator . stopAnimating () } } /* Button\u304c\u62bc\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ @objc func onClickMyButton ( sender : UIButton ) { // WebView\u306eLoad\u958b\u59cb. myWebView . loadRequest ( myRequest as URLRequest ) // view\u306bWebView\u3092\u8ffd\u52a0. self . view . addSubview ( myWebView ) } /* WebView\u306eload\u304c\u958b\u59cb\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func webViewDidStartLoad ( _ webView : UIWebView ) { print ( \"load started\" ) startAnimation () } /* WebView\u306eload\u304c\u7d42\u4e86\u3057\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func webViewDidFinishLoad ( _ webView : UIWebView ) { print ( \"load finished\" ) stopAnimation () } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 // // ViewController.swift // swiftdocs // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController , UIWebViewDelegate { var myWebView : UIWebView ! var myPDFurl : NSURL ! var myRequest : NSURLRequest ! var myIndiator : UIActivityIndicatorView ! override func viewDidLoad () { super . viewDidLoad () // Button\u3092\u751f\u6210. let myButton : UIButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myButton . layer . cornerRadius = 20.0 myButton . layer . masksToBounds = true myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height - 50 ) myButton . backgroundColor = UIColor . orange myButton . setTitle ( \"Open PDF\" , for : UIControlState . normal ) myButton . setTitleColor ( UIColor . white , for : UIControlState . normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : UIControlEvents . touchUpInside ) self . view . addSubview ( myButton ) // PDF\u3092\u958b\u304f\u305f\u3081\u306eWebView\u3092\u751f\u6210. myWebView = UIWebView ( frame : CGRect ( x : 0 , y : 0 , width : self . view . frame . width , height : self . view . frame . height )) myWebView . delegate = self myWebView . scalesPageToFit = true myWebView . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height / 2 ) // URLReqest\u3092\u751f\u6210. myPDFurl = NSURL ( string : \"https://developer.apple.com/jp/documentation/CocoaEncyclopedia.pdf\" ) ! myRequest = NSURLRequest ( url : myPDFurl as URL ) // \u30da\u30fc\u30b8\u8aad\u307f\u8fbc\u307f\u4e2d\u306b\u8868\u793a\u3055\u305b\u308b\u30a4\u30f3\u30b8\u30b1\u30fc\u30bf\u3092\u751f\u6210. myIndiator = UIActivityIndicatorView ( frame : CGRect ( x : 0 , y : 0 , width : 50 , height : 50 )) myIndiator . center = self . view . center myIndiator . hidesWhenStopped = true myIndiator . activityIndicatorViewStyle = UIActivityIndicatorViewStyle . gray } /* \u30a4\u30f3\u30b8\u30b1\u30fc\u30bf\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u958b\u59cb. */ func startAnimation () { // NetworkActivityIndicator\u3092\u8868\u793a. UIApplication . shared . isNetworkActivityIndicatorVisible = true // UIACtivityIndicator\u3092\u8868\u793a. if ! myIndiator . isAnimating { myIndiator . startAnimating () } // view\u306b\u30a4\u30f3\u30b8\u30b1\u30fc\u30bf\u3092\u8ffd\u52a0. self . view . addSubview ( myIndiator ) } /* \u30a4\u30f3\u30b8\u30b1\u30fc\u30bf\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u7d42\u4e86. */ func stopAnimation () { // NetworkActivityIndicator\u3092\u975e\u8868\u793a. UIApplication . shared . isNetworkActivityIndicatorVisible = false // UIACtivityIndicator\u3092\u975e\u8868\u793a. if myIndiator . isAnimating { myIndiator . stopAnimating () } } /* Button\u304c\u62bc\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func onClickMyButton ( sender : UIButton ) { // WebView\u306eLoad\u958b\u59cb. myWebView . loadRequest ( myRequest as URLRequest ) // view\u306bWebView\u3092\u8ffd\u52a0. self . view . addSubview ( myWebView ) } /* WebView\u306eload\u304c\u958b\u59cb\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func webViewDidStartLoad ( _ webView : UIWebView ) { print ( \"load started\" ) startAnimation () } /* WebView\u306eload\u304c\u7d42\u4e86\u3057\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func webViewDidFinishLoad ( _ webView : UIWebView ) { print ( \"load finished\" ) stopAnimation () } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 // // ViewController.swift // UIKit074 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController , UIWebViewDelegate { var myWebView : UIWebView ! var myPDFurl : NSURL ! var myRequest : NSURLRequest ! var myIndiator : UIActivityIndicatorView ! override func viewDidLoad () { super . viewDidLoad () // Button\u3092\u751f\u6210. let myButton : UIButton = UIButton ( frame : CGRectMake ( 0 , 0 , 200 , 50 )) myButton . layer . cornerRadius = 20.0 myButton . layer . masksToBounds = true myButton . layer . position = CGPointMake ( self . view . frame . width / 2 , self . view . frame . height - 50 ) myButton . backgroundColor = UIColor . orangeColor () myButton . setTitle ( \"Open PDF\" , forState : UIControlState . Normal ) myButton . setTitleColor ( UIColor . whiteColor (), forState : UIControlState . Normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : UIControlEvents . TouchUpInside ) self . view . addSubview ( myButton ) // PDF\u3092\u958b\u304f\u305f\u3081\u306eWebView\u3092\u751f\u6210. myWebView = UIWebView ( frame : CGRectMake ( 0 , 0 , self . view . frame . width , self . view . frame . height )) myWebView . delegate = self myWebView . scalesPageToFit = true myWebView . layer . position = CGPointMake ( self . view . frame . width / 2 , self . view . frame . height / 2 ) // URLReqest\u3092\u751f\u6210. myPDFurl = NSURL ( string : \"https://developer.apple.com/jp/documentation/CocoaEncyclopedia.pdf\" ) ! myRequest = NSURLRequest ( URL : myPDFurl ) // \u30da\u30fc\u30b8\u8aad\u307f\u8fbc\u307f\u4e2d\u306b\u8868\u793a\u3055\u305b\u308b\u30a4\u30f3\u30b8\u30b1\u30fc\u30bf\u3092\u751f\u6210. myIndiator = UIActivityIndicatorView ( frame : CGRectMake ( 0 , 0 , 50 , 50 )) myIndiator . center = self . view . center myIndiator . hidesWhenStopped = true myIndiator . activityIndicatorViewStyle = UIActivityIndicatorViewStyle . Gray } /* \u30a4\u30f3\u30b8\u30b1\u30fc\u30bf\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u958b\u59cb. */ func startAnimation () { // NetworkActivityIndicator\u3092\u8868\u793a. UIApplication . sharedApplication (). networkActivityIndicatorVisible = true // UIACtivityIndicator\u3092\u8868\u793a. if ! myIndiator . isAnimating () { myIndiator . startAnimating () } // view\u306b\u30a4\u30f3\u30b8\u30b1\u30fc\u30bf\u3092\u8ffd\u52a0. self . view . addSubview ( myIndiator ) } /* \u30a4\u30f3\u30b8\u30b1\u30fc\u30bf\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u7d42\u4e86. */ func stopAnimation () { // NetworkActivityIndicator\u3092\u975e\u8868\u793a. UIApplication . sharedApplication (). networkActivityIndicatorVisible = false // UIACtivityIndicator\u3092\u975e\u8868\u793a. if myIndiator . isAnimating () { myIndiator . stopAnimating () } } /* Button\u304c\u62bc\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func onClickMyButton ( sender : UIButton ) { // WebView\u306eLoad\u958b\u59cb. myWebView . loadRequest ( myRequest ) // view\u306bWebView\u3092\u8ffd\u52a0. self . view . addSubview ( myWebView ) } /* WebView\u306eload\u304c\u958b\u59cb\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func webViewDidStartLoad ( webView : UIWebView ) { print ( \"load started\" ) startAnimation () } /* WebView\u306eload\u304c\u7d42\u4e86\u3057\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func webViewDidFinishLoad ( webView : UIWebView ) { print ( \"load finished\" ) stopAnimation () } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } 3.x\u30684.x\u306e\u5dee\u5206 UIControlState \u304c UIControl.State \u306b\u5909\u66f4 UIControlEvents \u304c UIControl.Event \u306b\u5909\u66f4 func onClickMyButton(sender: UIButton) \u306b @objc \u3092\u8ffd\u52a0 UIActivityIndicatorViewStyle \u304c UIActivityIndicatorView.Style \u306b\u5909\u66f4 activityIndicatorViewStyle \u304c style \u306b\u5909\u66f4 2.3\u30683.0\u306e\u5dee\u5206 #selector(ViewController.onClickMyButton(_:)) \u304b\u3089 #selector(ViewController.onClickMyButton(sender:)) \u306b\u5909\u66f4 Reference UIWebView https://developer.apple.com/reference/uikit/uiwebview UIButton https://developer.apple.com/reference/uikit/uibutton UIActivityIndicatorView https://developer.apple.com/reference/uikit/uiactivityindicatorview NSURL https://developer.apple.com/reference/foundation/nsurl NSURLRequest https://developer.apple.com/reference/foundation/nsurlrequest","title":"UIWebView\u3067PDF\u3092\u958b\u304f"},{"location":"1.uikit/074_webviewpdf/#uiwebviewpdf","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 // // ViewController.swift // swiftdocs // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController , UIWebViewDelegate { var myWebView : UIWebView ! var myPDFurl : NSURL ! var myRequest : NSURLRequest ! var myIndiator : UIActivityIndicatorView ! override func viewDidLoad () { super . viewDidLoad () // Button\u3092\u751f\u6210. let myButton : UIButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myButton . layer . cornerRadius = 20.0 myButton . layer . masksToBounds = true myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height - 50 ) myButton . backgroundColor = UIColor . orange myButton . setTitle ( \"Open PDF\" , for : UIControl . State . normal ) myButton . setTitleColor ( UIColor . white , for : UIControl . State . normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : UIControl . Event . touchUpInside ) self . view . addSubview ( myButton ) // PDF\u3092\u958b\u304f\u305f\u3081\u306eWebView\u3092\u751f\u6210. myWebView = UIWebView ( frame : CGRect ( x : 0 , y : 0 , width : self . view . frame . width , height : self . view . frame . height )) myWebView . delegate = self myWebView . scalesPageToFit = true myWebView . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height / 2 ) // URLReqest\u3092\u751f\u6210. myPDFurl = NSURL ( string : \"https://developer.apple.com/jp/documentation/CocoaEncyclopedia.pdf\" ) ! myRequest = NSURLRequest ( url : myPDFurl as URL ) // \u30da\u30fc\u30b8\u8aad\u307f\u8fbc\u307f\u4e2d\u306b\u8868\u793a\u3055\u305b\u308b\u30a4\u30f3\u30b8\u30b1\u30fc\u30bf\u3092\u751f\u6210. myIndiator = UIActivityIndicatorView ( frame : CGRect ( x : 0 , y : 0 , width : 50 , height : 50 )) myIndiator . center = self . view . center myIndiator . hidesWhenStopped = true myIndiator . style = UIActivityIndicatorView . Style . gray } /* \u30a4\u30f3\u30b8\u30b1\u30fc\u30bf\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u958b\u59cb. */ func startAnimation () { // NetworkActivityIndicator\u3092\u8868\u793a. UIApplication . shared . isNetworkActivityIndicatorVisible = true // UIACtivityIndicator\u3092\u8868\u793a. if ! myIndiator . isAnimating { myIndiator . startAnimating () } // view\u306b\u30a4\u30f3\u30b8\u30b1\u30fc\u30bf\u3092\u8ffd\u52a0. self . view . addSubview ( myIndiator ) } /* \u30a4\u30f3\u30b8\u30b1\u30fc\u30bf\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u7d42\u4e86. */ func stopAnimation () { // NetworkActivityIndicator\u3092\u975e\u8868\u793a. UIApplication . shared . isNetworkActivityIndicatorVisible = false // UIACtivityIndicator\u3092\u975e\u8868\u793a. if myIndiator . isAnimating { myIndiator . stopAnimating () } } /* Button\u304c\u62bc\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ @objc func onClickMyButton ( sender : UIButton ) { // WebView\u306eLoad\u958b\u59cb. myWebView . loadRequest ( myRequest as URLRequest ) // view\u306bWebView\u3092\u8ffd\u52a0. self . view . addSubview ( myWebView ) } /* WebView\u306eload\u304c\u958b\u59cb\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func webViewDidStartLoad ( _ webView : UIWebView ) { print ( \"load started\" ) startAnimation () } /* WebView\u306eload\u304c\u7d42\u4e86\u3057\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func webViewDidFinishLoad ( _ webView : UIWebView ) { print ( \"load finished\" ) stopAnimation () } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 // // ViewController.swift // swiftdocs // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController , UIWebViewDelegate { var myWebView : UIWebView ! var myPDFurl : NSURL ! var myRequest : NSURLRequest ! var myIndiator : UIActivityIndicatorView ! override func viewDidLoad () { super . viewDidLoad () // Button\u3092\u751f\u6210. let myButton : UIButton = UIButton ( frame : CGRect ( x : 0 , y : 0 , width : 200 , height : 50 )) myButton . layer . cornerRadius = 20.0 myButton . layer . masksToBounds = true myButton . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height - 50 ) myButton . backgroundColor = UIColor . orange myButton . setTitle ( \"Open PDF\" , for : UIControlState . normal ) myButton . setTitleColor ( UIColor . white , for : UIControlState . normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( sender :)), for : UIControlEvents . touchUpInside ) self . view . addSubview ( myButton ) // PDF\u3092\u958b\u304f\u305f\u3081\u306eWebView\u3092\u751f\u6210. myWebView = UIWebView ( frame : CGRect ( x : 0 , y : 0 , width : self . view . frame . width , height : self . view . frame . height )) myWebView . delegate = self myWebView . scalesPageToFit = true myWebView . layer . position = CGPoint ( x : self . view . frame . width / 2 , y : self . view . frame . height / 2 ) // URLReqest\u3092\u751f\u6210. myPDFurl = NSURL ( string : \"https://developer.apple.com/jp/documentation/CocoaEncyclopedia.pdf\" ) ! myRequest = NSURLRequest ( url : myPDFurl as URL ) // \u30da\u30fc\u30b8\u8aad\u307f\u8fbc\u307f\u4e2d\u306b\u8868\u793a\u3055\u305b\u308b\u30a4\u30f3\u30b8\u30b1\u30fc\u30bf\u3092\u751f\u6210. myIndiator = UIActivityIndicatorView ( frame : CGRect ( x : 0 , y : 0 , width : 50 , height : 50 )) myIndiator . center = self . view . center myIndiator . hidesWhenStopped = true myIndiator . activityIndicatorViewStyle = UIActivityIndicatorViewStyle . gray } /* \u30a4\u30f3\u30b8\u30b1\u30fc\u30bf\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u958b\u59cb. */ func startAnimation () { // NetworkActivityIndicator\u3092\u8868\u793a. UIApplication . shared . isNetworkActivityIndicatorVisible = true // UIACtivityIndicator\u3092\u8868\u793a. if ! myIndiator . isAnimating { myIndiator . startAnimating () } // view\u306b\u30a4\u30f3\u30b8\u30b1\u30fc\u30bf\u3092\u8ffd\u52a0. self . view . addSubview ( myIndiator ) } /* \u30a4\u30f3\u30b8\u30b1\u30fc\u30bf\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u7d42\u4e86. */ func stopAnimation () { // NetworkActivityIndicator\u3092\u975e\u8868\u793a. UIApplication . shared . isNetworkActivityIndicatorVisible = false // UIACtivityIndicator\u3092\u975e\u8868\u793a. if myIndiator . isAnimating { myIndiator . stopAnimating () } } /* Button\u304c\u62bc\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func onClickMyButton ( sender : UIButton ) { // WebView\u306eLoad\u958b\u59cb. myWebView . loadRequest ( myRequest as URLRequest ) // view\u306bWebView\u3092\u8ffd\u52a0. self . view . addSubview ( myWebView ) } /* WebView\u306eload\u304c\u958b\u59cb\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func webViewDidStartLoad ( _ webView : UIWebView ) { print ( \"load started\" ) startAnimation () } /* WebView\u306eload\u304c\u7d42\u4e86\u3057\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func webViewDidFinishLoad ( _ webView : UIWebView ) { print ( \"load finished\" ) stopAnimation () } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 // // ViewController.swift // UIKit074 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController , UIWebViewDelegate { var myWebView : UIWebView ! var myPDFurl : NSURL ! var myRequest : NSURLRequest ! var myIndiator : UIActivityIndicatorView ! override func viewDidLoad () { super . viewDidLoad () // Button\u3092\u751f\u6210. let myButton : UIButton = UIButton ( frame : CGRectMake ( 0 , 0 , 200 , 50 )) myButton . layer . cornerRadius = 20.0 myButton . layer . masksToBounds = true myButton . layer . position = CGPointMake ( self . view . frame . width / 2 , self . view . frame . height - 50 ) myButton . backgroundColor = UIColor . orangeColor () myButton . setTitle ( \"Open PDF\" , forState : UIControlState . Normal ) myButton . setTitleColor ( UIColor . whiteColor (), forState : UIControlState . Normal ) myButton . addTarget ( self , action : #selector ( ViewController . onClickMyButton ( _ :)), forControlEvents : UIControlEvents . TouchUpInside ) self . view . addSubview ( myButton ) // PDF\u3092\u958b\u304f\u305f\u3081\u306eWebView\u3092\u751f\u6210. myWebView = UIWebView ( frame : CGRectMake ( 0 , 0 , self . view . frame . width , self . view . frame . height )) myWebView . delegate = self myWebView . scalesPageToFit = true myWebView . layer . position = CGPointMake ( self . view . frame . width / 2 , self . view . frame . height / 2 ) // URLReqest\u3092\u751f\u6210. myPDFurl = NSURL ( string : \"https://developer.apple.com/jp/documentation/CocoaEncyclopedia.pdf\" ) ! myRequest = NSURLRequest ( URL : myPDFurl ) // \u30da\u30fc\u30b8\u8aad\u307f\u8fbc\u307f\u4e2d\u306b\u8868\u793a\u3055\u305b\u308b\u30a4\u30f3\u30b8\u30b1\u30fc\u30bf\u3092\u751f\u6210. myIndiator = UIActivityIndicatorView ( frame : CGRectMake ( 0 , 0 , 50 , 50 )) myIndiator . center = self . view . center myIndiator . hidesWhenStopped = true myIndiator . activityIndicatorViewStyle = UIActivityIndicatorViewStyle . Gray } /* \u30a4\u30f3\u30b8\u30b1\u30fc\u30bf\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u958b\u59cb. */ func startAnimation () { // NetworkActivityIndicator\u3092\u8868\u793a. UIApplication . sharedApplication (). networkActivityIndicatorVisible = true // UIACtivityIndicator\u3092\u8868\u793a. if ! myIndiator . isAnimating () { myIndiator . startAnimating () } // view\u306b\u30a4\u30f3\u30b8\u30b1\u30fc\u30bf\u3092\u8ffd\u52a0. self . view . addSubview ( myIndiator ) } /* \u30a4\u30f3\u30b8\u30b1\u30fc\u30bf\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u7d42\u4e86. */ func stopAnimation () { // NetworkActivityIndicator\u3092\u975e\u8868\u793a. UIApplication . sharedApplication (). networkActivityIndicatorVisible = false // UIACtivityIndicator\u3092\u975e\u8868\u793a. if myIndiator . isAnimating () { myIndiator . stopAnimating () } } /* Button\u304c\u62bc\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func onClickMyButton ( sender : UIButton ) { // WebView\u306eLoad\u958b\u59cb. myWebView . loadRequest ( myRequest ) // view\u306bWebView\u3092\u8ffd\u52a0. self . view . addSubview ( myWebView ) } /* WebView\u306eload\u304c\u958b\u59cb\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func webViewDidStartLoad ( webView : UIWebView ) { print ( \"load started\" ) startAnimation () } /* WebView\u306eload\u304c\u7d42\u4e86\u3057\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9. */ func webViewDidFinishLoad ( webView : UIWebView ) { print ( \"load finished\" ) stopAnimation () } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } }","title":"UIWebView\u3067PDF\u3092\u958b\u304f"},{"location":"1.uikit/074_webviewpdf/#3x4x","text":"UIControlState \u304c UIControl.State \u306b\u5909\u66f4 UIControlEvents \u304c UIControl.Event \u306b\u5909\u66f4 func onClickMyButton(sender: UIButton) \u306b @objc \u3092\u8ffd\u52a0 UIActivityIndicatorViewStyle \u304c UIActivityIndicatorView.Style \u306b\u5909\u66f4 activityIndicatorViewStyle \u304c style \u306b\u5909\u66f4","title":"3.x\u30684.x\u306e\u5dee\u5206"},{"location":"1.uikit/074_webviewpdf/#2330","text":"#selector(ViewController.onClickMyButton(_:)) \u304b\u3089 #selector(ViewController.onClickMyButton(sender:)) \u306b\u5909\u66f4","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/074_webviewpdf/#reference","text":"UIWebView https://developer.apple.com/reference/uikit/uiwebview UIButton https://developer.apple.com/reference/uikit/uibutton UIActivityIndicatorView https://developer.apple.com/reference/uikit/uiactivityindicatorview NSURL https://developer.apple.com/reference/foundation/nsurl NSURLRequest https://developer.apple.com/reference/foundation/nsurlrequest","title":"Reference"},{"location":"1.uikit/075_webviewfile/","text":"UIWebView\u3067\u30d5\u30a1\u30a4\u30eb\u306e\u8868\u793a Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 // // ViewController.swift // UIKit075 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // WebView\u3092\u751f\u6210. let myWebView = UIWebView () myWebView . frame = self . view . bounds // view\u306bWebView\u3092\u8ffd\u52a0. self . view . addSubview ( myWebView ) // \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u7ba1\u7406\u3055\u308c\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb\u306epath\u3092\u53d6\u5f97. let path : String = Bundle . main . path ( forResource : \"document\" , ofType : \"pdf\" ) ! let url = NSURL ( fileURLWithPath : path as String ) let request = NSURLRequest ( url : url as URL ) // \u30ea\u30af\u30a8\u30b9\u30c8\u30ed\u30fc\u30c9. myWebView . loadRequest ( request as URLRequest ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 // // ViewController.swift // UIKit075 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // WebView\u3092\u751f\u6210. let myWebView = UIWebView () myWebView . frame = self . view . bounds // view\u306bWebView\u3092\u8ffd\u52a0. self . view . addSubview ( myWebView ) // \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u7ba1\u7406\u3055\u308c\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb\u306epath\u3092\u53d6\u5f97. let path : NSString = Bundle . main . path ( forResource : \"document\" , ofType : \"pdf\" ) ! let url = NSURL ( fileURLWithPath : path as String ) let request = NSURLRequest ( url : url as URL ) // \u30ea\u30af\u30a8\u30b9\u30c8\u30ed\u30fc\u30c9. myWebView . loadRequest ( request as URLRequest ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 // // ViewController.swift // UIKit075 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // WebView\u3092\u751f\u6210. let myWebView = UIWebView () myWebView . frame = self . view . bounds // view\u306bWebView\u3092\u8ffd\u52a0. self . view . addSubview ( myWebView ) // \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u7ba1\u7406\u3055\u308c\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb\u306epath\u3092\u53d6\u5f97. let path : NSString = NSBundle . mainBundle (). pathForResource ( \"document\" , ofType : \"pdf\" ) ! let url = NSURL ( fileURLWithPath : path as String ) let request = NSURLRequest ( URL : url ) // \u30ea\u30af\u30a8\u30b9\u30c8\u30ed\u30fc\u30c9. myWebView . loadRequest ( request ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } 3.x\u30684.x\u306e\u5dee\u5206 let path: NSString \u3092 let path: String \u306b\u5909\u66f4 2.3\u30683.0\u306e\u5dee\u5206 NSBundle.mainBundle().pathForResource \u304b\u3089 Bundle.main.path \u306b\u5909\u66f4 Reference UIWebView https://developer.apple.com/reference/uikit/uiwebview NSBundle https://developer.apple.com/reference/foundation/nsbundle","title":"UIWebView\u3067\u30d5\u30a1\u30a4\u30eb\u306e\u8868\u793a"},{"location":"1.uikit/075_webviewfile/#uiwebview","text":"Swift 4.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 // // ViewController.swift // UIKit075 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // WebView\u3092\u751f\u6210. let myWebView = UIWebView () myWebView . frame = self . view . bounds // view\u306bWebView\u3092\u8ffd\u52a0. self . view . addSubview ( myWebView ) // \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u7ba1\u7406\u3055\u308c\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb\u306epath\u3092\u53d6\u5f97. let path : String = Bundle . main . path ( forResource : \"document\" , ofType : \"pdf\" ) ! let url = NSURL ( fileURLWithPath : path as String ) let request = NSURLRequest ( url : url as URL ) // \u30ea\u30af\u30a8\u30b9\u30c8\u30ed\u30fc\u30c9. myWebView . loadRequest ( request as URLRequest ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 // // ViewController.swift // UIKit075 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // WebView\u3092\u751f\u6210. let myWebView = UIWebView () myWebView . frame = self . view . bounds // view\u306bWebView\u3092\u8ffd\u52a0. self . view . addSubview ( myWebView ) // \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u7ba1\u7406\u3055\u308c\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb\u306epath\u3092\u53d6\u5f97. let path : NSString = Bundle . main . path ( forResource : \"document\" , ofType : \"pdf\" ) ! let url = NSURL ( fileURLWithPath : path as String ) let request = NSURLRequest ( url : url as URL ) // \u30ea\u30af\u30a8\u30b9\u30c8\u30ed\u30fc\u30c9. myWebView . loadRequest ( request as URLRequest ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } } Swift 2.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 // // ViewController.swift // UIKit075 // // Created by Misato Morino on 2016/08/15. // Copyright \u00a9 2016\u5e74 Misato Morino. All rights reserved. // import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // WebView\u3092\u751f\u6210. let myWebView = UIWebView () myWebView . frame = self . view . bounds // view\u306bWebView\u3092\u8ffd\u52a0. self . view . addSubview ( myWebView ) // \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u7ba1\u7406\u3055\u308c\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb\u306epath\u3092\u53d6\u5f97. let path : NSString = NSBundle . mainBundle (). pathForResource ( \"document\" , ofType : \"pdf\" ) ! let url = NSURL ( fileURLWithPath : path as String ) let request = NSURLRequest ( URL : url ) // \u30ea\u30af\u30a8\u30b9\u30c8\u30ed\u30fc\u30c9. myWebView . loadRequest ( request ) } override func didReceiveMemoryWarning () { super . didReceiveMemoryWarning () } }","title":"UIWebView\u3067\u30d5\u30a1\u30a4\u30eb\u306e\u8868\u793a"},{"location":"1.uikit/075_webviewfile/#3x4x","text":"let path: NSString \u3092 let path: String \u306b\u5909\u66f4","title":"3.x\u30684.x\u306e\u5dee\u5206"},{"location":"1.uikit/075_webviewfile/#2330","text":"NSBundle.mainBundle().pathForResource \u304b\u3089 Bundle.main.path \u306b\u5909\u66f4","title":"2.3\u30683.0\u306e\u5dee\u5206"},{"location":"1.uikit/075_webviewfile/#reference","text":"UIWebView https://developer.apple.com/reference/uikit/uiwebview NSBundle https://developer.apple.com/reference/foundation/nsbundle","title":"Reference"}]}